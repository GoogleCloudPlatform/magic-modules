name: build
permissions: read-all

on:
  workflow_call:
    inputs:
      repo:
        description: 'Repository to build'
        required: true
        type: string

concurrency:
  group: ${{ inputs.repo  }}-${{ github.event_name == 'pull_request' && format('pr-{0}-', github.event.pull_request.number) || format('commit-{0}', github.sha) }}
  cancel-in-progress: true

jobs:
  generate-repository:
    runs-on: ubuntu-22.04
    env:
      BASE_BRANCH: ${{ github.event.pull_request.base.ref || github.ref_name }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@036ef458ddccddb148a2b9fb67e95a22fdbf728b # v1.160.0
        with:
          ruby-version: '3.1'

      - name: Cache Bundler gems
        uses: actions/cache@v3
        with:
          path: mmv1/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('mmv1/**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Ruby dependencies
        run: |
          bundle config path mmv1/vendor/bundle
          bundle install
        working-directory: mmv1

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20'

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - run: go install golang.org/x/tools/cmd/goimports@latest

      - name: Build ${{ inputs.repo  }}
        run: |
          set -e
          set -x
          # Set GOPATH to a directory the runner user has access to
          export GOPATH=~/go

          function clone_repo() {
            export OUTPUT_PATH=$GOPATH/src/github.com/$UPSTREAM_OWNER/$GH_REPO
            GITHUB_PATH=https://x-access-token:$GITHUB_TOKEN@github.com/$UPSTREAM_OWNER/$GH_REPO
            mkdir -p "$(dirname $OUTPUT_PATH)"
            git clone $GITHUB_PATH $OUTPUT_PATH --branch $BASE_BRANCH
          }

          GH_REPO="${{ inputs.repo  }}"
          if [ "$GH_REPO" == "docs-examples" ] && [ "$BASE_BRANCH" == "main" ]; then
              BASE_BRANCH="master"
          fi

          GITHUB_PATH=https://x-access-token:$GITHUB_TOKEN@github.com/$UPSTREAM_OWNER/$GH_REPO

          if [[ "$GH_REPO" == terraform-provider-google* ]]; then
            UPSTREAM_OWNER=hashicorp
            clone_repo
          if [ "$GH_REPO" == "terraform-provider-google" ]; then
              export VERSION=ga
            else
              export VERSION=beta
            fi
            make clean-provider
            make provider
          elif [ "$GH_REPO" == "terraform-google-conversion" ]; then
            UPSTREAM_OWNER=GoogleCloudPlatform
            clone_repo
            make clean-tgc
            make tgc
          elif [ "$GH_REPO" == "docs-examples" ]; then
            UPSTREAM_OWNER=terraform-google-modules
            clone_repo
            make tf-oics
          else
            echo "case not supported"
            exit 1
          fi

          (current_dir=$(pwd) && cd $OUTPUT_PATH && zip -r "$current_dir/output.zip" .)

      - name: Upload built artifacts
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        with:
          name: artifact-${{ inputs.repo  }}
          path: output.zip