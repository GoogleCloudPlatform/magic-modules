<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Best practices on Magic Modules</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/</link><description>Recent content in Best practices on Magic Modules</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://googlecloudplatform.github.io/magic-modules/best-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Immutable fields</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/immutable-fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/immutable-fields/</guid><description>&lt;h1 id="immutable-fields">
 Immutable fields
 &lt;a class="anchor" href="#immutable-fields">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;strong>Note:&lt;/strong> This page covers best practices guidance for the Terraform provider for Google Cloud, which is used to ensure a consistent UX for Terraform users across providers or GCP users across the Google provider. Generally, this guidance should be followed and exceptions should be clearly demarcated / discussed.
&lt;/blockquote>

&lt;p>&lt;a href="https://developer.hashicorp.com/terraform/intro#how-does-terraform-work">&lt;code>ForceNew&lt;/code>&lt;/a> in a Terraform resource schema attribute that indicates that a field is immutable – that is, that a change to the field requires the resource to be destroyed and recreated.&lt;/p></description></item><item><title>Deletion behaviors</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/deletion-behaviors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/deletion-behaviors/</guid><description>&lt;h1 id="deletion-behaviors">
 Deletion behaviors
 &lt;a class="anchor" href="#deletion-behaviors">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;strong>Note:&lt;/strong> This page covers best practices guidance for the Terraform provider for Google Cloud, which is used to ensure a consistent UX for Terraform users across providers or GCP users across the Google provider. Generally, this guidance should be followed and exceptions should be clearly demarcated / discussed.
&lt;/blockquote>

&lt;h2 id="deletion_protection">
 Mitigating data loss risk via deletion_protection
 &lt;a class="anchor" href="#deletion_protection">#&lt;/a>
&lt;/h2>
&lt;p>Some resources, such as databases, have a significant risk of unrecoverable data loss if the resource is accidentally deleted due to a change to a ForceNew field. For these resources, the best practice is to add a &lt;code>deletion_protection&lt;/code> field that prevents the resource from being deleted if enabled.&lt;/p></description></item><item><title>Labels and annotations</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/labels-and-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/labels-and-annotations/</guid><description>&lt;h1 id="add-labels-and-annotations-support">
 Add labels and annotations support
 &lt;a class="anchor" href="#add-labels-and-annotations-support">#&lt;/a>
&lt;/h1>
&lt;blockquote class="book-hint info">
 &lt;strong>Note:&lt;/strong> This page covers best practices guidance for the Terraform provider for Google Cloud, which is used to ensure a consistent UX for Terraform users across providers or GCP users across the Google provider. Generally, this guidance should be followed and exceptions should be clearly demarcated / discussed.
&lt;/blockquote>

&lt;p>The new labels model and the new annotations model are introduced in &lt;a href="https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/version_5_upgrade#provider">Terraform provider for Google Cloud 5.0.0&lt;/a>.&lt;/p></description></item><item><title>Common resource patterns</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/common-resource-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/common-resource-patterns/</guid><description>&lt;h1 id="common-resource-patterns">
 Common resource patterns
 &lt;a class="anchor" href="#common-resource-patterns">#&lt;/a>
&lt;/h1>
&lt;h2 id="singletons">
 Singletons
 &lt;a class="anchor" href="#singletons">#&lt;/a>
&lt;/h2>
&lt;p>Singletons are resources – often config or settings objects – that can only exist once. In some cases, it may be possible to create and delete the resource (but only one can exist at a time); in other cases the resource &lt;em>always&lt;/em> exists and can only be read and updated.&lt;/p>
&lt;p>Implementing resources like this may require some or all of the following:&lt;/p></description></item><item><title>Validation</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/validation/</guid><description>&lt;h1 id="validation">
 Validation
 &lt;a class="anchor" href="#validation">#&lt;/a>
&lt;/h1>
&lt;p>There are a number of ways to add client-side validation to resources. The benefit of client-side validation is that errors can be surfaced at plan time, instead of partway through a (potentially very long) apply process, allowing for faster iteration. However, the tradeoff is that client-side validation can get out of sync with server-side validation, creating additional maintenance burden for the provider and preventing users from accessing the latest features without upgrading.&lt;/p></description></item></channel></rss>