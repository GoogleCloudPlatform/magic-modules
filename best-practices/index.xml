<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Best practices on Magic Modules</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/</link><description>Recent content in Best practices on Magic Modules</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://googlecloudplatform.github.io/magic-modules/best-practices/index.xml" rel="self" type="application/rss+xml"/><item><title>Immutable fields</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/immutable-fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/immutable-fields/</guid><description>&lt;h1 id="immutable-fields"&gt;Immutable fields&lt;a class="anchor" href="#immutable-fields"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class='book-hint note'&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This page covers best practices guidance for the Terraform provider for Google Cloud, which is used to ensure a consistent UX for Terraform users across providers or GCP users across the Google provider. Generally, this guidance should be followed and exceptions should be clearly demarcated / discussed.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href="https://developer.hashicorp.com/terraform/intro#how-does-terraform-work"&gt;&lt;code&gt;ForceNew&lt;/code&gt;&lt;/a&gt; in a Terraform resource schema attribute that indicates that a field is immutable – that is, that a change to the field requires the resource to be destroyed and recreated.&lt;/p&gt;</description></item><item><title>Deletion behaviors</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/deletion-behaviors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/deletion-behaviors/</guid><description>&lt;h1 id="deletion-behaviors"&gt;Deletion behaviors&lt;a class="anchor" href="#deletion-behaviors"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class='book-hint note'&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This page covers best practices guidance for the Terraform provider for Google Cloud, which is used to ensure a consistent UX for Terraform users across providers or GCP users across the Google provider. Generally, this guidance should be followed and exceptions should be clearly demarcated / discussed.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id="deletion_protection"&gt;Mitigating data loss risk via deletion_protection&lt;a class="anchor" href="#deletion_protection"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some resources, such as databases, have a significant risk of unrecoverable data loss if the resource is accidentally deleted due to a change to a ForceNew field. For these resources, the best practice is to add a &lt;code&gt;deletion_protection&lt;/code&gt; field that prevents the resource from being deleted if enabled.&lt;/p&gt;</description></item><item><title>Labels and annotations</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/labels-and-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/labels-and-annotations/</guid><description>&lt;h1 id="add-labels-and-annotations-support"&gt;Add labels and annotations support&lt;a class="anchor" href="#add-labels-and-annotations-support"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote class='book-hint note'&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This page covers best practices guidance for the Terraform provider for Google Cloud, which is used to ensure a consistent UX for Terraform users across providers or GCP users across the Google provider. Generally, this guidance should be followed and exceptions should be clearly demarcated / discussed.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The new labels model and the new annotations model are introduced in &lt;a href="https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/version_5_upgrade#provider"&gt;Terraform provider for Google Cloud 5.0.0&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Common resource patterns</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/common-resource-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/common-resource-patterns/</guid><description>&lt;h1 id="common-resource-patterns"&gt;Common resource patterns&lt;a class="anchor" href="#common-resource-patterns"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="singletons"&gt;Singletons&lt;a class="anchor" href="#singletons"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Singletons are resources – often config or settings objects – that can only exist once. In some cases, it may be possible to create and delete the resource (but only one can exist at a time); in other cases the resource &lt;em&gt;always&lt;/em&gt; exists and can only be read and updated.&lt;/p&gt;
&lt;p&gt;Implementing resources like this may require some or all of the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there &lt;em&gt;isn&amp;rsquo;t&lt;/em&gt; a create endpoint, set the &lt;a href="https://googlecloudplatform.github.io/magic-modules/reference/resource/#create_url"&gt;create_url&lt;/a&gt; to point to the update endpoint.&lt;/li&gt;
&lt;li&gt;If there &lt;em&gt;is&lt;/em&gt; a create endpoint, add &lt;a href="https://googlecloudplatform.github.io/magic-modules/develop/custom-code/#pre_post_injection"&gt;pre-create custom code&lt;/a&gt; that implements &amp;ldquo;acquire-on-create&amp;rdquo; logic. The custom code should check whether the resource already exists with a read request, and if it does, run the update logic and return early. For example, see &lt;a href="https://github.com/GoogleCloudPlatform/magic-modules/blob/dc4d9755cb9288177e0996c1c3b3fa9738ebdf89/mmv1/templates/terraform/pre_create/firebasehosting_site.go.tmpl"&gt;mmv1/templates/terraform/pre_create/firebasehosting_site.go.tmpl&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;Note: The main disadvantage of &amp;ldquo;acquire-on-create&amp;rdquo; logic is that users will not be presented with a diff between the resource&amp;rsquo;s old and new states – because from the terraform perspective, the resource is only being created. Please upvote &lt;a href="https://github.com/hashicorp/terraform/issues/19017"&gt;https://github.com/hashicorp/terraform/issues/19017&lt;/a&gt; to request better support for this workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If there is no delete endpoint, set &lt;a href="https://googlecloudplatform.github.io/magic-modules/reference/resource/#create_url"&gt;&lt;code&gt;exclude_delete: true&lt;/code&gt;&lt;/a&gt; at the top level of the resource.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tests for singletons can run into issues because they are modifying a shared state. To avoid the problems this can cause, ensure that the tests &lt;a href="https://googlecloudplatform.github.io/magic-modules/test/test/#create-test-projects"&gt;create dedicated parent resources&lt;/a&gt; instead of modifying the default test environment. If there need to be multiple test cases, make sure they either have individual parent resources, or that they run serially, like &lt;a href="https://github.com/hashicorp/terraform-provider-google-beta/blob/88fa0756f2ce116765edd4c1551680d9029621f6/google-beta/services/accesscontextmanager/resource_access_context_manager_access_policy_test.go#L31-L33"&gt;TestAccAccessContextManager&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Validation</title><link>https://googlecloudplatform.github.io/magic-modules/best-practices/validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/best-practices/validation/</guid><description>&lt;h1 id="validation"&gt;Validation&lt;a class="anchor" href="#validation"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;There are a number of ways to add client-side validation to resources. The benefit of client-side validation is that errors can be surfaced at plan time, instead of partway through a (potentially very long) apply process, allowing for faster iteration. However, the tradeoff is that client-side validation can get out of sync with server-side validation, creating additional maintenance burden for the provider and preventing users from accessing the latest features without upgrading.&lt;/p&gt;</description></item></channel></rss>