<% autogen_exception -%>
package google
<% unless version == 'ga' -%>
import (
	"fmt"
	"strconv"
	"strings"

	"github.com/hashicorp/errwrap"
	"github.com/hashicorp/terraform/helper/schema"
	"google.golang.org/api/cloudresourcemanager/v1"
	iap "google.golang.org/api/iap/v1beta1"
)

var IamIapTunnelSchema = map[string]*schema.Schema{
	"instance": {
		Type:     schema.TypeString,
		Required: true,
		ForceNew: true,
	},

	"project": {
		Type:     schema.TypeString,
		Optional: true,
		Computed: true,
		ForceNew: true,
	},

	"zone": {
		Type:     schema.TypeString,
		Optional: true,
		Computed: true,
		ForceNew: true,
	},
}

type IapTunnelIamUpdater struct {
	project       string
	zone          string
	resourceId    string
	projectNumber string
	Config        *Config
}

func NewIapTunnelIamUpdater(d *schema.ResourceData, config *Config) (ResourceIamUpdater, error) {
	project, err := getProject(d, config)
	if err != nil {
		return nil, err
	}

	res, err := config.clientResourceManager.Projects.Get(project).Do()
	if err != nil {
		return nil, err
	}

	projectNumber := strconv.FormatInt(res.ProjectNumber, 10)

	zone, err := getZone(d, config)
	if err != nil {
		return nil, err
	}

	return &IapTunnelIamUpdater{
		project:       project,
		projectNumber: projectNumber,
		zone:          zone,
		resourceId:    d.Get("instance").(string),
		Config:        config,
	}, nil
}

func IapTunnelIdParseFunc(d *schema.ResourceData, config *Config) error {
	parts := strings.Split(d.Id(), "/")
	var fv *ZonalFieldValue
	if len(parts) == 3 {
		// {project}/{zone}/{name} syntax
		fv = &ZonalFieldValue{
			Project:      parts[0],
			Zone:         parts[1],
			Name:         parts[2],
			resourceType: "instances",
		}
	} else if len(parts) == 2 {
		// /{zone}/{name} syntax
		project, err := getProject(d, config)
		if err != nil {
			return err
		}
		fv = &ZonalFieldValue{
			Project:      project,
			Zone:         parts[0],
			Name:         parts[1],
			resourceType: "instances",
		}
	} else {
		// We either have a name or a full self link, so use the field helper
		var err error
		fv, err = ParseInstanceFieldValue(d.Id(), d, config)
		if err != nil {
			return err
		}
	}

	d.Set("project", fv.Project)
	d.Set("zone", fv.Zone)
	d.Set("instance", fv.Name)

	res, err := config.clientResourceManager.Projects.Get(fv.Project).Do()
	if err != nil {
		return err
	}

	projectNumber := strconv.FormatInt(res.ProjectNumber, 10)

	// Explicitly set the id so imported resources have the same ID format as non-imported ones.
	d.SetId(fmt.Sprintf("projects/%s/iap_tunnel/zones/%s/instances/%s", projectNumber, fv.Zone, fv.Name))
	return nil
}

func (u *IapTunnelIamUpdater) GetResourceIamPolicy() (*cloudresourcemanager.Policy, error) {
	req := &iap.GetIamPolicyRequest{}

	p, err := u.Config.clientIAP.V1beta1.GetIamPolicy("projects/"+u.projectNumber+"/iap_tunnel/zones/"+u.zone+"/instances/"+u.resourceId, req).Do()

	if err != nil {
		return nil, errwrap.Wrapf(fmt.Sprintf("Error retrieving IAM policy for %s: {{err}}", u.DescribeResource()), err)
	}

	cloudResourcePolicy, err := iapToResourceManagerPolicy(p)

	if err != nil {
		return nil, errwrap.Wrapf(fmt.Sprintf("Invalid IAM policy for %s: {{err}}", u.DescribeResource()), err)
	}

	return cloudResourcePolicy, nil
}

func (u *IapTunnelIamUpdater) SetResourceIamPolicy(policy *cloudresourcemanager.Policy) error {
	iapPolicy, err := resourceManagerToIapPolicy(policy)

	if err != nil {
		return errwrap.Wrapf(fmt.Sprintf("Invalid IAM policy for %s: {{err}}", u.DescribeResource()), err)
	}

	req := &iap.SetIamPolicyRequest{
		Policy: iapPolicy,
	}
	_, err = u.Config.clientIAP.V1beta1.SetIamPolicy("projects/"+u.projectNumber+"/iap_tunnel/zones/"+u.zone+"/instances/"+u.resourceId, req).Do()

	if err != nil {
		return errwrap.Wrapf(fmt.Sprintf("Error setting IAM policy for %s: {{err}}", u.DescribeResource()), err)
	}

	return nil
}

func (u *IapTunnelIamUpdater) GetResourceId() string {
	return fmt.Sprintf("projects/%s/iap_tunnel/zones/%s/instances/%s", u.projectNumber, u.zone, u.resourceId)
}

func (u *IapTunnelIamUpdater) GetMutexKey() string {
	return fmt.Sprintf("iap-tunnel-instance-%s-%s-%s", u.projectNumber, u.zone, u.resourceId)
}

func (u *IapTunnelIamUpdater) DescribeResource() string {
	return fmt.Sprintf("IAP Tunnel Instance %s/%s/%s", u.projectNumber, u.zone, u.resourceId)
}

func resourceManagerToIapPolicy(p *cloudresourcemanager.Policy) (*iap.Policy, error) {
	out := &iap.Policy{}
	err := Convert(p, out)
	if err != nil {
		return nil, errwrap.Wrapf("Cannot convert a resourcemanager policy to am IAP policy: {{err}}", err)
	}
	return out, nil
}

func iapToResourceManagerPolicy(p *iap.Policy) (*cloudresourcemanager.Policy, error) {
	out := &cloudresourcemanager.Policy{}
	err := Convert(p, out)
	if err != nil {
		return nil, errwrap.Wrapf("Cannot convert an IAP policy to a resourcemanager policy: {{err}}", err)
	}
	return out, nil
}
<% else %>
// Magic Modules doesn't let us remove files - blank out beta-only common-compile files for now.
<% end -%>
