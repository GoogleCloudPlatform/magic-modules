---
layout: "google"
page_title: "Google: google_kms_crypto_key"
sidebar_current: "docs-google-kms-crypto-key-x"
description: |-
 Allows creation of a Google Cloud Platform KMS CryptoKey.
---

# google\_kms\_crypto\_key

Allows creation of a Google Cloud Platform KMS CryptoKey. For more information see
[the official documentation](https://cloud.google.com/kms/docs/object-hierarchy#key)
and
[API](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys).

A CryptoKey is an interface to key material which can be used to encrypt and decrypt data. A CryptoKey belongs to a
Google Cloud KMS KeyRing.

~> Note: CryptoKeys cannot be deleted from Google Cloud Platform. Destroying a
Terraform-managed CryptoKey will remove it from state and delete all
CryptoKeyVersions, rendering the key unusable, but **will not delete the
resource on the server**. When Terraform destroys these keys, any data
previously encrypted with these keys will be irrecoverable. For this reason, it
is strongly recommended that you add lifecycle hooks to the resource to prevent
accidental destruction.

## Example Usage

```hcl
resource "google_kms_key_ring" "my_key_ring" {
  name     = "my-key-ring"
  project  = "my-project"
  location = "us-central1"
}

resource "google_kms_crypto_key" "my_crypto_key" {
  name            = "my-crypto-key"
  key_ring        = "${google_kms_key_ring.my_key_ring.self_link}"
  rotation_period = "100000s"

  lifecycle {
    prevent_destroy = true
  }
}
```

## Argument Reference

The following arguments are supported:

* `name` - (Required) The CryptoKey's name.
    A CryptoKeyâ€™s name must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`

* `key_ring` - (Required) The id of the Google Cloud Platform KeyRing to which the key shall belong.

- - -

* `rotation_period` - (Optional) Every time this period passes, generate a new
  CryptoKeyVersion and set it as the primary. The first rotation will take place
  after the specified period. The rotation period has the format of a time
  duration with a suffix (e.g. 72h32m or 5s). This value must be greater than 24
  hours.

* `purpose` - (Optional) Purpose of the crypto key. The default value is
  "encrypt_decrypt". Possible values include:

  * `asymmetric_decrypt`
  * `asymmetric_sign`
  * `encrypt_decrypt`

  Please see the [Cloud KMS crypto key
  purpose reference](https://cloud.google.com/kms/docs/reference/rpc/google.cloud.kms.v1#google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose)
  documentation for the latest available options.

* `version_template` - (Optional) A template describing settings for new crypto key versions. Structure is documented below.

---

The `version_template` block supports:

* `algorithm` - (Required)  The algorithm to use when creating a version based
  on this template. Possible values include:

  * `symmetric_encryption`
  * `rsa_sign_pss_2048_sha256`
  * `rsa_sign_pss_3072_sha256`
  * `rsa_sign_pss_4096_sha256`
  * `rsa_sign_pkcs1_2048_sha256`
  * `rsa_sign_pkcs1_3072_sha256`
  * `rsa_sign_pkcs1_4096_sha256`
  * `rsa_decrypt_oaep_2048_sha256`
  * `rsa_decrypt_oaep_3072_sha256`
  * `rsa_decrypt_oaep_4096_sha256`
  * `ec_sign_p256_sha256`
  * `ec_sign_p384_sha384`

  Please see the [Cloud KMS crypto key algorithm reference](https://cloud.google.com/kms/docs/reference/rpc/google.cloud.kms.v1#google.cloud.kms.v1.CryptoKeyVersion.CryptoKeyVersionAlgorithm)
  for the latest available options.

* `protection_level` - (Optional) The protection level to use when creating a
  version based on this template. Possible values include:

  * `hsm`
  * `software`

  Please see the [Cloud KMS crypto key purpose reference](https://cloud.google.com/kms/docs/reference/rpc/google.cloud.kms.v1#google.cloud.kms.v1.ProtectionLevel)
  for the latest available options.


## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `next_rotation_rfc3339` - The next time the crypto key will be rotated, in RFC3339 format.

* `next_rotation_seconds` - The next time the crypto key will be rotated, in Unix epoch seconds.

* `rotation_period_seconds` - The rotation period, converted to complete seconds as an integer.

* `self_link` - The self link of the created CryptoKey. Its format is `projects/{projectId}/locations/{location}/keyRings/{keyRingName}/cryptoKeys/{cryptoKeyName}`.

## Import

CryptoKeys can be imported using the CryptoKey autogenerated `id`, e.g.

```
$ terraform import google_kms_crypto_key.my_crypto_key my-gcp-project/us-central1/my-key-ring/my-crypto-key

$ terraform import google_kms_crypto_key.my_crypto_key us-central1/my-key-ring/my-crypto-key
```
