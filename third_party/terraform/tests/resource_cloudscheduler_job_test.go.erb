<% autogen_exception -%>
package google
<% unless version == 'ga' -%>

import (
	"fmt"
	"reflect"
	"testing"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/hashicorp/terraform/terraform"
)

func TestAccCloudSchedulerJob_pubsub(t *testing.T) {
	t.Parallel()

	jobResourceName := "google_cloud_scheduler_job.job"
	pubSubJobName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))
	project := getTestProjectFromEnv()

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckCloudSchedulerJobDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudSchedulerJob_pubSubConfig(pubSubJobName, project),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(jobResourceName, "name", pubSubJobName),
					resource.TestCheckResourceAttr(jobResourceName, "description", "test job"),
					resource.TestCheckResourceAttr(jobResourceName, "schedule", "*/2 * * * *"),
					resource.TestCheckResourceAttr(jobResourceName, "time_zone", "Etc/UTC"),
				),
			},
			{
				ResourceName: jobResourceName,
				ImportState:  true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudSchedulerJob_http(t *testing.T) {
	t.Parallel()

	jobResourceName := "google_cloud_scheduler_job.job"
	httpJobName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckCloudSchedulerJobDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudSchedulerJob_httpConfig(httpJobName),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(jobResourceName, "name", httpJobName),
					resource.TestCheckResourceAttr(jobResourceName, "description", "test http job"),
					resource.TestCheckResourceAttr(jobResourceName, "schedule", "*/8 * * * *"),
					resource.TestCheckResourceAttr(jobResourceName, "time_zone", "America/New_York"),
				),
			},
			{
				ResourceName: jobResourceName,
				ImportState:  true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccCloudSchedulerJob_appEngine(t *testing.T) {
	t.Parallel()

	jobResourceName := "google_cloud_scheduler_job.job"
	appEngineJobName := fmt.Sprintf("tf-test-%s", acctest.RandString(10))

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckCloudSchedulerJobDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccCloudSchedulerJob_appEngineConfig(appEngineJobName),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(jobResourceName, "name", appEngineJobName),
					resource.TestCheckResourceAttr(jobResourceName, "description", "test app engine job"),
					resource.TestCheckResourceAttr(jobResourceName, "schedule", "*/4 * * * *"),
					resource.TestCheckResourceAttr(jobResourceName, "time_zone", "Europe/London"),
				),
			},
			{
				ResourceName: jobResourceName,
				ImportState:  true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccCheckCloudSchedulerJobDestroy(s *terraform.State) error {
	for _, rs := range s.RootModule().Resources {
		if rs.Type != "google_cloud_scheduler_job" {
			continue
		}

		config := testAccProvider.Meta().(*Config)

		url, err := replaceVarsForTest(rs, "https://cloudscheduler.googleapis.com/v1beta1/projects/{{project}}/locations/{{region}}/jobs/{{name}}")
		if err != nil {
			return err
		}

		_, err = sendRequest(config, "GET", url, nil)
		if err == nil {
			return fmt.Errorf("Function still exists at %s", url)
		}
	}

	return nil
}

func testAccCloudSchedulerJob_pubSubConfig(name string, project string) string {
	return fmt.Sprintf(`

resource "google_pubsub_topic" "topic" {
	name = "build-triggers"
}

resource "google_cloud_scheduler_job" "job" {
	name     = "%s"
	description = "test job"
	schedule = "*/2 * * * *"

	pubsub_target = {
		topic_name = "projects/%s/topics/build-triggers"
		data = "${base64encode("test")}"
	}
}

	`, name, project)
}

func testAccCloudSchedulerJob_appEngineConfig(name string) string {
	return fmt.Sprintf(`

resource "google_cloud_scheduler_job" "job" {
	name     = "%s"
	schedule = "*/4 * * * *"
	description = "test app engine job"
	time_zone = "Europe/London"

	app_engine_http_target = {
		http_method = "POST"
    app_engine_routing = {
      service = "web"
      version = "prod"
      instance = "my-instance-001"
    }
		relative_uri = "/ping"
	}
}

	`, name)
}

func testAccCloudSchedulerJob_httpConfig(name string) string {
	return fmt.Sprintf(`

resource "google_cloud_scheduler_job" "job" {
	name     = "%s"
	description = "test http job"
	schedule = "*/8 * * * *"
	time_zone = "America/New_York"

	http_target = {
		http_method = "POST"
		uri = "https://example.com/ping"
	}
}

	`, name)
}

func TestFlattenHttpHeaders(t *testing.T) {

	cases := []struct {
		Input  map[string]interface{}
		Output map[string]interface{}
	}{
		// simple, no headers included
		{
			Input: map[string]interface{}{
				"My-Header": "my-header-value",
			},
			Output: map[string]interface{}{
				"My-Header": "my-header-value",
			},
		},

		// include the User-Agent header value Google-Cloud-Scheduler
		// Tests Removing User-Agent header
		{
			Input: map[string]interface{}{
				"User-Agent": "Google-Cloud-Scheduler",
				"My-Header":  "my-header-value",
			},
			Output: map[string]interface{}{
				"My-Header": "my-header-value",
			},
		},

		// include the User-Agent header
		// Tests removing value AppEngine-Google; (+http://code.google.com/appengine)
		{
			Input: map[string]interface{}{
				"User-Agent": "My-User-Agent AppEngine-Google; (+http://code.google.com/appengine)",
				"My-Header":  "my-header-value",
			},
			Output: map[string]interface{}{
				"User-Agent": "My-User-Agent",
				"My-Header":  "my-header-value",
			},
		},

		// include the Content-Type header value application/octet-stream.
		// Tests Removing Content-Type header
		{
			Input: map[string]interface{}{
				"Content-Type": "application/octet-stream",
				"My-Header":    "my-header-value",
			},
			Output: map[string]interface{}{
				"My-Header": "my-header-value",
			},
		},

		// include the Content-Length header
		// Tests Removing Content-Length header
		{
			Input: map[string]interface{}{
				"Content-Length": 7,
				"My-Header":      "my-header-value",
			},
			Output: map[string]interface{}{
				"My-Header": "my-header-value",
			},
		},

		// include the X-Google- header
		// Tests Removing X-Google- header
		{
			Input: map[string]interface{}{
				"X-Google-My-Header": "x-google-my-header-value",
				"My-Header":          "my-header-value",
			},
			Output: map[string]interface{}{
				"My-Header": "my-header-value",
			},
		},
	}

	for _, c := range cases {
		d := &schema.ResourceData{}
		output := flattenCloudSchedulerJobAppEngineHttpTargetHeaders(c.Input, d)
		if !reflect.DeepEqual(output, c.Output) {
			t.Fatalf("Error matching output and expected: %#v vs %#v", output, c.Output)
		}
	}
}
<% else %>
// Magic Modules doesn't let us remove files - blank out beta-only common-compile files for now.
<% end -%>
