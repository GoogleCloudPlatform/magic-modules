<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code review on Magic Modules</title><link>https://googlecloudplatform.github.io/magic-modules/code-review/</link><description>Recent content in Code review on Magic Modules</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://googlecloudplatform.github.io/magic-modules/code-review/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a pull request</title><link>https://googlecloudplatform.github.io/magic-modules/code-review/create-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/code-review/create-pr/</guid><description>&lt;h1 id="create-a-pull-request-pr"&gt;Create a pull request (PR)&lt;a class="anchor" href="#create-a-pull-request-pr"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="requirements"&gt;Requirements&lt;a class="anchor" href="#requirements"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make sure your &lt;a href="https://docs.github.com/en/get-started/quickstart/github-flow#create-a-branch"&gt;branch&lt;/a&gt; contains a single self-contained change. For example:
&lt;ul&gt;
&lt;li&gt;If you are adding multiple resources to the provider, only put one resource in each PR - even if the product requires all resources to be present before it can be meaningfully used.&lt;/li&gt;
&lt;li&gt;If you are adding a few fields and also fixing a bug, create one PR for adding the new fields and a separate PR for the bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Follow the instructions at &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request"&gt;Creating a pull request&lt;/a&gt; to create a pull request to merge your branch into &lt;code&gt;GoogleCloudPlatform/magic-modules&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Make sure the PR body includes the text &lt;code&gt;Fixes GITHUB_ISSUE_LINK.&lt;/code&gt; once per issue resolved by your PR. Replace &lt;code&gt;GITHUB_ISSUE_LINK&lt;/code&gt; with a link to a GitHub issue from the &lt;a href="https://github.com/hashicorp/terraform-provider-google/issues"&gt;provider issue tracker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://googlecloudplatform.github.io/magic-modules/code-review/release-notes/"&gt;Write release notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="code-review"&gt;Code review&lt;a class="anchor" href="#code-review"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A reviewer will automatically be assigned to your PR.&lt;/li&gt;
&lt;li&gt;Creating a new pull request or pushing a new commit automatically triggers our CI pipelines and workflows. After CI starts, downstream diff generation takes about 10 minutes; &lt;a href="https://googlecloudplatform.github.io/magic-modules/test/test/"&gt;VCR tests&lt;/a&gt; can take up to 2 hours. If you are a community contributor, some tests will only run after approval from a reviewer.
&lt;ul&gt;
&lt;li&gt;While convenient, relying on CI to test iterative changes to PRs often adds extreme latency to reviews if there are errors in test configurations or at runtime. We &lt;strong&gt;strongly&lt;/strong&gt; recommend you &lt;a href="https://googlecloudplatform.github.io/magic-modules/test/run-tests/"&gt;test your changes locally before pushing&lt;/a&gt; even after the initial change.&lt;/li&gt;
&lt;li&gt;VCR tests will first attempt to play back recorded HTTP requests (REPLAYING mode). If any tests fail, they will run in RECORDING mode to generate a new cassette; then, the same tests will run again in REPLAYING mode to detect any nondeterministic behavior in the test (which can cause flaky tests.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If your assigned reviewer does not respond to changes on a pull request within two US business days, ping them on the pull request.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote class='book-hint note'&gt;
&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; Speeding up review:&lt;/p&gt;</description></item><item><title>Write release notes</title><link>https://googlecloudplatform.github.io/magic-modules/code-review/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/code-review/release-notes/</guid><description>&lt;h1 id="write-release-notes"&gt;Write release notes&lt;a class="anchor" href="#write-release-notes"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This guide explains best practices for composing accurate, end-user focused release notes for Magic Modules pull requests.&lt;/p&gt;
&lt;p&gt;Every pull request must have at least one release note block in the opening comment. Release note blocks have the following format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#e2e4e5;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-markdown" data-lang="markdown"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;``&lt;span style="color:#5af78e"&gt;`release-note:TYPE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#5af78e"&gt;CONTENT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#5af78e"&gt;`&lt;/span&gt;``&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replace &lt;code&gt;TYPE&lt;/code&gt; with the correct release note type, and &lt;code&gt;CONTENT&lt;/code&gt; with a release note written according to the guidelines in the following sections.&lt;/p&gt;
&lt;h2 id="general-guidelines"&gt;General guidelines&lt;a class="anchor" href="#general-guidelines"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Do&lt;/th&gt;
 &lt;th&gt;Don&amp;rsquo;t&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;Only have one &lt;code&gt;CONTENT&lt;/code&gt; line per release note block. Use multiple blocks if there are multiple related changes in a single PR.&lt;/td&gt;
 &lt;td&gt;Don&amp;rsquo;t add multiple lines to a single release note block. Avoid combining multiple distinct types of changes into one release block.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;If a change only affects the &lt;code&gt;google-beta&lt;/code&gt; provider add &lt;code&gt;(beta)&lt;/code&gt; to the end of the release note. If a change only affects the &lt;code&gt;google&lt;/code&gt; provider add &lt;code&gt;(ga)&lt;/code&gt; to the end of the release note.&lt;/td&gt;
 &lt;td&gt;Don&amp;rsquo;t add either suffix if the change affects both providers.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;Set an appropriate release note type.&lt;/td&gt;
 &lt;td&gt;Don&amp;rsquo;t leave the type as &lt;code&gt;REPLACEME&lt;/code&gt;.&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="type-specific-guidelines-and-examples"&gt;Type-specific guidelines and examples&lt;a class="anchor" href="#type-specific-guidelines-and-examples"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="book-tabs"&gt;
&lt;input type="radio" class="toggle" name="tabs-0" id="tabs-0-0" checked="checked" /&gt;&lt;label for="tabs-0-0"&gt;New field(s)&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
&lt;p&gt;Write your release note in the following format:&lt;/p&gt;</description></item><item><title>Review a pull request</title><link>https://googlecloudplatform.github.io/magic-modules/code-review/review-pr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://googlecloudplatform.github.io/magic-modules/code-review/review-pr/</guid><description>&lt;h1 id="review-a-pull-request"&gt;Review a pull request&lt;a class="anchor" href="#review-a-pull-request"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This page provides guidelines for reviewing a Magic Modules pull request (PR).&lt;/p&gt;
&lt;h2 id="special-cases"&gt;Special cases&lt;a class="anchor" href="#special-cases"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following types of PRs may require additional scrutiny and/or multiple reviewers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DCL to MMv1 migrations&lt;/li&gt;
&lt;li&gt;Adding multi-actor fields (fields whose values can be altered as a side effect of changes made to a different resource)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="review"&gt;Review&lt;a class="anchor" href="#review"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Read the PR description to understand the context and ensure the PR either
&lt;ul&gt;
&lt;li&gt;is linked to a GitHub issue or an internal bug
&lt;ul&gt;
&lt;li&gt;if not, check the &lt;a href="https://github.com/hashicorp/terraform-provider-google/issues"&gt;issue tracker&lt;/a&gt; to see whether the feature has already been requested and add the issues in the description, if any.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Fixes {github_issue_link}&amp;rdquo; is preferred if an external issue is available because it will &lt;a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/linking-a-pull-request-to-an-issue"&gt;auto-close the issue&lt;/a&gt; when the PR is merged. However, there&amp;rsquo;s no need to create an external issue solely for this purpose.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;establishes clear context itself via title or description.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the PR adds any new resource, ensure that the resource does not already exist in the &lt;a href="https://github.com/hashicorp/terraform-provider-google"&gt;GA provider&lt;/a&gt; or &lt;a href="https://github.com/hashicorp/terraform-provider-google-beta"&gt;beta provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read through all the changes in the PR, generated code in the downstreams and the API documentation to ensure that:
&lt;ol&gt;
&lt;li&gt;the resource schema added in the PR matches the API structure.&lt;/li&gt;
&lt;li&gt;the features are added in the correct version
&lt;ul&gt;
&lt;li&gt;features only available in beta are not included in the GA google provider.&lt;/li&gt;
&lt;li&gt;features added to the GA provider are also included in the beta provider &amp;ndash; beta should be a strict superset of GA.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;no &lt;a href="https://googlecloudplatform.github.io/magic-modules/breaking-changes/make-a-breaking-change/"&gt;breaking changes&lt;/a&gt; are introduced without a valid justification. Add the &lt;code&gt;override-breaking-change&lt;/code&gt; label if there is a valid justification.
&lt;ul&gt;
&lt;li&gt;remember to check for changes in default behaviour like changing the flags on delete!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;verify the change &lt;strong&gt;fully&lt;/strong&gt; resolves the linked issues, if any. If it does not, change the &amp;ldquo;Fixes&amp;rdquo; message to &amp;ldquo;Part of&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Check the tests added/modified to ensure that:
&lt;ol&gt;
&lt;li&gt;all fields added/updated in the PR appear in at least one test.
&lt;ul&gt;
&lt;li&gt;It is advisable to test updating from a non-zero value to a zero value if feasible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;all mutable fields are tested in at least one update test.&lt;/li&gt;
&lt;li&gt;all resources in the acceptance tests have a &lt;code&gt;tf-test&lt;/code&gt; or &lt;code&gt;tf_test&lt;/code&gt; prefix in their primary id field.&lt;/li&gt;
&lt;li&gt;all handwritten test Config steps include import steps following them&lt;/li&gt;
&lt;li&gt;all related tests pass in GA for features promoted from beta to GA.
&lt;blockquote class='book-hint note'&gt;
&lt;p&gt;Note:
Presubmit VCR tests do not run in GA. Manual testing is required for promoted GA features.&lt;/p&gt;</description></item></channel></rss>