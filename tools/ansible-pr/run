#!/usr/bin/env ruby
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'optparse'
require_relative '../../compile/core'
require 'octokit'
require 'time'

# Class to handle Compile include to avoid Rubocop issues.
class CompileClass
  include Compile::Core
end

##########################################################
# Default Options
#
ANSIBLE_URL = 'git@github.com:ansible/ansible.git'.freeze
MAGICIAN_GIT = 'git@github.com:modular-magician/ansible.git'.freeze

IGNORED_MODULES = %w[
  gcp_backend_service
  gcp_forwarding_rule
  gcp_healthcheck
  gcp_target_proxy
  gcp_url_map
].freeze

ADDITIONAL_FILES = [
  'lib/ansible/module_utils/gcp_utils.py',
  'lib/ansible/utils/module_docs_fragments/gcp.py'
].freeze

@options = {
  directory: "#{Dir.pwd}/build/ansible/",
  dry_run: false,
  # Get all PRs from one day ago.
  date: (Time.now - (3600 * 24)).iso8601
}
###########################################################
# Functions

def git_run(cmd, silent = false, opts = @options)
  silent_cmd = silent ? '>/dev/null' : ''
  command = [
    "pushd #{opts[:directory]} >/dev/null",
    "#{cmd}#{silent_cmd} 2>&1",
    "popd #{opts[:directory]} > /dev/null"
  ]

  if @options[:dry_run]
    puts command.join('; ')
  else
    %x(#{command.join('; ')})
  end
end

def new_branch(branch_name, silent = true)
  git_run('git checkout upstream/devel', silent)
  git_run("git branch -D #{branch_name}", silent)
  git_run("git checkout -b #{branch_name}", silent)
end

# Check that remotes are in order
def check_remotes(opts = @options)
  # Check git remotes
  remotes = git_run('git remote -v', false, opts)
  remotes = remotes.split("\n")
                   .map { |line| line.split("\t") }
                   .map { |line| { line[0] => line[1].split(' ').first } }
                   .reduce({}, :merge)
  raise 'Origin git remote should be set' unless remotes['origin']
  raise "Upstream git remote should be #{ANSIBLE_URL}" unless remotes['upstream'] == ANSIBLE_URL
end

def get_all_modules(remote)
  git_run("git fetch #{remote} devel", true)
  git_run("git checkout #{remote}/devel", true)
  files = git_run('git ls-files -- lib/ansible/modules/cloud/google/gcp_*')
  files.split("\n")
       .map { |line| %r{lib/ansible/modules/cloud/google/([a-z_]*)\.py}.match(line.strip)[1] }
       .reject { |line| IGNORED_MODULES.include?(line) }
end

def check_if_different(file, remote1, remote2)
  @files ||= git_run("git diff --name-only #{remote1}/devel #{remote2}/devel")
  @files.split("\n")
        .include?(file)
end

def checkout_file(file)
  git_run("git checkout magician/devel -- #{file}", true)
end

def all_pr_messages
  # Limit of 50 bug fixes will go into a PR (should never hit this limit)
  client = Octokit::Client.new(access_token: @options[:creds], per_page: 50)
  client.list_issues('googlecloudplatform/magic-modules',
                     labels: 'ansible,downstream-generated',
                     state: 'closed', since: @options[:date].strip)
        .map { |pr| { title: pr[:title], url: pr[:html_url] } }
end

def create_branch_and_add_modules(branch_name, modules, static_files)
  # Create a new branch
  new_branch(branch_name)

  # Checkout all the files (module, tests, additional files)
  modules.each do |mod_name|
    checkout_file("lib/ansible/modules/cloud/google/#{mod_name}.py")
    checkout_file("test/integration/targets/#{mod_name}/")
  end
  static_files.each { |file| checkout_file(file) }
end
#############################################################
# Main
#############################################################

OptionParser.new do |opts|
  opts.banner = 'Usage: run [options]'

  opts.on('--dir', '--directory [DIRECTORY]', 'Ansible repo location') do |v|
    @options[:directory] = v
  end

  opts.on('-d', '--dry-run', 'Dry run') do |_v|
    @options[:dry_run] = true
  end

  opts.on('--date [DATE (as ISO8601 String)]',
          'Find all GitHub issues with Ansible label after this date') do |v|
    @options[:date] = v
  end

  opts.on('--github-creds [CREDS]', 'Github creds') do |v|
    @options[:creds] = v
  end
end.parse!

# rubocop:disable Style/SpecialGlobalVars
# Check if everything is installed properly.
%x(which hub)
raise 'Please install the hub CLI' unless $?.success?

check_remotes
# rubocop:enable Style/SpecialGlobalVars

# Add Magician Git repo
git_run("git remote add magician #{MAGICIAN_GIT}", true)
git_run('git fetch magician devel', true)
git_run('git fetch upstream devel', true)

puts 'Everything is setup properly'

# Check to see which additional files need to be placed in all PRs.
changed_files = []
ADDITIONAL_FILES.each do |file|
  changed_files << file if check_if_different(file, 'magician', 'upstream')
end

puts "Changes noticed in these additional files: #{changed_files.join(', ')}"

# Create a Bug Fix PR.
existing_modules = get_all_modules('upstream')

# Create a new branch
# Each batch should be 25 modules at most (assuming 2 file changes per module)
# minus any static files.
batch_size = 25 - changed_files.length
# rubocop:disable Metrics/BlockLength
existing_modules.each_slice(batch_size).with_index do |part, index|
  puts "Building Bug fix PR #{index}"
  git_run('git checkout upstream/devel', true)
  git_run("git branch -D bug_fixes#{index}", true)
  git_run("git checkout -b bug_fixes#{index}", true)

  # Checkout all the files (module, tests, additional files)
  part.each do |mod_name|
    checkout_file("lib/ansible/modules/cloud/google/#{mod_name}.py")
    checkout_file("test/integration/targets/#{mod_name}/")
  end
  changed_files.each { |file| checkout_file(file) }

  # Make a commit
  message = "Bug fixes for GCP modules (as of #{@options[:date]})"
  git_run("git commit -m \"#{message}\"", true)

  # Create PR message and save to file.
  File.write("tools/ansible-pr/templates/bug_fixes#{index}",
             CompileClass.new.lines(
               CompileClass.new.compile_file({
                                               commit_msg: message,
                                               new: false,
                                               prs: all_pr_messages
                                             },
                                             'tools/ansible-pr/template.md.erb')
             ))

  # Create PR using branch + message.
  git_run('git push origin HEAD --force')

  repo = 'ansible/ansible:devel'
  message_loc = "../../tools/ansible-pr/templates/bug_fixes#{index}"
  output = git_run("hub pull-request -b #{repo} -F #{message_loc}")

  puts output
  puts "PR built for bug fixes #{index}"
end
# rubocop:enable Metrics/BlockLength

puts 'Building individual PRs'
new_modules = get_all_modules('magician') - get_all_modules('upstream')
new_modules.each do |mod_name|
  new_branch(mod_name)
  checkout_file("lib/ansible/modules/cloud/google/#{mod_name}.py")
  checkout_file("test/integration/targets/#{mod_name}/")
  changed_files.each { |file| checkout_file(file) }
  message = "New GCP module: #{mod_name}"
  git_run("git commit -m \"#{message}\"", true)
  # Create PR message and save to file.
  File.write("tools/ansible-pr/templates/#{mod_name}",
             CompileClass.new.lines(
               CompileClass.new.compile_file({
                                               commit_msg: message,
                                               new: true
                                             },
                                             'tools/ansible-pr/template.md.erb')
             ))

  # Create PR using branch + message.
  git_run('git push origin HEAD --force')

  repo = 'ansible/ansible:devel'
  message_loc = "../../tools/ansible-pr/templates/#{mod_name}"
  output = git_run("hub pull-request -b #{repo} -F #{message_loc}")

  puts output
  puts "PR built for #{mod_name}"
end
