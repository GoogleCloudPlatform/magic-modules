{{- /* Copyright 2022 Google LLC. All Rights Reserved.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

			http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License. */ -}}
---
# ----------------------------------------------------------------------------
#
#   ***    AUTO GENERATED CODE     ***    Type: breaking-change-detector  ***
#
# ----------------------------------------------------------------------------
#
#     This file is managed by Magic Modules (https:#github.com/GoogleCloudPlatform/magic-modules)
#     Changes will need to be made to the breaking-change-detector within Magic Modules instead of here.
#
# ----------------------------------------------------------------------------
---

# Breaking Changes and Provider Development

## Provider Versioning
As a provider is developed; resources are added, old resources are updated, and bugs are fixed.
These changes are [bundled together as a release](https://github.com/hashicorp/terraform-provider-google/releases/tag/v4.32.0).
Releases are numerically defined with a version number in the form of `MAJOR.MINOR.PATCH`.
Patch indicates bug fixes, minor represents new features, and major represents significant changes
which would be breaking to the customer if committed. Once a release is published the provider binary is copied to
[Hashicorp's provider registry](https://registry.terraform.io/browse/providers).

## Customer Trust
Terraform authors can write modular configurations, aptly named modules. These are shared within organizations and
[online](https://registry.terraform.io/browse/modules). Terraform configurations can specify [provider requirements](https://www.terraform.io/language/providers/requirements)
including a [version constraint field](https://www.terraform.io/language/providers/requirements#version-constraints).
The configuration will then [tie these version constraints](https://www.terraform.io/language/expressions/version-constraints)
to an approximate minor or exact full version. Maintaining trust and consistency on every `MINOR` or `MAJOR` version upgrade is critical.

If breaking changes are allowed within `MINOR` versions, trust in the provider will be eroded and module creators will
not have confidence in provider stability. This diminished trust will eventually lead to customers investing or deploying less to GCP.

## Breaking Changes

Now that we understand what defines a breaking change and that we don't want them.
What exactly constitutes a breaking change? Bellow we'll
go into the four categories and rules therein.


{{ range $c := $.Categories -}}
{{ if $c.Rules -}}
### {{ $c.Name }}

* {{ $c.Definition }}

{{ range $r := $c.Rules -}}

<h4 id="{{$r.Identifier}}"> {{ $r.Name }} {{if $r.Undetectable}}(Undetectable){{ end }} </h4>

* {{ $r.Definition }}

{{ end }}
{{- end }}
{{- end }}