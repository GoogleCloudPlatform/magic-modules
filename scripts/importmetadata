#!/bin/bash
# Generates an import format metadata file
# Requires a built provider to reference, defaults to
# $GOPATH/src/github.com/hashicorp/<tpg ga or beta>/...
# 
# Produces via following priorities:
# Checks for all output .go resources with a declared Importer: in schema
# Checks if it uses standard tpgresource.ParseImportId() functions, if so converts that regex
# Checks if uses schema.ImportStatePassThrough(), if it has a hardcoded return based on how ID is constructed in the resource
# Anything else is non standard -- will take from MD files 
#
# Expecting to see a resource and it's not being generated? Please reach out to @nickelliot

shopt -s nullglob

if [ -z "$1" ]
then
	echo "Please run script with the format './scripts/importmetadata <ga or beta> <basepath (optional arg)>'"
	exit 1
fi
if [ -z "$2" ]
then
	basepath="$GOPATH/src/github.com/hashicorp/"
else
	basepath=$2
fi
if [ "$1"=="beta" ]
then
	basepath="${basepath}/terraform-provider-google-beta/google-beta"
else
	basepath="${basepath}/terraform-provider-google/google"
fi

echo "# $resource_type: [list-of-acceptable-import-templates]" > importmetadata.txt
echo "{" >> importmetadata.txt

for file in $(find $basepath/services/**/resource_*.go -type f -print); do
	importable=$(ggrep -Pzo 'Importer:' $file)
	product=
	shortfile="$(basename $file .go)"
	resource=${shortfile/resource/google}

#does not work for GCP meta resources and we need to prune the extra google
	resource=${resource/google_google_/google_}

    if [ -z "$importable"  ]
    then

##############################################
#resources with shared importing configuration
#logging has imports configured in MD files
		importable=$(ggrep -Pzo 'return ResourceLoggingBucketConfig' $file)
		if [ -z "$importable"  ]
    	then
#			echo -n \	\"$resource\"\: >> importmetadata.txt
#			echo \	not importable >> importmetadata.txt

# NOT IMPORTABLE RESOURCES
			continue
		else
#logging bucket config uses MD files
#needs to extract formats from MD files
			resourcenogoog=${resource/google_/}
			resourcemd=$basepath/website/docs/r/$resourcenogoog.html.markdown
	    	if [ -f "$resourcemd" ]
	    	then
				importformat=$(ggrep -Pzo '```\n\$ terraform import(.*\n)*?```' $resourcemd)
				if [ -z "$importformat"  ]
	    		then
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \	NON STANDARD MD LOGGING >> importmetadata.txt
	    		else
					echo -n \	\"$resource\"\: >> importmetadata.txt
					importformat=$(sed -e 's|``` \$ terraform import [^.]*\.[^[[:space:]]* |\[\"|g'  <<< $importformat)
					importformat=$(sed -e 's| \$ terraform import [^.]*\.[^[[:space:]]* |", "|g'  <<< $importformat)
					importformat=$(sed -e 's| ```|\"\]|g'  <<< $importformat)
			    	echo \ "$importformat" >> importmetadata.txt
		    	fi
		    fi
		fi
##############################################
    else

# checks for tpgresource.parseimportid, standard output for all .yaml generated resources
		importformat=$(ggrep -Pzo 'tpgresource\.ParseImportId\(\n*?[ \t]*?\[]string{\n*?([ \t]*".*?",\n)*.*?}' $file)

	    if [ -z "$importformat"  ]
	    then

# checks for passthrough, another frequent method of collecting resource
			imppassthrough=$(ggrep -Pzo 'Importer: &schema\.ResourceImporter{.*\n.*State: schema\.ImportStatePassthrough,\n[ \t]*}' $file)
			if [ -z "$imppassthrough"  ]
			then
# if not passthrough or standard, will attempt to pull from MD
				resourcenogoog=${resource/google_/}
				resourcemd=$basepath/website/docs/r/$resourcenogoog.html.markdown
				if [ -f "$resourcemd" ]
		    	then
					importformat=$(ggrep -Pzos '```\n\$ terraform import(.*\n)*?```' $resourcemd)
					if [ -z "$importformat"  ]
		    		then
# need to do a different check for google_* resources
		    			resourcemd=$basepath/website/docs/r/$resource.html.markdown
						importformat=$(ggrep -Pzos '```\n\$ terraform import(.*\n)*?```' $resourcemd)
						if [ -z "$importformat"  ]
	    				then
							echo -n \	\"$resource\"\: >> importmetadata.txt
							if [[ "$resource" == "google_folder" ]]
							then
								echo \ '["folders/{{folder_id}}", "{{folder_id}}"]' >> importmetadata.txt
							else
								echo \	NON STANDARD MD >> importmetadata.txt
							fi
						else
							echo -n \	\"$resource\"\: >> importmetadata.txt
							importformat=$(sed -e 's|``` \$ terraform import [^.]*\.[^[[:space:]]* |\[\"|g'  <<< $importformat)
							importformat=$(sed -e 's| \$ terraform import [^.]*\.[^[[:space:]]* |", "|g'  <<< $importformat)
							importformat=$(sed -e 's| ```|\"\]|g'  <<< $importformat)
					    	echo \ "$importformat" >> importmetadata.txt
					    fi
						##logging bucket config is fake resource
						##
		    		else
						echo -n \	\"$resource\"\: >> importmetadata.txt
						importformat=$(sed -e 's|``` \$ terraform import [^.]*\.[^[[:space:]]* |\[\"|g'  <<< $importformat)
						importformat=$(sed -e 's| \$ terraform import [^.]*\.[^[[:space:]]* |", "|g'  <<< $importformat)
						importformat=$(sed -e 's| ```|\"\]|g'  <<< $importformat)
				    	echo \ "$importformat" >> importmetadata.txt
			    	fi
			    fi
		    else
# ImportStatePassthrough resources want generically "id", which can be a single field (usually project id), or multiple combined. there is no consistent format to programatically generate formats based on existing files or markdown.
#as this is functionally unusable for automatically creating this metadata format, all of these resources need to be hardcoded

				case $resource in
				google_app_engine_application)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{project}}"]' >> importmetadata.txt
					;;
				google_compute_project_default_network_tier)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{project}}"]' >> importmetadata.txt
					;;
				google_compute_project_metadata)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{project}}"]' >> importmetadata.txt
					;;
				google_compute_project_metadata_item)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{key}}"]' >> importmetadata.txt
					;;
				google_compute_shared_vpc_host_project)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{project}}"]' >> importmetadata.txt
					;;
				google_compute_shared_vpc_service_project)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{host_project}}/{{service_project}}"]' >> importmetadata.txt
					;;
				google_dataflow_job)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{job_id}}"]' >> importmetadata.txt
					;;
				google_billing_subaccount)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["billingAccounts/{{master_billing_account}}"]' >> importmetadata.txt
					;;
				google_organization_iam_custom_role)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["organizations/{{org_id}}/roles/{{role_id}}"]' >> importmetadata.txt
					;;
				google_storage_notification)
					echo -n \	\"$resource\"\: >> importmetadata.txt
					echo \ '["{{notification_id}}", "{{bucket}}/notificationConfigs/{{id}}"]' >> importmetadata.txt
					;;
				google_dataflow_flex_template_job)
#code checks for importstatepassthrough but officially does not support importing so we proceed with no entry
					;;
				google_compute_disk_async_replication)
#code checks for importstatepassthrough but officially does not support importing so we proceed with no entry
					;;
				*)
#should not be generated -- will be configured with error code for CI integration
					echo -n "$resource: " >> importmetadata.txt
					echo \ NOT CONFIGURED  >> importmetadata.txt
#					exit 1
				esac
			fi
	    else
			echo -n \	\"$resource\"\: >> importmetadata.txt
			importformat=${importformat/tpgresource.ParseImportId\(\[\]string\{/\[}
			importformat=${importformat/\}/]}
			importformat=${importformat//(?P</\{\{}}
			importformat=${importformat//\>\[\^\/\]\+\)/\}\}}
			importformat=${importformat//\>\[\^\/\]\+\)/\}}
#covering multiple formatting edge cases
			importformat=${importformat//\>\[\^ \]\+\)/\}\}}
			importformat=${importformat//\>\.\+\)/\}\}}
			importformat=${importformat/\]\}/\]}
			importformat=${importformat//\>\[\^\/\]\*\)/\}\}} [^/]*

			importformat=$(sed -e 's|, \]|\]|g'  <<< $importformat)
			importformat=$(sed -e 's|\[ \"|\[\"|g'  <<< $importformat)

	    	echo \ "$importformat" >> importmetadata.txt
	    fi
	    if
	    iamname=${resource/google/iam}
	    iamservice=$(basename $(dirname $file))
	    if [ -f "$basepath/services/$iamservice/$iamname.go" ]
	    then
			echo -n \	\"$iamname\"\: >> importmetadata.txt
	    	echo \ "$importformat" >> importmetadata.txt
	    fi
	fi
done
echo "}" >> importmetadata.txt

#google_healthcare_fhir_store
#/Users/nickelliot/go/src/magic-modules/mmv1/products/healthcare/FhirStore.yaml
#/Users/nickelliot/go/src/github.com/hashicorp/terraform-provider-google/website/docs/r/healthcare_fhir_store.html.markdown