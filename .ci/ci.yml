# These resource types are here until the PRs get merged in upstream.  :)
resource_types:
    - name: git-branch
      type: docker-image
      source:
          # Note: resource types cannot use credhub substitution - "nmckinley" is hardcoded here.
          repository: nmckinley/concourse-git-resource
          tag: v0.1.8

    - name: github-pull-request
      type: docker-image
      source:
          repository: nmckinley/concourse-github-pr-resource
          tag: v0.1.4

resources:
    - name: magic-modules
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/magic-modules.git
          private_key: ((repo-key.private_key))

    - name: magic-modules-gcp
      type: git-branch
      source:
          uri: git@github.com:GoogleCloudPlatform/magic-modules.git
          private_key: ((repo-key.private_key))

    - name: magic-modules-new-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))
          authorship_restriction: false

    - name: terraform-intermediate
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/terraform-provider-google.git
          private_key: ((repo-key.private_key))

    - name: mm-approved-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))
          only_mergeable: true
          require_review_approval: true

    - name: nmckinley-pr
      type: docker-image
      source:
        repository: ((dockerhub-account.username))/concourse-github-pr-resource
        username: ((dockerhub-account.username))
        password: ((dockerhub-account.password))
        
    - name: terraform-pr
      type: github-pull-request
      source:
        repo: terraform-providers/terraform-provider-google
        private_key: ((repo-key.private_key))
        access_token: ((github-account.password))
        label: autogenerated

jobs:
    - name: mm-generate
      plan:
          - aggregate:
              - get: magic-modules
                resource: magic-modules-new-prs
                version: every
                trigger: true
                params:
                    submodules: [build/terraform]
            # consumes: magic-modules (detached HEAD)
            # produces: magic-modules-branched (new branch, with submodule)
          - task: branch-magic-modules
            file: magic-modules/.ci/magic-modules/branch.yml
            # consumes: magic-modules-branched
            # produces: magic-modules-branched (but with a different branch, if the other one is taken).
          - try:
              get: maybe-get-existing-magic-modules-branch
              resource: magic-modules
              params:
                branch_file: magic-modules-branched/branchname
              on_success:
                task: use-sha-instead-of-pr-name
                file: magic-modules/.ci/magic-modules/branch.yml
                params:
                  USE_SHA: true
            # consumes: magic-modules-branched
            # produces: terraform-generated
          - task: generate-terraform
            file: magic-modules-branched/.ci/magic-modules/generate-terraform.yml
            # Puts 'terraform-generated' into the robot's fork.
          - put: terraform-intermediate
            params:
                repository: terraform-generated
                branch_file: magic-modules-branched/branchname
                only_if_diff: true
                force: true
            # consumes: magic-modules-branched
            # produces: magic-modules-submodules
          - task: point-to-submodules
            file: magic-modules-branched/.ci/magic-modules/point-to-submodules.yml
            params:
              # This needs to match the username for the 'terraform-intermediate' resource.
                GH_USERNAME: ((github-account.username))
                CREDS: ((repo-key.private_key))
          # This 'put' needs to go below all the submodules because it has a commit which
          # points to those submodules.
          - put: magic-modules
            params:
                repository: magic-modules-submodules
                branch_file: magic-modules-branched/branchname
                only_if_diff: true
                force: true

    - name: terraform-test
      plan:
          - aggregate:
              - get: magic-modules
                version: every
                trigger: true
                params:
                    submodules: [build/terraform]
                passed: [mm-generate]
          - task: test
            file: magic-modules/.ci/unit-tests/task.yml

    - name: create-prs
      plan:
          - get: magic-modules
            version: every
            # trigger: true
            params:
                submodules: [build/terraform]
            passed: [terraform-test, mm-generate]
          - get: mm-initial-pr
            resource: magic-modules-new-prs
            passed: [mm-generate]
            version: every
          # TODO(ndmckinley): This will unconditionally attempt to create/update a PR.
          # Before we set it to run automatically, we need to add checks to see if a PR
          # needs to be generated.
          #
          # This task either uses the 'hub' cli to create a PR from the generated repo,
          # or, if a PR already exists, it uses 'git branch -f' to update the branch
          # that PR is from to point at the commit generated earlier from this run
          # of the pipeline.
          - task: create-or-update-pr
            file: magic-modules/.ci/magic-modules/create-pr.yml
            params:
                GITHUB_TOKEN: ((github-account.password))
                # This is what tells us which terraform repo to write PRs against - this
                # is what you change if you want to test this in a non-live environment.
                TERRAFORM_REPO: terraform-providers/terraform-provider-google
            on_failure:
              put: magic-modules-new-prs
              params:
                  status: failure
                  path: mm-initial-pr
          # This will be a no-op the first time through the pipeline.  This pushes the updated
          # branch named "codegen-pr-$MM_PR_NUMBER" to the downstream terraform repo.  The
          # first time through the pipeline, that branch is unchanged by the create-prs task,
          # because a new PR has just been created from that branch.  The second time through
          # the pipeline (when a PR needs to be updated), this does that updating by pushing
          # the new code to the repository/branch from which a pull request is already open.
          - put: terraform-intermediate
            params:
              repository: magic-modules-with-comment/build/terraform
              branch_file: magic-modules-with-comment/original_pr_branch_name
              # Every time a change runs through this pipeline, it will generate a commit with
              # a different hash - the hash includes timestamps.  Therefore, even if there's no
              # code diff, this push will update terraform's pending PR on every update to the
              # magic-modules PR.  With this 'only_if_diff' feature, if the change to the 
              # magic-modules PR does not require an update to the terraform PR, this will
              # not push the update even though the commit hashes are different.
              only_if_diff: true
              force: true
          # This isn't load-bearing - it's just aesthetic.  It will also be a no-op the first
          # time through, it works the same way as the preceding push.
          - put: magic-modules
            params:
              repository: magic-modules-with-comment/build/terraform
              branch_file: magic-modules-with-comment/original_pr_branch_name
              only_if_diff: true
              force: true
          # Once everything is done and working, post the updated information to the
          # magic-modules PR.
          - put: magic-modules-new-prs
            params:
                status: success
                path: mm-initial-pr
                comment: magic-modules-with-comment/pr_comment

    - name: merge-prs
      plan:
          - get: mm-approved-prs
          - task: merge-and-update
            file: mm-approved-prs/.ci/magic-modules/merge.yml
            params:
                CREDS: ((repo-key.private_key))
          # TODO(ndmckinley): This will work to update the magic-modules PR *if* the original PR
          # was opened from the magic-modules repository.  That's not always going to be
          # true - figure out what to do if, for instance, we can't modify the PR.
          - put: magic-modules-gcp
            params:
                repository: mm-output
                branch_file: mm-approved-prs/.git/branch
                only_if_diff: true
          - put: mm-approved-prs
            params:
                path: mm-output
                status: success
                merge:
                    method: squash
                    commit_msg: mm-output/commit_message

    - name: create-pr-image
      plan:
          - get: magic-modules
          - put: nmckinley-pr
            params:
              build: magic-modules/.ci/containers/pull-request

    - name: test-terraform-pr
      plan:
          - aggregate:
              - get: magic-modules
              - get: terraform
                resource: terraform-pr
                version: every
                trigger: true
          - task: test
            file: magic-modules/.ci/unit-tests/test-terraform.yml
            on_failure:
              put: terraform-pr
              params:
                path: terraform-pr
                status: failure
            on_success:
              put: terraform-pr
              params:
                path: terraform-pr
                status: success
