{% import "vars.tmpl" as vars %}

# These resource types are here until the PRs get merged in upstream.  :)
resource_types:
    - name: git-branch
      type: docker-image
      source:
          # Note: resource types cannot use credhub substitution - "nmckinley" is hardcoded here.
          repository: nmckinley/concourse-git-resource
          tag: v0.1.7

    - name: github-pull-request
      type: docker-image
      source:
          repository: nmckinley/concourse-github-pr-resource
          tag: v0.1.14

resources:
    - name: magic-modules
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/magic-modules.git
          private_key: ((repo-key.private_key))

    - name: magic-modules-gcp
      type: git-branch
      source:
          uri: git@github.com:GoogleCloudPlatform/magic-modules.git
          private_key: ((repo-key.private_key))

    - name: magic-modules-external-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))

    - name: magic-modules-new-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))
          authorship_restriction: true
          no_label: automerged

{% for v in vars.terraform_v.itervalues() %}
    - name: {{ v.short_name }}-intermediate
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/{{ v.provider_name }}.git
          private_key: ((repo-key.private_key))
{% endfor %}

    - name: ansible-intermediate
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/ansible.git
          private_key: ((repo-key.private_key))

    - name: inspec-intermediate
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/inspec-gcp.git
          private_key: ((repo-key.private_key))

    - name: mm-approved-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))
          only_mergeable: true
          require_review_approval: true
          check_dependent_prs: true
          label: downstream-generated

jobs:
    - name: authorize-single-rev
      plan:
          - get: magic-modules-external-prs
            trigger: false
          - put: magic-modules-new-prs
            params:
                status: pending
                path: magic-modules-external-prs

    - name: mm-generate
      plan:
          - get: magic-modules
            resource: magic-modules-new-prs
            version: every
            trigger: true
            params:
              fetch_merge: true
            # consumes: magic-modules (because that's where the code is)
            # products: patches
          - aggregate:
            - task: get-merged-patches
              file: magic-modules/.ci/magic-modules/get-merged-patches.yml
              params:
                GH_TOKEN: ((github-account.password))
              # consumes: magic-modules (detached HEAD)
              # produces: magic-modules-branched (new branch, with submodule)
            - task: branch-magic-modules
              file: magic-modules/.ci/magic-modules/branch.yml
              params:
                GH_TOKEN: ((github-account.password))
                CREDS: ((repo-key.private_key))
                ALL_SUBMODULES: {{' '.join(vars.all_submodules)}}
            - put: magic-modules-new-prs
              params:
                status: pending
                path: magic-modules
          - aggregate:
            {% for k, v in vars.terraform_v.iteritems() %}
            - do:
                # consumes: magic-modules-branched
                # produces: terraform-generated
              - task: generate-{{v.short_name}}
                file: magic-modules-branched/.ci/magic-modules/generate-terraform.yml
                params:
                  VERSION: {{k}}
                  PROVIDER_NAME: {{v.provider_name}}
                  SHORT_NAME: {{v.short_name}}
              # Puts 'terraform-generated' into the robot's fork.
              - aggregate:
                - put: {{v.short_name}}-intermediate
                  params:
                      repository: terraform-generated/{{k}}
                      branch_file: magic-modules-branched/branchname
                      only_if_diff: true
                      force: true
            {% endfor %}
            - do:
                # consumes: magic-modules-branched
                # produces: ansible-generated
              - task: generate-ansible
                file: magic-modules-branched/.ci/magic-modules/generate-ansible.yml
              # Puts 'ansible-generated' into the robot's fork.
              - put: ansible-intermediate
                params:
                    repository: ansible-generated
                    branch_file: magic-modules-branched/branchname
                    only_if_diff: true
                    force: true
            - do:
                # consumes: magic-modules-branched
                # produces: inspec-generated
              - task: generate-inspec
                file: magic-modules-branched/.ci/magic-modules/generate-inspec.yml
              # Puts 'inspec-generated' into the robot's fork.
              - put: inspec-intermediate
                params:
                    repository: inspec-generated
                    branch_file: magic-modules-branched/branchname
                    only_if_diff: true
                    force: true
            on_failure:
              put: magic-modules-new-prs
              params:
                status: failure
                context: code-generation
                path: magic-modules

            # consumes: magic-modules-branched
            # produces: magic-modules-submodules
          - task: point-to-submodules
            file: magic-modules-branched/.ci/magic-modules/point-to-submodules.yml
            params:
                # This needs to match the username for the 'intermediate' resources.
                GH_USERNAME: ((github-account.username))
                CREDS: ((repo-key.private_key))
                TERRAFORM_VERSIONS: "{{','.join(vars.terraform_properties_serialized)}}"
                TERRAFORM_ENABLED: true
                ANSIBLE_ENABLED: true
                INSPEC_ENABLED: true

          # Push the magic modules branch that contains the updated submodules.
          - put: magic-modules
            params:
                repository: magic-modules-submodules
                branch_file: magic-modules-branched/branchname
                force: true

    - name: terraform-test
      plan:
        - get: magic-modules
          version: every
          trigger: true
          params:
              submodules: [{{','.join(vars.terraform_submodules)}}]
          passed: [mm-generate]
        - aggregate:
          {% for v in vars.terraform_v.itervalues() %}
          - task: test-{{v.short_name}}
            file: magic-modules/.ci/unit-tests/task.yml
            timeout: 30m
            params:
              PROVIDER_NAME: {{v.provider_name}}
              SHORT_NAME: {{v.short_name}}
              TEST_DIR: {{v.test_dir}}
          {% endfor %}
          on_failure:
              do:
              - get: magic-modules-new-prs
                passed: [mm-generate]
              - put: magic-modules-new-prs
                params:
                  status: failure
                  context: terraform-tests
                  path: magic-modules-new-prs

    - name: ansible-test
      plan:
        - get: magic-modules
          version: every
          trigger: true
          params:
              submodules: [build/ansible]
          passed: [mm-generate]
        - task: test
          file: magic-modules/.ci/unit-tests/ansible.yml
          timeout: 30m
          on_failure:
              do:
              - get: magic-modules-new-prs
                passed: [mm-generate]
              - put: magic-modules-new-prs
                params:
                  status: failure
                  context: ansible-tests
                  path: magic-modules-new-prs

    - name: inspec-test
      plan:
        - get: magic-modules
          version: every
          trigger: true
          params:
              submodules: [build/inspec]
          passed: [mm-generate]
        - task: test
          file: magic-modules/.ci/unit-tests/inspec.yml
          params:
            TERRAFORM_KEY: ((terraform-key))
          timeout: 30m
          on_failure:
              do:
              - get: magic-modules-new-prs
                passed: [mm-generate]
              - put: magic-modules-new-prs
                params:
                  status: failure
                  context: inspec-tests
                  path: magic-modules-new-prs

    - name: create-prs
      plan:
          - get: magic-modules
            version: every
            trigger: true
            params:
                submodules: {{vars.all_submodules_yaml_format}}
            passed:
              - mm-generate
              - terraform-test
              - ansible-test
              - inspec-test
          - get: mm-initial-pr
            resource: magic-modules-new-prs
            passed: [mm-generate]
            version: every
          # This task either uses the 'hub' cli to create a PR from the generated repo,
          # or, if a PR already exists, it uses 'git branch -f' to update the branch
          # that PR is from to point at the commit generated earlier from this run
          # of the pipeline.
          - task: create-or-update-pr
            file: magic-modules/.ci/magic-modules/create-pr.yml
            params:
                GITHUB_TOKEN: ((github-account.password))
                # This is what tells us which terraform repo to write PRs against - this
                # is what you change if you want to test this in a non-live environment.
                TERRAFORM_REPO_USER: terraform-providers
                ANSIBLE_REPO_USER: modular-magician
                INSPEC_REPO_USER: modular-magician
                TERRAFORM_VERSIONS: "{{','.join(vars.terraform_properties_serialized)}}"
            on_failure:
              put: magic-modules-new-prs
              params:
                  status: failure
                  context: pr-creation
                  path: mm-initial-pr
          # This will be a no-op the first time through the pipeline.  This pushes the updated
          # branch named "codegen-pr-$MM_PR_NUMBER" to the downstream terraform repo.  The
          # first time through the pipeline, that branch is unchanged by the create-prs task,
          # because a new PR has just been created from that branch.  The second time through
          # the pipeline (when a PR needs to be updated), this does that updating by pushing
          # the new code to the repository/branch from which a pull request is already open.
          - aggregate:
            {% for v in vars.terraform_v.itervalues() %}
            - put: {{v.short_name}}-intermediate
              params:
                repository: magic-modules-with-comment/build/{{ v.short_name }}
                branch_file: magic-modules-with-comment/original_pr_branch_name
                # Every time a change runs through this pipeline, it will generate a commit with
                # a different hash - the hash includes timestamps.  Therefore, even if there's no
                # code diff, this push will update terraform's pending PR on every update to the
                # magic-modules PR.  With this 'only_if_diff' feature, if the change to the
                # magic-modules PR does not require an update to the terraform PR, this will
                # not push the update even though the commit hashes are different.
                only_if_diff: true
                force: true
            {% endfor %}
            - put: ansible-intermediate
              params:
                repository: magic-modules-with-comment/build/ansible
                branch_file: magic-modules-with-comment/original_pr_branch_name
                # See comment on terraform-intermediate
                only_if_diff: true
                force: true
            - put: inspec-intermediate
              params:
                repository: magic-modules-with-comment/build/inspec
                branch_file: magic-modules-with-comment/original_pr_branch_name
                # See comment on terraform-intermediate
                only_if_diff: true
                force: true

          # This isn't load-bearing - it's just aesthetic.  It will also be a no-op the first
          # time through, it works the same way as the preceding push.
          - put: magic-modules
            params:
              repository: magic-modules-with-comment/
              branch_file: magic-modules-with-comment/original_pr_branch_name
              only_if_diff: true
              force: true
          # Once everything is done and working, post the updated information to the
          # magic-modules PR.
          - put: magic-modules-new-prs
            params:
                status: success
                label: downstream-generated
                path: mm-initial-pr
                comment: magic-modules-with-comment/pr_comment

    - name: merge-prs
      plan:
          - get: mm-approved-prs
          - put: mm-approved-prs
            params:
              path: mm-approved-prs
              status: success
              label: automerged
          - task: rebase-and-update
            file: mm-approved-prs/.ci/magic-modules/merge.yml
            params:
                CREDS: ((repo-key.private_key))
                ALL_SUBMODULES: "{{' '.join(vars.all_submodules)}}"
          # TODO(ndmckinley): This will work to update the magic-modules PR *if* the original PR
          # was opened from the magic-modules repository.  That's not always going to be
          # true - figure out what to do if, for instance, we can't modify the PR.
          # Update: right now, we just require everyone to push to the GCP repo.  That's not
          # been a problem yet.
          - put: magic-modules-gcp
            params:
                repository: mm-output
                branch_file: mm-approved-prs/.git/branch
                only_if_diff: true
                force: true
          - put: mm-approved-prs
            params:
                path: mm-output
                status: success
          - put: mm-approved-prs
            params:
                path: mm-output
                status: success
                merge:
                    method: squash
                    commit_msg: mm-output/commit_message
    - name: inspec-integration-test
      serial: true
      plan:
        - get: magic-modules-new-prs
        - task: inspec-integration
          file: magic-modules-new-prs/.ci/acceptance-tests/inspec-integration.yml
          params:
            TERRAFORM_KEY: ((terraform-key))
