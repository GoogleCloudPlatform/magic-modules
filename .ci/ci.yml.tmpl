{% set chef_modules = ['_bundle', 'auth', 'compute', 'sql', 'storage', 'spanner', 'container', 'dns', 'iam'] %}
{% set puppet_modules = ['_bundle', 'auth', 'bigquery', 'compute', 'sql', 'storage', 'spanner', 'container', 'dns', 'pubsub', 'resourcemanager'] %}
{% set terraform_enabled = true %}
{% set ansible_enabled = true %}
{% macro names_as_list(repo, names) -%}
{% for name in names %}
build/{{repo}}/{{name}} 
{%- endfor %}
{% endmacro -%}
{% set puppet_submodules = names_as_list('puppet', puppet_modules).split() %}
{% set chef_submodules = names_as_list('chef', chef_modules).split() %}
{%
  set all_submodules = puppet_submodules + chef_submodules +
     (['build/terraform'] if terraform_enabled else []) +
     (['build/ansible'] if ansible_enabled else [])
%}
{% set all_submodules_yaml_format = '[' + ','.join(all_submodules) + ']' %}
{% set chef_test_excludes = {
    'iam': [
      'spec/service_account_key_spec.rb',
      'spec/service_account_spec.rb'
    ],
    'compute': [
      'spec/vpn_tunnel_spec.rb'
    ]
  }
%}
{% set puppet_test_excludes = {
  'compute': [
      'spec/gcompute_instance_group_manager_provider_spec.rb',
      'spec/gcompute_instance_provider_spec.rb',
      'spec/gcompute_instance_template_provider_spec.rb',
      'spec/gcompute_target_https_proxy_provider_spec.rb',
      'spec/gcompute_target_ssl_proxy_provider_spec.rb',
      'spec/gcompute_vpn_tunnel_provider_spec.rb',
      'spec/puppetlint_spec.rb']
  }
%}


# These resource types are here until the PRs get merged in upstream.  :)
resource_types:
    - name: git-branch
      type: docker-image
      source:
          # Note: resource types cannot use credhub substitution - "nmckinley" is hardcoded here.
          repository: nmckinley/concourse-git-resource
          tag: v0.1.7

    - name: github-pull-request
      type: docker-image
      source:
          repository: nmckinley/concourse-github-pr-resource
          tag: v0.1.10

    - name: gcs-resource
      type: docker-image
      source:
        repository: frodenas/gcs-resource

resources:
    - name: magic-modules
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/magic-modules.git
          private_key: ((repo-key.private_key))

    - name: magic-modules-gcp
      type: git-branch
      source:
          uri: git@github.com:GoogleCloudPlatform/magic-modules.git
          private_key: ((repo-key.private_key))

    - name: magic-modules-external-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))

    - name: magic-modules-new-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))
          authorship_restriction: true

{% if terraform_enabled %}
    - name: terraform-intermediate
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/terraform-provider-google.git
          private_key: ((repo-key.private_key))
{% endif %}

{% if ansible_enabled %}
    - name: ansible-intermediate
      type: git-branch
      source:
          uri: git@github.com:((github-account.username))/ansible.git
          private_key: ((repo-key.private_key))
{% endif %}

{% for module in puppet_modules %}
    - name: puppet-{{module}}-intermediate
      type: git-branch
      source:
{% if module == '_bundle' %}
        uri: git@github.com:((github-account.username))/puppet-google.git
{% else %}
        uri: git@github.com:((github-account.username))/puppet-google-{{module}}.git
{% endif %}
        private_key: ((repo-key.private_key))
{% endfor %}

{% for module in chef_modules %}
    - name: chef-{{module}}-intermediate
      type: git-branch
      source:
{% if module == '_bundle' %}
        uri: git@github.com:((github-account.username))/chef-google.git
{% else %}
        uri: git@github.com:((github-account.username))/chef-google-{{module}}.git
{% endif %}
        private_key: ((repo-key.private_key))
{% endfor %}

    - name: terraform-head
      type: git-branch
      source:
          uri: git@github.com:terraform-providers/terraform-provider-google.git
          private_key: ((repo-key.private_key))

    - name: mm-approved-prs
      type: github-pull-request
      source:
          repo: GoogleCloudPlatform/magic-modules
          private_key: ((repo-key.private_key))
          access_token: ((github-account.password))
          only_mergeable: true
          require_review_approval: true
          check_dependent_prs: true
          label: downstream-generated

    - name: nmckinley-pr
      type: docker-image
      source:
        repository: ((dockerhub-account.username))/concourse-github-pr-resource
        username: ((dockerhub-account.username))
        password: ((dockerhub-account.password))
        
    - name: terraform-pr
      type: github-pull-request
      source:
        repo: terraform-providers/terraform-provider-google
        private_key: ((repo-key.private_key))
        access_token: ((github-account.password))
        label: autogenerated

    - name: gcp-bucket
      type: gcs-resource
      source:
        bucket: ((gcp-bucket))
        json_key: ((gcp-bucket-json-key))
        regexp: dist/terraform-provider-google.*

    - name: night-trigger
      type: time
      source:
        start: 11:00 PM
        stop: 11:59 PM
        location: America/Los_Angeles

jobs:
    - name: authorize-single-rev
      plan:
          - get: magic-modules-external-prs
            version: every
            trigger: false
          - put: magic-modules-new-prs
            params:
                status: pending
                path: magic-modules-external-prs

    - name: mm-generate
      plan:
          - get: magic-modules
            resource: magic-modules-new-prs
            version: every
            trigger: true
            params:
              fetch_merge: true
            # consumes: magic-modules (because that's where the code is)
            # products: patches
          - aggregate:
            - task: get-merged-patches
              file: magic-modules/.ci/magic-modules/get-merged-patches.yml
              params:
                GH_TOKEN: ((github-account.password))
              # consumes: magic-modules (detached HEAD)
              # produces: magic-modules-branched (new branch, with submodule)
            - task: branch-magic-modules
              file: magic-modules/.ci/magic-modules/branch.yml
              params:
                GH_TOKEN: ((github-account.password))
                CREDS: ((repo-key.private_key))
                ALL_SUBMODULES: {{' '.join(all_submodules)}}
            - put: magic-modules-new-prs
              params:
                status: pending
                path: magic-modules
          - aggregate:
          {% if terraform_enabled %}
            - do:
                # consumes: magic-modules-branched
                # produces: terraform-generated
              - task: generate-terraform
                file: magic-modules-branched/.ci/magic-modules/generate-terraform.yml
              # Puts 'terraform-generated' into the robot's fork.
              - put: terraform-intermediate
                params:
                    repository: terraform-generated
                    branch_file: magic-modules-branched/branchname
                    only_if_diff: true
                    force: true
          {% endif %}
          {% if ansible_enabled %}
            - do:
                # consumes: magic-modules-branched
                # produces: ansible-generated
              - task: generate-ansible
                file: magic-modules-branched/.ci/magic-modules/generate-ansible.yml
              # Puts 'ansible-generated' into the robot's fork.
              - put: ansible-intermediate
                params:
                    repository: ansible-generated
                    branch_file: magic-modules-branched/branchname
                    only_if_diff: true
                    force: true
          {% endif %}
          {% if puppet_modules %}
            - do:
                # consumes: magic-modules-branched
                # produces: puppet-generated
              - task: generate-puppet
                file: magic-modules-branched/.ci/magic-modules/generate-puppet.yml
                params:
                  PRODUCTS: {{','.join(puppet_modules)}}
              - aggregate:
                {% for module in puppet_modules %}
                - put: puppet-{{module}}-intermediate
                  params:
                      repository: puppet-generated/{{module}}
                      branch_file: magic-modules-branched/branchname
                      only_if_diff: true
                      force: true
                {% endfor %}
          {% endif %}

          {% if chef_modules %}
            - do:
                # consumes: magic-modules-branched
                # produces: chef-generated
              - task: generate-chef
                file: magic-modules-branched/.ci/magic-modules/generate-chef.yml
                params:
                  PRODUCTS: {{','.join(chef_modules)}}
              - aggregate:
                {% for module in chef_modules %}
                - put: chef-{{module}}-intermediate
                  params:
                      repository: chef-generated/{{module}}
                      branch_file: magic-modules-branched/branchname
                      only_if_diff: true
                      force: true
                {% endfor %}
          {% endif %}
            on_failure:
              put: magic-modules-new-prs
              params:
                status: failure
                context: code-generation
                path: magic-modules

            # consumes: magic-modules-branched
            # produces: magic-modules-submodules
          - task: point-to-submodules
            file: magic-modules-branched/.ci/magic-modules/point-to-submodules.yml
            params:
                # This needs to match the username for the 'intermediate' resources.
                GH_USERNAME: ((github-account.username))
                CREDS: ((repo-key.private_key))
                PUPPET_MODULES: {{','.join(puppet_modules)}}
                CHEF_MODULES: {{','.join(chef_modules)}}
                TERRAFORM_ENABLED: {{terraform_enabled}}
                ANSIBLE_ENABLED: {{ansible_enabled}}

          # Push the magic modules branch that contains the updated submodules.
          - put: magic-modules
            params:
                repository: magic-modules-submodules
                branch_file: magic-modules-branched/branchname
                force: true

{% if terraform_enabled %}
    - name: terraform-test
      plan:
        - get: magic-modules
          version: every
          trigger: true
          params:
              submodules: [build/terraform]
          passed: [mm-generate]
        - task: test
          file: magic-modules/.ci/unit-tests/task.yml
          timeout: 30m
          on_failure:
              do:
              - get: magic-modules-new-prs
                passed: [mm-generate]
              - put: magic-modules-new-prs
                params:
                  status: failure
                  context: terraform-tests
                  path: magic-modules-new-prs
{% endif %}
{% if ansible_enabled %}
    - name: ansible-test
      plan:
        - get: magic-modules
          version: every
          trigger: true
          params:
              submodules: [build/ansible]
          passed: [mm-generate]
        - task: test
          file: magic-modules/.ci/unit-tests/ansible.yml
          timeout: 30m
          on_failure:
              do:
              - get: magic-modules-new-prs
                passed: [mm-generate]
              - put: magic-modules-new-prs
                params:
                  status: failure
                  context: ansible-tests
                  path: magic-modules-new-prs
{% endif %}
    - name: puppet-test
      plan:
        - get: magic-modules
          version: every
          trigger: true
          params:
              submodules:
              {% for module in puppet_submodules %}
                - {{module}}
              {% endfor %}
          passed: [mm-generate]
        - aggregate:
          {% for module in puppet_modules %}
          - task: test-{{module}}
            file: magic-modules/.ci/unit-tests/puppet.yml
            timeout: 30m
            params:
              PRODUCT: {{module}}
            {%- if puppet_test_excludes.get(module) %}
              EXCLUDE_PATTERN: {{','.join(puppet_test_excludes[module])}}
            {%- endif %}
          {% endfor %}
          on_failure:
              do:
              - get: magic-modules-new-prs
                passed: [mm-generate]
              - put: magic-modules-new-prs
                params:
                  status: failure
                  context: puppet-tests
                  path: magic-modules-new-prs

    - name: chef-test
      plan:
        - get: magic-modules
          version: every
          trigger: true
          params:
              submodules:
              {% for module in chef_submodules %}
                - {{module}}
              {% endfor %}
          passed: [mm-generate]
        - aggregate:
          {% for module in chef_modules %}
          - task: test-{{module}}
            file: magic-modules/.ci/unit-tests/chef.yml
            timeout: 30m
            params:
              PRODUCT: {{module}}
            {%- if chef_test_excludes.get(module) %}
              EXCLUDE_PATTERN: {{','.join(chef_test_excludes[module])}}
            {%- endif %}
          {% endfor %}
          on_failure:
              do:
              - get: magic-modules-new-prs
                passed: [mm-generate]
              - put: magic-modules-new-prs
                params:
                  status: failure
                  context: chef-tests
                  path: magic-modules-new-prs

    - name: create-prs
      plan:
          - get: magic-modules
            version: every
            trigger: true
            params:
                submodules: {{all_submodules_yaml_format}}
            passed:
              - mm-generate
              {%- if chef_modules %}
              - chef-test
              {%- endif -%}
              {%- if puppet_modules %}
              - puppet-test
              {%- endif -%}
              {%- if terraform_enabled %}
              - terraform-test
              {%- endif %}
              {%- if ansible_enabled %}
              - ansible-test
              {%- endif %}
          - get: mm-initial-pr
            resource: magic-modules-new-prs
            passed: [mm-generate]
            version: every
          # This task either uses the 'hub' cli to create a PR from the generated repo,
          # or, if a PR already exists, it uses 'git branch -f' to update the branch
          # that PR is from to point at the commit generated earlier from this run
          # of the pipeline.
          - task: create-or-update-pr
            file: magic-modules/.ci/magic-modules/create-pr.yml
            params:
                GITHUB_TOKEN: ((github-account.password))
                # This is what tells us which terraform repo to write PRs against - this
                # is what you change if you want to test this in a non-live environment.
                {%- if terraform_enabled %}
                TERRAFORM_REPO_USER: terraform-providers
                {%- endif %}
                {%- if ansible_enabled %}
                ANSIBLE_REPO_USER: modular-magician
                {%- endif %}
                {%- if puppet_modules %}
                PUPPET_REPO_USER: GoogleCloudPlatform
                PUPPET_MODULES: {{','.join(puppet_modules)}}
                {%- endif %}
                {%- if chef_modules %}
                CHEF_REPO_USER: GoogleCloudPlatform
                CHEF_MODULES: {{','.join(chef_modules)}}
                {%- endif %}
            on_failure:
              put: magic-modules-new-prs
              params:
                  status: failure
                  context: pr-creation
                  path: mm-initial-pr
          # This will be a no-op the first time through the pipeline.  This pushes the updated
          # branch named "codegen-pr-$MM_PR_NUMBER" to the downstream terraform repo.  The
          # first time through the pipeline, that branch is unchanged by the create-prs task,
          # because a new PR has just been created from that branch.  The second time through
          # the pipeline (when a PR needs to be updated), this does that updating by pushing
          # the new code to the repository/branch from which a pull request is already open.
          - aggregate:
          {% if terraform_enabled %}
            - put: terraform-intermediate
              params:
                repository: magic-modules-with-comment/build/terraform
                branch_file: magic-modules-with-comment/original_pr_branch_name
                # Every time a change runs through this pipeline, it will generate a commit with
                # a different hash - the hash includes timestamps.  Therefore, even if there's no
                # code diff, this push will update terraform's pending PR on every update to the
                # magic-modules PR.  With this 'only_if_diff' feature, if the change to the
                # magic-modules PR does not require an update to the terraform PR, this will
                # not push the update even though the commit hashes are different.
                only_if_diff: true
                force: true
          {% endif %}
          {% if ansible_enabled %}
            - put: ansible-intermediate
              params:
                repository: magic-modules-with-comment/build/ansible
                branch_file: magic-modules-with-comment/original_pr_branch_name
                # See comment on terraform-intermediate
                only_if_diff: true
                force: true
          {% endif %}
          {% for module in puppet_modules %}
            - put: puppet-{{module}}-intermediate
              params:
                repository: magic-modules-with-comment/build/puppet/{{module}}
                branch_file: magic-modules-with-comment/original_pr_branch_name
                only_if_diff: true
                force: true
          {% endfor %}

          {% for module in chef_modules %}
            - put: chef-{{module}}-intermediate
              params:
                repository: magic-modules-with-comment/build/chef/{{module}}
                branch_file: magic-modules-with-comment/original_pr_branch_name
                only_if_diff: true
                force: true
          {% endfor %}

          # This isn't load-bearing - it's just aesthetic.  It will also be a no-op the first
          # time through, it works the same way as the preceding push.
          - put: magic-modules
            params:
              repository: magic-modules-with-comment/
              branch_file: magic-modules-with-comment/original_pr_branch_name
              only_if_diff: true
              force: true
          # Once everything is done and working, post the updated information to the
          # magic-modules PR.
          - put: magic-modules-new-prs
            params:
                status: success
                label: downstream-generated
                path: mm-initial-pr
                comment: magic-modules-with-comment/pr_comment

    - name: merge-prs
      plan:
          - get: mm-approved-prs
            params:
              fetch_merge: true
          - task: merge-and-update
            file: mm-approved-prs/.ci/magic-modules/merge.yml
            params:
                CREDS: ((repo-key.private_key))
                ALL_SUBMODULES: "{{' '.join(all_submodules)}}"
          # TODO(ndmckinley): This will work to update the magic-modules PR *if* the original PR
          # was opened from the magic-modules repository.  That's not always going to be
          # true - figure out what to do if, for instance, we can't modify the PR.
          - put: magic-modules-gcp
            params:
                repository: mm-output
                branch_file: mm-approved-prs/.git/branch
                only_if_diff: true
          - put: mm-approved-prs
            params:
                path: mm-output
                status: success
                merge:
                    method: squash
                    commit_msg: mm-output/commit_message

    - name: create-pr-image
      plan:
          - get: magic-modules
          - put: nmckinley-pr
            params:
              build: magic-modules/.ci/containers/pull-request

    - name: test-terraform-pr
      plan:
          - aggregate:
              - get: magic-modules
              - get: terraform
                resource: terraform-pr
                version: every
                trigger: true
          - task: test
            file: magic-modules/.ci/unit-tests/test-terraform.yml
            on_failure:
              put: terraform-pr
              params:
                path: terraform-pr
                status: failure
            on_success:
              put: terraform-pr
              params:
                path: terraform-pr
                status: success

    - name: nightly-build
      plan:
          - get: night-trigger
            trigger: true
          - get: magic-modules-gcp
          - get: terraform-head

          - task: build
            file: magic-modules-gcp/.ci/magic-modules/generate-terraform-all-platforms.yml

          {% for arch in ['darwin_amd64', 'freebsd_386', 'freebsd_amd64', 'freebsd_arm',
          'linux_386', 'linux_amd64', 'linux_arm', 'openbsd_386', 'openbsd_amd64',
          'solaris_amd64', 'windows_386.exe', 'windows_amd64.exe'] %}
          - put: gcp-bucket
            params:
              file: dist/terraform-provider-google.{{arch}}
          {% endfor %}
