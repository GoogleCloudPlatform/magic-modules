# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: Sql
display_name: Google Cloud SQL
versions:
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://www.googleapis.com/sql/v1beta4/
scopes:
  - https://www.googleapis.com/auth/sqlservice.admin
objects:
  # 'BackupRun' is not idempotent and will not be covered.
  # | - !ruby/object:Api::Resource
  # |   name: 'BackupRun'
  # |   kind: 'sql#backupRun'
  # |   base_url: projects/{{project}}/instances/{{instance}}/backupRuns
  - !ruby/object:Api::Resource
    name: 'Instance'
    kind: 'sql#instance'
    base_url: projects/{{project}}/instances
    description: |
      Represents a Cloud SQL instance. Cloud SQL instances are SQL databases
      hosted in Google's cloud. The Instances resource provides methods for
      common configuration and management tasks.
<%= indent(compile('templates/async.yaml.erb'), 4) %>
    properties:
      - !ruby/object:Api::Type::Enum
        name: 'backendType'
        description: |
          * FIRST_GEN: First Generation instance. MySQL only.
          * SECOND_GEN: Second Generation instance or PostgreSQL instance.
          * EXTERNAL: A database server that is not managed by Google.
        values:
          - :FIRST_GEN
          - :SECOND_GEN
          - :EXTERNAL
      - !ruby/object:Api::Type::String
        name: 'connectionName'
        description: |
          Connection name of the Cloud SQL instance used in connection strings.
      # currentDiskSize (long) [DEPRECATED]
      # | - !ruby/object:Api::Type::Long
      # |   name: 'currentDiskSize'
      # |   description: |
      # |     The current disk usage of the instance in bytes. This property has
      # |     been deprecated. Users should use the
      # |     "cloudsql.googleapis.com/database/disk/bytes_used" metric in Cloud
      # |     Monitoring API instead. Please see
      # |     https://groups.google.com/d/msg/google-cloud-sql-announce/
      # |       I_7-F9EBhT0/BtvFtdFeAgAJ for details.
      - !ruby/object:Api::Type::Enum
        name: 'databaseVersion'
        description: |
          The database engine type and version. For First Generation instances,
          can be MYSQL_5_5, or MYSQL_5_6. For Second Generation instances, can
          be MYSQL_5_6 or MYSQL_5_7. Defaults to MYSQL_5_6.
          PostgreSQL instances: POSTGRES_9_6

          The databaseVersion property can not be changed after instance
          creation.
        values:
          - :MYSQL_5_5
          - :MYSQL_5_6
          - :MYSQL_5_7
          - :POSTGRES_9_6
      - !ruby/object:Api::Type::NestedObject
        name: 'failoverReplica'
        description: |
          The name and status of the failover replica. This property is
          applicable only to Second Generation instances.
        properties:
          - !ruby/object:Api::Type::Boolean
            name: 'available'
            description: |
              The availability status of the failover replica. A false status
              indicates that the failover replica is out of sync. The master
              can only failover to the failover replica when the status is true.
            output: true
          - !ruby/object:Api::Type::String
            name: 'name'
            description: |
              The name of the failover replica. If specified at instance
              creation, a failover replica is created for the instance. The name
              doesn't include the project ID. This property is applicable only
              to Second Generation instances.
      - !ruby/object:Api::Type::Enum
        name: 'instanceType'
        description: |
          The instance type. This can be one of the following.
          * CLOUD_SQL_INSTANCE: A Cloud SQL instance that is not replicating
            from a master.
          * ON_PREMISES_INSTANCE: An instance running on the customer's
            premises.
          * READ_REPLICA_INSTANCE: A Cloud SQL instance configured as a
            read-replica.
        values:
          - :CLOUD_SQL_INSTANCE
          - :ON_PREMISES_INSTANCE
          - :READ_REPLICA_INSTANCE
      - !ruby/object:Api::Type::Array
        name: 'ipAddresses'
        description: 'The assigned IP addresses for the instance.'
        output: true
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: 'ipAddress'
              description: 'The IP address assigned.'
            - !ruby/object:Api::Type::Time
              name: 'timeToRetire'
              description: |
                The due time for this IP to be retired in RFC 3339 format, for
                example 2012-11-15T16:19:00.094Z. This field is only available
                when the IP is scheduled to be retired.
            - !ruby/object:Api::Type::Enum
              name: 'type'
              description: |
                The type of this IP address. A PRIMARY address is an address
                that can accept incoming connections. An OUTGOING address is the
                source address of connections originating from the instance, if
                supported.
              values:
                - :PRIMARY
                - :OUTGOING
      - !ruby/object:Api::Type::String
        name: 'ipv6Address'
        description: |
          The IPv6 address assigned to the instance. This property is applicable
          only to First Generation instances.
      - !ruby/object:Api::Type::String
        name: 'masterInstanceName'
        description: |
          The name of the instance which will act as master in the replication
          setup.
      - !ruby/object:Api::Type::Integer
        name: 'maxDiskSize'
        description: 'The maximum disk size of the instance in bytes.'
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
            Name of the Cloud SQL instance. This does not include the project
            ID.
        required: true
      # TODO(alexstephen): Investigate if worth to make this depend on compute's
      # region as a resource reference. (low priority, non launch blocker)
      - !ruby/object:Api::Type::String
        name: 'region'
        description: |
          The geographical region. Defaults to us-central or us-central1
          depending on the instance type (First Generation or Second
          Generation/PostgreSQL).
      - !ruby/object:Api::Type::NestedObject
        name: 'replicaConfiguration'
        description: |
          Configuration specific to failover replicas and read replicas.
        properties:
          - !ruby/object:Api::Type::Boolean
            name: 'failoverTarget'
            description: |
              Specifies if the replica is the failover target. If the field is
              set to true the replica will be designated as a failover replica.
              In case the master instance fails, the replica instance will be
              promoted as the new master instance.

              Only one replica can be specified as failover target, and the
              replica has to be in different zone with the master instance.
          # TODO(nelsonjr): Is this needed or output only?
          # | - !ruby/object:Api::Type::Constant
          # |   name: 'kind'
          # |   description: |
          # |     This is always sql#replicaConfiguration.
          # |   value: 'sql#replicaConfiguration'
          - !ruby/object:Api::Type::NestedObject
            name: 'mysqlReplicaConfiguration'
            description: |
              MySQL specific configuration when replicating from a MySQL
              on-premises master. Replication configuration information such as
              the username, password, certificates, and keys are not stored in
              the instance metadata.  The configuration information is used
              only to set up the replication connection and is stored by MySQL
              in a file named master.info in the data directory.
            properties:
              - !ruby/object:Api::Type::String
                name: 'caCertificate'
                description: |
                  PEM representation of the trusted CA's x509 certificate.
              - !ruby/object:Api::Type::String
                name: 'clientCertificate'
                description: |
                  PEM representation of the slave's x509 certificate
              - !ruby/object:Api::Type::String
                name: 'clientKey'
                description: |
                  PEM representation of the slave's private key. The
                  corresponding public key is encoded in the client's certificate.
              - !ruby/object:Api::Type::Integer
                name: 'connectRetryInterval'
                description: |
                  Seconds to wait between connect retries. MySQL's default is 60
                  seconds.
              - !ruby/object:Api::Type::String
                name: 'dumpFilePath'
                description: |
                  Path to a SQL dump file in Google Cloud Storage from which the
                  slave instance is to be created. The URI is in the form
                  gs://bucketName/fileName. Compressed gzip files (.gz) are
                  also supported. Dumps should have the binlog co-ordinates from
                  which replication should begin. This can be accomplished by
                  setting --master-data to 1 when using mysqldump.
              # TODO(nelsonjr): Is this needed or output only?
              # | - !ruby/object:Api::Type::Constant
              # |   name: 'kind'
              # |   description: 'This is always sql#mysqlReplicaConfiguration.'
              # |   value: 'sql#mysqlReplicaConfiguration'
              - !ruby/object:Api::Type::Integer
                name: 'masterHeartbeatPeriod'
                description: |
                  Interval in milliseconds between replication heartbeats.
              - !ruby/object:Api::Type::String
                name: 'password'
                description: |
                  The password for the replication connection.
              - !ruby/object:Api::Type::String
                name: 'sslCipher'
                description: |
                  A list of permissible ciphers to use for SSL encryption.
              - !ruby/object:Api::Type::String
                name: 'username'
                description: |
                  The username for the replication connection.
              - !ruby/object:Api::Type::Boolean
                name: 'verifyServerCertificate'
                description: |
                  Whether or not to check the master's Common Name value in the
                  certificate that it sends during the SSL handshake.
          - !ruby/object:Api::Type::Array
            name: 'replicaNames'
            description: |
              The replicas of the instance.
            item_type: Api::Type::String
          # TODO(nelsonjr): Parameter is unclear. Review this property when
          # http://b/62686412 is addressed.
          # | - !ruby/object:Api::Type::NestedObject
          # |   name: 'serverCaCert'
          # |   description: 'SSL configuration.'
          - !ruby/object:Api::Type::String
            name: 'serviceAccountEmailAddress'
            description: |
              The service account email address assigned to the instance. This
              property is applicable only to Second Generation instances.
      # TODO(nelsonjr): Add other settings properties
      - !ruby/object:Api::Type::NestedObject
        name: 'settings'
        description: 'The user settings.'
        properties:
          #- !ruby/object:Api::Type::Constant
          #  name: 'kind'
          #  value: 'sql#settings'
          - !ruby/object:Api::Type::NestedObject
            name: 'ipConfiguration'
            description: |
              The settings for IP Management. This allows to enable or disable
              the instance IP and manage which external networks can connect to
              the instance. The IPv4 address cannot be disabled for Second
              Generation instances.
            properties:
              - !ruby/object:Api::Type::Boolean
                name: 'ipv4Enabled'
                description: |
                  Whether the instance should be assigned an IP address or not.
              - !ruby/object:Api::Type::Array
                name: 'authorizedNetworks'
                description: |
                  The list of external networks that are allowed to connect to
                  the instance using the IP. In CIDR notation, also known as
                  'slash' notation (e.g. 192.168.100.0/24).
                item_type: !ruby/object:Api::Type::NestedObject
                  properties:
                    #- !ruby/object:Api::Type::Constant
                    #  name: 'kind'
                    #  value: 'sql#aclEntry'
                    - !ruby/object:Api::Type::Time
                      name: 'expirationTime'
                      description: |
                        The time when this access control entry expires in RFC
                        3339 format, for example 2012-11-15T16:19:00.094Z.
                    - !ruby/object:Api::Type::String
                      name: 'name'
                      description: 'An optional label to identify this entry.'
                    - !ruby/object:Api::Type::String
                      name: 'value'
                      description: |
                        The whitelisted value for the access control list. For
                        example, to grant access to a client from an external IP
                        (IPv4 or IPv6) address or subnet, use that address or
                        subnet here.
              - !ruby/object:Api::Type::Boolean
                name: 'requireSsl'
                description: |
                    Whether the mysqld should default to 'REQUIRE X509' for
                    users connecting over IP.
          - !ruby/object:Api::Type::String
            name: 'tier'
            description: |
              The tier or machine type for this instance, for
              example db-n1-standard-1. For MySQL instances, this field
              determines whether the instance is Second Generation (recommended)
              or First Generation.
          - !ruby/object:Api::Type::Integer
            name: 'settingsVersion'
            output: true
            description: |
              The version of instance settings. This is a required field for 
              update method to make sure concurrent updates are handled properly. 
              During update, use the most recent settingsVersion value for this 
              instance and do not try to update this value.
      # TODO(nelsonjr): Add missing properties such as state.
  - !ruby/object:Api::Resource
    name: 'Database'
    kind: 'sql#database'
    base_url: projects/{{project}}/instances/{{instance}}/databases
    description: |
      Represents a SQL database inside the Cloud SQL instance, hosted in
      Google's cloud.
<%= indent(compile('templates/async.yaml.erb'), 4) %>
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'instance'
        description: |
          The name of the Cloud SQL instance. This does not include the project
          ID.
        resource: 'Instance'
        imports: 'name'
        required: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'charset'
        description: 'The MySQL charset value.'
      - !ruby/object:Api::Type::String
        name: 'collation'
        description: 'The MySQL collation value.'
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          The name of the database in the Cloud SQL instance.
          This does not include the project ID or instance name.
  - !ruby/object:Api::Resource
    name: 'User'
    kind: 'sql#user'
    base_url: projects/{{project}}/instances/{{instance}}/users
    self_link: |
      projects/{{project}}/instances/{{instance}}/users
      ?name={{name}}&host={{host}}
    self_link_query: !ruby/object:Api::Resource::ResponseList
      kind: 'sql#usersList'
      items: 'items'
    identity:
      - name
      - host
    description: |
      The Users resource represents a database user in a Cloud SQL instance.
<%= indent(compile('templates/async.yaml.erb'), 4) %>
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'instance'
        description: |
          The name of the Cloud SQL instance. This does not include the project
          ID.
        resource: 'Instance'
        imports: 'name'
        required: true
      - !ruby/object:Api::Type::String
        name: 'password'
        description: 'The password for the user.'
        input: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'host'
        description: |
          The host name from which the user can connect. For insert operations,
          host defaults to an empty string. For update operations, host is
          specified as part of the request URL. The host name cannot be updated
          after insertion.
        required: true
      - !ruby/object:Api::Type::String
        name: 'name'
        description: 'The name of the user in the Cloud SQL instance.'
        required: true
  - !ruby/object:Api::Resource
    name: 'SslCert'
    kind: 'sql#sslCert'
    base_url: projects/{{project}}/instances/{{instance}}/sslCerts
    self_link: |
      projects/{{project}}/instances/{{instance}}/sslCerts/
      {{sha1_fingerprint}}
    readonly: true # we're not enforcing state as it is all server-side driven.
    description: |
      Represents an SSL certificate created for a Cloud SQL instance. To use the
      SSL certificate you must have the SSL Client Certificate and the
      associated SSL Client Key. The Client Key can be downloaded only when the
      SSL certificate is created with the insert method.
    identity:
      - sha1Fingerprint
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'instance'
        description: |
          The name of the Cloud SQL instance. This does not include the project
          ID.
        resource: 'Instance'
        imports: 'name'
        required: true
      - !ruby/object:Api::Type::String
        name: 'sha1Fingerprint'
        description: 'The SHA-1 of the certificate.'
        required: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'cert'
        description: 'PEM representation of the X.509 certificate.'
      - !ruby/object:Api::Type::String
        name: 'certSerialNumber'
        description: 'Serial number, as extracted from the certificate.'
      - !ruby/object:Api::Type::String
        name: 'commonName'
        description: 'User supplied name. Constrained to [a-zA-Z.-_ ]+.'
      - !ruby/object:Api::Type::Time
        name: 'createTime'
        description: |
          The time when the certificate was created in RFC 3339 format, for
          example 2012-11-15T16:19:00.094Z.
      - !ruby/object:Api::Type::Time
        name: 'expirationTime'
        description: |
          The time when the certificate expires in RFC 3339 format, for example
          2012-11-15T16:19:00.094Z.
  - !ruby/object:Api::Resource
    name: 'Flag'
    kind: 'sql#flag'
    description:
      'Represents a flag that can be configured for a Cloud SQL instance.'
    base_url: flags
    self_link: flags
    self_link_query: !ruby/object:Api::Resource::ResponseList
      kind: 'sql#flagsList'
      items: 'items'
    readonly: true
    properties:
      - !ruby/object:Api::Type::Array
        name: 'allowedStringValues'
        item_type: Api::Type::String
        description:
          'For STRING flags, List of strings that the value can be set to.'
        output: true
      - !ruby/object:Api::Type::Array
        name: 'appliesTo'
        item_type: Api::Type::String
        description: 'The database versions this flag is supported for.'
        output: true
      - !ruby/object:Api::Type::Integer
        name: 'maxValue'
        description: 'For INTEGER flags, the maximum allowed value.'
        output: true
      - !ruby/object:Api::Type::Integer
        name: 'minValue'
        description: 'For INTEGER flags, the minimum allowed value.'
        output: true
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          This is the name of the flag. Flag names always use underscores, not
          hyphens, e.g. max_allowed_packet
      - !ruby/object:Api::Type::Boolean
        name: 'requiresRestart'
        description: |
          Indicates whether changing this flag will trigger a database restart.
          Only applicable to Second Generation instances.
        output: true
      - !ruby/object:Api::Type::String
        name: 'type'
        description: |
          The type of the flag. Flags are typed to being BOOLEAN, STRING,
          INTEGER or NONE. NONE is used for flags which do not take a value,
          such as skip_grant_tables.
        output: true
  - !ruby/object:Api::Resource
    name: 'Tier'
    kind: 'sql#tier'
    description: |
      The Tiers resource represents a service configuration that can be used to
      define a Cloud SQL instance. Each tier has an associated RAM, maximum
      storage, and list of regions in which the tier can be used. Available
      tiers vary depending on whether you use PostgreSQL, MySQL Second
      Generation, or MySQL First Generation instances.
    base_url: projects/{{project}}/tiers
    self_link: projects/{{project}}/tiers
    self_link_query: !ruby/object:Api::Resource::ResponseList
      kind: 'sql#tiersList'
      items: 'items'
    identity:
      - tier
    readonly: true
    parameters:
      - !ruby/object:Api::Type::String
        name: 'tier'
        description: |
          An identifier for the service tier or machine type, for example,
          db-n1-standard-1. For related information.
        required: true
    properties:
      - !ruby/object:Api::Type::Integer
        name: 'DiskQuota'
        description: 'The maximum disk size of this tier in bytes.'
        output: true
      - !ruby/object:Api::Type::Integer
        name: 'RAM'
        description: 'The maximum RAM usage of this tier in bytes.'
        output: true
      - !ruby/object:Api::Type::Array
        name: 'region'
        item_type: Api::Type::String
        description: 'The applicable regions for this tier.'
        output: true
  # 'Operation' is not idempotent and will not be covered.
  # (it is used internally to assert the state of operations being performed)
  # | - !ruby/object:Api::Resource
  # |   name: 'Operation'
  # |   kind: 'sql#operation'
  # |   base_url: projects/{{project}}/operations
