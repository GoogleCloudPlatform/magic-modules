# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Puppet::Config
manifest: !ruby/object:Provider::Puppet::Manifest
  version: '0.3.0'
  source: 'https://github.com/GoogleCloudPlatform/puppet-google-sql'
  homepage: 'https://github.com/GoogleCloudPlatform/puppet-google-sql'
  issues:
    'https://github.com/GoogleCloudPlatform/puppet-google-sql/issues'
  summary: 'A Puppet module to manage Google Cloud SQL resources'
  tags:
    - google
    - cloud
    - sql
  requires:
    - !ruby/object:Provider::Config::Requirements
      name: 'google/gauth'
      versions: '>= 0.2.0 < 0.3.0'
  operating_systems:
<%= indent(include('provider/puppet/common~operating_systems.yaml'), 4) %>
overrides: !ruby/object:Provider::ResourceOverrides
  Database: !ruby/object:Provider::Puppet::ResourceOverride
    handlers: !ruby/object:Provider::Puppet::Handlers
      # TODO(nelsonjr): Once bugs in the body are resolved remove this override.
      return_if_object: |
        # rubocop:disable Metrics/CyclomaticComplexity
        def self.return_if_object(response, kind)
          raise "Bad response: #{response}" \
            unless response.is_a?(Net::HTTPResponse)
          return if response.is_a?(Net::HTTPNotFound)
          return if response.is_a?(Net::HTTPNoContent)
          # TODO(nelsonjr): Remove return of Net::HTTPForbidden from
          # return_if_object once Cloud SQL bug http://b/62635365 is resolved.
          # Currently the API returns 403 for objects that do not exist, even
          # when the user has access to the project. This is being changed to
          # return 404 as it is supposed to be.  Once 404 is the correct
          # response the temporary workaround should be removed.
          return if response.is_a?(Net::HTTPForbidden)
          result = JSON.parse(response.body)
          raise_if_errors result, %w[error errors], 'message'
          raise "Bad response: #{response}" unless response.is_a?(Net::HTTPOK)
          # TODO(nelsonjr): Revert this check back to standard once Cloud SQL
          # bug http://b/62841551 is resolved.
          # Currently the sql#operation#targetLink for create returns a
          # sql#database while for a delete it returns a sql#instance.
          # | raise "Incorrect result: #{result['kind']} (expecting #{kind})" \
          # |   unless result['kind'] == kind
          raise "Incorrect result: #{result['kind']} (expecting #{kind})" \
            unless [kind, 'sql#instance'].include?(result['kind'])
          result
        end
        # rubocop:enable Metrics/CyclomaticComplexity

        def return_if_object(response, kind)
          self.class.return_if_object(response, kind)
        end
  Flag: !ruby/object:Provider::Puppet::ResourceOverride
    handlers: !ruby/object:Provider::Puppet::Handlers
      flush: |
        raise('Cloud SQL flag does not match expectations.')
  Instance: !ruby/object:Provider::Puppet::ResourceOverride
    # TODO(alexstephen): Document the access_api_results field.
    access_api_results: true
    handlers: !ruby/object:Provider::Puppet::Handlers
      # TODO(nelsonjr): Once bugs in the body are resolved remove this override.
      return_if_object: |
        # rubocop:disable Metrics/CyclomaticComplexity
        def self.return_if_object(response, kind)
          raise "Bad response: #{response}" \
            unless response.is_a?(Net::HTTPResponse)
          return if response.is_a?(Net::HTTPNotFound)
          return if response.is_a?(Net::HTTPNoContent)
          # TODO(nelsonjr): Remove return of Net::HTTPForbidden from
          # return_if_object once Cloud SQL Bug http://b/62635365 is resolved.
          # Currently the API returns 403 for objects that do not exist, even
          # when the user has access to the project. This is being changed to
          # return 404 as it is supposed to be.  Once 404 is the correct
          # response the temporary workaround should be removed.
          return if response.is_a?(Net::HTTPForbidden)
          result = JSON.parse(response.body)
          raise_if_errors result, %w[error errors], 'message'
          raise "Bad response: #{response}" unless response.is_a?(Net::HTTPOK)
          raise "Incorrect result: #{result['kind']} (expecting #{kind})" \
            unless result['kind'] == kind
          result
        end
        # rubocop:enable Metrics/CyclomaticComplexity

        def return_if_object(response, kind)
          self.class.return_if_object(response, kind)
        end
      resource_to_request_patch: |
        unless @fetched.nil?
          # Convert to pure JSON
          request = JSON.parse(request.to_json)
          request['settings']['settingsVersion'] =
            @fetched['settings']['settingsVersion']
        end
  SslCert: !ruby/object:Provider::Puppet::ResourceOverride
    handlers: !ruby/object:Provider::Puppet::Handlers
      flush: raise('Cloud SQL SSL certificate mismatch.')
  Tier: !ruby/object:Provider::Puppet::ResourceOverride
    handlers: !ruby/object:Provider::Puppet::Handlers
      flush: raise('Cloud SQL tier does not match expectations.')
functions:
  - !ruby/object:Provider::Config::Function
    name: 'gsql_instance_ip'
    description: |
      Returns the IP address associated with the SQL instance managed by a
      `gsql_instance` resource.
    arguments:
      - !ruby/object:Provider::Config::Function::Argument
        name: name
        type: Api::Type::String
        description: 'the name of the SQL instance resource'
      - !ruby/object:Provider::Config::Function::Argument
        name: project
        type: Api::Type::String
        description: 'the project name where resource is allocated'
      - !ruby/object:Provider::Config::Function::Argument
        name: cred
        type: Google::Authorization
        description: |
          the credential to use to authorize the information request
    requires:
      - json
      - google/authorization
      - google/sql/network/get
    code: |
      get_request = ::Google::Compute::Network::Get.new(
        gsql_instance_self_link(name, project), cred
      )
      response = JSON.parse(get_request.send.body)
      response['ipAddresses'][0]['ipAddress'] if response.key?('ipAddresses')
    helpers: |
      def gsql_instance_self_link(name, project)
        URI.join(
          'https://www.googleapis.com/sql/v1beta4/',
          "projects/#{project}/",
          "instances/#{name}"
        )
      end
    examples:
      - gsql_instance_ip('my-db', 'my-project', $fn_auth)
    notes: |
      The credential parameter should be allocated with a
      `gauth_credential_*_for_function` call.
bolt_tasks:
  - !ruby/object:Provider::Puppet::BoltTask
    name: 'clone'
    description: |
      Clone a CloudSQL database (requires backups and binary logs to be
      previously enabled)
    style: :ruby
    input: :stdin
    arguments:
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: name
        type: Api::Type::String
        description: Name of the instance to clone
        required: true
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: target
        type: Api::Type::String
        description: Name of new instance
        default: !ruby/object:Provider::Puppet::BoltTask::Argument::Default
          code: '"#{name}-clone-#{Time.now.to_i}"'
          display: '<name>-clone-<timestamp>'
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: project
        type: Api::Type::String
        description: 'The project that hosts the Cloud SQL instance'
        required: true
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: credential
        type: Api::Type::String
        description: 'Path to a service account credentials file'
        required: true
    requires:
      - google/auth/gauth_credential
      - google/sql/api/gsql_instance
    code: |
      cred = Google::Auth::GAuthCredential \
             .serviceaccount_for_function(credential, SQL_ADM_SCOPES)
      sql_instance = Google::Sql::Api::Instance.new(name, project, cred)

      begin
        sql_instance.clone(target)
        puts({ status: 'success' }.to_json)
        exit 0
      rescue Puppet::Error => e
        puts({ status: 'failure', error: e }.to_json)
        exit 1
      end
  - !ruby/object:Provider::Puppet::BoltTask
    name: 'passwd'
    description: |
      Allow resetting Cloud SQL password for existing users
    style: :ruby
    input: :stdin
    arguments:
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: name
        type: Api::Type::String
        description: The user that will have its password reset
        default: !ruby/object:Provider::Puppet::BoltTask::Argument::Default
          code: "'root'"
          display: 'root'
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: host
        type: Api::Type::String
        description: Host ACL for user
        default: !ruby/object:Provider::Puppet::BoltTask::Argument::Default
          code: "'%'"
          display: "'%' [all hosts]"
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: password
        type: Api::Type::String
        description: Password to set the user to
        required: true
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: instance
        type: Api::Type::String
        description: Name of the SQL instance to manipulate users on
        required: true
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: project
        type: Api::Type::String
        description: 'The project that hosts the Cloud SQL instance'
        required: true
      - !ruby/object:Provider::Puppet::BoltTask::Argument
        name: credential
        type: Api::Type::String
        description: 'Path to a service account credentials file'
        required: true
    requires:
      - google/auth/gauth_credential
      - google/sql/api/gsql_user
    code: |
      cred = Google::Auth::GAuthCredential \
             .serviceaccount_for_function(credential, SQL_ADM_SCOPES)
      sql_user = Google::Sql::Api::User.new(name, instance, project, cred)

      begin
        sql_user.passwd(host, password)
        puts({ status: 'success' }.to_json)
        exit 0
      rescue Puppet::Error => e
        puts({ status: 'failure', error: e }.to_json)
        exit 1
      end
examples: !ruby/object:Api::Resource::HashArray
  Database:
    - database.pp
    - delete_database.pp
  Flag:
    - flag.pp
  Instance:
    - instance.pp
    - instance~postgres.pp
    - delete_instance.pp
  SslCert:
    - ssl_cert.pp
  Tier:
    - tier.pp
  User:
    - user.pp
    - delete_user.pp
files: !ruby/object:Provider::Config::Files
  copy:
<%= indent(compile('provider/puppet/common~copy.yaml'), 4) %>
    # Client-side functions require 'google/authorization'
    spec/stubs/google/authorization.rb: templates/spec_lib_stub.rb.erb
  compile:
    lib/google/sql/api/gsql_instance.rb:
      products/sql/helpers/api_gsql_instance.erb
    lib/google/sql/api/gsql_user.rb: products/sql/helpers/api_gsql_user.erb
<%= indent(include('provider/puppet/common~compile~before.yaml'), 4) %>
<%= indent(include('provider/puppet/common~compile~after.yaml'), 4) %>
<% # common~compile~after.yaml should be the last line of compile: section -%>
test_data: !ruby/object:Provider::Config::TestData
  network: !ruby/object:Api::Resource::HashArray
    User:
      - success1~name
      - success1~title
      - success2~name
      - success2~title
      - success3~name
      - success3~title
style:
  - !ruby/object:Provider::Config::StyleException
    name: lib/google/sql/property/instance_mysql_replica_configuration.rb
    pinpoints:
      - function: initialize
        exceptions:
          - Metrics/MethodLength
      - function: compare_fields
        exceptions:
          - Metrics/MethodLength
  - !ruby/object:Provider::Config::StyleException
    name: lib/puppet/provider/gsql_instance/google.rb
    pinpoints:
      - function: resource_to_request
        exceptions:
          - Metrics/MethodLength
      - function: self.fetch_to_hash
        exceptions:
          - Metrics/MethodLength
      - function: self.resource_to_hash
        exceptions:
          - Metrics/MethodLength
      - function: self.return_if_object
        exceptions:
          - Metrics/CyclomaticComplexity
  - !ruby/object:Provider::Config::StyleException
    name: spec/gsql_instance
    pinpoints:
      - test: Instance > present > not_exist > success > title_eq_name > before
        exceptions:
          - Metrics/LineLength
  - !ruby/object:Provider::Config::StyleException
    name: spec/gsql_instance
    pinpoints:
      - test: Instance > present > not_exist > success > title_and_name > before
        exceptions:
          - Metrics/LineLength
changelog:
  - !ruby/object:Provider::Config::Changelog
    version: '0.3.0'
    date: 2017-10-19T09:00:00-0700
    features:
      - Added PostgreSQL support.
  - !ruby/object:Provider::Config::Changelog
    version: '0.2.0'
    date: 2017-10-10T06:00:00-0700
    features:
      - Added Bolt task `passwd` to change SQL user password.
      - Added Bolt task `clone` to clone a SQL instance.
      - Added `gsql_instance_ip` client function.
    fixes:
      - Improved validation of required parameter references
  - !ruby/object:Provider::Config::Changelog
    version: '0.1.0'
    date: 2017-08-22T09:00:00-0700
    general: 'Initial release'
