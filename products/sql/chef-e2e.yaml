# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO(nelsonjr): Change all objects so each test run in parallel: between same
# provider (e.g. DNS managed zone vs. record set) and across provides (e.g.
# Puppet compute address vs. Chef compute address). Once this is done make all
# tests run completely in parallel.

- !ruby/object:Chef::Tester
  product: 'SQL'
  tests:
    - !ruby/object:Chef::StandardTest
      name: 'Instance'
      module: 'gsql'
      env:
        sql_instance_suffix: end2end-instance-test-{{run_id}}
      verifiers:
        - phase: ALL
          command: |
            gcloud sql instances describe
                chef-e2e-sql-test-end2end-instance-test-{{run_id}}
    - !ruby/object:Chef::StandardTest
      name: 'Database'
      module: 'gsql'
      resource_count: 3
      affected_count: 1
      env:
        sql_instance_suffix: end2end-database-test-{{run_id}}
      verifiers:
        - phase: ALL
          command: |
            gcloud sql databases describe
              --instance=chef-e2e-sql-test-end2end-database-test-{{run_id}}
                chef-e2e-webstore
      pre:
        - name: 'startup{pre}' # our test needs the SQL isntance. create it.
          apply:
            - run: 'google-gsql::tests~instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
        - name: 'startup{pre}{again}'
          apply:
            - run: 'google-gsql::tests~instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
      post:
        - name: 'cleanup{post}' # our test creates the SQL isntance. delete it.
          apply:
            - run: 'google-gsql::tests~delete_instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
        - name: 'cleanup{post}{again}'
          apply:
            - run: 'google-gsql::tests~delete_instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
    - !ruby/object:Chef::StandardTest
      name: 'User'
      module: 'gsql'
      resource_count: 3
      affected_count: 1
      env:
        sql_instance_suffix: end2end-user-test-{{run_id}}
      # TODO(nelsonjr): No verifiers. Check with SQL Team if there is a way to
      # verify if the user exists (did not exist in 'gcloud' today)
      pre:
        - name: 'startup{pre}' # our test needs the SQL isntance. create it.
          apply:
            - run: 'google-gsql::tests~instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
        - name: 'startup{pre}{again}'
          apply:
            - run: 'google-gsql::tests~instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
      post:
        - name: 'cleanup{post}' # our test creates the SQL isntance. delete it.
          apply:
            - run: 'google-gsql::tests~delete_instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
        - name: 'cleanup{post}{again}'
          apply:
            - run: 'google-gsql::tests~delete_instance'
              output:
                - - 'Chef Client finished, 1/2 resources updated'
    - name: 'Instance{Network}'
      verifiers:
        - phase: create
          command: |
            gcloud sql instances describe
                chef-e2e-sql-test-end2end-network-test-{{run_id}}
              | grep -A 3 authorizedNetworks:
              | grep '8.8.8.8/32'
      phases:
        - name: 'create' # our test needs the SQL isntance. create it.
          apply:
            - run: 'google-gsql::tests~instance'
              env:
                sql_instance_suffix: end2end-network-test-{{run_id}}
              output:
                - - 'Chef Client finished, 1/2 resources updated'
        - name: 'delete'
          apply:
            - run: 'google-gsql::tests~delete_instance'
              env:
                sql_instance_suffix: end2end-network-test-{{run_id}}
              output:
                - - 'Chef Client finished, 1/2 resources updated'
