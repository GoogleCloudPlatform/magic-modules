# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Terraform::Config
overrides: !ruby/object:Overrides::ResourceOverrides
  Deployment: !ruby/object:Overrides::Terraform::ResourceOverride
    id_format: "projects/{{project}}/deployments/{{name}}"
    import_format: ["projects/{{project}}/deployments/{{name}}"]
    timeouts: !ruby/object:Api::Timeouts
      # Very long to support very long deployments
      insert_minutes: 60
      update_minutes: 60
      delete_minutes: 60
    docs: !ruby/object:Provider::Terraform::Docs
      warning: |
        Deployment Manager shares similar behavior with Terraform as both
        products manage GCP resource lifecycle and state. This Terraform
        resource is intended only to manage a Deployment resource,
        and attempts to manage the Deployment's resources in Terraform as well
        will likely result in errors or unexpected behavior as the two tools
        fight over ownership. We strongly discourage doing so unless you are an
        experienced user of both tools.

        In addition, due to limitations of the API, Terraform will treat
        deployments in preview as recreate-only for any update operation other
        than actually deploying an in-preview deployment (i.e. `preview=true` to
        `preview=false`).
    examples:
      - !ruby/object:Provider::Terraform::Examples
        name: "deployment_manager_deployment_basic"
        primary_resource_id: "deployment"
        primary_resource_name: "fmt.Sprintf(\"tf-test-my-deployment-%s\", context[\"random_suffix\"])"
        vars:
          deployment_name: "my-deployment"
        skip_test: true
      - !ruby/object:Provider::Terraform::Examples
        name: "deployment_manager_deployment_imports"
        primary_resource_id: "deployment"
        primary_resource_name: "fmt.Sprintf(\"tf-test-my-deployment-%s\", context[\"random_suffix\"])"
        vars:
          deployment_name: "my-deployment"
        skip_test: true
    properties:
      preview: !ruby/object:Overrides::Terraform::PropertyOverride
        description: |
          {{description}} ~>**NOTE**: Deployment Manager does not allow update
          of a deployment in preview (unless updating to preview=false). Thus,
          Terraform will force-recreate deployments if either preview is updated
          to true or if other fields are updated while preview is true.
      target: !ruby/object:Overrides::Terraform::PropertyOverride
        ignore_read: true
      id: !ruby/object:Overrides::Terraform::PropertyOverride
        name: 'deployment_id'
      labels: !ruby/object:Overrides::Terraform::PropertyOverride
        is_set: true
    custom_code: !ruby/object:Provider::Terraform::CustomCode
      # post-create failure: Delete deployment if an invalid deployment was created
      post_create_failure: 'templates/terraform/post_create_failure/delete_on_failure.go.erb'
      # Custom diff to force new if 'preview' is true
      constants: 'templates/terraform/constants/deployment_manager_deployment.go.erb'
      resource_definition: 'templates/terraform/resource_definition/deployment_manager_deployment.go.erb'

# This is for copying files over
files: !ruby/object:Provider::Config::Files
  # These files have templating (ERB) code that will be run.
  # This is usually to add licensing info, autogeneration notices, etc.
  compile:
<%= lines(indent(compile('provider/terraform/product~compile.yaml'), 4)) -%>
