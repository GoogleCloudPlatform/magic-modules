# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO(nelsonjr): Change all objects so each test run in parallel: between same
# provider (e.g. DNS managed zone vs. record set) and across provides (e.g.
# Chef compute address vs. Chef compute address). Once this is done make all
# tests run completely in parallel.

- !ruby/object:Chef::Tester
  product: 'Compute'
  tests:
    - !ruby/object:Chef::StandardTest
      name: 'Address'
      module: 'gcompute'
      affected_count: 1
      resource_count: 3
      verifiers:
        - phase: ALL
          command: |
            gcloud compute addresses describe
                --project=google.com:graphite-playground
                --region=us-west1
                chef-e2e-test1
#    TODO(alexstephen): Uncomment when test works
#    Nested objects are not properly filtering nil values
#    GCP API believes we're passing multiple values when only one is allowed
#    This is because all of the values are set to 0/0.0 (nil)
#    - !ruby/object:Chef::StandardTest
#      name: 'BackendService'
#      module: 'gcompute'
#      resource_count: 3
#      affected_count: 1
#      verifiers:
#        - phase: ALL
#          command: |
#            gcloud compute backend-services describe
#                --project=google.com:graphite-playground
#                --global
#                chef-e2e-my-app-backend
    - !ruby/object:Chef::StandardTest
      name: 'Disk'
      module: 'gcompute'
      resource_count: 3
      verifiers:
        - phase: ALL
          command: |
            gcloud compute disks describe
                --project=google.com:graphite-playground
                --zone=us-central1-a
                chef-e2e-data-disk-1
    - !ruby/object:Chef::VirtualTest
      name: 'DiskType'
      module: 'gcompute'
      resource_count: 3
    - !ruby/object:Chef::StandardTest
      name: 'Firewall'
      module: 'gcompute'
      resource_count: 2
      verifiers:
        - phase: ALL
          command: |
            gcloud compute firewall-rules describe
                --project=google.com:graphite-playground
                chef-e2e-test-fw-allow-ssh
    - !ruby/object:Chef::StandardTest
      name: 'GlobalAddress'
      module: 'gcompute'
      verifiers:
        - phase: ALL
          command: |
            gcloud compute addresses describe
                --project=google.com:graphite-playground
                --global
                chef-e2e-my-app-lb
    - !ruby/object:Chef::StandardTest
      name: 'HealthCheck'
      module: 'gcompute'
      verifiers:
        - phase: ALL
          command: |
            gcloud compute health-checks describe
                --project=google.com:graphite-playground
                chef-e2e-app-health-check
    - !ruby/object:Chef::StandardTest
      name: 'HttpHealthCheck'
      module: 'gcompute'
      verifiers:
        - phase: ALL
          command: |
            gcloud compute http-health-checks describe
                --project=google.com:graphite-playground
                chef-e2e-my-app-http-hc
    - !ruby/object:Chef::StandardTest
      name: 'HttpsHealthCheck'
      module: 'gcompute'
      verifiers:
        - phase: ALL
          command: |
            gcloud compute https-health-checks describe
                --project=google.com:graphite-playground
                chef-e2e-my-app-https-hc
    - !ruby/object:Chef::StandardTest
      name: 'Image'
      module: 'gcompute'
      resource_count: 4
      affected_count: 1
      verifiers:
        - phase: ALL
          command: |
            gcloud compute images describe
                --project=google.com:graphite-playground
                chef-e2e-test-image
    - !ruby/object:Chef::StandardTest
      name: 'InstanceGroup'
      module: 'gcompute'
      resource_count: 4
      affected_count: 1
      verifiers:
        - phase: ALL
          command: |
            gcloud compute instance-groups describe
                --project=google.com:graphite-playground
                --zone=us-central1-a
                chef-e2e-my-masters
    - !ruby/object:Chef::StandardTest
      name: 'Instance'
      module: 'gcompute'
      resource_count:
        create: 8
        delete: 3
      affected_count:
        create: 2 # Disk will always be created alongside Instance
        delete: 1 # Disk is autodeleted by GCP
      verifiers:
        - phase: ALL
          command: |
            gcloud compute instances describe
                --project=google.com:graphite-playground
                --zone=us-west1-a
                chef-e2e-instance-test
    - !ruby/object:Chef::StandardTest
      name: 'InstanceTemplate'
      module: 'gcompute'
      resource_count:
        create: 5
        delete: 2
      affected_count: 1
      verifiers:
        - phase: ALL
          command: |
            gcloud compute instance-templates describe
                --project=google.com:graphite-playground
                chef-e2e-instance-template-test
      # Auto network
    - !ruby/object:Chef::StandardTest
      name: 'NetworkAuto'
      module: 'gcompute'
      resource_name: 'network'
      recipes:
        create: 'tests~network~auto'
        delete: 'tests~delete_network'
      env:
        network_id: auto-1234
      verifiers:
        - phase: ALL
          command: |
            gcloud compute networks describe
                --project=google.com:graphite-playground
                chef-e2e-mynetwork-auto-1234
      # Custom Network
    - !ruby/object:Chef::StandardTest
      name: 'NetworkCustom'
      module: 'gcompute'
      resource_name: 'network'
      recipes:
        create: 'tests~network~custom'
        delete: 'tests~delete_network'
      env:
        network_id: custom-1234
      verifiers:
        - phase: ALL
          command: |
            gcloud compute networks describe
                --project=google.com:graphite-playground
                chef-e2e-mynetwork-custom-1234
      # Convert to Custom Network
    - !ruby/object:Chef::StandardTest
      name: 'NetworkConvertCustom'
      module: 'gcompute'
      resource_name: 'network'
      recipes:
        create: 'tests~network~convert_to_custom'
        delete: 'tests~delete_network'
      env:
        network_id: conv-cust-1234
      verifiers:
        - phase: ALL
          command: |
            gcloud compute networks describe
                --project=google.com:graphite-playground
                chef-e2e-mynetwork-conv-cust-1234
      # Legacy Network
    - !ruby/object:Chef::StandardTest
      name: 'NetworkLegacy'
      module: 'gcompute'
      resource_name: 'network'
      recipes:
        create: 'tests~network~legacy'
        delete: 'tests~delete_network'
      env:
        network_id: legacy-1234
      verifiers:
        - phase: ALL
          command: |
            gcloud compute networks describe
                --project=google.com:graphite-playground
                chef-e2e-mynetwork-legacy-1234
    - !ruby/object:Chef::VirtualTest
      name: 'Region'
      module: 'gcompute'
    - !ruby/object:Chef::StandardTest
      name: 'Route'
      module: 'gcompute'
      resource_count: 4
      affected_count: 1
      verifiers:
        - phase: ALL
          command: |
            gcloud compute routes describe
                --project=google.com:graphite-playground
                chef-e2e-corp-route
    - !ruby/object:Chef::StandardTest
      name: 'SslCertificate'
      module: 'gcompute'
      verifiers:
        - phase: ALL
          command: |
            gcloud compute ssl-certificates describe
                --project=google.com:graphite-playground
                chef-e2e-my-site-ssl-cert
    - !ruby/object:Chef::StandardTest
      name: 'Subnetwork'
      module: 'gcompute'
      resource_count:
        create: 4
        delete: 3
      affected_count:
        create: 1
        delete: 1
      # TODO(alexstephen): Find a way to verify subnets
      # TODO(alexstephen): Test can be a little flakey.
      post:
        - name: 'delete_network'
          apply:
            - run: 'google-gcompute::tests~delete_network'
              env:
                network_id: subnetwork
              outputs:
                - - 'Chef Client finished, 1/2 resources updated'
    - !ruby/object:Chef::VirtualTest
      name: 'Zone'
      module: 'gcompute'
