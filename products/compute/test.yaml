# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

Instance:
  present:
    not_exist:
      success:
        title_and_name:
          before: |
            expect_network_get_failed 1,
                                      name: 'test name#0 data',
                                      zone: 'test name#0 data'
            expect_network_create \\
              1,
              {
                'kind' => 'compute#instance',
                'canIpForward' => true,
                'disks' => [
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#0 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#0 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#0 data',
                      'sha256' => 'test sha256#0 data'
                    },
                    'index' => 1_443_881_260,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#0 data',
                      'diskSizeGb' => 450_092_159,
                      'diskType' => 'selflink(resource(disk_type,0))',
                      'sourceImage' => 'test source_image#0 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#0 data',
                        'sha256' => 'test sha256#0 data'
                      }
                    },
                    'interface' => 'SCSI',
                    'mode' => 'READ_WRITE',
                    'source' => 'selflink(resource(disk,0))',
                    'type' => 'SCRATCH'
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#1 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#1 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#1 data',
                      'sha256' => 'test sha256#1 data'
                    },
                    'index' => 2_887_762_520,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#1 data',
                      'diskSizeGb' => 900_184_319,
                      'diskType' => 'selflink(resource(disk_type,1))',
                      'sourceImage' => 'test source_image#1 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#1 data',
                        'sha256' => 'test sha256#1 data'
                      }
                    },
                    'interface' => 'NVME',
                    'mode' => 'READ_ONLY',
                    'source' => 'selflink(resource(disk,1))',
                    'type' => 'PERSISTENT'
                  }
                ],
                'guestAccelerators' => [
                  {
                    'acceleratorCount' => 2_697_554_557,
                    'acceleratorType' => 'test accelerator_type#0 data'
                  },
                  {
                    'acceleratorCount' => 5_395_109_114,
                    'acceleratorType' => 'test accelerator_type#1 data'
                  },
                  {
                    'acceleratorCount' => 8_092_663_672,
                    'acceleratorType' => 'test accelerator_type#2 data'
                  },
                  {
                    'acceleratorCount' => 10_790_218_229,
                    'acceleratorType' => 'test accelerator_type#3 data'
                  }
                ],
                'labelFingerprint' => 'test label_fingerprint#0 data',
                'metadata' => {
                  'items' => [
                    {
                      'key' => 'test metadata#1 data',
                      'value' => 'test metadata#1 data'
                    },
                    {
                      'key' => 'test metadata#2 data',
                      'value' => 2_666_715_473
                    },
                    {
                      'key' => 'test metadata#3 data',
                      'value' => 'test metadata#3 data'
                    }
                  ]
                },
                'machineType' => 'selflink(resource(machine_type,0))',
                'minCpuPlatform' => 'test min_cpu_platform#0 data',
                'name' => 'test name#0 data',
                'networkInterfaces' => [
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#0 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#0 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#0 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#0 data',
                    'network' => 'selflink(resource(network,0))',
                    'networkIP' => 'test network_ip#0 data',
                    'subnetwork' => 'selflink(resource(subnetwork,0))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#1 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#1 data',
                    'network' => 'selflink(resource(network,1))',
                    'networkIP' => 'test network_ip#1 data',
                    'subnetwork' => 'selflink(resource(subnetwork,1))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#3 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#4 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#2 data',
                    'network' => 'selflink(resource(network,2))',
                    'networkIP' => 'test network_ip#2 data',
                    'subnetwork' => 'selflink(resource(subnetwork,2))'
                  }
                ],
                'scheduling' => {
                  'automaticRestart' => true,
                  'onHostMaintenance' => 'test on_host_maintenance#0 data',
                  'preemptible' => true
                },
                'serviceAccounts' => [
                  {
                    'email' => true,
                    'scopes' => %w[rr ss tt uu vv]
                  },
                  {
                    'email' => false,
                    'scopes' => %w[ll mm nn oo pp]
                  },
                  {
                    'email' => true,
                    'scopes' => %w[ee ff gg hh]
                  }
                ],
                'tags' => {
                  'fingerprint' => 'test fingerprint#0 data',
                  'items' => %w[hh ii jj]
                }
              },
              name: 'title0',
              zone: 'test name#0 data'
            expect_network_get_async 1, name: 'title0', zone: 'test name#0 data'
            expect_network_get_success_zone 1
            expect_network_get_success_zone 2
            expect_network_get_success_disk_type 1, zone: 'test name#0 data'
            expect_network_get_success_disk_type 2, zone: 'test name#1 data'
            expect_network_get_success_disk 1, zone: 'test name#0 data'
            expect_network_get_success_disk 2, zone: 'test name#1 data'
            expect_network_get_success_machine_type 1, zone: 'test name#0 data'
            expect_network_get_success_region 1
            expect_network_get_success_region 2
            expect_network_get_success_region 3
            expect_network_get_success_address 1, region: 'test name#0 data'
            expect_network_get_success_address 2, region: 'test name#1 data'
            expect_network_get_success_address 3, region: 'test name#2 data'
            expect_network_get_success_network 1
            expect_network_get_success_network 2
            expect_network_get_success_network 3
            expect_network_get_success_subnetwork 1, region: 'test name#0 data'
            expect_network_get_success_subnetwork 2, region: 'test name#1 data'
            expect_network_get_success_subnetwork 3, region: 'test name#2 data'
        title_eq_name:
          before: |
            expect_network_get_failed 1,
                                      name: 'title0',
                                      zone: 'test name#0 data'
            expect_network_create \\
              1,
              {
                'kind' => 'compute#instance',
                'canIpForward' => true,
                'disks' => [
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#0 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#0 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#0 data',
                      'sha256' => 'test sha256#0 data'
                    },
                    'index' => 1_443_881_260,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#0 data',
                      'diskSizeGb' => 450_092_159,
                      'diskType' => 'selflink(resource(disk_type,0))',
                      'sourceImage' => 'test source_image#0 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#0 data',
                        'sha256' => 'test sha256#0 data'
                      }
                    },
                    'interface' => 'SCSI',
                    'mode' => 'READ_WRITE',
                    'source' => 'selflink(resource(disk,0))',
                    'type' => 'SCRATCH'
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#1 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#1 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#1 data',
                      'sha256' => 'test sha256#1 data'
                    },
                    'index' => 2_887_762_520,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#1 data',
                      'diskSizeGb' => 900_184_319,
                      'diskType' => 'selflink(resource(disk_type,1))',
                      'sourceImage' => 'test source_image#1 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#1 data',
                        'sha256' => 'test sha256#1 data'
                      }
                    },
                    'interface' => 'NVME',
                    'mode' => 'READ_ONLY',
                    'source' => 'selflink(resource(disk,1))',
                    'type' => 'PERSISTENT'
                  }
                ],
                'guestAccelerators' => [
                  {
                    'acceleratorCount' => 2_697_554_557,
                    'acceleratorType' => 'test accelerator_type#0 data'
                  },
                  {
                    'acceleratorCount' => 5_395_109_114,
                    'acceleratorType' => 'test accelerator_type#1 data'
                  },
                  {
                    'acceleratorCount' => 8_092_663_672,
                    'acceleratorType' => 'test accelerator_type#2 data'
                  },
                  {
                    'acceleratorCount' => 10_790_218_229,
                    'acceleratorType' => 'test accelerator_type#3 data'
                  }
                ],
                'labelFingerprint' => 'test label_fingerprint#0 data',
                'metadata' => {
                  'items' => [
                    {
                      'key' => 'test metadata#1 data',
                      'value' => 'test metadata#1 data'
                    },
                    {
                      'key' => 'test metadata#2 data',
                      'value' => 2_666_715_473
                    },
                    {
                      'key' => 'test metadata#3 data',
                      'value' => 'test metadata#3 data'
                    }
                  ]
                },
                'machineType' => 'selflink(resource(machine_type,0))',
                'minCpuPlatform' => 'test min_cpu_platform#0 data',
                'name' => 'title0',
                'networkInterfaces' => [
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#0 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#0 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#0 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#0 data',
                    'network' => 'selflink(resource(network,0))',
                    'networkIP' => 'test network_ip#0 data',
                    'subnetwork' => 'selflink(resource(subnetwork,0))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#1 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#1 data',
                    'network' => 'selflink(resource(network,1))',
                    'networkIP' => 'test network_ip#1 data',
                    'subnetwork' => 'selflink(resource(subnetwork,1))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#3 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#4 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#2 data',
                    'network' => 'selflink(resource(network,2))',
                    'networkIP' => 'test network_ip#2 data',
                    'subnetwork' => 'selflink(resource(subnetwork,2))'
                  }
                ],
                'scheduling' => {
                  'automaticRestart' => true,
                  'onHostMaintenance' => 'test on_host_maintenance#0 data',
                  'preemptible' => true
                },
                'serviceAccounts' => [
                  {
                    'email' => true,
                    'scopes' => %w[rr ss tt uu vv]
                  },
                  {
                    'email' => false,
                    'scopes' => %w[ll mm nn oo pp]
                  },
                  {
                    'email' => true,
                    'scopes' => %w[ee ff gg hh]
                  }
                ],
                'tags' => {
                  'fingerprint' => 'test fingerprint#0 data',
                  'items' => %w[hh ii jj]
                }
              },
              name: 'title0',
              zone: 'test name#0 data'
            expect_network_get_async 1, name: 'title0', zone: 'test name#0 data'
            expect_network_get_success_zone 1
            expect_network_get_success_zone 2
            expect_network_get_success_disk_type 1, zone: 'test name#0 data'
            expect_network_get_success_disk_type 2, zone: 'test name#1 data'
            expect_network_get_success_disk 1, zone: 'test name#0 data'
            expect_network_get_success_disk 2, zone: 'test name#1 data'
            expect_network_get_success_machine_type 1, zone: 'test name#0 data'
            expect_network_get_success_region 1
            expect_network_get_success_region 2
            expect_network_get_success_region 3
            expect_network_get_success_address 1, region: 'test name#0 data'
            expect_network_get_success_address 2, region: 'test name#1 data'
            expect_network_get_success_address 3, region: 'test name#2 data'
            expect_network_get_success_network 1
            expect_network_get_success_network 2
            expect_network_get_success_network 3
            expect_network_get_success_subnetwork 1, region: 'test name#0 data'
            expect_network_get_success_subnetwork 2, region: 'test name#1 data'
            expect_network_get_success_subnetwork 3, region: 'test name#2 data'
InstanceTemplate:
  present:
    not_exist:
      success:
        title_and_name:
          before: |
            expect_network_get_failed 1,
                                      name: 'test name#0 data'
            expect_network_create \
              1,
              'kind' => 'compute#instanceTemplate',
              'description' => 'test description#0 data',
              'name' => 'test name#0 data',
              'properties' => {
                'canIpForward' => true,
                'description' => 'test description#0 data',
                'disks' => [
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#0 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#0 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#0 data',
                      'sha256' => 'test sha256#0 data'
                    },
                    'index' => 1_443_881_260,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#0 data',
                      'diskSizeGb' => 450_092_159,
                      'diskType' => 'selflink(resource(disk_type,0))',
                      'sourceImage' => 'test source_image#0 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#0 data',
                        'sha256' => 'test sha256#0 data'
                      }
                    },
                    'interface' => 'SCSI',
                    'mode' => 'READ_WRITE',
                    'source' => 'test name#0 data',
                    'type' => 'SCRATCH'
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#1 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#1 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#1 data',
                      'sha256' => 'test sha256#1 data'
                    },
                    'index' => 2_887_762_520,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#1 data',
                      'diskSizeGb' => 900_184_319,
                      'diskType' => 'selflink(resource(disk_type,1))',
                      'sourceImage' => 'test source_image#1 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#1 data',
                        'sha256' => 'test sha256#1 data'
                      }
                    },
                    'interface' => 'NVME',
                    'mode' => 'READ_ONLY',
                    'source' => 'test name#1 data',
                    'type' => 'PERSISTENT'
                  }
                ],
                'machineType' => 'test name#0 data',
                'metadata' => {
                  'items' => [
                    {
                      'key' => 'test metadata#1 data',
                      'value' => 'test metadata#1 data'
                    },
                    {
                      'key' => 'test metadata#2 data',
                      'value' => 2_666_715_473
                    },
                    {
                      'key' => 'test metadata#3 data',
                      'value' => 'test metadata#3 data'
                    }
                  ]
                },
                'guestAccelerators' => [
                  {
                    'acceleratorCount' => 2_697_554_557,
                    'acceleratorType' => 'test accelerator_type#0 data'
                  },
                  {
                    'acceleratorCount' => 5_395_109_114,
                    'acceleratorType' => 'test accelerator_type#1 data'
                  },
                  {
                    'acceleratorCount' => 8_092_663_672,
                    'acceleratorType' => 'test accelerator_type#2 data'
                  },
                  {
                    'acceleratorCount' => 10_790_218_229,
                    'acceleratorType' => 'test accelerator_type#3 data'
                  }
                ],
                'networkInterfaces' => [
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#0 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#0 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#0 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#0 data',
                    'network' => 'selflink(resource(network,0))',
                    'networkIP' => 'test network_ip#0 data',
                    'subnetwork' => 'selflink(resource(subnetwork,0))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#1 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#1 data',
                    'network' => 'selflink(resource(network,1))',
                    'networkIP' => 'test network_ip#1 data',
                    'subnetwork' => 'selflink(resource(subnetwork,1))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#3 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#4 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#2 data',
                    'network' => 'selflink(resource(network,2))',
                    'networkIP' => 'test network_ip#2 data',
                    'subnetwork' => 'selflink(resource(subnetwork,2))'
                  }
                ],
                'scheduling' => {
                  'automaticRestart' => true,
                  'onHostMaintenance' => 'test on_host_maintenance#0 data',
                  'preemptible' => true
                },
                'serviceAccounts' => [
                  {
                    'email' => true,
                    'scopes' => %w[rr ss tt uu vv]
                  },
                  {
                    'email' => false,
                    'scopes' => %w[ll mm nn oo pp]
                  },
                  {
                    'email' => true,
                    'scopes' => %w[ee ff gg hh]
                  }
                ],
                'tags' => {
                  'fingerprint' => 'test fingerprint#0 data',
                  'items' => %w[hh ii jj]
                }
              }
            expect_network_get_async 1
            expect_network_get_success_zone 1
            expect_network_get_success_zone 2
            expect_network_get_success_disk_type 1, zone: 'test name#0 data'
            expect_network_get_success_disk_type 2, zone: 'test name#1 data'
            expect_network_get_success_disk 1, zone: 'test name#0 data'
            expect_network_get_success_disk 2, zone: 'test name#1 data'
            expect_network_get_success_machine_type 1, zone: 'test name#0 data'
            expect_network_get_success_region 1
            expect_network_get_success_region 2
            expect_network_get_success_region 3
            expect_network_get_success_address 1, region: 'test name#0 data'
            expect_network_get_success_address 2, region: 'test name#1 data'
            expect_network_get_success_address 3, region: 'test name#2 data'
            expect_network_get_success_network 1
            expect_network_get_success_network 2
            expect_network_get_success_network 3
            expect_network_get_success_subnetwork 1, region: 'test name#0 data'
            expect_network_get_success_subnetwork 2, region: 'test name#1 data'
            expect_network_get_success_subnetwork 3, region: 'test name#2 data'
        title_eq_name:
          before: |
            expect_network_get_failed 1,
                                      name: 'title0'
            expect_network_create \
              1,
              'kind' => 'compute#instanceTemplate',
              'description' => 'test description#0 data',
              'name' => 'title0',
              'properties' => {
                'canIpForward' => true,
                'description' => 'test description#0 data',
                'disks' => [
                  {
                    'autoDelete' => true,
                    'boot' => true,
                    'deviceName' => 'test device_name#0 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#0 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#0 data',
                      'sha256' => 'test sha256#0 data'
                    },
                    'index' => 1_443_881_260,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#0 data',
                      'diskSizeGb' => 450_092_159,
                      'diskType' => 'selflink(resource(disk_type,0))',
                      'sourceImage' => 'test source_image#0 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#0 data',
                        'sha256' => 'test sha256#0 data'
                      }
                    },
                    'interface' => 'SCSI',
                    'mode' => 'READ_WRITE',
                    'source' => 'test name#0 data',
                    'type' => 'SCRATCH'
                  },
                  {
                    'autoDelete' => false,
                    'boot' => false,
                    'deviceName' => 'test device_name#1 data',
                    'diskEncryptionKey' => {
                      'rawKey' => 'test raw_key#1 data',
                      'rsaEncryptedKey' => 'test rsa_encrypted_key#1 data',
                      'sha256' => 'test sha256#1 data'
                    },
                    'index' => 2_887_762_520,
                    'initializeParams' => {
                      'diskName' => 'test disk_name#1 data',
                      'diskSizeGb' => 900_184_319,
                      'diskType' => 'selflink(resource(disk_type,1))',
                      'sourceImage' => 'test source_image#1 data',
                      'sourceImageEncryptionKey' => {
                        'rawKey' => 'test raw_key#1 data',
                        'sha256' => 'test sha256#1 data'
                      }
                    },
                    'interface' => 'NVME',
                    'mode' => 'READ_ONLY',
                    'source' => 'test name#1 data',
                    'type' => 'PERSISTENT'
                  }
                ],
                'machineType' => 'test name#0 data',
                'metadata' => {
                  'items' => [
                    {
                      'key' => 'test metadata#1 data',
                      'value' => 'test metadata#1 data'
                    },
                    {
                      'key' => 'test metadata#2 data',
                      'value' => 2_666_715_473
                    },
                    {
                      'key' => 'test metadata#3 data',
                      'value' => 'test metadata#3 data'
                    }
                  ]
                },
                'guestAccelerators' => [
                  {
                    'acceleratorCount' => 2_697_554_557,
                    'acceleratorType' => 'test accelerator_type#0 data'
                  },
                  {
                    'acceleratorCount' => 5_395_109_114,
                    'acceleratorType' => 'test accelerator_type#1 data'
                  },
                  {
                    'acceleratorCount' => 8_092_663_672,
                    'acceleratorType' => 'test accelerator_type#2 data'
                  },
                  {
                    'acceleratorCount' => 10_790_218_229,
                    'acceleratorType' => 'test accelerator_type#3 data'
                  }
                ],
                'networkInterfaces' => [
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#0 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#0 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#0 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#0 data',
                    'network' => 'selflink(resource(network,0))',
                    'networkIP' => 'test network_ip#0 data',
                    'subnetwork' => 'selflink(resource(subnetwork,0))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#1 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#1 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#1 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#1 data',
                    'network' => 'selflink(resource(network,1))',
                    'networkIP' => 'test network_ip#1 data',
                    'subnetwork' => 'selflink(resource(subnetwork,1))'
                  },
                  {
                    'accessConfigs' => [
                      {
                        'name' => 'test name#2 data',
                        'natIP' => 'test address#2 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#3 data',
                        'natIP' => 'test address#0 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      },
                      {
                        'name' => 'test name#4 data',
                        'natIP' => 'test address#1 data',
                        'type' => 'ONE_TO_ONE_NAT'
                      }
                    ],
                    'aliasIpRanges' => [
                      {
                        'ipCidrRange' => 'test ip_cidr_range#2 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#2 data'
                      },
                      {
                        'ipCidrRange' => 'test ip_cidr_range#3 data',
                        'subnetworkRangeName' => 'test subnetwork_range_name#3 data'
                      }
                    ],
                    'name' => 'test name#2 data',
                    'network' => 'selflink(resource(network,2))',
                    'networkIP' => 'test network_ip#2 data',
                    'subnetwork' => 'selflink(resource(subnetwork,2))'
                  }
                ],
                'scheduling' => {
                  'automaticRestart' => true,
                  'onHostMaintenance' => 'test on_host_maintenance#0 data',
                  'preemptible' => true
                },
                'serviceAccounts' => [
                  {
                    'email' => true,
                    'scopes' => %w[rr ss tt uu vv]
                  },
                  {
                    'email' => false,
                    'scopes' => %w[ll mm nn oo pp]
                  },
                  {
                    'email' => true,
                    'scopes' => %w[ee ff gg hh]
                  }
                ],
                'tags' => {
                  'fingerprint' => 'test fingerprint#0 data',
                  'items' => %w[hh ii jj]
                }
              }
            expect_network_get_async 1
            expect_network_get_success_zone 1
            expect_network_get_success_zone 2
            expect_network_get_success_disk_type 1, zone: 'test name#0 data'
            expect_network_get_success_disk_type 2, zone: 'test name#1 data'
            expect_network_get_success_disk 1, zone: 'test name#0 data'
            expect_network_get_success_disk 2, zone: 'test name#1 data'
            expect_network_get_success_machine_type 1, zone: 'test name#0 data'
            expect_network_get_success_region 1
            expect_network_get_success_region 2
            expect_network_get_success_region 3
            expect_network_get_success_address 1, region: 'test name#0 data'
            expect_network_get_success_address 2, region: 'test name#1 data'
            expect_network_get_success_address 3, region: 'test name#2 data'
            expect_network_get_success_network 1
            expect_network_get_success_network 2
            expect_network_get_success_network 3
            expect_network_get_success_subnetwork 1, region: 'test name#0 data'
            expect_network_get_success_subnetwork 2, region: 'test name#1 data'
            expect_network_get_success_subnetwork 3, region: 'test name#2 data'
Snapshot:
  present:
    not_exist:
      success:
        title_eq_name:
          before: |
            expect_network_get_failed 1, name: 'title0'
            expect_network_create \
              1,
              {
                'kind' => 'compute#snapshot',
                'name' => 'title0',
                'description' => 'test description#0 data',
                'licenses' => [
                  'selflink(resource(license,0))',
                  'selflink(resource(license,1))',
                  'selflink(resource(license,2))'
                ],
                'labels' => %w[kk ll],
                'source' => 'test name#0 data',
                'zone' => 'test name#0 data',
                'snapshotEncryptionKey' => {
                  'rawKey' => 'test raw_key#0 data',
                  'sha256' => 'test sha256#0 data'
                },
                'sourceDiskEncryptionKey' => {
                  'rawKey' => 'test raw_key#0 data',
                  'sha256' => 'test sha256#0 data'
                }
              },
              name: 'test name#0 data'
            # TODO(alexstephen): Make this async
            #expect_network_get_async 1, name: 'title0'
            expect_network_get_success_license 1
            expect_network_get_success_license 2
            expect_network_get_success_license 3
            expect_network_get_success_zone 1
            expect_network_get_success_disk 1, zone: 'test name#0 data'
        title_and_name:
          before: |
            expect_network_get_failed 1, name: 'test name#0 data'
            expect_network_create \
              1,
              {
                'kind' => 'compute#snapshot',
                'name' => 'test name#0 data',
                'description' => 'test description#0 data',
                'licenses' => [
                  'selflink(resource(license,0))',
                  'selflink(resource(license,1))',
                  'selflink(resource(license,2))'
                ],
                'labels' => %w[kk ll],
                'source' => 'test name#0 data',
                'zone' => 'test name#0 data',
                'snapshotEncryptionKey' => {
                  'rawKey' => 'test raw_key#0 data',
                  'sha256' => 'test sha256#0 data'
                },
                'sourceDiskEncryptionKey' => {
                  'rawKey' => 'test raw_key#0 data',
                  'sha256' => 'test sha256#0 data'
                }
              },
              name: 'test name#0 data', disk: 'test name#0 data'
            # TODO(alexstephen): Make this async.
            #expect_network_get_async 1
            expect_network_get_success_license 1
            expect_network_get_success_license 2
            expect_network_get_success_license 3
            expect_network_get_success_zone 1
            expect_network_get_success_disk 1, zone: 'test name#0 data'
  expectations:
    custom:
      create: true
  expectation_helpers: 'products/compute/helpers/ruby/expect_snapshot.rb.erb'
