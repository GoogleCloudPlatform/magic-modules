# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: Spanner
display_name: Cloud Spanner
versions:
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://spanner.googleapis.com/v1/
scopes:
  - https://www.googleapis.com/auth/spanner.admin
objects:
  - !ruby/object:Api::Resource
    name: 'InstanceConfig'
    base_url: 'projects/{{project}}/instanceConfigs'
    description: |
      A possible configuration for a Cloud Spanner instance. Configurations
      define the geographic placement of nodes and their replication.
    exports:
      - !ruby/object:Api::Type::FetchedExternal
        name: name
    readonly: true
    transport: !ruby/object:Api::Resource::Transport
      encoder: encode_request
      decoder: decode_response
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          A unique identifier for the instance configuration. Values are of the
          form projects/<project>/instanceConfigs/[a-z][-a-z0-9]*
      - !ruby/object:Api::Type::String
        name: 'displayName'
        description: |
          The name of this instance configuration as it appears in UIs.
        output: true
  - !ruby/object:Api::Resource
    name: 'Instance'
    base_url: projects/{{project}}/instances
    update_verb: :PATCH
    description: |
      An isolated set of Cloud Spanner resources on which databases can be
      hosted.
    exports:
      - name
    transport: !ruby/object:Api::Resource::Transport
      decoder: decode_response
    collection_url_response: !ruby/object:Api::Resource::ResponseList
      items: 'instances'
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          A unique identifier for the instance, which cannot be changed after
          the instance is created. Values are of the form
          projects/<project>/instances/[a-z][-a-z0-9]*[a-z0-9]. The final
          segment of the name must be between 6 and 30 characters in length.
      - !ruby/object:Api::Type::ResourceRef
        name: 'config'
        resource: 'InstanceConfig'
        imports: 'name'
        description: 'A reference to the instance configuration.'
      - !ruby/object:Api::Type::String
        name: 'displayName'
        description: |
          The descriptive name for this instance as it appears in UIs. Must be
          unique per project and between 4 and 30 characters in length.
        required: true
      - !ruby/object:Api::Type::Integer
        name: 'nodeCount'
        description: 'The number of nodes allocated to this instance.'
      # 'state' not suitable for state convergeance.
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'labels'
        description: |
          Cloud Labels are a flexible and lightweight mechanism for organizing
          cloud resources into groups that reflect a customer's organizational
          needs and deployment strategies. Cloud Labels can be used to filter
          collections of resources. They can be used to control how resource
          metrics are aggregated. And they can be used as arguments to policy
          management rules (e.g. route, firewall, load balancing, etc.).

          Label keys must be between 1 and 63 characters long and must conform
          to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
          Label values must be between 0 and 63 characters long and must conform
          to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.

          No more than 64 labels can be associated with a given resource.

          See https://goo.gl/xmQnxf for more information on and examples of
          labels.

          If you plan to use labels in your own code, please note that
          additional characters may be allowed in the future. And so you are
          advised to use an internal label representation, such as JSON, which
          doesn't rely upon specific characters being disallowed. For example,
          representing labels as the string: name + "_" + value would prove
          problematic if we were to allow "_" in a future release.

          An object containing a list of "key": value pairs.
          Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
  - !ruby/object:Api::Resource
    name: 'Database'
    base_url: projects/{{project}}/instances/{{instance}}/databases
    description: |
      A Cloud Spanner Database which is hosted on a Spanner instance.
    transport: !ruby/object:Api::Resource::Transport
      decoder: decode_response
    collection_url_response: !ruby/object:Api::Resource::ResponseList
      items: 'databases'
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'instance'
        resource: 'Instance'
        imports: 'name'
        description: 'The instance to create the database on.'
        required: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          A unique identifier for the database, which cannot be changed after
          the instance is created. Values are of the form
          projects/<project>/instances/[a-z][-a-z0-9]*[a-z0-9]. The final
          segment of the name must be between 6 and 30 characters in length.
      - !ruby/object:Api::Type::Array
        item_type: Api::Type::String
        name: 'extraStatements'
        description: |
          An optional list of DDL statements to run inside the newly created
          database. Statements can create tables, indexes, etc. These statements
          execute atomically with the creation of the database: if there is an
          error in any statement, the database is not created.
        input: true
