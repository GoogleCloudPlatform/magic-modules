#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Google
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
<%= lines(autogen_notice :python) -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

<%= lines(compile('templates/ansible/documentation.erb'), 1) -%>
################################################################################
# Imports
################################################################################
<%
  readonly_selflink_rrefs = object.all_resourcerefs
                                  .select { |prop| prop.resource_ref.readonly }
                                  .select { |prop| prop.imports == 'selfLink' }
                                  .map(&:resource_ref)
                                  .uniq
-%>

<%
  update_props = properties_by_custom_update(object.all_user_properties)
  import = 'from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequest'
  import += ', remove_nones_from_dict' unless properties_with_classes(object.all_user_properties).empty?
  import += ', replace_resource_dict' if nonreadonly_rrefs(object)
-%>
<%= lines(import) -%>
import json
<%
  imports = object.imports || []
  imports << 'time' if object.async
  imports << 're' unless readonly_selflink_rrefs.empty?
-%>
<%= lines(imports.sort.uniq.map { |i| "import #{i}" }) -%>

################################################################################
# Main
################################################################################


def main():
    """Main function"""

<%
  mod_props = object.all_user_properties.reject(&:output).map do |prop|
    python_dict_for_property(prop, object)
  end
-%>
    module = GcpModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
<%= lines(indent_list(mod_props, 12)) -%>
        )
    )

    if not module.params['scopes']:
        module.params['scopes'] = <%= python_literal(object.__product.scopes) %>

    results = module.params

    auth = GcpSession(module, 'storage')
    if module.params['action'] == 'download':
        # Get file from API
        results = upload_file(module)
    else:
        # Get contents of file
        results = download_file(module)

    module.exit_json(**results)


def upload_file(module):
    data = auth.get(media_link(module))
    f = open(module.params['dest'], 'w')
    f.write(data.text.encode('utf8'))
    f.close()
    return fetch_resource(module, self_link(module))

def download_file(module):
    f = open(module.params['src'], 'r')
    src = f.read()
    results = return_if_object(module, auth.post(upload_link(module), src, headers=object_headers(module)))
    f.close()
    results['changed'] = True
    return results
    

def fetch_resource(module, link, allow_not_found=True):
    auth = GcpSession(module, 'storage')
    return return_if_object(module, auth.get(link), allow_not_found)


def self_link(module):
    if module.params['action'] == 'download':
        return "https://www.googleapis.com/storage/v1/b/{bucket}/o/{src}".format(**module.params)
    else:
        return "https://www.googleapis.com/storage/v1/b/{bucket}/o/{dest}".format(**module.params)

def media_link(module):
    if module.params['action'] == 'download':
        return "https://www.googleapis.com/storage/v1/b/{bucket}/o/{src}?alt=media".format(**module.params)
    else:
        return "https://www.googleapis.com/storage/v1/b/{bucket}/o/{dest}?alt=media".format(**module.params)

def upload_link(module):
    return "https://www.googleapis.com/upload/storage/v1/b/{bucket}/o?uploadType=media&name={dest}".format(**module.params)


def return_if_object(module, response, allow_not_found=False):
    # If not found, return nothing.
    if allow_not_found and response.status_code == 404:
        return None

    # If no content, return nothing.
    if response.status_code == 204:
        return None

    try:
        module.raise_for_status(response)
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)

    if navigate_hash(result, ['error', 'errors']):
        module.fail_json(msg=navigate_hash(result, ['error', 'errors']))

    return result


# Remove unnecessary properties from the response.
# This is for doing comparisons with Ansible's current parameters.
def object_headers(module):
    return {
        "name": module.params['dest'],
        "Content-Type": mimetypes.guess_type(module.params['src'])[0],
        "Content-Length": str(os.path.getsize(module.params['src']))
    }


if __name__ == '__main__':
    main()
