# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Terraform::Config
overrides: !ruby/object:Overrides::ResourceOverrides
  Bucket: !ruby/object:Overrides::Terraform::ResourceOverride
    exclude_resource: true
    import_format: ["{{name}}"]
    examples:
      - !ruby/object:Provider::Terraform::Examples
        name: "storage_bucket_basic"
        primary_resource_id: "default"
        vars:
          name: "my-bucket"
        primary_resource_name: "fmt.Sprintf(\"tf-test-my-bucket%s\", context[\"random_suffix\"])"
  BucketAccessControl: !ruby/object:Overrides::Terraform::ResourceOverride
    description: |
      Bucket ACLs can be managed authoritatively using the
      [`storage_bucket_acl`](https://www.terraform.io/docs/providers/google/r/storage_bucket_acl.html)
      resource. Do not use these two resources in conjunction to manage the same bucket.

      The BucketAccessControls resource manages the Access Control List
      (ACLs) for a single entity/role pairing on a bucket. ACLs let you specify who
      has access to your data and to what extent.

      There are three roles that can be assigned to an entity:

      READERs can get the bucket, though no acl property will be returned, and
      list the bucket's objects.  WRITERs are READERs, and they can insert
      objects into the bucket and delete the bucket's objects.  OWNERs are
      WRITERs, and they can get the acl property of a bucket, update a bucket,
      and call all BucketAccessControls methods on the bucket.  For more
      information, see Access Control, with the caveat that this API uses
      READER, WRITER, and OWNER instead of READ, WRITE, and FULL_CONTROL.
    examples:
    - !ruby/object:Provider::Terraform::Examples
      name: "storage_bucket_access_control_public_bucket"
      primary_resource_id: "public_rule"
      vars:
        bucket_name: "static-content-bucket"
    id_format: "{{bucket}}/{{entity}}"
    import_format: ["{{bucket}}/{{entity}}"]
    # This resource is a child resource
    skip_sweeper: true
    properties:
      id: !ruby/object:Overrides::Terraform::PropertyOverride
        exclude: true
      bucket: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_expand: 'templates/terraform/custom_expand/resourceref_as_string.go.erb'
      # entityId and projectTeam don't seem to actually part of the schema
      entityId: !ruby/object:Overrides::Terraform::PropertyOverride
        exclude: true
      projectTeam: !ruby/object:Overrides::Terraform::PropertyOverride
        exclude: true
  ObjectAccessControl: !ruby/object:Overrides::Terraform::ResourceOverride
    examples:
    - !ruby/object:Provider::Terraform::Examples
      name: "storage_object_access_control_public_object"
      primary_resource_id: "public_rule"
      vars:
        bucket_name: "static-content-bucket"
        object_name: "public-object"
    id_format: "{{bucket}}/{{object}}/{{entity}}"
    import_format: ["{{bucket}}/{{object}}/{{entity}}"]
    # This resource is a child resource
    skip_sweeper: true
    properties:
      id: !ruby/object:Overrides::Terraform::PropertyOverride
        exclude: true
      bucket: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_expand: 'templates/terraform/custom_expand/resourceref_as_string.go.erb'
      object: !ruby/object:Overrides::Terraform::PropertyOverride
        description: The name of the object to apply the access control to.
  DefaultObjectACL: !ruby/object:Overrides::Terraform::ResourceOverride
    name: "DefaultObjectAccessControl"
    examples:
    - !ruby/object:Provider::Terraform::Examples
      name: "storage_default_object_access_control_public"
      primary_resource_id: "public_rule"
      vars:
        bucket_name: "static-content-bucket"
    id_format: "{{bucket}}/{{entity}}"
    import_format: ["{{bucket}}/{{entity}}"]
    # This resource is a child resource
    skip_sweeper: true
    properties:
      id: !ruby/object:Overrides::Terraform::PropertyOverride
        exclude: true
      bucket: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_expand: 'templates/terraform/custom_expand/resourceref_as_string.go.erb'
        # This field is (unexpectedly) not returned from the API
        ignore_read: true
  Object: !ruby/object:Overrides::Terraform::ResourceOverride
    exclude: true
# This is for copying files over
files: !ruby/object:Provider::Config::Files
  # These files have templating (ERB) code that will be run.
  # This is usually to add licensing info, autogeneration notices, etc.
  compile:
<%= lines(indent(compile('provider/terraform/product~compile.yaml'), 4)) -%>
