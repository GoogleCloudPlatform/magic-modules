# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: AccessContextManager
display_name: Access Context Manager
versions:
  - !ruby/object:Api::Product::Version
    name: beta
    base_url: https://accesscontextmanager.googleapis.com/v1beta/
scopes:
  - https://www.googleapis.com/auth/cloud-platform
objects:
  - !ruby/object:Api::Resource
    name: 'AccessPolicy'
    base_url: accessPolicies
    self_link: "accessPolicies/{{name}}"
    update_verb: :PATCH
    update_mask: true
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1beta/accessPolicies'
    async: !ruby/object:Api::Async
      operation: !ruby/object:Api::Async::Operation
        path: 'name'
        base_url: '{{op_id}}'
        wait_ms: 1000
        timeouts: !ruby/object:Api::Timeouts
          insert_sec: 360
          update_sec: 360
          delete_sec: 360
      result: !ruby/object:Api::Async::Result
        path: 'response'
        resource_inside_response: true
      status: !ruby/object:Api::Async::Status
        path: 'done'
        complete: true
        allowed:
          - true
          - false
      error: !ruby/object:Api::Async::Error
        path: 'error'
        message: 'message'
    description: |
      AccessPolicy is a container for AccessLevels (which define the necessary
      attributes to use GCP services) and ServicePerimeters (which define
      regions of services able to freely pass data within a perimeter). An
      access policy is globally visible within an organization, and the
      restrictions it specifies apply to all projects within an organization.
    parameters:
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        description: |
          The parent of this AccessPolicy in the Cloud Resource Hierarchy.
          Format: organizations/{organization_id}
      - !ruby/object:Api::Type::String
        name: title
        required: true
        description: |
          Human readable title. Does not affect behavior.
    properties:
      - !ruby/object:Api::Type::String
        name: name
        description: |
          Resource name of the AccessPolicy. Format: accessPolicies/{policy_id}
        output: true
      - !ruby/object:Api::Type::Time
        name: 'createTime'
        description: |
          Time the AccessPolicy was created in UTC.
        output: true
      - !ruby/object:Api::Type::Time
        name: 'updateTime'
        description: |
          Time the AccessPolicy was updated in UTC.
        output: true
  - !ruby/object:Api::Resource
    name: 'AccessLevel'
    # This is an unusual API, so we need to use a few fields to map the methods
    # to the right URL.
    # create_url is the Create URL
    # base_url is the Get and Delete and Patch URL. It is empty on purpose.
    # List won't work yet. It should share a URL with Create.
    create_url: "{{parent}}/accessLevels"
    base_url: ""
    self_link: "{{name}}"
    update_verb: :PATCH
    update_mask: true
    async: !ruby/object:Api::Async
      operation: !ruby/object:Api::Async::Operation
        path: 'name'
        base_url: '{{op_id}}'
        wait_ms: 1000
        timeouts: !ruby/object:Api::Timeouts
          insert_sec: 360
          update_sec: 360
          delete_sec: 360
      result: !ruby/object:Api::Async::Result
        path: 'response'
        resource_inside_response: true
      status: !ruby/object:Api::Async::Status
        path: 'done'
        complete: true
        allowed:
          - true
          - false
      error: !ruby/object:Api::Async::Error
        path: 'error'
        message: 'message'
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1beta/accessPolicies.accessLevels'
    description: |
      An AccessLevel is a label that can be applied to requests to GCP services,
      along with a list of requirements necessary for the label to be applied.
    parameters:
      # Parent is a path parameter that _cannot_ be read or sent in the request at all.
      # This must be done at the provider level.
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        description: |
          The AccessPolicy this AccessLevel lives in.
          Format: accessPolicies/{policy_id}
      - !ruby/object:Api::Type::String
        name: name
        input: true
        required: true
        description: |
          Resource name for the Access Level. The short_name component must begin
          with a letter and only include alphanumeric and '_'.
          Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    properties:
      - !ruby/object:Api::Type::String
        name: title
        required: true
        description: |
          Human readable title. Must be unique within the Policy.
      - !ruby/object:Api::Type::String
        name: 'description'
        description: |
          Description of the AccessLevel and its use. Does not affect behavior.
      # createTime and updateTime are listed in the docs but are not ever present
      # in actual API responses.
      - !ruby/object:Api::Type::Time
        exclude: true
        name: 'createTime'
        description: |
          Time the AccessPolicy was created in UTC.
        output: true
      - !ruby/object:Api::Type::Time
        exclude: true
        name: 'updateTime'
        description: |
          Time the AccessPolicy was updated in UTC.
        output: true
      - !ruby/object:Api::Type::NestedObject
        name: 'basic'
        description: |
          A set of predefined conditions for the access level and a combining function.
        properties:
          - !ruby/object:Api::Type::Enum
            name: 'combiningFunction'
            description: |
              How the conditions list should be combined to determine if a request
              is granted this AccessLevel. If AND is used, each Condition in
              conditions must be satisfied for the AccessLevel to be applied. If
              OR is used, at least one Condition in conditions must be satisfied
              for the AccessLevel to be applied. Defaults to AND if unspecified.
            default_value: :AND
            values:
              - :AND
              - :OR
          # All of the false defaults below here are omitted on purpose.
          # Let's keep this as simple as possible, since they will all be set by the API.
          - !ruby/object:Api::Type::Array
            name: 'conditions'
            required: true
            min_size: 1
            description: |
              A set of requirements for the AccessLevel to be granted.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
              - !ruby/object:Api::Type::Array
                name: 'ipSubnetworks'
                description: |
                  A list of CIDR block IP subnetwork specification. May be IPv4
                  or IPv6.
                  Note that for a CIDR IP address block, the specified IP address
                  portion must be properly truncated (i.e. all the host bits must
                  be zero) or the input is considered malformed. For example,
                  "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
                  for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
                  is not. The originating IP of a request must be in one of the
                  listed subnets in order for this Condition to be true.
                  If empty, all IP addresses are allowed.
                item_type: Api::Type::String
              - !ruby/object:Api::Type::Array
                name: 'requiredAccessLevels'
                description: |
                  A list of other access levels defined in the same Policy,
                  referenced by resource name. Referencing an AccessLevel which
                  does not exist is an error. All access levels listed must be
                  granted for the Condition to be true.
                  Format: accessPolicies/{policy_id}/accessLevels/{short_name}
                item_type: Api::Type::String
              - !ruby/object:Api::Type::Array
                name: 'members'
                description: |
                  An allowed list of members (users, groups, service accounts).
                  The signed-in user originating the request must be a part of one
                  of the provided members. If not specified, a request may come
                  from any user (logged in/not logged in, not present in any
                  groups, etc.).
                  Formats: `user:{emailid}`, `group:{emailid}`, `serviceAccount:{emailid}`
                item_type: Api::Type::String
              - !ruby/object:Api::Type::Boolean
                name: 'negate'
                description: |
                  Whether to negate the Condition. If true, the Condition becomes
                  a NAND over its non-empty fields, each field must be false for
                  the Condition overall to be satisfied. Defaults to false.
              - !ruby/object:Api::Type::NestedObject
                name: 'devicePolicy'
                description: |
                  Device specific restrictions, all restrictions must hold for
                  the Condition to be true. If not specified, all devices are
                  allowed.
                properties:
                  - !ruby/object:Api::Type::Boolean
                    name: 'requireScreenLock'
                    description: |
                      Whether or not screenlock is required for the DevicePolicy
                      to be true. Defaults to false.
                  - !ruby/object:Api::Type::Array
                    name: 'allowedEncryptionStatuses'
                    description: |
                      A list of allowed encryptions statuses.
                      An empty list allows all statuses.
                    item_type: !ruby/object:Api::Type::Enum
                      name: 'undefined'
                      description: |
                        This field only has a name and description because of MM
                        limitations. It should not appear in downstreams.
                      values:
                        - :ENCRYPTION_UNSPECIFIED
                        - :ENCRYPTION_UNSUPPORTED
                        - :UNENCRYPTED
                        - :ENCRYPTED
                  - !ruby/object:Api::Type::Array
                    name: 'allowedDeviceManagementLevels'
                    description: |
                      A list of allowed device management levels.
                      An empty list allows all management levels.
                    item_type: !ruby/object:Api::Type::Enum
                      name: 'undefined'
                      description: |
                        This field only has a name and description because of MM
                        limitations. It should not appear in downstreams.
                      values:
                        - :MANAGEMENT_UNSPECIFIED
                        - :NONE
                        - :BASIC
                        - :COMPLETE
                  - !ruby/object:Api::Type::Array
                    name: 'osConstraints'
                    description: |
                      A list of allowed OS versions.
                      An empty list allows all types and all versions.
                    item_type: !ruby/object:Api::Type::NestedObject
                      properties:
                      - !ruby/object:Api::Type::String
                        name: 'minimumVersion'
                        description: |
                          The minimum allowed OS version. If not set, any version
                          of this OS satisfies the constraint.
                          Format: "major.minor.patch" such as "10.5.301", "9.2.1".
                      - !ruby/object:Api::Type::Enum
                        name: 'osType'
                        description: |
                          The operating system type of the device.
                        values:
                        - :OS_UNSPECIFIED
                        - :DESKTOP_MAC
                        - :DESKTOP_WINDOWS
                        - :DESKTOP_LINUX
                        - :DESKTOP_CHROME_OS
                        - :ANDROID
                        - :IOS
  - !ruby/object:Api::Resource
    name: 'ServicePerimeter'
    # This is an unusual API, so we need to use a few fields to map the methods
    # to the right URL.
    # create_url is the Create URL
    # base_url is the Get and Delete and Patch URL. It is empty on purpose.
    # List won't work yet. It should share a URL with Create.
    create_url: "{{parent}}/servicePerimeters"
    base_url: ""
    self_link: "{{name}}"
    update_verb: :PATCH
    update_mask: true
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1beta/accessPolicies.servicePerimeters'
    description: |
      ServicePerimeter describes a set of GCP resources which can freely import
      and export data amongst themselves, but not export outside of the
      ServicePerimeter. If a request with a source within this ServicePerimeter
      has a target outside of the ServicePerimeter, the request will be blocked.
      Otherwise the request is allowed. There are two types of Service Perimeter
      - Regular and Bridge. Regular Service Perimeters cannot overlap, a single
      GCP project can only belong to a single regular Service Perimeter. Service
      Perimeter Bridges can contain only GCP projects as members, a single GCP
      project may belong to multiple Service Perimeter Bridges.
    async: !ruby/object:Api::Async
      operation: !ruby/object:Api::Async::Operation
        path: 'name'
        base_url: '{{op_id}}'
        wait_ms: 1000
        timeouts: !ruby/object:Api::Timeouts
          insert_sec: 360
          update_sec: 360
          delete_sec: 360
      result: !ruby/object:Api::Async::Result
        path: 'response'
        resource_inside_response: true
      status: !ruby/object:Api::Async::Status
        path: 'done'
        complete: true
        allowed:
          - true
          - false
      error: !ruby/object:Api::Async::Error
        path: 'error'
        message: 'message'
    parameters:
      # Parent is a path parameter that _cannot_ be read or sent in the request at all.
      # This must be done at the provider level.
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        description: |
          The AccessPolicy this ServicePerimeter lives in.
          Format: accessPolicies/{policy_id}
      - !ruby/object:Api::Type::String
        name: name
        input: true
        required: true
        description: |
          Resource name for the ServicePerimeter. The short_name component must
          begin with a letter and only include alphanumeric and '_'.
          Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
    properties:
      - !ruby/object:Api::Type::String
        name: title
        required: true
        description: |
          Human readable title. Must be unique within the Policy.
      - !ruby/object:Api::Type::String
        name: 'description'
        description: |
          Description of the ServicePerimeter and its use. Does not affect
          behavior.
      - !ruby/object:Api::Type::Time
        name: 'createTime'
        description: |
          Time the AccessPolicy was created in UTC.
        output: true
      - !ruby/object:Api::Type::Time
        name: 'updateTime'
        description: |
          Time the AccessPolicy was updated in UTC.
        output: true
      - !ruby/object:Api::Type::Enum
        name: 'perimeterType'
        description: |
          Specifies the type of the Perimeter. There are two types: regular and
          bridge. Regular Service Perimeter contains resources, access levels,
          and restricted/unrestricted services. Every resource can be in at most
          ONE regular Service Perimeter.

          In addition to being in a regular service perimeter, a resource can also
          be in zero or more perimeter bridges. A perimeter bridge only contains
          resources. Cross project operations are permitted if all effected
          resources share some perimeter (whether bridge or regular). Perimeter
          Bridge does not contain access levels or services: those are governed
          entirely by the regular perimeter that resource is in.

          Perimeter Bridges are typically useful when building more complex
          toplogies with many independent perimeters that need to share some data
          with a common perimeter, but should not be able to share data among
          themselves.
        values:
          - :PERIMETER_TYPE_REGULAR
          - :PERIMETER_TYPE_BRIDGE
        default_value: :PERIMETER_TYPE_REGULAR
      - !ruby/object:Api::Type::NestedObject
        name: 'status'
        description: |
          ServicePerimeter configuration. Specifies sets of resources,
          restricted/unrestricted services and access levels that determine
          perimeter content and boundaries.
        properties:
          - !ruby/object:Api::Type::Array
            name: 'resources'
            description: |
              A list of GCP resources that are inside of the service perimeter.
              Currently only projects are allowed.
              Format: projects/{project_number}
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'accessLevels'
            description: |
              A list of AccessLevel resource names that allow resources within
              the ServicePerimeter to be accessed from the internet.
              AccessLevels listed must be in the same policy as this
              ServicePerimeter. Referencing a nonexistent AccessLevel is a
              syntax error. If no AccessLevel names are listed, resources within
              the perimeter can only be accessed via GCP calls with request
              origins within the perimeter. For Service Perimeter Bridge, must
              be empty.

              Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'unrestrictedServices'
            description: |
              GCP services that are not subject to the Service Perimeter
              restrictions. May contain a list of services or a single wildcard
              "*". For example, if logging.googleapis.com is unrestricted, users
              can access logs inside the perimeter as if the perimeter doesn't
              exist, and it also means VMs inside the perimeter can access logs
              outside the perimeter.

              The wildcard means that unless explicitly specified by
              "restrictedServices" list, any service is treated as unrestricted.
              One of the fields "restrictedServices", "unrestrictedServices"
              must contain a wildcard "*", otherwise the Service Perimeter
              specification is invalid. It also means that both field being
              empty is invalid as well. "unrestrictedServices" can be empty if
              and only if "restrictedServices" list contains a "*" wildcard.
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'restrictedServices'
            description: |
              GCP services that are subject to the Service Perimeter
              restrictions. May contain a list of services or a single wildcard
              "*". For example, if storage.googleapis.com is specified, access
              to the storage buckets inside the perimeter must meet the
              perimeter's access restrictions.

              Wildcard means that unless explicitly specified by
              "unrestrictedServices" list, any service is treated as restricted.
              One of the fields "restrictedServices", "unrestrictedServices"
              must contain a wildcard "*", otherwise the Service Perimeter
              specification is invalid. It also means that both field being
              empty is invalid as well. "restrictedServices" can be empty if and
              only if "unrestrictedServices" list contains a "*" wildcard.
            item_type: Api::Type::String
