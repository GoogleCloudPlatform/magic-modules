# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: Pubsub
display_name: Cloud Pub/Sub
versions:
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://pubsub.googleapis.com/v1/
scopes:
  - https://www.googleapis.com/auth/pubsub
apis_required:
  - !ruby/object:Api::Product::ApiReference
    name: Cloud Pub/Sub API
    url: https://console.cloud.google.com/apis/library/pubsub.googleapis.com/
objects:
  - !ruby/object:Api::Resource
    name: 'Topic'
    base_url: projects/{{project}}/topics
    create_verb: :PUT
    description: |
      A named resource to which messages are sent by publishers.
    iam_policy: !ruby/object:Api::Resource::IamPolicy
      exclude: false
      method_name_separator: ':'
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        required: true
        description: 'Name of the topic.'
        input: true
        pattern: 'projects/{{project}}/topics/{{name}}'
      - !ruby/object:Api::Type::String
        name: 'kmsKeyName'
        description: |
          The resource name of the Cloud KMS CryptoKey to be used to protect access
          to messages published on this topic. Your project's PubSub service account
          (`service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com`) must have
          `roles/cloudkms.cryptoKeyEncrypterDecrypter` to use this feature.
          
          The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`
        input: true
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'labels'
        description: |
          A set of key/value label pairs to assign to this Topic.
      - !ruby/object:Api::Type::NestedObject
        name: 'messageStoragePolicy'
        description: |
          Policy constraining the set of Google Cloud Platform regions where
          messages published to the topic may be stored. If not present, then no
          constraints are in effect.
        properties:
          - !ruby/object:Api::Type::Array
            name: 'allowedPersistenceRegions'
            description: |
              A list of IDs of GCP regions where messages that are published to
              the topic may be persisted in storage. Messages published by
              publishers running in non-allowed GCP regions (or running outside
              of GCP altogether) will be routed for storage in one of the
              allowed regions. An empty list means that no regions are allowed,
              and is not a valid configuration.
            item_type: Api::Type::String
            required: true
    update_verb: :PATCH
    update_mask: true
    update_url: projects/{{project}}/topics/{{name}}
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Managing Topics':
          'https://cloud.google.com/pubsub/docs/admin#managing_topics'
      api: 'https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics'
  - !ruby/object:Api::Resource
    name: 'Subscription'
    base_url: projects/{{project}}/subscriptions
    create_verb: :PUT
    description: |
      A named resource representing the stream of messages from a single,
      specific topic, to be delivered to the subscribing application.
    update_verb: :PATCH
    update_mask: true
    update_url: projects/{{project}}/subscriptions/{{name}}
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Managing Subscriptions':
          'https://cloud.google.com/pubsub/docs/admin#managing_subscriptions'
      api: 'https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions'
    iam_policy: !ruby/object:Api::Resource::IamPolicy
      exclude: true
      method_name_separator: ':'
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: 'Name of the subscription.'
        required: true
        input: true
        pattern: 'projects/{{project}}/subscriptions/{{name}}'
      - !ruby/object:Api::Type::ResourceRef
        name: 'topic'
        resource: 'Topic'
        imports: 'name'
        description: |
          A reference to a Topic resource.
        required: true
        input: true
        pattern: 'projects/{{project}}/topics/{{topic}}'
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'labels'
        description: |
          A set of key/value label pairs to assign to this Subscription.
      - !ruby/object:Api::Type::NestedObject
        name: 'pushConfig'
        description: |
          If push delivery is used with this subscription, this field is used to
          configure it. An empty pushConfig signifies that the subscriber will
          pull and ack messages using API methods.
        properties:
          - !ruby/object:Api::Type::NestedObject
            name: 'oidcToken'
            description: |
              If specified, Pub/Sub will generate and attach an OIDC JWT token as
              an Authorization header in the HTTP request for every pushed message.
            properties:
              - !ruby/object:Api::Type::String
                name: 'serviceAccountEmail'
                required: true
                description: |
                  Service account email to be used for generating the OIDC token.
                  The caller (for subscriptions.create, subscriptions.patch, and
                  subscriptions.modifyPushConfig RPCs) must have the
                  iam.serviceAccounts.actAs permission for the service account.
              - !ruby/object:Api::Type::String
                name: 'audience'
                description: |
                  Audience to be used when generating OIDC token. The audience claim
                  identifies the recipients that the JWT is intended for. The audience
                  value is a single case-sensitive string. Having multiple values (array)
                  for the audience field is not supported. More info about the OIDC JWT
                  token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
                  Note: if not specified, the Push endpoint URL will be used.
          - !ruby/object:Api::Type::String
            name: 'pushEndpoint'
            description: |
              A URL locating the endpoint to which messages should be pushed.
              For example, a Webhook endpoint might use
              "https://example.com/push".
            required: true
          - !ruby/object:Api::Type::KeyValuePairs
            name: 'attributes'
            description: |
              Endpoint configuration attributes.

              Every endpoint has a set of API supported attributes that can
              be used to control different aspects of the message delivery.

              The currently supported attribute is x-goog-version, which you
              can use to change the format of the pushed message. This
              attribute indicates the version of the data expected by
              the endpoint. This controls the shape of the pushed message
              (i.e., its fields and metadata). The endpoint version is
              based on the version of the Pub/Sub API.

              If not present during the subscriptions.create call,
              it will default to the version of the API used to make
              such call. If not present during a subscriptions.modifyPushConfig
              call, its value will not be changed. subscriptions.get
              calls will always return a valid version, even if the
              subscription was created without this attribute.

              The possible values for this attribute are:

              - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
              - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
      - !ruby/object:Api::Type::Integer
        name: 'ackDeadlineSeconds'
        description: |
          This value is the maximum time after a subscriber receives a message
          before the subscriber should acknowledge the message. After message
          delivery but before the ack deadline expires and before the message is
          acknowledged, it is an outstanding message and will not be delivered
          again during that time (on a best-effort basis).

          For pull subscriptions, this value is used as the initial value for
          the ack deadline. To override this value for a given message, call
          subscriptions.modifyAckDeadline with the corresponding ackId if using
          pull. The minimum custom deadline you can specify is 10 seconds. The
          maximum custom deadline you can specify is 600 seconds (10 minutes).
          If this parameter is 0, a default value of 10 seconds is used.

          For push delivery, this value is also used to set the request timeout
          for the call to the push endpoint.

          If the subscriber never acknowledges the message, the Pub/Sub system
          will eventually redeliver the message.
      - !ruby/object:Api::Type::String
        name: 'messageRetentionDuration'
        default_value: '604800s'
        description: |
          How long to retain unacknowledged messages in the subscription's
          backlog, from the moment a message is published. If
          retainAckedMessages is true, then this also configures the retention
          of acknowledged messages, and thus configures how far back in time a
          subscriptions.seek can be done. Defaults to 7 days. Cannot be more
          than 7 days (`"604800s"`) or less than 10 minutes (`"600s"`).

          A duration in seconds with up to nine fractional digits, terminated
          by 's'. Example: `"600.5s"`.
      - !ruby/object:Api::Type::Boolean
        name: 'retainAckedMessages'
        description: |
          Indicates whether to retain acknowledged messages. If `true`, then
          messages are not expunged from the subscription's backlog, even if
          they are acknowledged, until they fall out of the
          messageRetentionDuration window.
      - !ruby/object:Api::Type::NestedObject
        name: 'expirationPolicy'
        allow_empty_object: true
        send_empty_value: true
        description: |
          A policy that specifies the conditions for this subscription's expiration.
          A subscription is considered active as long as any connected subscriber
          is successfully consuming messages from the subscription or is issuing
          operations on the subscription. If expirationPolicy is not set, a default
          policy with ttl of 31 days will be used.  If it is set but ttl is "", the
          resource never expires.  The minimum allowed value for expirationPolicy.ttl
          is 1 day.
        properties:
          - !ruby/object:Api::Type::String
            name: 'ttl'
            required: true
            description: |
              Specifies the "time-to-live" duration for an associated resource. The
              resource expires if it is not active for a period of ttl.
              If ttl is not set, the associated resource never expires.
              A duration in seconds with up to nine fractional digits, terminated by 's'.
              Example - "3.5s".
