# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Chef::Config
manifest: !ruby/object:Provider::Chef::Manifest
  version: '0.1.0'
  source: 'https://github.com/GoogleCloudPlatform/chef-google-dns'
  issues: 'https://github.com/GoogleCloudPlatform/chef-google-dns/issues'
  summary: 'A Chef cookbook to manage Google Cloud DNS resources'
  description: |
    This cookbook provides the built-in types and services for Chef to manage
    Google Cloud DNS resources, as native Chef types.
  depends:
    - !ruby/object:Provider::Config::Requirements
      name: 'google-gauth'
      versions: '< 0.2.0'
  operating_systems:
<%= indent(include('provider/chef/common~operating_systems.yaml'), 4) %>
overrides: !ruby/object:Provider::ResourceOverrides
  ManagedZone: !ruby/object:Provider::Chef::ResourceOverride
    handlers: !ruby/object:Provider::Chef::Handlers
      update: |
        message = 'ManagedZone cannot be edited'
        Chef::Log.fatal message
        raise message
  ResourceRecordSet: !ruby/object:Provider::Chef::ResourceOverride
    handlers: !ruby/object:Provider::Chef::Handlers
      create: |
        change = create_change nil, updated_record, new_resource
        change_id = change['id'].to_i
        debug("created for transaction '#{change_id}' to complete")
        wait_for_change_to_complete change_id, @new_resource \
          if change['status'] == 'pending'
      delete: |
        change = create_change fetch, nil, @new_resource
        change_id = change['id'].to_i
        debug("created for transaction '#{change_id}' to complete")
        wait_for_change_to_complete change_id, @new_resource \
          if change['status'] == 'pending'
      update: |
        change = create_change fetch, updated_record, new_resource
        change_id = change['id'].to_i
        debug("created for transaction '#{change_id}' to complete")
        wait_for_change_to_complete change_id, new_resource \
          if change['status'] == 'pending'
    provider_helpers:
      - 'products/dns/helpers/chef_provider_resource_set.rb.erb'
      - 'products/dns/helpers/provider_resource_set.rb.erb'
    resource_to_request: false
    return_if_object: false
    unwrap_resource: false
  Project: !ruby/object:Provider::Chef::ResourceOverride
    handlers: !ruby/object:Provider::Chef::Handlers
      update: |
        message = 'Project cannot be edited'
        Chef::Log.fatal message
        raise message
tests: !ruby/object:Api::Resource::HashArray
<%= indent(include('products/dns/test.yaml'), 2) %>
properties:
  - array
  - enum
  - integer
  - string
  - time
# TODO(nelsonjr): Figure out a way to create a test cookbook and publish
# examples to whatever structure we eventually create.
examples: !ruby/object:Api::Resource::HashArray
  ManagedZone:
    - delete_managed_zone.rb
    - managed_zone.rb
  Project:
    - project.rb
  ResourceRecordSet:
    - delete_resource_record_set.rb
    - resource_record_set.rb
files: !ruby/object:Provider::Config::Files
  copy:
<%= indent(include('provider/chef/common~copy.yaml'), 4) %>
  compile:
<%= indent(include('provider/chef/common~compile~before.yaml'), 4) %>
<%= indent(include('provider/chef/common~compile~after.yaml'), 4) %>
<% # common~compile~after.yaml should be the last line of compile: section -%>
test_data: !ruby/object:Provider::Config::TestData
<%= indent(include('products/dns/network_test_data.yaml'), 2) %>
style:
  - !ruby/object:Provider::Config::StyleException
    name: resources/managed_zone.rb
    pinpoints:
      - class: Google::GDNS::ManagedZone
        exceptions:
          - Metrics/ClassLength
  - !ruby/object:Provider::Config::StyleException
    name: resources/resource_record_set.rb
    pinpoints:
      - class: Google::GDNS::ResourceRecordSet
        exceptions:
          - Metrics/ClassLength
  - !ruby/object:Provider::Config::StyleException
    name: resources/project.rb
    pinpoints:
      - class: Google::GDNS::Project
        exceptions:
          - Metrics/ClassLength
      - function: self.resource_to_hash
        exceptions:
          - Metrics/MethodLength
