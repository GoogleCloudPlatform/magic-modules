# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Ansible::Config
manifest: !ruby/object:Provider::Ansible::Manifest
  metadata_version: '1.1'
  status:
    - preview
  supported_by: 'community'
  requirements:
    - python >= 2.6
    - requests >= 2.18.4
    - google-auth >= 1.3.0
  version_added: '2.5'
  author: Google Inc. (@googlecloudplatform)
# This is where custom code would be defined eventually.
overrides: !ruby/object:Provider::ResourceOverrides
  ManagedZone: !ruby/object:Provider::Ansible::ResourceOverride
    editable: false
  ResourceRecordSet: !ruby/object:Provider::Ansible::ResourceOverride
    access_api_results: true
    editable: true
    version_added: '2.6'
    imports:
      - copy
      - datetime
      - time
    create: |
      change = create_change(None, updated_record(module), module)
      change_id = int(change['id'])
      if change['status'] == 'pending':
          wait_for_change_to_complete(change_id, module)
      return fetch_wrapped_resource(module, 'dns#resourceRecordSet',
                                    'dns#resourceRecordSetsListResponse',
                                    'rrsets')
    delete: |
      change = create_change(fetch, None, module)
      change_id = int(change['id'])
      if change['status'] == 'pending':
          wait_for_change_to_complete(change_id, module)
      return fetch_wrapped_resource(module, 'dns#resourceRecordSet',
                                    'dns#resourceRecordSetsListResponse',
                                    'rrsets')
    update: |
      change = create_change(fetch, updated_record(module), module)
      change_id = int(change['id'])
      if change['status'] == 'pending':
          wait_for_change_to_complete(change_id, module)
      return fetch_wrapped_resource(module, 'dns#resourceRecordSet',
                                    'dns#resourceRecordSetsListResponse',
                                    'rrsets')
    provider_helpers:
      - 'products/dns/helpers/ansible_provider_resource_set.py.erb'
    hidden:
      - unwrap_resource
      - resource_to_request
      - return_if_object
  Project: !ruby/object:Provider::Ansible::ResourceOverride
    # TODO(alexstephen): Re-evaluate merging Project into Ansible
    exclude: true
  Change: !ruby/object:Provider::Ansible::ResourceOverride
    exclude: true
examples: !ruby/object:Api::Resource::HashArray
files: !ruby/object:Provider::Config::Files
  copy:
<%= lines(indent(compile('provider/ansible/common~copy.yaml'), 4)) -%>
  compile:
<%= lines(indent(compile('provider/ansible/common~compile.yaml'), 4)) -%>
tests: !ruby/object:Api::Resource::HashArray
# This would be for custom network responses. Tests work by running some block
# of autogenerated Chef/Puppet code and then verifying the network calls.
# The network call verifications are automatically generated, but can be
# overriden.
test_data: !ruby/object:Provider::Config::TestData
