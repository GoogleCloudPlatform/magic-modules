# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: CloudBuild
display_name: Cloud Build
versions:
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://cloudbuild.googleapis.com/v1/
  - !ruby/object:Api::Product::Version
    name: beta
    # This is correct even though it's the same base_url as v1.
    # Some features in this API are beta, even though they're all
    # released as v1.  This is not ideal, but it's not something
    # we can fix - we just want to protect our users from APIs that
    # might change unexpectedly.
    base_url: https://cloudbuild.googleapis.com/v1/
scopes:
  - https://www.googleapis.com/auth/cloud-platform
apis_required:
  - !ruby/object:Api::Product::ApiReference
    name: Cloud Build API
    url: https://console.cloud.google.com/apis/library/cloudbuild.googleapis.com/
objects:
  - !ruby/object:Api::Resource
    name: 'Trigger'
    base_url: projects/{{project}}/triggers
    self_link: projects/{{project}}/triggers/{{id}}
    update_verb: :PATCH
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Automating builds using build triggers': 'https://cloud.google.com/cloud-build/docs/running-builds/automate-builds'
      api: 'https://cloud.google.com/cloud-build/docs/api/reference/rest/'
    description: |
      Configuration for an automated build in response to source repository changes.
    properties:
      - !ruby/object:Api::Type::String
        name: 'id'
        description: |
          The unique identifier for the trigger.
        output: true
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          Name of the trigger. Must be unique within the project.
      - !ruby/object:Api::Type::String
        name: 'description'
        description: |
          Human-readable description of the trigger.
      - !ruby/object:Api::Type::Boolean
        name: 'disabled'
        description: |
          Whether the trigger is disabled or not. If true, the trigger will never result in a build.
      - !ruby/object:Api::Type::Time
        name: 'createTime'
        output: true
        description: |
          Time when the trigger was created.
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'substitutions'
        description: |
          Substitutions data for Build resource.
      - !ruby/object:Api::Type::String
        name: 'filename'
        exactly_one_of:
          - filename
          - build
        description: |
          Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must be provided.
      - !ruby/object:Api::Type::Array
        name: 'ignoredFiles'
        item_type: Api::Type::String
        description: |
          ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
          extended with support for `**`.

          If ignoredFiles and changed files are both empty, then they are not
          used to determine whether or not to trigger a build.

          If ignoredFiles is not empty, then we ignore any files that match any
          of the ignored_file globs. If the change has no files that are outside
          of the ignoredFiles globs, then we do not trigger a build.
      - !ruby/object:Api::Type::Array
        name: 'includedFiles'
        item_type: Api::Type::String
        description: |
          ignoredFiles and includedFiles are file glob matches using http://godoc/pkg/path/filepath#Match
          extended with support for `**`.

          If any of the files altered in the commit pass the ignoredFiles filter
          and includedFiles is empty, then as far as this filter is concerned, we
          should trigger the build.

          If any of the files altered in the commit pass the ignoredFiles filter
          and includedFiles is not empty, then we make sure that at least one of
          those files matches a includedFiles glob. If not, then we do not trigger
          a build.
      - !ruby/object:Api::Type::NestedObject
        name: 'triggerTemplate'
        description: |
          Template describing the types of source changes to trigger a build.

          Branch and tag names in trigger templates are interpreted as regular
          expressions. Any branch or tag change that matches that regular
          expression will trigger a build.
        properties:
          - !ruby/object:Api::Type::String
            name: 'projectId'
            description: |
              ID of the project that owns the Cloud Source Repository. If
              omitted, the project ID requesting the build is assumed.
          - !ruby/object:Api::Type::String
            name: 'repoName'
            default_value: 'default'
            description: |
              Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
          - !ruby/object:Api::Type::String
            name: 'dir'
            description: |
              Directory, relative to the source root, in which to run the build.

              This must be a relative path. If a step's dir is specified and
              is an absolute path, this value is ignored for that step's
              execution.
          - !ruby/object:Api::Type::String
            name: 'branchName'
            description: |
              Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
              This field is a regular expression.
            exactly_one_of:
              - trigger_template.0.branch_name
              - trigger_template.0.tag_name
              - trigger_template.0.commit_sha
          - !ruby/object:Api::Type::String
            name: 'tagName'
            description: |
              Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
              This field is a regular expression.
            exactly_one_of:
              - trigger_template.0.branch_name
              - trigger_template.0.tag_name
              - trigger_template.0.commit_sha
          - !ruby/object:Api::Type::String
            name: 'commitSha'
            description: |
              Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided.
            exactly_one_of:
              - trigger_template.0.branch_name
              - trigger_template.0.tag_name
              - trigger_template.0.commit_sha
      - !ruby/object:Api::Type::NestedObject
        name: 'github'
        description: |
            Describes the configuration of a trigger that creates a build whenever a GitHub event is received.
        min_version: beta
        exactly_one_of:
          - trigger_template
          - github
        properties:
          - !ruby/object:Api::Type::String
            name: 'owner'
            description: |
                Owner of the repository. For example: The owner for
                https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
          - !ruby/object:Api::Type::String
            name: 'name'
            description: |
                Name of the repository. For example: The name for
                https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
          - !ruby/object:Api::Type::NestedObject
            name: 'pullRequest'
            description: |
                filter to match changes in pull requests.  Specify only one of pullRequest or push.
            exactly_one_of:
              - github.0.pull_request
              - github.0.push
            properties:
              - !ruby/object:Api::Type::String
                name: 'branch'
                required: true
                description: |
                    Regex of branches to match.
              - !ruby/object:Api::Type::Enum
                name: 'commentControl'
                description: |
                    Whether to block builds on a "/gcbrun" comment from a repository owner or collaborator.
                values:
                  - :COMMENTS_DISABLED
                  - :COMMENTS_ENABLED
          - !ruby/object:Api::Type::NestedObject
            name: 'push'
            description: |
                filter to match changes in refs, like branches or tags.  Specify only one of pullRequest or push.
            exactly_one_of:
              - github.0.pull_request
              - github.0.push
            properties:
              - !ruby/object:Api::Type::String
                name: 'branch'
                description: |
                    Regex of branches to match.  Specify only one of branch or tag.
                exactly_one_of:
                  - github.0.push.0.branch
                  - github.0.push.0.tag
              - !ruby/object:Api::Type::String
                name: 'tag'
                description: |
                    Regex of tags to match.  Specify only one of branch or tag.
                exactly_one_of:
                  - github.0.push.0.branch
                  - github.0.push.0.tag
      - !ruby/object:Api::Type::NestedObject
        name: 'build'
        exactly_one_of:
          - filename
          - build
        description: |
          Contents of the build template. Either a filename or build template must be provided.
        properties:
          - !ruby/object:Api::Type::Array
            name: 'tags'
            item_type: Api::Type::String
            description: |
              Tags for annotation of a Build. These are not docker tags.
          - !ruby/object:Api::Type::Array
            name: 'images'
            item_type: Api::Type::String
            description: |
              A list of images to be pushed upon the successful completion of all build steps.
              The images are pushed using the builder service account's credentials.
              The digests of the pushed images will be stored in the Build resource's results field.
              If any of the images fail to be pushed, the build status is marked FAILURE.
          - !ruby/object:Api::Type::String
            name: 'timeout'
            description: |
              Amount of time that this build should be allowed to run, to second granularity. 
              If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
              This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
              The expected format is the number of seconds followed by s.
              Default time is ten minutes (600s).
            default_value: '600s'
          - !ruby/object:Api::Type::Array
            name: 'steps'
            required: true
            description: |
              The operations to be performed on the workspace.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
                - !ruby/object:Api::Type::String
                  name: 'name'
                  required: true
                  description: |
                    The name of the container image that will run this particular build step.

                    If the image is available in the host's Docker daemon's cache, it will be
                    run directly. If not, the host will attempt to pull the image first, using
                    the builder service account's credentials if necessary.

                    The Docker daemon's cache will already have the latest versions of all of
                    the officially supported build steps (https://github.com/GoogleCloudPlatform/cloud-builders).
                    The Docker daemon will also have cached many of the layers for some popular
                    images, like "ubuntu", "debian", but they will be refreshed at the time
                    you attempt to use them.

                    If you built an image in a previous build step, it will be stored in the
                    host's Docker daemon's cache and is available to use as the name for a
                    later build step.
                - !ruby/object:Api::Type::Array
                  name: 'args'
                  item_type: Api::Type::String
                  description: |
                    A list of arguments that will be presented to the step when it is started.

                    If the image used to run the step's container has an entrypoint, the args
                    are used as arguments to that entrypoint. If the image does not define an
                    entrypoint, the first element in args is used as the entrypoint, and the
                    remainder will be used as arguments.
                - !ruby/object:Api::Type::Array
                  name: 'env'
                  item_type: Api::Type::String
                  description: |
                    A list of environment variable definitions to be used when
                    running a step.

                    The elements are of the form "KEY=VALUE" for the environment variable
                    "KEY" being given the value "VALUE".
                - !ruby/object:Api::Type::String
                  name: 'id'
                  description: |
                    Unique identifier for this build step, used in `wait_for` to
                    reference this build step as a dependency.
                - !ruby/object:Api::Type::String
                  name: 'entrypoint'
                  description: |
                    Entrypoint to be used instead of the build step image's
                    default entrypoint.
                    If unset, the image's default entrypoint is used
                - !ruby/object:Api::Type::String
                  name: 'dir'
                  description: |
                    Working directory to use when running this step's container.

                    If this value is a relative path, it is relative to the build's working
                    directory. If this value is absolute, it may be outside the build's working
                    directory, in which case the contents of the path may not be persisted
                    across build step executions, unless a `volume` for that path is specified.

                    If the build specifies a `RepoSource` with `dir` and a step with a
                    `dir`,
                    which specifies an absolute path, the `RepoSource` `dir` is ignored
                    for the step's execution.
                - !ruby/object:Api::Type::Array
                  item_type: Api::Type::String
                  name: 'secretEnv'
                  description: |
                    A list of environment variables which are encrypted using
                    a Cloud Key
                    Management Service crypto key. These values must be specified in
                    the build's `Secret`.
                - !ruby/object:Api::Type::String
                  name: 'timeout'
                  description: |
                    Time limit for executing this build step. If not defined,
                    the step has no
                    time limit and will be allowed to continue to run until either it
                    completes or the build itself times out.
                - !ruby/object:Api::Type::String
                  name: 'timing'
                  input: false
                  description: |
                    Output only. Stores timing information for executing this
                    build step.
                - !ruby/object:Api::Type::Array
                  name: 'volumes'
                  description: |
                    List of volumes to mount into the build step.

                    Each volume is created as an empty volume prior to execution of the
                    build step. Upon completion of the build, volumes and their contents
                    are discarded.

                    Using a named volume in only one step is not valid as it is
                    indicative of a build request with an incorrect configuration.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                        - !ruby/object:Api::Type::String
                          name: 'name'
                          required: true
                          description: |
                            Name of the volume to mount.

                            Volume names must be unique per build step and must be valid names for
                            Docker volumes. Each named volume must be used by at least two build steps.
                        - !ruby/object:Api::Type::String
                          name: 'path'
                          required: true
                          description: |
                            Path at which to mount the volume.

                            Paths must be absolute and cannot conflict with other volume paths on
                            the same build step or with certain reserved volume paths.
                - !ruby/object:Api::Type::Array
                  name: 'waitFor'
                  item_type: Api::Type::String
                  description: |
                    The ID(s) of the step(s) that this build step depends on.

                    This build step will not start until all the build steps in `wait_for`
                    have completed successfully. If `wait_for` is empty, this build step
                    will start when all previous build steps in the `Build.Steps` list
                    have completed successfully.
