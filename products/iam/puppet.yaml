# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Puppet::Config
manifest: !ruby/object:Provider::Puppet::Manifest
  version: '0.1.1'
  source: 'https://github.com/GoogleCloudPlatform/puppet-google-iam'
  homepage: 'https://github.com/GoogleCloudPlatform/puppet-google-iam'
  issues:
    'https://github.com/GoogleCloudPlatform/puppet-google-iam/issues'
  summary: 'A Puppet module to manage Google Compute IAM resources'
  tags:
    - google
    - cloud
    - iam
  requires:
<%= indent(compile('provider/puppet/common~requires.yaml'), 4) %>
  operating_systems:
<%= indent(include('provider/puppet/common~operating_systems.yaml'), 4) %>
# TODO(nelsonjr): Match all special behavior Puppet <=> Chef.
overrides: !ruby/object:Provider::ResourceOverrides
  ServiceAccount: !ruby/object:Provider::Puppet::ResourceOverride
    provider_helpers:
      - 'products/iam/helpers/ruby/provider_service_account.rb'
  ServiceAccountKey: !ruby/object:Provider::Puppet::ResourceOverride
    handlers: !ruby/object:Provider::Puppet::Handlers
      create: |
        if resource.fail_if_mismatch && resource.has_key_file
          raise 'Cannot overwrite file as demanded by fail_if_mismatch => true'
        end

        @created = true
        create_req = Google::Iam::Network::Post.new(collection(@resource),
                                                    fetch_auth(@resource),
                                                    'application/json',
                                                    resource_to_request)
        @fetched = return_if_object create_req.send
        if @fetched['privateKeyData'] && @resource[:path]
          # Write to file if a file name is provided.
          json = Base64.decode64(@fetched['privateKeyData'])
          File.open(@resource[:path], 'w') { |file| file.write(json) }
        end
      delete: |
        (_, key_id) = get_key_id(resource)
        delete_req = Google::Iam::Network::Delete.new(
          self_link(service_account: @resource[:service_account],
                    project: @resource[:project], key_id: key_id),
          fetch_auth(@resource)
        )
        return_if_object delete_req.send
      flush: |
        # As there's a mismatch, let's recreate the key
        create
      prefetch: |
        debug("prefetch #{name}")
        resource.extend(ServiceAccountKeyHelper)
        fail_if_mismatch = resource.parameter(:fail_if_mismatch)&.value || false
        (key_file_exists, key_id) = get_key_id(resource)
        unless key_id.nil?
          # If key_id, check keys existence.
          req = Google::Iam::Network::Get.new(
            self_link(service_account: resource[:service_account],
                      project: resource[:project], key_id: key_id),
            fetch_auth(resource)
          )
          @fetched = return_if_object req.send
          unless @fetched.nil?
            @fetched.merge!('name' => name, 'keyId' => key_id,
                            # TODO(nelsonjr): Add support to PKCS12 key files
                            'privateKeyType' => 'TYPE_GOOGLE_CREDENTIALS_FILE')
            resource.provider = present(name, @fetched)
          end
        end
        resource.init(key_file_exists, fail_if_mismatch)
      self_link: |
        URI.join(
          'https://iam.googleapis.com/v1/',
          expand_variables(
            ['projects/{{project}}/serviceAccounts/{{service_account}}',
             'keys/{{key_id}}'].join('/'),
            data
          )
        )
    properties:
      path: !ruby/object:Provider::Puppet::PropertyOverride
        validation: |
          raise "'path' parameter should be an absolute path." \
            unless (Pathname.new value).absolute?
    provider_helpers:
      - 'products/iam/helpers/puppet/provider_service_account_key.rb.erb'
    requires:
      - base64
examples: !ruby/object:Api::Resource::HashArray
  ServiceAccount:
    - service_account.pp
    - delete_service_account.pp
  ServiceAccountKey:
    - service_account_key.pp
    - delete_service_account_key.pp
files: !ruby/object:Provider::Config::Files
  copy:
<%= indent(compile('provider/puppet/common~copy.yaml'), 4) %>
    # Client-side functions require 'google/authorization'
    spec/stubs/google/authorization.rb: templates/spec_lib_stub.rb.erb
  compile:
<%= indent(include('provider/puppet/common~compile~before.yaml'), 4) %>
<%= indent(include('provider/puppet/common~compile~after.yaml'), 4) %>
<% # common~compile~after.yaml should be the last line of compile: section -%>
changelog:
  - !ruby/object:Provider::Config::Changelog
    version: '0.1.1'
    date: 2018-02-02T21:05:00-0700
    general: 'Initial release'
