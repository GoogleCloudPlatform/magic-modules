# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Puppet::Config
manifest: !ruby/object:Provider::Puppet::Manifest
  version: '0.1.0'
  source: 'https://github.com/GoogleCloudPlatform/puppet-google-iam'
  homepage: 'https://github.com/GoogleCloudPlatform/puppet-google-iam'
  issues:
    'https://github.com/GoogleCloudPlatform/puppet-google-iam/issues'
  summary: 'A Puppet module to manage Google Compute IAM resources'
  tags:
    - google
    - cloud
    - iam
  requires:
    - !ruby/object:Provider::Config::Requirements
      name: 'google/gauth'
      versions: '< 0.2.0'
  operating_systems:
<%= indent(include('provider/puppet/common~operating_systems.yaml'), 4) %>
# TODO(nelsonjr): Match all special behavior Puppet <=> Chef.
objects: !ruby/object:Api::Resource::HashArray
  ServiceAccountKey:
    create: |
      create_req = Google::Iam::Network::Post.new(collection(@resource),
                                                  fetch_auth(@resource),
                                                  'application/json',
                                                  resource_to_request)
      @fetched = return_if_object create_req.send

      # Write to file if a file name is provided.
      if @fetched['privateKeyData'] and @resource[:key_file]
        require 'base64'
        json = Base64.decode64(@fetched['privateKeyData'])
        File.open(@resource[:key_file], 'w') { |file| file.write(json) }
      end

    delete: |
      if @resource[:key_file]
        file = File.open(@resource[:key_file])
        key_id = JSON.parse(file.read)['private_key_id']
      elsif @resource[:key_id]
        key_id = @resource[:key_id]
      else
        raise 'You must provide either a key_file or a key_id'
      end

      delete_req = Google::Iam::Network::Delete.new(self_link({
        service_account: @resource[:service_account],
        project: @resource[:project],
        key_id: key_id
      }),
                                                    fetch_auth(@resource))
      return_if_object delete_req.send
    prefetch: |
       debug("prefetch #{name}")
       if resource[:key_id]
         # If key_id, check keys existence.
         req = Google::Iam::Network::Get.new(self_link({
           service_account: resource[:service_account],
           project: resource[:project],
           key_id: resource[:key_id]
         }),
                                                       fetch_auth(resource))
         resp = return_if_object req.send
         raise 'This key no longer exists' if resp.nil?
         resource.provider = present(name, resource)
       elsif resource[:key_file]
         filename = resource[:key_file]
         resource.provider = present(name, resource) \
           if File.exists?(filename)
       end
    self_link: |
      URI.join(
        'https://iam.googleapis.com/v1/',
        expand_variables(
          'projects/{{project}}/serviceAccounts/{{service_account}}/keys/{{key_id}}',
          data
        )
      )
    present: |
      def self.present(name, fetch)
        new({
          title: name,
          ensure: :present,
          key_algorithm: fetch[:key_algorithm],
          private_key_type: fetch[:private_key_type]
        })
      end
  ServiceAccount:
    provider_helpers:
      include:
        - 'products/iam/helpers/provider_service_account.rb'
examples: !ruby/object:Api::Resource::HashArray
  ServiceAccount:
    - service_account.pp
    - delete_service_account.pp
  ServiceAccountKey:
    - service_account_key.pp
    - delete_service_account.pp
files: !ruby/object:Provider::Config::Files
  copy:
<%= indent(include('provider/puppet/common~copy.yaml'), 4) %>
    # Client-side functions require 'google/authorization'
    spec/stubs/google/authorization.rb: templates/spec_lib_stub.rb.erb
  compile:
    lib/google/object_store.rb: google/object_store.rb
<%= indent(include('provider/puppet/common~compile~before.yaml'), 4) %>
<%= indent(include('provider/puppet/common~compile~after.yaml'), 4) %>
<% # common~compile~after.yaml should be the last line of compile: section %>
test_data: !ruby/object:Provider::Config::TestData::NONE
  reason: 'Test Data will be automatically generated'
changelog:
  - !ruby/object:Provider::Config::Changelog
    version: '0.1.0'
    date: 2017-10-23T09:00:00-0700
    general: 'Initial release'
