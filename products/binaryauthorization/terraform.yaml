# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Terraform::Config
overrides: !ruby/object:Overrides::ResourceOverrides
  Attestor: !ruby/object:Overrides::Terraform::ResourceOverride
    import_format: ["projects/{{project}}/attestors/{{name}}"]
    examples:
     - !ruby/object:Provider::Terraform::Examples
      name: "binary_authorization_attestor_basic"
      primary_resource_id: "attestor"
      skip_test: true
      vars:
        attestor_name: "test-attestor"
        note_name: "test-attestor-note"
    properties:
      name: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_flatten: 'templates/terraform/custom_flatten/name_from_self_link.erb'
      attestationAuthorityNote.noteReference: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_expand: 'templates/terraform/custom_expand/container_analysis_note.erb'
        diff_suppress_func: 'compareSelfLinkOrResourceName'
        description: |
          The resource name of a ATTESTATION_AUTHORITY Note, created by the
          user. If the Note is in a different project from the Attestor, it
          should be specified in the format `projects/*/notes/*` (or the legacy
          `providers/*/notes/*`). This field may not be updated.
          An attestation by this attestor is stored as a Container Analysis
          ATTESTATION_AUTHORITY Occurrence that names a container image
          and that links to this Note.
  Policy: !ruby/object:Overrides::Terraform::ResourceOverride
    id_format: "{{project}}"
    import_format: ["projects/{{project}}"]
    custom_code: !ruby/object:Provider::Terraform::CustomCode
      constants: 'templates/terraform/constants/binaryauthorization_policy.erb'
      pre_delete: 'templates/terraform/pre_delete/restore_default_binaryauthorization_policy.erb'
    examples:
     - !ruby/object:Provider::Terraform::Examples
      name: "binary_authorization_policy_basic"
      primary_resource_id: "policy"
      skip_test: true
      vars:
        attestor_name: "test-attestor"
        note_name: "test-attestor-note"
    properties:
      clusterAdmissionRules: !ruby/object:Overrides::Terraform::PropertyOverride
        is_set: true
        set_hash_func: |-
          func(v interface{}) int {
            // require_attestations_by is a set of strings that can have the format
            // projects/{project}/attestors/{attestor} or {attestor}. We diffsuppress
            // and hash that set on the name, but now we need to make sure that the
            // overall hash here respects that so changing the attestor format doesn't
            // change the hash code of cluster_admission_rules.
            raw := v.(map[string]interface{})
            at := raw["require_attestations_by"].(*schema.Set)
            if at != nil {
              t := convertAndMapStringArr(at.List(), GetResourceNameFromSelfLink)
              raw["require_attestations_by"] = schema.NewSet(selfLinkNameHash, convertStringArrToInterface(t))
            }
            var buf bytes.Buffer
            schema.SerializeResourceForHash(&buf, raw, resourceBinaryAuthorizationPolicy().Schema["cluster_admission_rules"].Elem.(*schema.Resource))
            return hashcode.String(buf.String())
          }
      clusterAdmissionRules.requireAttestationsBy: !ruby/object:Overrides::Terraform::PropertyOverride
        is_set: true
        set_hash_func: selfLinkNameHash
        custom_expand: 'templates/terraform/custom_expand/binaryauthorization_attestors.erb'
        diff_suppress_func: 'compareSelfLinkOrResourceName'
        description: |
          The resource names of the attestors that must attest to a
          container image. If the attestor is in a different project from the
          policy, it should be specified in the format `projects/*/attestors/*`.
          Each attestor must exist before a policy can reference it. To add an
          attestor to a policy the principal issuing the policy change
          request must be able to read the attestor resource.

          Note: this field must be non-empty when the evaluation_mode field
          specifies REQUIRE_ATTESTATION, otherwise it must be empty.
      defaultAdmissionRule.requireAttestationsBy: !ruby/object:Overrides::Terraform::PropertyOverride
        is_set: true
        set_hash_func: selfLinkNameHash
        custom_expand: 'templates/terraform/custom_expand/binaryauthorization_attestors.erb'
        diff_suppress_func: 'compareSelfLinkOrResourceName'
        description: |
          The resource names of the attestors that must attest to a
          container image. If the attestor is in a different project from the
          policy, it should be specified in the format `projects/*/attestors/*`.
          Each attestor must exist before a policy can reference it. To add an
          attestor to a policy the principal issuing the policy change
          request must be able to read the attestor resource.

          Note: this field must be non-empty when the evaluation_mode field
          specifies REQUIRE_ATTESTATION, otherwise it must be empty.

# This is for copying files over
files: !ruby/object:Provider::Config::Files
  # These files have templating (ERB) code that will be run.
  # This is usually to add licensing info, autogeneration notices, etc.
  compile:
<%= lines(indent(compile('provider/terraform/product~compile.yaml'), 4)) -%>
