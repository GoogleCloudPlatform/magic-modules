#!/bin/bash

submodule_init() {
  if git submodule status "$mod" | grep '^-' 1>/dev/null; then
    log "Initializing repository"
    declare module_init=1
    declare module_head=$(git submodule status -- "$mod" | awk '{print $1}' \
                            | tr -d '-')
    git submodule update --init --force -- "$mod" 1>/dev/null

    local updated_head=$(git submodule status -- "$mod" | awk '{print $1}' \
                         | tr -d '-' | tr -d '+')
    # If git changed the hash it means we could not fetch the commit. So let's
    # try to fetch it manually. This is a strong indication the change is not
    # committed yet.
    if [[ $updated_head != $module_head ]]; then
      pushd "${mod}" 1>/dev/null
      git fetch origin "${module_head}"
      err=$?
      popd 1>/dev/null
      if [[ $err -ne 0 ]]; then
        fatal "Module commit '${module_head}' cannot be retrieved (fetch)"
      else
        # Attempt to fetch a second time
        git submodule update --force -- "$mod"
        if [[ $? -ne 0 ]]; then
          fatal "Module commit '${module_head}' cannot be retrieved (update)"
        fi
      fi
    fi

    export module_init
    export module_head
  fi
}

submodule_update() {
  if [[ $module_init -eq 1 ]]; then
    declare my_head=$(git rev-parse HEAD)
    if [[ $module_head != $my_head ]]; then
      warn "Project '$mod' has a non-official module reference"
      git fetch origin "${module_head}" 1>/dev/null

      declare module_head=$(git rev-parse "${hash_style}" "${module_head}")

      log "Moving '$mod' to '${module_head}'"
      git checkout FETCH_HEAD 1>/dev/null 2>&1

      export module_head
    fi
  fi
}
