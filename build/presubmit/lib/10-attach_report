#!/bin/bash

generate_report() {
  (
    echo
    echo '+----------------------------------------------------------------'
    echo "| Status report:"
    sed -e "s/^/|  - /" < ${analysis_file}
    echo '+----------------------------------------------------------------'
    echo
    if [[ -f "${coverage_file}" ]]; then
      echo '+----------------------------------------------------------------'
      echo "| Coverage:"
      sed -e "s/^/| /" < "${coverage_file}"
      echo '+----------------------------------------------------------------'
    else
      info 'No coverage information collected'
    fi
    echo
  ) > "$report_file"

  #
  # Generate commit message
  #
  declare -r lead='^--- BEGIN PRESUBMIT REPORT ---$'
  declare -r tail='^--- END PRESUBMIT REPORT ---$'
  declare -r cov_lead='^--- BEGIN COVERAGE REPORT ---$'
  declare -r cov_tail='^--- END COVERAGE REPORT ---$'
  git show -s --format=%B | sed "/$lead/,/$tail/d" \
    | sed "/$cov_lead/,/$cov_tail/d" \
    | grep -v '^Change-Id:' \
    | awk '/^$/ {nlstack=nlstack "\n";next;} {printf "%s",nlstack;
                                              nlstack=""; print;}' \
    > "$commit_file"
  declare -r has_report=$(git show -s --format=%B | grep -c "$lead")
  declare -r report_date=$(git show -s --format=%B | sed -n "/$lead/,/$tail/p" \
                             | grep "Executed @" | sed -e 's/Executed @ //')
  cp "$commit_file" "${commit_file}.org"

  if $sync;          then declare -r s_m=''; else declare -r s_m='NO '; fi
  if $compile;       then declare -r c_m=''; else declare -r c_m='NO '; fi
  if $rubocop;       then declare -r r_m=''; else declare -r r_m='NO '; fi
  if $rspec;         then declare -r t_m=''; else declare -r t_m='NO '; fi
  if $hook;          then declare -r g_m=''; else declare -r g_m='NO '; fi
  if $ignorecovonly; then declare -r i_m=''; else declare -r i_m='NO '; fi
  if $parallel;      then declare -r p_m=''; else declare -r p_m='NO '; fi

  cat >>"$commit_file" <<EOF

--- BEGIN PRESUBMIT REPORT ---
Executed @ $(date -R)

Status Report:
$(sed "${sed_extended}" \
      -e "s/^/ - /" \
      -e "s/$(echo -e "\x1b")\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
    < "${analysis_file}")

Settings:
 [${s_m}sync] [${c_m}compile] [${r_m}rubocop] [${t_m}tests] [${g_m}githooks]
 [${i_m}ignorecovonly] [${p_m}parallel]
--- END PRESUBMIT REPORT ---

--- BEGIN COVERAGE REPORT ---
$(sed "${sed_extended}" \
      -e "s/$(echo -e "\x1b")\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
    < "${coverage_file}")
--- END COVERAGE REPORT ---

${change_id}
EOF

  cat "$report_file"

  export commit_file
  export report_file
}

attach_report() {
  if $attach; then
    if is_change_closed; then
      log 'Cannot attach report to a closed CL. Create a new commit first.'
    else
      echo '+----------------------------------------------------------------'
      echo "| The following commit will be updated:"
      echo '| +---'
      sed -e 's/^/| | /' < "${commit_file}.org"
      echo '| |'
      sed -e 's/^/| | /' <<< "$change_id"
      echo '| +---'
      echo '+----------------------------------------------------------------'
      [[ $has_report -gt 0 ]] \
        && log "Existing report from '${report_date}' will be updated"
      [[ $has_report -eq 0 ]] && log 'New report will be added'
      if $force_attach || confirm 'Attach report to commit'; then
        info 'Attaching report to commit'
        git status --untracked-files=no | grep 'nothing to commit' 1>/dev/null
        declare -r needs_stash=$?
        declare -r before_stashes=$(git stash list | wc -l)
        [[ $needs_stash -eq 1 ]] && git stash 1>/dev/null
        declare -r after_stashes=$(git stash list | wc -l)
        git commit --amend --file="$commit_file" --allow-empty 1>/dev/null
        declare -r stashed=$(( after_stashes - before_stashes ))
        [[ $stashed -eq 1 ]] && git stash pop 1>/dev/null
      else
        warn 'Skipping attach report to commit'
      fi
    fi
  else
    warn 'Not attaching report to commit'
  fi
}
