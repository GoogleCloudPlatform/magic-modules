#!/bin/bash
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Executes code generation on all products and providers, performs QA tests and
# produces output report.

# Force all background jobs and tasks to exit as well.
trap 'kill -9 $(jobs -p) 2>/dev/null' EXIT SIGTERM

declare -r presubmit_dir="$(dirname "$0")"
declare -r my_dir=$PWD
declare -r presubmit_cfg="${my_dir}/products/presubmit.cfg"

declare hash_style=''
[[ -z "${LONG_HASH}" ]] && hash_style='--short'
readonly hash_style

declare attach=true
declare bundler=true
declare compile=true
declare force=false
declare force_attach=false
declare hook=true
declare ignorecovonly=false
declare parallel=false
declare plugin_list=
declare product_list=
declare rspec=true
declare rubocop=true
declare sync=true

declare sed_extended='-r'
[[ $(uname -s) == 'Darwin' ]] && sed_extended='-E'
readonly sed_extended
export sed_extended

declare start_time=$(date +%s)

help() {
  cat <<EOF
presubmit: Executes presubmit tests against generated modules

  -c : Disable code generation (default: compile all modules)
  -f : Force overwriting local changes (default: fail & skip module)
  -G : Force attaching report to git commit (without prompt)
  -g : Skip attaching report to git commit (default: attach report to HEAD)
  -h : This help :)
  -i : Ignore coverage-only changes
  -P : Run presubmit modules in parallel (requires: -f to avoid prompt)
  -p : Skip presubmit hook check
  -r : Skip running rubocop on generated modules
  -s : Skip syncing generated modules to their respective commited master
  -t : Skip running tests on generated modules
  -M : Run only specific plugins
  -m : Run only specific products
EOF
  exit 0
}

declare -r prefix="codegen-$(date +%s)"

declare -r report_file="/tmp/${prefix}"
declare -r commit_file="/tmp/${prefix}.commit"
declare -r analysis_file="/tmp/${prefix}-analysis.log"
declare -r analysis_lock="/tmp/${prefix}-analysis.lock"
declare -r coverage_file="/tmp/${prefix}-coverage.log"
declare -r coverage_lock="/tmp/${prefix}-coverage.lock"
declare -r parallel_output_prefix="/tmp/${prefix}-check"
declare -r timer_file="/tmp/${prefix}-timer.log"
declare -r timer_lock="/tmp/${prefix}-timer.lock"

export report_file
export commit_file
export analysis_file
export analysis_lock
export coverage_file
export coverage_lock
export parallel_output_prefix
export timer_file
export timer_lock

cleanup() {
  rm -f "${commit_file}"
  rm -f "${commit_file}.org"
  rm -f "${report_file}"

  rm -f ${parallel_output_prefix}-*

  rm -f "${analysis_file}"
  rm -f "${analysis_lock}"
  rm -f "${coverage_file}"
  rm -f "${coverage_lock}"
  rm -f "${timer_file}"
  rm -f "${timer_lock}"
}

cleanup

skip_phase() {
  local -r phase=$1
  local -r provider=$2
  local -r product=$3

  grep -E "${provider}/${product}.*=.*${phase}:skip" "${presubmit_cfg}" \
    1>/dev/null
}

while getopts 'cfgGhipPrstM:m:' arg; do
  case $arg in
    G) force_attach=true ;;
    M) plugin_list=$OPTARG ;;
    P) parallel=true ;;
    c) compile=false ;;
    f) force=true ;;
    g) attach=false ;;
    h) help ;;
    i) ignorecovonly=true ;;
    m) product_list=$OPTARG ;;
    p) hook=false ;;
    r) rubocop=false ;;
    s) sync=false ;;
    t) rspec=false ;;
    *) exit 1 ;;
  esac
done

readonly attach
readonly bundler
readonly compile
readonly force
readonly force_attach
readonly hook
readonly ignorecovonly
readonly parallel
readonly plugin_list
readonly rspec
readonly rubocop
readonly sync

export attach
export bundler
export compile
export force
export force_attach
export hook
export ignorecovonly
export rspec
export rubocop
export sync

# Minimalistic console output until logging module gets loaded
log() { echo "[INFO]    $*"; }

declare PREFLIGHT_TESTS=()
declare CORE_TESTS=()
declare MOD_TESTS=()
declare POST_MOD_TESTS=()

# Load all test plugins
for mod in $presubmit_dir/lib/* $presubmit_dir/presubmit.d/*; do
  log "Loaded '${mod//build\/presubmit\//}'"
  source "$mod"
done

if $parallel && ! $force; then
  fatal 'Parallel mode (-P) requires to force overwrite submodules (-f)'
  exit 1
fi

readonly PREFLIGHT_TESTS
readonly CORE_TESTS
readonly MOD_TESTS
readonly POST_MOD_TESTS

for mod in ${PREFLIGHT_TESTS[*]}; do
  log "(active) preflight test '$mod'"
done
for mod in ${CORE_TESTS[*]}; do
  log "(active) core test '${mod//check_/}'"
done
for mod in ${MOD_TESTS[*]}; do
  log "(active) module test '${mod//check_/}'"
done
for mod in ${POST_MOD_TESTS[*]}; do
  log "(active) post module test '${mod//check_/}'"
done

if [[ ! -z $product_list ]]; then
  warn 'Running presubmit for select modules only'
fi

if [[ ! -z $plugin_lits ]]; then
  warn 'Running presubmit for select plugins only'
fi

# Execute "pre-flight" checks. If any fails we are not clear to run the
# presubmit tests.
for mod in ${PREFLIGHT_TESTS[*]}; do
  if [[ ! -z $plugin_list && ! (${mod//check_/} =~ $plugin_list) ]]; then
    echo "Skipping ${mod//check_/}"
    continue
  fi
  $mod
done

#
# Warns if multiple local branches matches the commit, in case various pending
# CLs exist in the local repository.
#
declare -r my_head_short=$(git rev-parse --short HEAD)
declare -r branches_matching=$(git branch -v | grep -c "$my_head_short")
if [[ $branches_matching -gt 1 ]]; then
  log 'More than 1 branch matches our commit. Proceed with caution.'
fi

git submodule init

#
# Check our own project
#
declare codegen_failures=0

declare codegen_start=$(date +%s)
if [[ -z $product_list || $(grep codegen <<< $product_list) ]]; then
  # Execute "core" checks. A core test is a test against our own code base.
  for mod in ${CORE_TESTS[*]}; do
    if [[ ! -z $plugin_list && ! (${mod//check_/} =~ $plugin_list) ]]; then
      echo "Skipping ${mod//check_/}"
      continue
    fi
    $mod 'codegen'
    codegen_failures=$((codegen_failures + $?))
  done

  gather_code_coverage 'codegen'
else
  warn "Skipping 'codegen'"
fi
log_elapsed 'codegen' $codegen_start

#
# Check generated modules
#
module_checker() {
  local -r mod=$1
  local -r provider=$2
  local -r product=$3
  local -r mod_start=$(date +%s)

  echo '-----------------------------------------------------------------'
  echo "Checking: $mod (product:${product} | provider:${provider})"

  if [[ ! -z $product_list \
      && ! $(grep "${provider}/${product}" <<< $product_list) ]]; then
    warn "Skipping module '${mod}'"
    continue
  fi

  declare module_init=0

  submodule_init

  pushd "$mod" 1>/dev/null

  submodule_update

  declare mod_failures=0

  git fetch 1>/dev/null

  declare my_hash=$(git rev-parse ${hash_style} HEAD)

  # Retrieve the hash from origin/master, unless a variable
  # MASTER_<PROVIDER>_<PRODUCT> is defined, e.g. MASTER_PUPPET_DNS
  declare master_hash_mock="master_${provider}_${product}"
  declare master_hash_mock_var=$(tr /a-z/ /A-Z/ <<< "${master_hash_mock}")
  declare master_hash=${!master_hash_mock_var}

  if [[ ! $master_hash ]]; then
    master_hash=$(git rev-parse ${hash_style} origin/master)
  else
    master_hash=$(git rev-parse ${hash_style} "${master_hash}")
    info "Forcing ${provider}/${product} to ${master_hash}"
  fi

  if ! git status | grep 'nothing to commit, working .* clean' \
      1>/dev/null; then
    if [[ $force != true ]]; then
      if ! confirm 'Okay to wipe all changes'; then
        fatal "Skipping project '$mod' to avoid losing local changes"
        popd; continue
      fi
    else
      warn "Project '$mod' has local changes"
    fi
  fi

  if [[ "${my_hash}" != "${master_hash}" ]]; then
    log "Local  : ${my_hash}"
    log "Master : ${master_hash}"
    if $sync; then
      log 'Moving head and add our change to this commit'
      git reset --hard "${master_hash}"
      git clean -fdx
    else
      info "Keeping ${provider}/${product} at local ${my_hash}"
      warn "Not syncing master for '$mod'"
    fi
  fi

  if ! skip_phase 'compile' "${provider}" "${product}"; then
    if $compile; then
      # Let's generate the code and see if changes happen
      pushd "$my_dir" 1>/dev/null
      ./compiler -p "products/${product}" -e "${provider}" -o "$mod" 2>/dev/null
      err=$?
      popd 1>/dev/null
      if [[ $err -ne 0 ]]; then
        fatal 'Executing compiler failed'
        exit 1
      fi
    else
      warn "Skipping compile for '$mod'"
    fi
  else
    log "Module ${product} skipped by the presubmit configuration."
  fi

  if git status -s | grep -v coverage/.last_run.json 1>/dev/null; then
    warn "Project '$mod' had changes upon it not committed yet"
    git status -s
  fi

  # Execute "module" checks. A module test is a test against our dependencies.
  for mod_test in ${MOD_TESTS[*]}; do
    if [[ ! -z $plugin_list && ! (${mod_test//check_/} =~ $plugin_list) ]]; then
      echo "Skipping ${mod_test//check_/} in ${mod}"
      continue
    fi
    $mod_test "$mod"
    mod_failures=$((mod_failures + $?))
  done

  gather_code_coverage "$mod"

  popd 1>/dev/null

  log_failures "${mod}" "${mod_failures}"

  log_elapsed "${provider}/${product}" $mod_start
}

module_logfile() {
  local -r mod=$1
  echo "${parallel_output_prefix}-${mod//\//-}"
}

module_list() {
  git submodule status | grep build/ | awk '{print $2}'
}

for mod in $(module_list); do
  declare provider=$(cut -d/ -f2 <<< "$mod")
  declare product=$(cut -d/ -f3 <<< "$mod")

  if $parallel; then
    module_checker $mod $provider $product 2>&1 \
      | tee "$(module_logfile $mod)" \
      | sed "s/^/${provider}(${product}):/" &
  else
    module_checker $mod $provider $product
  fi
done

if $parallel; then
  wait # for all submodule jobs to finish

  # Emit the output so it can be captured by the systems
  for mod in $(module_list); do
    cat "$(module_logfile $mod)"
  done
fi

# Execute post mod checks. A post mod test is a test that runs after all module
# tests are executed (e.g. aggregate statistics)
for mod in ${POST_MOD_TESTS[*]}; do
  if [[ ! -z $plugin_list && ! (${mod//check_/} =~ $plugin_list) ]]; then
    echo "Skipping ${mod//check_/}"
    continue
  fi
  $mod 'codegen'
  codegen_failures=$((codegen_failures + $?))
done

log_failures 'codegen' "${codegen_failures}"

declare -r change_id=$(git show -s --format=%B | grep '^Change-Id:')
export change_id

log_elapsed 'presubmit' $start_time
print_timers

generate_report
attach_report

cleanup
