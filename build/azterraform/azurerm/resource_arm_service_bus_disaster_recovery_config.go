// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmServiceBusDisasterRecoveryConfig() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmServiceBusDisasterRecoveryConfigCreateUpdate,
        Read: resourceArmServiceBusDisasterRecoveryConfigRead,
        Update: resourceArmServiceBusDisasterRecoveryConfigCreateUpdate,
        Delete: resourceArmServiceBusDisasterRecoveryConfigDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
            },

            "resource_group_name": resourceGroupNameSchema(),

            "namespace_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
            },

            "alternate_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "partner_namespace": {
                Type: schema.TypeString,
                Optional: true,
            },
        },
    }
}

func resourceArmServiceBusDisasterRecoveryConfigCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceBusRecoveryClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)
    servicebusName := d.Get("namespace_name").(string)

    if requireResourcesToBeImported {
        resp, err := client.Get(ctx, resourceGroup, servicebusName, name)
        if err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Error checking for present of existing Service Bus Disaster Recovery Config %q (Namespace Name %q / Resource Group %q): %+v", name, servicebusName, resourceGroup, err)
            }
        }
        if !utils.ResponseWasNotFound(resp.Response) {
            return tf.ImportAsExistsError("azurerm_service_bus_disaster_recovery_config", *resp.ID)
        }
    }

    alternateName := d.Get("alternate_name").(string)
    partnerNamespace := d.Get("partner_namespace").(string)

    parameters := servicebus.ArmDisasterRecovery{
        ArmDisasterRecoveryProperties: &servicebus.ArmDisasterRecoveryProperties{
            AlternateName: utils.String(alternateName),
            PartnerNamespace: utils.String(partnerNamespace),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, servicebusName, name, parameters); err != nil {
        return fmt.Errorf("Error creating Service Bus Disaster Recovery Config %q (Namespace Name %q / Resource Group %q): %+v", name, servicebusName, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, servicebusName, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Service Bus Disaster Recovery Config %q (Namespace Name %q / Resource Group %q): %+v", name, servicebusName, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Service Bus Disaster Recovery Config %q (Namespace Name %q / Resource Group %q) ID", name, servicebusName, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmServiceBusDisasterRecoveryConfigRead(d, meta)
}

func resourceArmServiceBusDisasterRecoveryConfigRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceBusRecoveryClient
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    servicebusName := id.Path["namespaces"]
    name := id.Path["disasterRecoveryConfigs"]

    resp, err := client.Get(ctx, resourceGroup, servicebusName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Service Bus Disaster Recovery Config %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Service Bus Disaster Recovery Config %q (Namespace Name %q / Resource Group %q): %+v", name, servicebusName, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    if armDisasterRecoveryProperties := resp.ArmDisasterRecoveryProperties; armDisasterRecoveryProperties != nil {
        d.Set("alternate_name", armDisasterRecoveryProperties.AlternateName)
        d.Set("partner_namespace", armDisasterRecoveryProperties.PartnerNamespace)
    }

    return nil
}


func resourceArmServiceBusDisasterRecoveryConfigDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).serviceBusRecoveryClient
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    servicebusName := id.Path["namespaces"]
    name := id.Path["disasterRecoveryConfigs"]

    if _, err := client.Delete(ctx, resourceGroup, servicebusName, name); err != nil {
        return fmt.Errorf("Error deleting Service Bus Disaster Recovery Config %q (Namespace Name %q / Resource Group %q): %+v", name, servicebusName, resourceGroup, err)
    }

    return nil
}
