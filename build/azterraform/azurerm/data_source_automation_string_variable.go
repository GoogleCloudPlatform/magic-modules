// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm


func dataSourceArmAutomationStringVariable() *schema.Resource {
    return &schema.Resource{
        Read: dataSourceArmAutomationStringVariableRead,

        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group_name": resourceGroupNameForDataSourceSchema(),

            "automation_account_name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "description": {
                Type: schema.TypeString,
                Computed: true,
            },

            "encrypted": {
                Type: schema.TypeBool,
                Computed: true,
            },

            "value": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func dataSourceArmAutomationStringVariableRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).automationVariableClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)
    accountName := d.Get("automation_account_name").(string)

    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            return fmt.Errorf("Error: Automation String Variable %q (Automation Account Name %q / Resource Group %q) was not found", name, accountName, resourceGroup)
        }
        return fmt.Errorf("Error reading Automation String Variable %q (Automation Account Name %q / Resource Group %q): %+v", name, accountName, resourceGroup, err)
    }

    d.SetId(*resp.ID)


    d.Set("name", resp.Name)
    d.Set("resource_group_name", resourceGroup)
    d.Set("automation_account_name", accountName)
    if properties := resp.VariableProperties; properties != nil {
        d.Set("description", properties.Description)
        d.Set("encrypted", properties.IsEncrypted)
        if !d.Get("encrypted").(bool) {
          value, err := azure.ParseAzureRmAutomationVariableValue("azurerm_automation_string_variable", properties.Value)
          if err != nil {
            return err
          }
          d.Set("value", value)
        }
    }

    return nil
}
