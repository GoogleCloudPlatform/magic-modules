// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm

import (
    "fmt"
    "testing"

    "github.com/hashicorp/terraform/helper/resource"
    "github.com/hashicorp/terraform/terraform"
    "github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
    "github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func TestAccAzureRMAutomationStringVariable_basic(t *testing.T) {
    resourceName := "azurerm_automation_string_variable.test"
    rInt := tf.AccRandTimeInt()
    location := testLocation()
    config := testAccAzureRMAutomationStringVariable_basic(rInt, location)

    resource.ParallelTest(t, resource.TestCase{
        PreCheck:     func() { testAccPreCheck(t) },
        Providers:    testAccProviders,
        CheckDestroy: testCheckAzureRMAutomationStringVariableDestroy,
        Steps: []resource.TestStep{
            {
                Config: config,
                Check: resource.ComposeTestCheckFunc(
                    testCheckAzureRMAutomationStringVariableExists(resourceName),
                    resource.TestCheckResourceAttr(resourceName, "value", "Hello, Terraform Basic Test."),
                ),
            },
            {
                ResourceName:      resourceName,
                ImportState:       true,
                ImportStateVerify: true,
            },
        },
    })
}

func TestAccAzureRMAutomationStringVariable_complete(t *testing.T) {
    resourceName := "azurerm_automation_string_variable.test"
    rInt := tf.AccRandTimeInt()
    location := testLocation()
    config := testAccAzureRMAutomationStringVariable_complete(rInt, location)

    resource.ParallelTest(t, resource.TestCase{
        PreCheck:     func() { testAccPreCheck(t) },
        Providers:    testAccProviders,
        CheckDestroy: testCheckAzureRMAutomationStringVariableDestroy,
        Steps: []resource.TestStep{
            {
                Config: config,
                Check: resource.ComposeTestCheckFunc(
                    testCheckAzureRMAutomationStringVariableExists(resourceName),
                    resource.TestCheckResourceAttr(resourceName, "description", "This is a variable created by Terraform acceptance test."),
                    resource.TestCheckResourceAttr(resourceName, "value", "Hello, Terraform Complete Test."),
                ),
            },
            {
                ResourceName:      resourceName,
                ImportState:       true,
                ImportStateVerify: true,
            },
        },
    })
}

func TestAccAzureRMAutomationStringVariable_basicCompleteUpdate(t *testing.T) {
    resourceName := "azurerm_automation_string_variable.test"
    rInt := tf.AccRandTimeInt()
    location := testLocation()
    basicConfig := testAccAzureRMAutomationStringVariable_basic(rInt, location)
    completeConfig := testAccAzureRMAutomationStringVariable_complete(rInt, location)

    resource.ParallelTest(t, resource.TestCase{
        PreCheck:     func() { testAccPreCheck(t) },
        Providers:    testAccProviders,
        CheckDestroy: testCheckAzureRMAutomationStringVariableDestroy,
        Steps: []resource.TestStep{
            {
                Config: basicConfig,
                Check: resource.ComposeTestCheckFunc(
                    testCheckAzureRMAutomationStringVariableExists(resourceName),
                    resource.TestCheckResourceAttr(resourceName, "value", "Hello, Terraform Basic Test."),
                ),
            },
            {
                Config: completeConfig,
                Check: resource.ComposeTestCheckFunc(
                    testCheckAzureRMAutomationStringVariableExists(resourceName),
                    resource.TestCheckResourceAttr(resourceName, "description", "This is a variable created by Terraform acceptance test."),
                    resource.TestCheckResourceAttr(resourceName, "value", "Hello, Terraform Complete Test."),
                ),
            },
            {
                Config: basicConfig,
                Check: resource.ComposeTestCheckFunc(
                    testCheckAzureRMAutomationStringVariableExists(resourceName),
                    resource.TestCheckResourceAttr(resourceName, "value", "Hello, Terraform Basic Test."),
                ),
            },
        },
    })
}


func testCheckAzureRMAutomationStringVariableExists(resourceName string) resource.TestCheckFunc {
    return func(s *terraform.State) error {
        rs, ok := s.RootModule().Resources[resourceName]
        if !ok {
            return fmt.Errorf("Automation String Variable not found: %s", resourceName)
        }

        name := rs.Primary.Attributes["name"]
        resourceGroup, hasResourceGroup := rs.Primary.Attributes["resource_group_name"]
        if !hasResourceGroup {
            return fmt.Errorf("Bad: no resource group name found in state for Automation String Variable: %q", name)
        }
        accountName, hasAccountName := rs.Primary.Attributes["automation_account_name"]
        if !hasAccountName {
            return fmt.Errorf("Bad: no automation account name found in state for Automation String Variable: %q", name)
        }

        client := testAccProvider.Meta().(*ArmClient).automationVariableClient
        ctx := testAccProvider.Meta().(*ArmClient).StopContext

        if resp, err := client.Get(ctx, resourceGroup, accountName, name); err != nil {
            if utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Bad: Automation String Variable %q (Resource Group %q, Automation Account Name %q) does not exist", name, resourceGroup, accountName)
            }
            return fmt.Errorf("Bad: Get on automationVariableClient: %+v", err)
        }

        return nil
    }
}

func testCheckAzureRMAutomationStringVariableDestroy(s *terraform.State) error {
    client := testAccProvider.Meta().(*ArmClient).automationVariableClient
    ctx := testAccProvider.Meta().(*ArmClient).StopContext

    for _, rs := range s.RootModule().Resources {
        if rs.Type != "azurerm_automation_string_variable" {
            continue
        }

        name := rs.Primary.Attributes["name"]
        resourceGroup := rs.Primary.Attributes["resource_group_name"]
        accountName := rs.Primary.Attributes["automation_account_name"]

        if resp, err := client.Get(ctx, resourceGroup, accountName, name); err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Bad: Get on automationVariableClient: %+v", err)
            }
        }

        return nil
    }

    return nil
}

func testAccAzureRMAutomationStringVariable_basic(rInt int, location string) string {
    return fmt.Sprintf(`
resource "azurerm_resource_group" "test" {
  name     = "acctestRG-%d"
  location = "%s"
}

resource "azurerm_automation_account" "test" {
  name                = "acctestAutoAcct-%d"
  location            = "${azurerm_resource_group.test.location}"
  resource_group_name = "${azurerm_resource_group.test.name}"

  sku {
    name = "Basic"
  }
}

"azurerm_automation_string_variable" "test" {
  name                    = "acctestAutoVar-%d"
  resource_group_name     = "${azurerm_resource_group.test.name}"
  automation_account_name = "${azurerm_automation_account.test.name}"
  value                   = "Hello, Terraform Basic Test."
}
`, rInt, location, rInt, rInt)
}

func testAccAzureRMAutomationStringVariable_complete(rInt int, location string) string {
    return fmt.Sprintf(`
resource "azurerm_resource_group" "test" {
  name     = "acctestRG-%d"
  location = "%s"
}

resource "azurerm_automation_account" "test" {
  name                = "acctestAutoAcct-%d"
  location            = "${azurerm_resource_group.test.location}"
  resource_group_name = "${azurerm_resource_group.test.name}"

  sku {
    name = "Basic"
  }
}

"azurerm_automation_string_variable" "test" {
  name                    = "acctestAutoVar-%d"
  resource_group_name     = "${azurerm_resource_group.test.name}"
  automation_account_name = "${azurerm_automation_account.test.name}"
  description             = "This is a variable created by Terraform acceptance test."
  value                   = "Hello, Terraform Complete Test."
}
`, rInt, location, rInt, rInt)
}
