// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmAutomationVariable() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmAutomationVariableCreateUpdate,
        Read: resourceArmAutomationVariableRead,
        Update: resourceArmAutomationVariableCreateUpdate,
        Delete: resourceArmAutomationVariableDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
              ForceNew: true,
            },

            "resource_group_name": resourceGroupNameSchema(),

            "automation_account_name": {
                Type: schema.TypeString,
                Required: true,
              ForceNew: true,
            },

            "description": {
                Type: schema.TypeString,
                Optional: true,
            },

            "encrypted": {
                Type: schema.TypeBool,
                Optional: true,
            },

            "value": {
                Type: schema.TypeString,
                Optional: true,
            },
        },
    }
}

func resourceArmAutomationVariableCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).automationVariableClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)
    accountName := d.Get("automation_account_name").(string)
    description := d.Get("description").(string)
    value := d.Get("value").(string)
    encrypted := d.Get("encrypted").(bool)

    parameters := automation.VariableCreateOrUpdateParameters{
        VariableCreateOrUpdateProperties: &automation.VariableCreateOrUpdateProperties{
            Description: utils.String(description),
            Value: utils.String(value),
            IsEncrypted: utils.Bool(encrypted),
        },
    }


    if _, err := client.CreateOrUpdate(ctx, resourceGroup, accountName, name, parameters); err != nil {
        return fmt.Errorf("Error creating AutomationVariable: %+v", err)
    }


    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        return err
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read AutomationVariable %q", name)
    }
    d.SetId(*resp.ID)

    return resourceArmAutomationVariableRead(d, meta)
}

func resourceArmAutomationVariableRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).automationVariableClient
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return fmt.Errorf("Error parsing AutomationVariable ID %q: %+v", d.Id(), err)
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["automationAccounts"]
    name := id.Path["variables"]

    resp, err := client.Get(ctx, resourceGroup, accountName, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] AutomationVariable %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading AutomationVariable: %+v", err)
    }



    d.Set("name", resp.Name)
    d.Set("resource_group_name", resourceGroup)
    d.Set("automation_account_name", accountName)
    if properties := resp.VariableProperties; properties != nil {
        d.Set("description", properties.Description)
        d.Set("value", properties.Value)
        d.Set("encrypted", properties.IsEncrypted)
    }

    return nil
}


func resourceArmAutomationVariableDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).automationVariableClient
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return fmt.Errorf("Error parsing AutomationVariable ID %q: %+v", d.Id(), err)
    }
    resourceGroup := id.ResourceGroup
    accountName := id.Path["automationAccounts"]
    name := id.Path["variables"]

    if _, err := client.Delete(ctx, resourceGroup, accountName, name); err != nil {
        return fmt.Errorf("Error deleting AutomationVariable %q: %+v", name, err)
    }

    return nil
}
