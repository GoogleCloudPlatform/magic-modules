// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm

import (
    "fmt"
    "testing"

    "github.com/hashicorp/terraform/helper/acctest"
    "github.com/hashicorp/terraform/helper/resource"
    "github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)


func TestAccAzureRMAutomationVariable_containerRegistryExample(t *testing.T) {
  t.Parallel()

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheckAzureRMAutomationVariableDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccAzureRMAutomationVariable_containerRegistryExample(acctest.RandString(10)),
			},
			{
				ResourceName:      "azurerm_automation_variable.example",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAzureRMAutomationVariable_containerRegistryExample(val string) string {
  return fmt.Sprintf(`
resource "azurerm_resource_group" "example" {
  name     = "example-rg-%s"
  location = "West US"
}

resource "azurerm_storage_account" "example" {
  name                     = "tfexamplesa"
  resource_group_name      = "${azurerm_resource_group.example.name}"
  location                 = "${azurerm_resource_group.example.location}"
  account_tier             = "Standard"
  account_replication_type = "GRS"
}

resource "azurerm_container_registry" "example" {
  name                = "tf-example-acr"
  resource_group_name = "${azurerm_resource_group.example.name}"
  location            = "${azurerm_resource_group.example.location}"
  admin_enabled       = true
  sku                 = "Classic"
  storage_account_id  = "${azurerm_storage_account.example.id}"
}
`, val,
  )
}


func testCheckAzureRMAutomationVariableExists(resourceName string) resource.TestCheckFunc {
    return func(s *terraform.State) error {
        rs, ok := s.RootModule().Resources[resourceName]
        if !ok {
            return fmt.Errorf("Automation Variable not found: %s", resourceName)
        }

        name := rs.Primary.Attributes["name"]
        resourceGroup, hasResourceGroup := rs.Primary.Attributes["resource_group_name"]
        if !hasResourceGroup {
            return fmt.Errorf("Bad: no resource group name found in state for Automation Variable: %q", name)
        }
        accountName, hasAccountName := rs.Primary.Attributes["automation_account_name"]
        if !hasAccountName {
            return fmt.Errorf("Bad: no automation account name found in state for Automation Variable: %q", name)
        }

        client := testAccProvider.Meta().(*ArmClient).automationVariableClient
        ctx := testAccProvider.Meta().(*ArmClient).StopContext

        if resp, err := client.Get(ctx, resourceGroup, accountName, name); err != nil {
            if utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Bad: Automation Variable %q (Resource Group %q, Automation Account Name %q) does not exist", name, resourceGroup, accountName)
            }
            return fmt.Errorf("Bad: Get on automationVariableClient: %+v", err)
        }

        return nil
    }
}

func testCheckAzureRMAutomationVariableDestroy(s *terraform.State) error {
    client := testAccProvider.Meta().(*ArmClient).automationVariableClient
    ctx := testAccProvider.Meta().(*ArmClient).StopContext

    for _, rs := range s.RootModule().Resources {
        if rs.Type != "azurerm_automation_variable" {
            continue
        }

    name := rs.Primary.Attributes["name"]
    resourceGroup := rs.Primary.Attributes["resource_group_name"]
    accountName := rs.Primary.Attributes["automation_account_name"]

        if resp, err := client.Get(ctx, resourceGroup, accountName, name); err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return err
            }
        }

        return nil
    }

    return nil
}
