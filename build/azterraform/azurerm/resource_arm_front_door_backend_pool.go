// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFrontDoorBackendPool() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFrontDoorBackendPoolCreateUpdate,
        Read: resourceArmFrontDoorBackendPoolRead,
        Update: resourceArmFrontDoorBackendPoolCreateUpdate,
        Delete: resourceArmFrontDoorBackendPoolDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group_name": resourceGroupNameSchema(),

            "frontdoor_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
            },

            "backends": {
                Type: schema.TypeList,
                Optional: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "enabled_state": {
                            Type: schema.TypeString,
                            Optional: true,
                            ValidateFunc: validation.StringInSlice([]string{
                                string(frontdoor.Enabled),
                                string(frontdoor.Disabled),
                            }, false),
                            Default: string(frontdoor.Enabled),
                        },
                        "host_header": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "http_port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "https_port": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "priority": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                        "weight": {
                            Type: schema.TypeInt,
                            Optional: true,
                        },
                    },
                },
            },

            "health_probe_settings_id": {
                Type: schema.TypeString,
                Optional: true,
            },

            "load_balancing_settings_id": {
                Type: schema.TypeString,
                Optional: true,
            },
        },
    }
}

func resourceArmFrontDoorBackendPoolCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontdoorBackendPoolsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)
    frontDoor := d.Get("frontdoor_name").(string)

    if requireResourcesToBeImported {
        resp, err := client.Get(ctx, resourceGroup, frontDoor, name)
        if err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Error checking for present of existing Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
            }
        }
        if !utils.ResponseWasNotFound(resp.Response) {
            return tf.ImportAsExistsError("azurerm_front_door_backend_pool", *resp.ID)
        }
    }

    backends := d.Get("backends").([]interface{})
    healthProbeSettingsId := d.Get("health_probe_settings_id").(string)
    loadBalancingSettingsId := d.Get("load_balancing_settings_id").(string)

    parameters := frontdoor.BackendPool{
        BackendPoolProperties: &frontdoor.BackendPoolProperties{
            Backends: expandArmFrontDoorBackendPoolBackend(backends),
            HealthProbeSettings: &frontdoor.SubResource{
                ID: utils.String(healthProbeSettingsId),
            },
            LoadBalancingSettings: &frontdoor.SubResource{
                ID: utils.String(loadBalancingSettingsId),
            },
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, frontDoor, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, frontDoor, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q) ID", name, frontDoor, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmFrontDoorBackendPoolRead(d, meta)
}

func resourceArmFrontDoorBackendPoolRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontdoorBackendPoolsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    frontDoor := id.Path["frontDoors"]
    name := id.Path["backendPools"]

    resp, err := client.Get(ctx, resourceGroup, frontDoor, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Front Door Backend Pool %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group_name", resourceGroup)
    d.Set("frontdoor_name", frontDoor)
    if properties := resp.BackendPoolProperties; properties != nil {
        if err := d.Set("backends", flattenArmFrontDoorBackendPoolBackend(properties.Backends)); err != nil {
            return fmt.Errorf("Error setting `backends`: %+v", err)
        }
        if healthProbeSettings := properties.HealthProbeSettings; healthProbeSettings != nil {
            d.Set("health_probe_settings_id", healthProbeSettings.ID)
        }
        if loadBalancingSettings := properties.LoadBalancingSettings; loadBalancingSettings != nil {
            d.Set("load_balancing_settings_id", loadBalancingSettings.ID)
        }
    }

    return nil
}


func resourceArmFrontDoorBackendPoolDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontdoorBackendPoolsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    frontDoor := id.Path["frontDoors"]
    name := id.Path["backendPools"]

    future, err := client.Delete(ctx, resourceGroup, frontDoor, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Front Door Backend Pool %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
        }
    }

    return nil
}

func expandArmFrontDoorBackendPoolBackend(input []interface{}) *[]frontdoor.Backend {
    results := make([]frontdoor.Backend, 0)
    for _, v := range input {
        address := v["address"].(string)
        httpPort := v["http_port"].(int)
        httpsPort := v["https_port"].(int)
        hostHeader := v["host_header"].(string)
        enabledState := v["enabled_state"].(string)
        priority := v["priority"].(int)
        weight := v["weight"].(int)

        item := frontdoor.Backend{
            Address: utils.String(address),
            BackendHostHeader: utils.String(hostHeader),
            EnabledState: frontdoor.BackendEnabledState(enabledState),
            HTTPPort: utils.Int32(int32(httpPort)),
            HTTPSPort: utils.Int32(int32(httpsPort)),
            Priority: utils.Int32(int32(priority)),
            Weight: utils.Int32(int32(weight)),
        }

        results = append(results, item)
    }
    return &results
}


func flattenArmFrontDoorBackendPoolBackend(input *[]frontdoor.Backend) []interface{} {
    results := make([]interface{}, 0)
    if input == nil {
        return results
    }

    for _, item := range input {
        v := make(map[string]interface{})

        if address := item.Address; address != nil {
            v["address"] = *address
        }
        if enabledState := string(item.EnabledState); enabledState != nil {
            v["enabled_state"] = *enabledState
        }
        if hostHeader := item.BackendHostHeader; hostHeader != nil {
            v["host_header"] = *hostHeader
        }
        if httpPort := item.HTTPPort; httpPort != nil {
            v["http_port"] = int(*httpPort)
        }
        if httpsPort := item.HTTPSPort; httpsPort != nil {
            v["https_port"] = int(*httpsPort)
        }
        if priority := item.Priority; priority != nil {
            v["priority"] = int(*priority)
        }
        if weight := item.Weight; weight != nil {
            v["weight"] = int(*weight)
        }

        results = append(results, v)
    }

    return results
}
