// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm



func resourceAzureRmResourceGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceAzureRmResourceGroupCreate,
        Read: resourceAzureRmResourceGroupRead,
        Update: resourceAzureRmResourceGroupUpdate,
        Delete: resourceAzureRmResourceGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
"name": {
    Type: schema.TypeString,
    Optional: true,
},
            "project": {
                Type:     schema.TypeString,
                Optional: true,
                Computed: true,
                ForceNew: true,
            },
        },
    }
}

func resourceAzureRmResourceGroupCreate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient)/*.TODO*/
    ctx := meta.(*ArmClient).StopContext

    obj := make(map[string]interface{})
    nameProp, err := expandAzureRmResourceGroupName(d.Get("name"), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
        obj["name"] = nameProp
    }



    if _, err := client/*.TODOCreateOrUpdate*/(/* TODO */); err != nil {
        return fmt.Errorf("Error creating ResourceGroup: %+v", err)
    }


    log.Printf("[DEBUG] Finished creating ResourceGroup %q: %#v", d.Id(), res)


    resp, err := client.Get(ctx, /* TODO */)
    if err != nil {
        return err
    }
    d.SetId(*resp.ID)

    return resourceAzureRmResourceGroupRead(d, meta)
}

func resourceAzureRmResourceGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient)/*.TODO*/
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return fmt.Errorf("Error parsing ResourceGroup ID %q: %+v", d.Id(), err)
    }
    /* TODO */

    resp, err := client.Get(ctx, /* TODO */)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] ResourceGroup %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading ResourceGroup: %+v", err)
    }

    /* TODO */




    if err := d.Set("name", flattenAzureRmResourceGroupName(res["name"])); err != nil {
        return fmt.Errorf("Error reading ResourceGroup: %s", err)
    }
    project, err := getProject(d, config)
    if err != nil {
        return err
    }
    if err := d.Set("project", project); err != nil {
        return fmt.Errorf("Error reading ResourceGroup: %s", err)
    }

    return nil
}

func resourceAzureRmResourceGroupUpdate(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)

    obj := make(map[string]interface{})
    nameProp, err := expandAzureRmResourceGroupName(d.Get("name"), d, config)
    if err != nil {
        return err
    } else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nameProp)) {
        obj["name"] = nameProp
    }



    url, err := replaceVars(d, config, "https://pubsub.googleapis.com/v1/projects/{{project}}/topics/{{name}}")
    if err != nil {
        return err
    }

    log.Printf("[DEBUG] Updating ResourceGroup %q: %#v", d.Id(), obj)
    _, err = sendRequest(config, "PUT", url, obj)

    if err != nil {
    return fmt.Errorf("Error updating ResourceGroup %q: %s", d.Id(), err)
    }


    return resourceAzureRmResourceGroupRead(d, meta)
}

func resourceAzureRmResourceGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient)/*.TODO*/
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return fmt.Errorf("Error parsing ResourceGroup ID %q: %+v", d.Id(), err)
    }
    /* TODO */

    future, err := client.Delete(ctx, /* TODO */)
    if err != nil {
        if response.WasNotFound(deleteFuture.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting ResourceGroup %q: %+v", name, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(deleteFuture.Response()) {
            return fmt.Errorf("Error waiting for deleting ResourceGroup %q: %+v", name, err)
        }
    }

    var obj map[string]interface{}
    log.Printf("[DEBUG] Deleting ResourceGroup %q", d.Id())
    res, err := sendRequest(config, "DELETE", url, obj)
    if err != nil {
        return handleNotFoundError(err, d, "ResourceGroup")
    }


    log.Printf("[DEBUG] Finished deleting ResourceGroup %q: %#v", d.Id(), res)
    return nil
}

func flattenAzureRmResourceGroupName(v interface{}) interface{} {
  return v
}


func expandAzureRmResourceGroupName(v interface{}, d *schema.ResourceData, config *Config) (interface{}, error) {
  return v, nil
}
