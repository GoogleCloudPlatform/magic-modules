// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm




func resourceAzureRmResourceGroup() *schema.Resource {
    return &schema.Resource{
        Create: resourceAzureRmResourceGroupCreateOrUpdate,
        Read: resourceAzureRmResourceGroupRead,
        Update: resourceAzureRmResourceGroupCreateOrUpdate,
        Delete: resourceAzureRmResourceGroupDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
"location": locationSchema(),
"name": resourceGroupNameSchema(),
"tags": tagsSchema(),
        },
    }
}

func resourceAzureRmResourceGroupCreateOrUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).resourceGroupsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    location := d.Get("location").(string)
    tags := d.Get("tags").(map[string]interface{})

    parameters := resources.Group{
        Location: utils.String(location),
        Tags: expandAzureRmResourceGroupTags(tags),
    }



    if _, err := client.CreateOrUpdate(ctx, name, parameters); err != nil {
        return fmt.Errorf("Error creating ResourceGroup: %+v", err)
    }


    resp, err := client.Get(ctx, name)
    if err != nil {
        return err
    }
    d.SetId(*resp.ID)

    return resourceAzureRmResourceGroupRead(d, meta)
}

func resourceAzureRmResourceGroupRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).resourceGroupsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return fmt.Errorf("Error parsing ResourceGroup ID %q: %+v", d.Id(), err)
    }
    name := id.ResourceGroup

    resp, err := client.Get(ctx, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] ResourceGroup %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading ResourceGroup: %+v", err)
    }




    d.Set("name", resp.Name)
    if err := d.Set("name", flattenAzureRmResourceGroupName(res["name"])); err != nil {
        return fmt.Errorf("Error reading ResourceGroup: %s", err)
    }
    if err := d.Set("location", flattenAzureRmResourceGroupLocation(res["location"])); err != nil {
        return fmt.Errorf("Error reading ResourceGroup: %s", err)
    }
    if err := d.Set("tags", flattenAzureRmResourceGroupTags(res["tags"])); err != nil {
        return fmt.Errorf("Error reading ResourceGroup: %s", err)
    }

    return nil
}

func resourceAzureRmResourceGroupDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).resourceGroupsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return fmt.Errorf("Error parsing ResourceGroup ID %q: %+v", d.Id(), err)
    }
    name := id.ResourceGroup

    future, err := client.Delete(ctx, name)
    if err != nil {
        if response.WasNotFound(deleteFuture.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting ResourceGroup %q: %+v", name, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(deleteFuture.Response()) {
            return fmt.Errorf("Error waiting for deleting ResourceGroup %q: %+v", name, err)
        }
    }

    return nil
}

func flattenAzureRmResourceGroupName(v interface{}) interface{} {
  return v
}

func flattenAzureRmResourceGroupLocation(v interface{}) interface{} {
  return v
}

func flattenAzureRmResourceGroupTags(v interface{}) interface{} {
  return v
}
