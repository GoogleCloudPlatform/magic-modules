// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm


func dataSourceArmBatchAccount() *schema.Resource {
    return &schema.Resource{
        Read: dataSourceArmBatchAccountRead,

        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ValidateFunc: validateAzureRMBatchAccountName,
            },

            "location": locationForDataSourceSchema(),

            "resource_group_name": resourceGroupNameForDataSourceSchema(),

            "account_endpoint": {
                Type: schema.TypeString,
                Computed: true,
            },

            "key_vault_reference": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "id": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                        "url": {
                            Type: schema.TypeString,
                            Computed: true,
                        },
                    },
                },
            },

            "pool_allocation_mode": {
                Type: schema.TypeString,
                Computed: true,
            },

            "storage_account_id": {
                Type: schema.TypeString,
                Computed: true,
            },

            "tags": tagsForDataSourceSchema(),
        },
    }
}

func dataSourceArmBatchAccountRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).batchAccountClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            return fmt.Errorf("Error: Batch Account %q (Resource Group %q) was not found", name, resourceGroup)
        }
        return fmt.Errorf("Error reading Batch Account %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    d.SetId(*resp.ID)


    d.Set("name", resp.Name)
    d.Set("resource_group_name", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azureRMNormalizeLocation(*location))
    }
    if properties := resp.AccountProperties; properties != nil {
        d.Set("account_endpoint", properties.AccountEndpoint)
        if err := d.Set("key_vault_reference", flattenArmBatchAccountKeyVaultReference(properties.KeyVaultReference)); err != nil {
            return fmt.Errorf("Error setting `key_vault_reference`: %+v", err)
        }
        d.Set("pool_allocation_mode", string(properties.PoolAllocationMode))
        if autoStorage := properties.AutoStorage; autoStorage != nil {
            d.Set("storage_account_id", autoStorage.StorageAccountID)
        }
    }
    flattenAndSetTags(d, resp.Tags)

    return nil
}
