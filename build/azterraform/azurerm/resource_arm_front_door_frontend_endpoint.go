// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmFrontDoorFrontendEndpoint() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmFrontDoorFrontendEndpointCreateUpdate,
        Read: resourceArmFrontDoorFrontendEndpointRead,
        Update: resourceArmFrontDoorFrontendEndpointCreateUpdate,
        Delete: resourceArmFrontDoorFrontendEndpointDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "resource_group_name": resourceGroupNameSchema(),

            "frontdoor_name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
            },

            "host_name": {
                Type: schema.TypeString,
                Optional: true,
            },

            "session_affinity_enabled_state": {
                Type: schema.TypeString,
                Optional: true,
                ValidateFunc: validation.StringInSlice([]string{
                    string(frontdoor.SessionAffinityEnabledStateEnabled),
                    string(frontdoor.SessionAffinityEnabledStateDisabled),
                }, false),
                Default: string(frontdoor.Enabled),
            },

            "session_affinity_ttl_seconds": {
                Type: schema.TypeInt,
                Optional: true,
            },

            "web_application_firewall_policy_id": {
                Type: schema.TypeString,
                Optional: true,
            },
        },
    }
}

func resourceArmFrontDoorFrontendEndpointCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontdoorFrontendEndpointsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group_name").(string)
    frontDoor := d.Get("frontdoor_name").(string)

    if requireResourcesToBeImported {
        resp, err := client.Get(ctx, resourceGroup, frontDoor, name)
        if err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Error checking for present of existing Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
            }
        }
        if !utils.ResponseWasNotFound(resp.Response) {
            return tf.ImportAsExistsError("azurerm_front_door_frontend_endpoint", *resp.ID)
        }
    }

    hostName := d.Get("host_name").(string)
    sessionAffinityEnabledState := d.Get("session_affinity_enabled_state").(string)
    sessionAffinityTtlSeconds := d.Get("session_affinity_ttl_seconds").(int)
    webApplicationFirewallPolicyId := d.Get("web_application_firewall_policy_id").(string)

    parameters := frontdoor.FrontendEndpoint{
        FrontendEndpointProperties: &frontdoor.FrontendEndpointProperties{
            HostName: utils.String(hostName),
            SessionAffinityEnabledState: frontdoor.SessionAffinityEnabledState(sessionAffinityEnabledState),
            SessionAffinityTTLSeconds: utils.Int32(int32(sessionAffinityTtlSeconds)),
            WebApplicationFirewallPolicyLink: &frontdoor.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink{
                ID: utils.String(webApplicationFirewallPolicyId),
            },
        },
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, frontDoor, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, frontDoor, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q) ID", name, frontDoor, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmFrontDoorFrontendEndpointRead(d, meta)
}

func resourceArmFrontDoorFrontendEndpointRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontdoorFrontendEndpointsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    frontDoor := id.Path["frontDoors"]
    name := id.Path["frontendEndpoints"]

    resp, err := client.Get(ctx, resourceGroup, frontDoor, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Front Door Frontend Endpoint %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("resource_group_name", resourceGroup)
    d.Set("frontdoor_name", frontDoor)
    if properties := resp.FrontendEndpointProperties; properties != nil {
        d.Set("host_name", properties.HostName)
        d.Set("session_affinity_enabled_state", string(properties.SessionAffinityEnabledState))
        d.Set("session_affinity_ttl_seconds", int(properties.SessionAffinityTTLSeconds))
        if webApplicationFirewallPolicyLink := properties.WebApplicationFirewallPolicyLink; webApplicationFirewallPolicyLink != nil {
            d.Set("web_application_firewall_policy_id", webApplicationFirewallPolicyLink.ID)
        }
    }

    return nil
}


func resourceArmFrontDoorFrontendEndpointDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).frontdoorFrontendEndpointsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    frontDoor := id.Path["frontDoors"]
    name := id.Path["frontendEndpoints"]

    future, err := client.Delete(ctx, resourceGroup, frontDoor, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Front Door Frontend Endpoint %q (Frontdoor Name %q / Resource Group %q): %+v", name, frontDoor, resourceGroup, err)
        }
    }

    return nil
}
