#!/usr/bin/python
#
# Copyright (C) 2019 Zim Kalinowski (@zikalino)
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/GoogleCloudPlatform/magic-modules
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ["preview"],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_servicebusdisasterrecoveryconfig
version_added: "2.6"

short_description: Manages a service bus disaster recovery config on Azure.

description:
    - Create, update and delete instance of Azure Service Bus Disaster Recovery Config.

options:
    name:
        description:
        - The name of the service bus disaster recovery.
        required: true
    resource_group_name:
        description:
        - The name of the resource group in which to create the service bus disaster
            recovery.
        required: true
    namespace_name:
        description:
        - The name of the service bus namespace in which the config is created.
        required: true
    partner_namespace:
        description:
        - The parter namespace of the service bus disaster recovery.
        required: false
    alternate_name:
        description:
        - The alternative name of the service bus disaster recovery.
        required: false
    state:
        description:
        - Assert the state of the Service Bus Disaster Recovery Config.
        - Use 'present' to create or update a Service Bus Disaster Recovery Config
            and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure

author:
    - "Zim Kalinowski (@zikalino)"
'''

EXAMPLES = '''
  - name: Create (or update) Service Bus Disaster Recovery Config
    azure_rm_servicebusdisasterrecoveryconfig:
      resource_group: myResourceGroup
      name: "test_object"
      namespace_name: test.somewild2.example.com.
      partner_namespace: xxx
      alternate_name: yyy
      state: present
'''

RETURN = '''
id:
    description:
    - The identifier of the DTL Virtual Machine resource.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common import AzureRMModuleBase
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.servicebus import ServiceBusManagementClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)

class AzureRMServiceBusDisasterRecoveryConfig(AzureRMModuleBase):
    """Configuration class for an Azure RM Service Bus Disaster Recovery Config resource"""

    def __init__(self):
        self.module_arg_spec = dict(
          # TODO: Finish type declaration
        )
        # TODO: Argument Properties

        self.results = dict(changed=False)
        self.mgmt_client = None
        self.state = None
        self.to_do = Actions.NoAction

        required_if = [
            # TODO: Required If
            ('state', 'present', [])
        ]

        super(AzureRMServiceBusDisasterRecoveryConfig, self).__init__(derived_arg_spec=self.module_arg_spec,
                                                                      supports_check_mode=True,
                                                                      supports_tags=True,
                                                                      required_if=required_if)

    def exec_module(self, **kwargs):
        """Main module execution method"""
        # TODO: Parameters -> Class Properties
        # TODO: Parameters -> SDK

        response = None

        self.mgmt_client = self.get_mgmt_svc_client(ServiceBusManagementClient,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        old_response = self.get_servicebusdisasterrecoveryconfig()

        # TODO: Idempotency Check

        if (self.to_do == Actions.Create) or (self.to_do == Actions.Update):
            self.log("Need to Create / Update the Service Bus Disaster Recovery Config instance")

            self.results['changed'] = True
            if self.check_mode:
                return self.results

            response = self.create_update_servicebusdisasterrecoveryconfig()

            self.log("Creation / Update done")
        elif self.to_do == Actions.Delete:
            self.log("Service Bus Disaster Recovery Config instance deleted")
            self.results['changed'] = True

            if self.check_mode:
                return self.results

            self.delete_servicebusdisasterrecoveryconfig()
        else:
            self.log("Service Bus Disaster Recovery Config instance unchanged")
            self.results['changed'] = False
            response = old_response

        # TODO: Format Response

    def create_update_servicebusdisasterrecoveryconfig(self):
        '''
        Creates or updates Service Bus Disaster Recovery Config with the specified configuration.

        :return: deserialized Service Bus Disaster Recovery Config instance state dictionary
        '''
        self.log("Creating / Updating the Service Bus Disaster Recovery Config instance {0}".format(self.name))
        try:
            response = self.mgmt_client.disaster_recovery_configs.create_or_update(resource_group_name=self.resource_group,
                                                                                   namespace_name=self.namespace,
                                                                                   alias=self.name,
                                                                                   parameters=self.parameters)
            if isinstance(response, LROPoller) or isinstance(response.AzureOperationPoller):
                response = self.get_poller_result(response)
        except CloudError as exc:
            self.log('Error attempting to create the Service Bus Disaster Recovery Config instance.')
            self.fail("Error creating the Service Bus Disaster Recovery Config instance: {0}".format(str(exc)))
        return response.as_dict()


    def delete_servicebusdisasterrecoveryconfig(self):
        '''
        Deletes specified Service Bus Disaster Recovery Config instance in the specified subscription and resource group.

        :return: True
        '''
        self.log("Deleting the Service Bus Disaster Recovery Config instance {0}".format(self.name))
        try:
            response = self.mgmt_client.disaster_recovery_configs.delete(resource_group_name=self.resource_group,
                                                                         namespace_name=self.namespace,
                                                                         alias=self.name)
        except CloudError as e:
            self.log('Error attempting to delete the Service Bus Disaster Recovery Config instance.')
            self.fail("Error deleting the Service Bus Disaster Recovery Config instance: {0}".format(str(e)))

        if isinstance(response, LROPoller) or isinstance(response, AzureOperationPoller):
            response = self.get_poller_result(response)
        return True

    def get_servicebusdisasterrecoveryconfig(self):
        '''
        Gets the properties of the specified Service Bus Disaster Recovery Config
        :return: deserialized Service Bus Disaster Recovery Config instance state dictionary
        '''
        self.log("Checking if the Service Bus Disaster Recovery Config instance {0} is present".format(self.name))
        found = false
        try:
            response = self.mgmt_client.disaster_recovery_configs.get(resource_group_name=self.resource_group,
                                                                      namespace_name=self.namespace,
                                                                      alias=self.name)
            found = True
            self.log("Response : {0}".format(response))
            self.log("Service Bus Disaster Recovery Config instance : {0} found".format(response.name))
        except CloudError as e:
            self.log('Did not find the Service Bus Disaster Recovery Config instance.')
        if found is True:
            return response.as_dict()
        return False


def main():
    """Main execution"""
    AzureRMServiceBusDisasterRecoveryConfig()

if __name__ == '__main__':
    main()
