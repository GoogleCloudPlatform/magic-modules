#!/usr/bin/python
#
# Copyright (C) 2019 Zim Kalinowski (@zikalino)#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/GoogleCloudPlatform/magic-modules
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ["preview"],
                    'supported_by': 'community'}


DOCUMENTATION = '''
---
module: azure_rm_servicebusdisasterrecoveryconfig
version_added: "2.6"

short_description: Manages a service bus disaster recovery config on Azure.

description:
    - Create, update and delete instance of Azure Service Bus Disaster Recovery Config.

options:
    name:
        description:
        - The name of the service bus disaster recovery.
        required: true
    resource_group_name:
        description:
        - The name of the resource group in which to create the service bus disaster
            recovery.
        required: true
    namespace_name:
        description:
        - The name of the service bus namespace in which the config is created.
        required: true
    partner_namespace:
        description:
        - The parter namespace of the service bus disaster recovery.
        required: false
    alternate_name:
        description:
        - The alternative name of the service bus disaster recovery.
        required: false
    state:
        description:
        - Assert the state of the Service Bus Disaster Recovery Config.
        - Use 'present' to create or update a Service Bus Disaster Recovery Config
            and 'absent' to delete it.
        default: present
        choices:
        - present
        - absent

extends_documentation_fragment:
    - azure

author:
    - "Zim Kalinowski (@zikalino)"
'''

EXAMPLES = '''
  - name: Create (or update) Service Bus Disaster Recovery Config
    azure_rm_servicebusdisasterrecoveryconfig:
      resource_group: myResourceGroup
      name: "test_object"
      namespace_name: test.somewild2.example.com.
      partner_namespace: xxx
      alternate_name: yyy
      state: present
'''

RETURN = '''
id:
    description:
    - The identifier of the DTL Virtual Machine resource.
    returned: always
    type: str
'''

import time
from ansible.module_utils.azure_rm_common import AzureRMModuleBase
from ansible.module_utils.common.dict_transformations import _snake_to_camel

try:
    from msrestazure.azure_exceptions import CloudError
    from msrest.polling import LROPoller
    from msrestazure.azure_operation import AzureOperationPoller
    from msrest.serialization import Model
    from azure.mgmt.servicebus import ServiceBusManagementClient
except ImportError:
    # This is handled in azure_rm_common
    pass


class Actions:
    NoAction, Create, Update, Delete = range(4)

class AzureRMServiceBusDisasterRecoveryConfig(AzureRMModuleBase):
    """Configuration class for an Azure RM Service Bus Disaster Recovery Config resource"""

    def __init__(self):
        self.module_arg_spec = dict(
          # TODO: Finish type declaration
        )
        # TODO: Required If
        # TODO: Argument Properties
        # TODO: Module State
        # TODO: Base Class Initialization

    # TODO: Main Module Execution
        # TODO: Parameters -> Class Properties
        # TODO: Parameters -> SDK
        # TODO: Create Client Instance
        # TODO: Response & Idempotency Check
        # TODO: Perform Desired Action
        # TODO: Format Response

    # TODO: Create/Update Function

    # TODO: Delete Function

    # TODO: Read Function

'''

    module = GcpModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
            name=dict(required=True, type='str'),
            resource_group_name=dict(required=True, type='str'),
            namespace_name=dict(required=True, type='str'),
            partner_namespace=dict(type='str'),
            alternate_name=dict(type='str')
        )
    )

    if not module.params['scopes']:
        module.params['scopes'] = ['NotUsedInAzure']

    state = module.params['state']

    fetch = fetch_resource(module, self_link(module))
    changed = False

    if fetch:
        if state == 'present':
            if is_different(module, fetch):
                update(module, self_link(module))
                fetch = fetch_resource(module, self_link(module))
                changed = True
        else:
            delete(module, self_link(module))
            fetch = {}
            changed = True
    else:
        if state == 'present':
            fetch = create(module, collection(module))
            changed = True
        else:
            fetch = {}

    fetch.update({'changed': changed})

    module.exit_json(**fetch)


def create(module, link):
    auth = GcpSession(module, 'zservicebusrecovery')
    return return_if_object(module, auth.post(link, resource_to_request(module)))


def update(module, link):
    auth = GcpSession(module, 'zservicebusrecovery')
    return return_if_object(module, auth.put(link, resource_to_request(module)))


def delete(module, link):
    auth = GcpSession(module, 'zservicebusrecovery')
    return return_if_object(module, auth.delete(link))


def resource_to_request(module):
    request = {
        u'name': module.params.get('name'),
        u'resourceGroupName': module.params.get('resource_group_name'),
        u'namespaceName': module.params.get('namespace_name'),
        u'partnerNamespace': module.params.get('partner_namespace'),
        u'AlternateName': module.params.get('alternate_name')
    }
    request = encode_request(request, module)
    return_vals = {}
    for k, v in request.items():
        if v:
            return_vals[k] = v

    return return_vals


def fetch_resource(module, link, allow_not_found=True):
    auth = GcpSession(module, 'zservicebusrecovery')
    return return_if_object(module, auth.get(link), allow_not_found)


def self_link(module):
    return "NotUsedInAzureNotUsedInAzure/{name}".format(**module.params)


def collection(module):
    return "NotUsedInAzureNotUsedInAzure".format(**module.params)


def return_if_object(module, response, allow_not_found=False):
    # If not found, return nothing.
    if allow_not_found and response.status_code == 404:
        return None

    # If no content, return nothing.
    if response.status_code == 204:
        return None

    try:
        module.raise_for_status(response)
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)

    result = decode_request(result, module)

    if navigate_hash(result, ['error', 'errors']):
        module.fail_json(msg=navigate_hash(result, ['error', 'errors']))

    return result


def is_different(module, response):
    request = resource_to_request(module)
    response = response_to_hash(module, response)
    request = decode_request(request, module)

    # Remove all output-only from response.
    response_vals = {}
    for k, v in response.items():
        if k in request:
            response_vals[k] = v

    request_vals = {}
    for k, v in request.items():
        if k in response:
            request_vals[k] = v

    return GcpRequest(request_vals) != GcpRequest(response_vals)


# Remove unnecessary properties from the response.
# This is for doing comparisons with Ansible's current parameters.
def response_to_hash(module, response):
    return {
        u'name': module.params.get('name'),
        u'resourceGroupName': module.params.get('resource_group_name'),
        u'namespaceName': module.params.get('namespace_name'),
        u'partnerNamespace': response.get(u'partnerNamespace'),
        u'AlternateName': response.get(u'AlternateName')
    }


def decode_request(response, module):
    if 'name' in response:
        response['name'] = response['name'].split('/')[-1]
    return response


def encode_request(request, module):
    request['name'] = '/'.join(['projects', module.params['project'],
                                'topics', module.params['name']])
    return request

'''

def main():
    """Main execution"""
    AzureRMServiceBusDisasterRecoveryConfig()

if __name__ == '__main__':
    main()
