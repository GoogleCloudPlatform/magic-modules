package google

import(
	"context"
	"log"
	"testing"

    "github.com/hashicorp/terraform-plugin-sdk/helper/resource"
	{{$.Package}} "github.com/GoogleCloudPlatform/declarative-resource-client-library/services/google/{{$.DCLPackage}}"

)

func init() {
    resource.AddTestSweepers("{{$.SweeperName}}", &resource.Sweeper{
        Name: "{{$.SweeperName}}",
        F: testSweep{{$.SweeperName}},
    })
}

func testSweep{{$.SweeperName}}(region string) error {
	resourceName := "{{ $.SweeperName}}"
	log.Printf("[INFO][SWEEPER_LOG] Starting sweeper for %s",resourceName)

	config, err := sharedConfigForRegion(region)
	if err != nil {
		log.Printf("[INFO][SWEEPER_LOG] error getting shared config for region: %s", err)
		return err
	}

	err = config.LoadAndValidate(context.Background())
	if err != nil {
		log.Printf("[INFO][SWEEPER_LOG] error loading: %s", err)
		return err
	}

	t := &testing.T{}
	billingId := getTestBillingAccountFromEnv(t)

	// Setup variables to be used for Delete arguments.
	d := map[string]string{
		"project":config.Project,
		"region":region,
		"location":region,
		"zone":"-",
		"billing_account":billingId,
	}

	err = config.client{{$.PackageType}}DCL.DeleteAll{{$.Type}}(context.Background(), {{$.SweeperFunctionArgs}} isDeletable{{$.SweeperName}})
	if err != nil {
		return err
	}
	return nil
}

func isDeletable{{$.SweeperName}}(r *{{$.Package}}.{{$.Type}}) bool {
	return isSweepableTestResource(*r.Name)	
}