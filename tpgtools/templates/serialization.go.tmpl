package serialization

import (
	"bytes"
	"encoding/json"
	"fmt"
	"strings"
	dcl "github.com/GoogleCloudPlatform/declarative-resource-client-library/dcl"
	tfjson "github.com/hashicorp/terraform-json"
	fmtcmd "github.com/hashicorp/hcl/hcl/fmtcmd"
{{- range $res := . }}
	{{$res.Package}} "github.com/GoogleCloudPlatform/declarative-resource-client-library/services/google/{{$res.Package}}"
{{- end }}
)

// TFJSONToDCL takes a tfjson plan and returns a list of DCL resources which are in that plan.
// These resources may be more verbose than the config in the HCL - this is a representation
// of what Terraform actually intends to do, rather than a simple reproduction of the
// given HCL.  This provides a better match to the Terraform user experience than the alternative.
func TFJSONToDCL(p tfjson.Plan) ([]dcl.Resource, error) {
	var resources []dcl.Resource
	for _, r := range p.PlannedValues.RootModule.Resources {
	{{- range $res := . }}
		if r.Type == "google_{{$res.Path}}" {
			m := map[string]interface{}{
			{{- range $prop := $res.Properties }}

				{{- if and (eq $prop.Type.String "TypeList" "TypeSet") (not $prop.ElemIsBasicType) }}
				"{{$prop.PackageJSONName}}": convert{{$res.PathType}}{{$prop.PackagePath}}List(r.AttributeValues["{{$prop.Name}}"]),
				{{- else if $prop.IsObject }}
				"{{$prop.PackageJSONName}}": convert{{$res.PathType}}{{$prop.PackagePath}}(r.AttributeValues["{{$prop.Name}}"]),
				{{- else }}
				"{{$prop.PackageJSONName}}": r.AttributeValues["{{$prop.Name}}"],
				{{- end }}
			{{- end }}
			}
			b, err := json.Marshal(m)
			if err != nil {
				return nil, err
			}
			r := &{{$res.Package}}.{{$res.Type}}{}
			if err := json.Unmarshal(b, r); err != nil {
				return nil, err
			}
			resources = append(resources, r)
		}
	{{- end }}
	}
	return resources, nil
}

{{- range $res := . }}
// {{ $res.PathType }}AsHCL returns a string representation of the specified resource in HCL.
// The generated HCL will include every settable field as a literal - that is, no
// variables, no references.  This may not be the best possible representation, but
// the crucial point is that `terraform import; terraform apply` will not produce
// any changes.  We do not validate that the resource specified will pass terraform
// validation unless is an object returned from the API after an Apply.
func {{ $res.PathType}}AsHCL(r {{$res.Package}}.{{$res.Type}}) (string, error) {
	outputConfig := "resource \"google_{{$res.Path}}\" \"output\" {\n"
	{{- range $field := $res.Properties}}
		{{- if $field.Settable }}
		{{- if eq $field.Type.String "TypeString" "TypeInt" "TypeBool" "TypeFloat" }}
			{{- if $field.Type.IsDateTime }}
	if !r.{{$field.PackageName}}.IsZero() {
		outputConfig += fmt.Sprintf("\t{{$field.Name}} = %v\n", r.{{$field.PackageName}})
	}
			{{- else }}
	if r.{{$field.PackageName}} != nil {
		outputConfig += fmt.Sprintf("\t{{$field.Name}} = %#v\n", *r.{{$field.PackageName}})
	}
			{{- end}}
		{{- else if $field.Type.IsObject }}
	if v := convert{{$res.PathType}}{{$field.PackagePath}}ToHCL(r.{{$field.PackageName}}); v != "" {
		outputConfig += fmt.Sprintf("\t{{$field.Name}} = %s\n", v)
	}
		{{- else if eq $field.Type.String "TypeList" "TypeSet" }}
	if r.{{$field.PackageName}} != nil {
			{{- if $field.ElemIsBasicType }}
		outputConfig += "\t{{$field.Name}} = ["
		for _, v := range r.{{$field.PackageName}} {
			outputConfig += fmt.Sprintf("%#v, ", v)
		}
		outputConfig += "]\n"
			{{- else }}
		for _, v := range r.{{$field.PackageName}} {
			outputConfig += fmt.Sprintf("\t{{$field.Name}} %s\n", convert{{$res.PathType}}{{$field.PackagePath}}ToHCL(&v))
		}
			{{- end }}
	}
		{{- end}}
		{{- end}}
	{{- end}}
	return formatHCL(outputConfig + "}")
}

{{- range $v := $res.Objects}}
func convert{{$res.PathType}}{{$v.PackagePath}}ToHCL(r *{{$res.Package}}.{{$res.Type}}{{$v.PackagePath}}) string {
	if r == nil {
		return ""
	}
	outputConfig := "{\n"
	{{- range $field := $v.Properties}}
		{{- if $field.Settable }}
		{{- if eq $field.Type.String "TypeString" "TypeInt" "TypeBool" "TypeFloat" }}
			{{- if $field.Type.IsDateTime }}
	if !r.{{$field.PackageName}}.IsZero() {
		outputConfig += fmt.Sprintf("\t{{$field.Name}} = %v\n", r.{{$field.PackageName}})
	}
			{{- else }}
	if r.{{$field.PackageName}} != nil {
		outputConfig += fmt.Sprintf("\t{{$field.Name}} = %#v\n", *r.{{$field.PackageName}})
	}
			{{- end}}
		{{- else if $field.Type.IsObject }}
	if v := convert{{$res.PathType}}{{$field.PackagePath}}ToHCL(r.{{$field.PackageName}}); v != "" {
		outputConfig += fmt.Sprintf("\t{{$field.Name}} = %s\n", v)
	}
		{{- else if eq $field.Type.String "TypeList" "TypeSet" }}
	if r.{{$field.PackageName}} != nil {
			{{- if $field.ElemIsBasicType }}
		outputConfig += "\t{{$field.Name}} = ["
		for _, v := range r.{{$field.PackageName}} {
			outputConfig += fmt.Sprintf("%#v, ", v)
		}
		outputConfig += "]\n"
			{{- else }}
		for _, v := range r.{{$field.PackageName}} {
			outputConfig += fmt.Sprintf("\t{{$field.Name}} %s\n", convert{{$res.PathType}}{{$field.PackagePath}}ToHCL(&v))
		}
			{{- end }}
	}
		{{- end}}
		{{- end}}
	{{- end}}
	return outputConfig + "}"
}
{{- end }}
{{- end }}

{{- range $res := . }}
	{{- range $v := $res.Objects }}
func convert{{$res.PathType}}{{$v.PackagePath}}(i interface{}) (map[string]interface{}) {
	if i == nil {
		return nil
	}
	in := i.(map[string]interface{})
	return map[string]interface{}{
	{{- range $prop := $v.Properties }}
		{{- if $prop.IsObject }}
		"{{$prop.PackageJSONName}}": convert{{$res.PathType}}{{$prop.PackagePath}}(in["{{$prop.Name}}"]),
		{{- else }}
		"{{$prop.PackageJSONName}}": in["{{$prop.Name}}"],
		{{- end }}
	{{- end }}
	}
}


func convert{{$res.PathType}}{{$v.PackagePath}}List(i interface{}) (out []map[string]interface{}) {
	if i == nil {
		return nil
	}

	for _, v := range i.([]interface{}) {
		out = append(out, convert{{$res.PathType}}{{$v.PackagePath}}(v))
	}
	return out
}
	{{- end }}
{{- end }}

func formatHCL(hcl string) (string, error) {
	b := bytes.Buffer{}
	r := strings.NewReader(hcl)
	if err := fmtcmd.Run(nil, nil, r, &b, fmtcmd.Options{}); err != nil {
		return "", err
	}
	return b.String(), nil
}
