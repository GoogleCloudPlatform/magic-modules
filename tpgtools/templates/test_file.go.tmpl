{{/* Copyright 2021 Google LLC. All Rights Reserved.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

			http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License. */}}
	// ----------------------------------------------------------------------------
	//
	//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
	//
	// ----------------------------------------------------------------------------
	//
	//     This file is automatically generated by Magic Modules and manual
	//     changes will be clobbered when the file is regenerated.
	//
	//     Please read more about how to change this file in
	//     .github/CONTRIBUTING.md.
	//
	// ----------------------------------------------------------------------------

package google

import (
	"context"
	"fmt"
	"strings"
	"testing"

	dcl "github.com/GoogleCloudPlatform/declarative-resource-client-library/dcl"
	{{$.Package}} "github.com/GoogleCloudPlatform/declarative-resource-client-library/services/google/{{$.DCLPackage}}"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

{{- range $s := $.Samples}}
{{ $testSlug = $.PathType + "_" + $s.TestSlug }}
func TestAcc{{$testSlug}}(t *testing.T) {
  t.Parallel()

	context := map[string]interface{} {
<%= lines(indent(compile(pwd + '/templates/terraform/env_var_context.go.erb'), 4)) -%>
	<% unless example.test_vars_overrides.nil? -%>
	<% example.test_vars_overrides.each do |var_name, override| -%>
			"<%= var_name %>": <%= override %>,
	<% end -%>
	<% end -%>
			"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		{{ if $.HasGAEquivalent -}}
		Providers: testAccProviders,
		{{- else }}
		Providers: testAccProvidersOiCS,
		{{- end }}
		// placeholder code if we need to grab external providers
		// {{ pull external }}
		// ExternalProviders: map[string]resource.ExternalProvider{
		// 	"random": {},
		// },
		// {{- end }}
		<% unless object.skip_delete -%>
		CheckDestroy: testAccCheck<%= "#{resource_name}" -%>DestroyProducer(t),
		<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= test_slug -%>(context),
			},
		<%#- The Terraform test runner doesn't let us import resources with aliased providers (yet) -%>
		<% unless example.skip_import_test || versioned_provider -%>
			{
				ResourceName:      "<%= terraform_name -%>.<%= example.primary_resource_id -%>",
				ImportState:       true,
				ImportStateVerify: true,
		<%- unless ignore_read.empty? -%>
				ImportStateVerifyIgnore: <%= go_literal(ignore_read) %>,
		<%- end -%>
			},
		<% end -%>
		},
	})
}

func testAcc<%= test_slug -%>(context map[string]interface{}) string {
<%= example.config_test(pwd) -%>
}
{{- end }}

<% unless object.skip_delete -%>
func testAccCheck<%= resource_name -%>DestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "<%= terraform_name -%>" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

		<% if object.custom_code.test_check_destroy -%>
	<%= lines(compile(pwd + '/' + object.custom_code.test_check_destroy)) -%>
		<% else -%>
		config := googleProviderConfig(t)

		url, err := replaceVarsForTest(config, rs, "<%= "{{#{object.__product.name}BasePath}}#{object.self_link_uri}" -%>")
		if err != nil {
			return err
		}

		billingProject := ""

		if config.BillingProject != "" {
			billingProject = config.BillingProject
		}

		_, err = sendRequest(config, "<%= object.read_verb.to_s.upcase -%>", billingProject, url, config.userAgent, nil<%= object.error_retry_predicates ? ", " + object.error_retry_predicates.join(',') : "" -%>)
		if err == nil {
				return fmt.Errorf("<%= resource_name -%> still exists at %s", url)
			}
		<% end -%>
		}

		return nil
	}
}
<% end -%>
