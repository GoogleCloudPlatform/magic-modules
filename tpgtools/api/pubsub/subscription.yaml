components:
  schemas:
    Subscription:
      properties:
        ackDeadlineSeconds:
          description: The approximate amount of time (on a best-effort basis) Pub/Sub
            waits for the subscriber to acknowledge receipt before resending the message.
            In the interval after the message is delivered and before it is acknowledged,
            it is considered to be _outstanding_. During that time period, the message
            will not be redelivered (on a best-effort basis). For pull subscriptions,
            this value is used as the initial value for the ack deadline. To override
            this value for a given message, call \`ModifyAckDeadline\` with the corresponding
            \`ack\_id\` if using non-streaming pull or send the \`ack\_id\` in a \`StreamingModifyAckDeadlineRequest\`
            if using streaming pull. The minimum custom deadline you can specify is
            10 seconds. The maximum custom deadline you can specify is 600 seconds
            (10 minutes). If this parameter is 0, a default value of 10 seconds is
            used. For push delivery, this value is also used to set the request timeout
            for the call to the push endpoint. If the subscriber never acknowledges
            the message, the Pub/Sub system will eventually redeliver the message.
          format: int32
          type: integer
          x-dcl-go-name: AckDeadlineSeconds
          x-kubernetes-immutable: true
        deadLetterPolicy:
          description: A policy that specifies the conditions for dead lettering messages
            in this subscription. If dead\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_letter\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_policy
            is not set, dead lettering is disabled. The Cloud Pub/Sub service account
            associated with this subscriptions's parent project (i.e., service-{project\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_number}@gcp-sa-pubsub.iam.gserviceaccount.com)
            must have permission to Acknowledge() messages on this subscription.
          properties:
            deadLetterTopic:
              description: The name of the topic to which dead letter messages should
                be published. Format is \`projects/{project}/topics/{topic}\`.The
                Cloud Pub/Sub service account associated with the enclosing subscription's
                parent project (i.e., service-{project\_number}@gcp-sa-pubsub.iam.gserviceaccount.com)
                must have permission to Publish() to this topic. The operation will
                fail if the topic does not exist. Users should ensure that there is
                a subscription attached to this topic since messages published to
                a topic with no subscriptions are lost.
              type: string
              x-dcl-go-name: DeadLetterTopic
              x-dcl-references:
              - field: name
                resource: Pubsub/Topic
              x-kubernetes-immutable: true
            maxDeliveryAttempts:
              description: The maximum number of delivery attempts for any message.
                The value must be between 5 and 100. The number of delivery attempts
                is defined as 1 + (the sum of number of NACKs and number of times
                the acknowledgement deadline has been exceeded for the message). A
                NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
                client libraries may automatically extend ack\_deadlines. This field
                will be honored on a best effort basis. If this parameter is 0, a
                default value of 5 is used.
              format: int32
              type: integer
              x-dcl-go-name: MaxDeliveryAttempts
              x-kubernetes-immutable: true
          type: object
          x-dcl-go-name: DeadLetterPolicy
          x-dcl-go-type: SubscriptionDeadLetterPolicy
          x-kubernetes-immutable: true
        expirationPolicy:
          description: 'A policy that specifies the conditions for this subscription''s
            expiration. A subscription is considered active as long as any connected
            subscriber is successfully consuming messages from the subscription or
            is issuing operations on the subscription. If expirationPolicy is not
            set, a default policy with ttl of 31 days will be used. The minimum allowed
            value for expirationPolicy.ttl is 1 day. '
          properties:
            ttl:
              description: 'Specifies the "time-to-live" duration for an associated
                resource. The resource expires if it is not active for a period of
                ttl. The definition of "activity" depends on the type of the associated
                resource. The minimum and maximum allowed values for ttl depend on
                the type of the associated resource, as well. If ttl is not set, the
                associated resource never expires. A duration in seconds with up to
                nine fractional digits, terminated by ''s''. Example - "3.5s". '
              type: string
              x-dcl-go-name: Ttl
          type: object
          x-dcl-go-name: ExpirationPolicy
          x-dcl-go-type: SubscriptionExpirationPolicy
        labels:
          additionalProperties:
            type: string
          description: 'A set of key/value label pairs to assign to this Subscription. '
          type: object
          x-dcl-go-name: Labels
        messageRetentionDuration:
          description: 'How long to retain unacknowledged messages in the subscription''s
            backlog, from the moment a message is published. If retainAckedMessages
            is true, then this also configures the retention of acknowledged messages,
            and thus configures how far back in time a subscriptions.seek can be done.
            Defaults to 7 days. Cannot be more than 7 days (`"604800s"`) or less than
            10 minutes (`"600s"`).  A duration in seconds with up to nine fractional
            digits, terminated by ''s''. Example: `"600.5s"`. '
          type: string
          x-dcl-go-name: MessageRetentionDuration
        name:
          description: Name of the subscription.
          type: string
          x-dcl-go-name: Name
          x-kubernetes-immutable: true
        project:
          description: The project id of the resource.
          type: string
          x-dcl-go-name: Project
          x-kubernetes-immutable: true
        pushConfig:
          description: If push delivery is used with this subscription, this field
            is used to configure it. An empty \`pushConfig\` signifies that the subscriber
            will pull and ack messages using API methods.
          properties:
            attributes:
              additionalProperties:
                type: string
              description: |-
                Endpoint configuration attributes that can be used to control different aspects of the message delivery. The only currently supported attribute is \`x-goog-version\`, which you can use to change the format of the pushed message. This attribute indicates the version of the data expected by the endpoint. This controls the shape of the pushed message (i.e., its fields and metadata). If not present during the \`CreateSubscription\` call, it will default to the version of the Pub/Sub API used to make such call. If not present in a \`ModifyPushConfig\` call, its value will not be changed. \`GetSubscription\` calls will always return a valid version, even if the subscription was created without this attribute. The only supported values for the \`x-goog-version\` attribute are: \* \`v1beta1\`: uses the push format defined in the v1beta1 Pub/Sub API. \* \`v1\` or \`v1beta2\`: uses the push format defined in the v1 Pub/Sub API. For example:

                    attributes { "x-goog-version": "v1" }
              type: object
              x-dcl-go-name: Attributes
              x-kubernetes-immutable: true
            oidcToken:
              description: If specified, Pub/Sub will generate and attach an OIDC
                JWT token as an \\\\\\\`Authorization\\\\\\\` header in the HTTP request
                for every pushed message.
              properties:
                audience:
                  description: 'Audience to be used when generating OIDC token. The
                    audience claim identifies the recipients that the JWT is intended
                    for. The audience value is a single case-sensitive string. Having
                    multiple values (array) for the audience field is not supported.
                    More info about the OIDC JWT token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
                    Note: if not specified, the Push endpoint URL will be used.'
                  type: string
                  x-dcl-go-name: Audience
                  x-kubernetes-immutable: true
                serviceAccountEmail:
                  description: \[Service account email\](https://cloud.google.com/iam/docs/service-accounts)
                    to be used for generating the OIDC token. The caller (for CreateSubscription,
                    UpdateSubscription, and ModifyPushConfig RPCs) must have the iam.serviceAccounts.actAs
                    permission for the service account.
                  type: string
                  x-dcl-go-name: ServiceAccountEmail
                  x-kubernetes-immutable: true
              type: object
              x-dcl-go-name: OidcToken
              x-dcl-go-type: SubscriptionPushConfigOidcToken
              x-kubernetes-immutable: true
            pushEndpoint:
              description: A URL locating the endpoint to which messages should be
                pushed. For example, a Webhook endpoint might use \`https://example.com/push\`.
              type: string
              x-dcl-go-name: PushEndpoint
              x-kubernetes-immutable: true
          type: object
          x-dcl-go-name: PushConfig
          x-dcl-go-type: SubscriptionPushConfig
          x-kubernetes-immutable: true
        retainAckedMessages:
          description: 'Indicates whether to retain acknowledged messages. If `true`,
            then messages are not expunged from the subscription''s backlog, even
            if they are acknowledged, until they fall out of the messageRetentionDuration
            window. '
          type: boolean
          x-dcl-go-name: RetainAckedMessages
        topic:
          description: 'A reference to a Topic resource. '
          type: string
          x-dcl-go-name: Topic
          x-dcl-references:
          - field: name
            resource: Pubsub/Topic
          x-kubernetes-immutable: true
      required:
      - name
      - topic
      - project
      title: Subscription
      type: object
      x-dcl-id: projects/{{project}}/subscriptions/{{name}}
      x-dcl-locations: []
      x-dcl-parent-container: project
info:
  description: DCL Specification for the pubsub Subscription resource
  title: Subscription
paths:
    list:
      parameters:
      - name: project
        required: true
