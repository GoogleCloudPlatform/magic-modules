// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cai2hcl

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"google.golang.org/api/compute/v1"
)

const ComputeForwardingRuleAssetType string = "compute.googleapis.com/ForwardingRule"

type ComputeForwardingRuleConverter struct {
	name   string
	schema map[string]*Schema
}

func NewComputeForwardingRuleConverter(name string) Converter {
	return &ComputeForwardingRuleConverter{
		name:   name,
		schema: schemaProvider.ResourcesMap[name].Schema,
	}
}

func (c *ComputeForwardingRuleConverter) Convert(assets []*caiasset.Asset) ([]*HCLResourceBlock, error) {
	var blocks []*HCLResourceBlock
	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ComputeForwardingRuleConverter) convertResourceData(asset *caiasset.Asset) (*HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	var resource *compute.ForwardingRule
	if err := decodeJSON(asset.Resource.Data, &resource); err != nil {
		return nil, err
	}

	hcl, _ := resourceComputeForwardingRuleRead(resource)

	ctyVal, err := mapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}
	return &HCLResourceBlock{
		Labels: []string{c.name, resource.Name},
		Value:  ctyVal,
	}, nil
}

func resourceComputeForwardingRuleRead(res *compute.ForwardingRule) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	config := meta.(*transport_tpg.Config)

	result["creation_timestamp"] = flattenComputeForwardingRuleCreationTimestamp(res.CreationTimestamp, config)
	result["is_mirroring_collector"] = flattenComputeForwardingRuleIsMirroringCollector(res.IsMirroringCollector, config)
	result["psc_connection_id"] = flattenComputeForwardingRulePscConnectionId(res.PscConnectionId, config)
	result["psc_connection_status"] = flattenComputeForwardingRulePscConnectionStatus(res.PscConnectionStatus, config)
	result["description"] = flattenComputeForwardingRuleDescription(res.Description, config)
	result["ip_address"] = flattenComputeForwardingRuleIPAddress(res.IPAddress, config)
	result["ip_protocol"] = flattenComputeForwardingRuleIPProtocol(res.IPProtocol, config)
	result["backend_service"] = flattenComputeForwardingRuleBackendService(res.BackendService, config)
	result["load_balancing_scheme"] = flattenComputeForwardingRuleLoadBalancingScheme(res.LoadBalancingScheme, config)
	result["name"] = flattenComputeForwardingRuleName(res.Name, config)
	result["network"] = flattenComputeForwardingRuleNetwork(res.Network, config)
	result["port_range"] = flattenComputeForwardingRulePortRange(res.PortRange, config)
	result["ports"] = flattenComputeForwardingRulePorts(res.Ports, config)
	result["subnetwork"] = flattenComputeForwardingRuleSubnetwork(res.Subnetwork, config)
	result["target"] = flattenComputeForwardingRuleTarget(res.Target, config)
	result["allow_global_access"] = flattenComputeForwardingRuleAllowGlobalAccess(res.AllowGlobalAccess, config)
	result["labels"] = flattenComputeForwardingRuleLabels(res.Labels, config)
	result["label_fingerprint"] = flattenComputeForwardingRuleLabelFingerprint(res.LabelFingerprint, config)
	result["all_ports"] = flattenComputeForwardingRuleAllPorts(res.AllPorts, config)
	result["network_tier"] = flattenComputeForwardingRuleNetworkTier(res.NetworkTier, config)
	result["service_directory_registrations"] = flattenComputeForwardingRuleServiceDirectoryRegistrations(res.ServiceDirectoryRegistrations, config)
	result["service_label"] = flattenComputeForwardingRuleServiceLabel(res.ServiceLabel, config)
	result["service_name"] = flattenComputeForwardingRuleServiceName(res.ServiceName, config)
	result["region"] = flattenComputeForwardingRuleRegion(res.Region, config)

	result["self_link"] = ConvertSelfLinkToV1(res.SelfLink)

	return result, nil
}

func flattenComputeForwardingRuleCreationTimestamp(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleIsMirroringCollector(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRulePscConnectionId(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRulePscConnectionStatus(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleDescription(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleIPAddress(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleIPProtocol(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleBackendService(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	return ConvertSelfLinkToV1(v.(string))
}

func flattenComputeForwardingRuleLoadBalancingScheme(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleNetwork(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	return ConvertSelfLinkToV1(v.(string))
}

func flattenComputeForwardingRulePortRange(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRulePorts(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	return schema.NewSet(schema.HashString, v.([]interface{}))
}

func flattenComputeForwardingRuleSubnetwork(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	return ConvertSelfLinkToV1(v.(string))
}

func flattenComputeForwardingRuleTarget(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleAllowGlobalAccess(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleLabels(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleLabelFingerprint(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleAllPorts(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleNetworkTier(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleServiceDirectoryRegistrations(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"namespace": flattenComputeForwardingRuleServiceDirectoryRegistrationsNamespace(original["namespace"], d, config),
			"service":   flattenComputeForwardingRuleServiceDirectoryRegistrationsService(original["service"], d, config),
		})
	}
	return transformed
}
func flattenComputeForwardingRuleServiceDirectoryRegistrationsNamespace(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleServiceDirectoryRegistrationsService(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleServiceLabel(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleServiceName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenComputeForwardingRuleRegion(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	return NameFromSelfLinkStateFunc(v)
}
