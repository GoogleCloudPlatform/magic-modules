<% autogen_exception -%>
package fwtransport_test

import (
	"context"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/fwmodels"
	"github.com/hashicorp/terraform-provider-google/google/fwtransport"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestFrameworkProvider_LoadAndValidateFramework_project(t *testing.T) {

	// Note: In the test function we need to set the below fields in test case's fwmodels.ProviderModel value
	// this is to stop the code under tests experiencing errors, and could be addressed in future refactoring.
	// - Credentials: If we don't set this then the test looks for application default credentials and can fail depending on the machine running the test
	// - ImpersonateServiceAccountDelegates: If we don't set this, we get a nil pointer exception ¯\_(ツ)_/¯

	cases := map[string]struct {
		ConfigValues  fwmodels.ProviderModel
		EnvVariables  map[string]string
		ExpectedValue basetypes.StringValue
		ExpectError   bool
	}{
		"project value set in the provider schema is not overridden by environment variables": {
			ConfigValues: fwmodels.ProviderModel{
				Project: types.StringValue("my-project-from-config"),
			},
			EnvVariables: map[string]string{
				"GOOGLE_PROJECT":        "project-from-GOOGLE_PROJECT",
				"GOOGLE_CLOUD_PROJECT":  "project-from-GOOGLE_CLOUD_PROJECT",
				"GCLOUD_PROJECT":        "project-from-GCLOUD_PROJECT",
				"CLOUDSDK_CORE_PROJECT": "project-from-CLOUDSDK_CORE_PROJECT",
			},
			ExpectedValue: types.StringValue("my-project-from-config"),
		},
		"project value can be set by environment variable: GOOGLE_PROJECT is used first": {
			ConfigValues: fwmodels.ProviderModel{
				Project: types.StringNull(), // unset
			},
			EnvVariables: map[string]string{
				"GOOGLE_PROJECT":        "project-from-GOOGLE_PROJECT",
				"GOOGLE_CLOUD_PROJECT":  "project-from-GOOGLE_CLOUD_PROJECT",
				"GCLOUD_PROJECT":        "project-from-GCLOUD_PROJECT",
				"CLOUDSDK_CORE_PROJECT": "project-from-CLOUDSDK_CORE_PROJECT",
			},
			ExpectedValue: types.StringValue("project-from-GOOGLE_PROJECT"),
		},
		"project value can be set by environment variable: GOOGLE_CLOUD_PROJECT is used second": {
			ConfigValues: fwmodels.ProviderModel{
				Project: types.StringNull(), // unset
			},
			EnvVariables: map[string]string{
				// GOOGLE_PROJECT unset
				"GOOGLE_CLOUD_PROJECT":  "project-from-GOOGLE_CLOUD_PROJECT",
				"GCLOUD_PROJECT":        "project-from-GCLOUD_PROJECT",
				"CLOUDSDK_CORE_PROJECT": "project-from-CLOUDSDK_CORE_PROJECT",
			},
			ExpectedValue: types.StringValue("project-from-GOOGLE_CLOUD_PROJECT"),
		},
		"project value can be set by environment variable: GCLOUD_PROJECT is used third": {
			ConfigValues: fwmodels.ProviderModel{
				Project: types.StringNull(), // unset
			},
			EnvVariables: map[string]string{
				// GOOGLE_PROJECT unset
				// GOOGLE_CLOUD_PROJECT unset
				"GCLOUD_PROJECT":        "project-from-GCLOUD_PROJECT",
				"CLOUDSDK_CORE_PROJECT": "project-from-CLOUDSDK_CORE_PROJECT",
			},
			ExpectedValue: types.StringValue("project-from-GCLOUD_PROJECT"),
		},
		"project value can be set by environment variable: CLOUDSDK_CORE_PROJECT is used fourth": {
			ConfigValues: fwmodels.ProviderModel{
				Project: types.StringNull(), // unset
			},
			EnvVariables: map[string]string{
				// GOOGLE_PROJECT unset
				// GOOGLE_CLOUD_PROJECT unset
				// GCLOUD_PROJECT unset
				"CLOUDSDK_CORE_PROJECT": "project-from-CLOUDSDK_CORE_PROJECT",
			},
			ExpectedValue: types.StringValue("project-from-CLOUDSDK_CORE_PROJECT"),
		},
		"when no project values are provided via config or environment variables, the field remains unset without error": {
			ConfigValues: fwmodels.ProviderModel{
				Project: types.StringNull(), // unset
			},
			ExpectedValue: types.StringNull(),
		},
		// Handling empty strings in config
		// TODO(SarahFrench) make these tests pass to address: https://github.com/hashicorp/terraform-provider-google/issues/14255
		// "when project is set as an empty string the field is treated as if it's unset, without error": {
		// 	ConfigValues: fwmodels.ProviderModel{
		// 		Project: types.StringValue(""),
		// 	},
		// 	ExpectedValue: types.StringNull(),
		// },
		// "when project is set as an empty string an environment variable will be used": {
		// 	ConfigValues: fwmodels.ProviderModel{
		// 		Project: types.StringValue(""),
		// 	},
		// 	EnvVariables: map[string]string{
		// 		"GOOGLE_PROJECT": "project-from-GOOGLE_PROJECT",
		// 	},
		// 	ExpectedValue: types.StringValue("project-from-GOOGLE_PROJECT"),
		// },
	}

	for tn, tc := range cases {
		t.Run(tn, func(t *testing.T) {

			// Arrange
			acctest.UnsetTestProviderConfigEnvs(t)
			acctest.SetupTestEnvs(t, tc.EnvVariables)

			ctx := context.Background()
			tfVersion := "foobar"
			providerversion := "999"
			diags := diag.Diagnostics{}
			
			data := tc.ConfigValues
			data.Credentials = types.StringValue(transport_tpg.TestFakeCredentialsPath)
			impersonateServiceAccountDelegates, _ := types.ListValue(types.StringType, []attr.Value{}) // empty list
			data.ImpersonateServiceAccountDelegates = impersonateServiceAccountDelegates

			p := fwtransport.FrameworkProviderConfig{}

			// Act
			p.LoadAndValidateFramework(ctx, data, tfVersion, &diags, providerversion)

			// Assert
			if diags.HasError() && tc.ExpectError {
				return
			}
			if diags.HasError() && !tc.ExpectError {
				for i, err := range diags.Errors() {
					num := i + 1
					t.Logf("unexpected error #%d : %s", num, err.Summary())
				}
				t.Fatalf("did not expect error, but [%d] error(s) occurred", diags.ErrorsCount())
			}
			if !p.Project.Equal(tc.ExpectedValue) {
				t.Fatalf("want project to be `%s`, but got the value `%s`", tc.ExpectedValue, p.Project.String())
			}
		})
	}
}