<% autogen_exception -%>
<% unless version == 'ga' -%>
package privilegedaccessmanager_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccPrivilegedAccessManagerEntitlement_privilegedAccessManagerEntitlementBasicExample_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"project_name":  envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckPrivilegedAccessManagerEntitlementDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccPrivilegedAccessManagerEntitlement_privilegedAccessManagerEntitlementBasicExample_basic(context),
			},
			{
				ResourceName:            "google_privileged_access_manager_entitlement.tf_entitlement",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "entitlement_id", "parent"},
			},
			{
				Config: testAccPrivilegedAccessManagerEntitlement_privilegedAccessManagerEntitlementBasicExample_update(context),
			},
			{
				ResourceName:            "google_privileged_access_manager_entitlement.tf_entitlement",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "entitlement_id", "parent"},
			},
		},
	})
}

func testAccPrivilegedAccessManagerEntitlement_privilegedAccessManagerEntitlementBasicExample_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_privileged_access_manager_entitlement" "tf_entitlement" {
    provider =  google-beta
    entitlement_id = "tf_test_example_entitlement%{random_suffix}"
    location = "us-central1-a"
    max_request_duration = "43200s"
    parent = "projects/%{project_name}"
    requester_justification_config { 
        unstructured{}
    }
    eligible_users {
        principals = ["serviceAccount:test2102@itsvarsharma-pam-testing.iam.gserviceaccount.com"]
    }
    privileged_access{
        gcp_iam_access{
            role_bindings{
                role = "roles/storage.admin"
            }
            resource = "//cloudresourcemanager.googleapis.com/projects/ci-test-project-188019"
            resource_type = "cloudresourcemanager.googleapis.com/Project"
        }
    }
    additional_notification_targets {
    admin_email_recipients     = []
    requester_email_recipients = []
    }
    approval_workflow {
    manual_approvals {
      require_approver_justification = true
      steps {
        approvals_needed          = 1
        approver_email_recipients = []
        approvers {
          principals = ["user:itsvarsharma@google.com"]
        }
      }
    }
  }
}
`, context)
}

func testAccPrivilegedAccessManagerEntitlement_privilegedAccessManagerEntitlementBasicExample_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_privileged_access_manager_entitlement" "tf_entitlement" {
    provider =  google-beta
    entitlement_id = "tf_test_example_entitlement%{random_suffix}"
    location = "us-central1"
    max_request_duration = "43200s"
    parent = "projects/%{project_name}"
    requester_justification_config {    
        unstructured{}
    }
    eligible_users {
        principals = ["serviceAccount:test2102@itsvarsharma-pam-testing.iam.gserviceaccount.com"]
    }
    privileged_access{
        gcp_iam_access{
            role_bindings{
                role = "roles/storage.admin"
            }
            resource = "//cloudresourcemanager.googleapis.com/projects/ci-test-project-188019"
            resource_type = "cloudresourcemanager.googleapis.com/Project"
        }
    }
    additional_notification_targets {
    admin_email_recipients     = []
    requester_email_recipients = []
    }
    approval_workflow {
    manual_approvals {
      require_approver_justification = true
      steps {
        approvals_needed          = 1
        approver_email_recipients = []
        approvers {
          principals = ["user:itsvarsharma@google.com"]
        }
      }
    }
  }
}
`, context)
}

<% end -%>
