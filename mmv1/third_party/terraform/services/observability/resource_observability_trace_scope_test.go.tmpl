package observability_test

{{ if ne $.TargetVersionName `ga` -}}

import (
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"github.com/hashicorp/terraform-provider-google/google/acctest"

	"testing"
)

func TestAccObservabilityTraceScope_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccObservabilityTraceScope_basic(context),
			},
			{
				ResourceName:            "google_observability_trace_scope.observability_trace_scope",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "trace_scope_id"},
			},
			{
				Config: testAccObservabilityTraceScope_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_observability_trace_scope.observability_trace_scope", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_observability_trace_scope.observability_trace_scope",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "trace_scope_id"},
			},
		},
	})
}

func testAccObservabilityTraceScope_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_observability_trace_scope" "observability_trace_scope" {
  provider         = google-beta
  trace_scope_id   = "tf-test-test-scope%{random_suffix}"
  location         = "global"
  resource_names   = [
    "projects/${data.google_project.project.project_id}",
  ]
  description      = "A trace scope configured with Terraform"
}

data "google_project" "project" {
  provider         = google-beta
}
`, context)
}

func testAccObservabilityTraceScope_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_observability_trace_scope" "observability_trace_scope" {
  depends_on       = [google_project.project-2]
  provider         = google-beta
  trace_scope_id   = "tf-test-test-scope%{random_suffix}"
  location         = "global"
  resource_names   = [
    "projects/${data.google_project.project.project_id}",
    "projects/${google_project.project-2.project_id}",
  ]
  description      = "A new description"
}

data "google_project" "project" {
  provider         = google-beta
}

resource "google_project" "project-2" {
  provider         = google-beta
  project_id       = "tf-test%{random_suffix}"
  name             = "tf-test%{random_suffix}"
  org_id           = "%{org_id}"
  deletion_policy  = "DELETE"
}
`, context)
}

{{ end }}