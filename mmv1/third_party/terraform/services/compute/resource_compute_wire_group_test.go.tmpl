// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute_test

import (
        "testing"

        "github.com/hashicorp/terraform-plugin-testing/helper/resource"

        "github.com/hashicorp/terraform-provider-google/google/acctest"
        "github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeWireGroup_update(t *testing.T) {
        t.Parallel()

        context := map[string]interface{}{
                "project":       envvar.GetTestProjectFromEnv(),
                "random_suffix": acctest.RandString(t, 10),
        }

        acctest.VcrTest(t, resource.TestCase{
                PreCheck:                 func() { acctest.AccTestPreCheck(t) },
                ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
                CheckDestroy:             testAccCheckComputeWireGroupDestroyProducer(t),
                Steps: []resource.TestStep{
                        {
                                Config: testAccComputeWireGroup_basic(context),
                        },
                        {
                                ResourceName:      "google_compute_wire_group.example-test-wire-group",
                                ImportState:       true,
                                ImportStateVerify: true,
                ImportStateVerifyIgnore: []string{"crossSiteNetwork"},
                        },
            {
                                Config: testAccComputeWireGroup_update(context),
                Check: resource.ComposeTestCheckFunc(
                                        resource.TestCheckResourceAttr("google_compute_wire_group.example-test-wire-group", "description", "Example Wire Group Updated"+context["random_suffix"].(string)),
                                ),
                        },
                        {
                                ResourceName:      "google_compute_wire_group.example-test-wire-group",
                                ImportState:       true,
                                ImportStateVerify: true,
                ImportStateVerifyIgnore: []string{"crossSiteNetwork"},
                        },
                },
        })
}

func testAccComputeWireGroup_basic(context map[string]interface{}) string {
        return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_compute_cross_site_network" "example-cross-site-network" {
  name        = "tf-test-cross-site-network"
  description = "Example cross site network"
  provider    = google-beta
}

resource "google_compute_wire_group" "example-test-wire-group" {
  name               = "tf-test-test-wire-group%{random_suffix}"
  description        = "Example Wire Group%{random_suffix}"
  crossSiteNetwork = google_compute_cross_site_network.example-cross-site-network.name
  provider           = google-beta
}
`, context)
}


func testAccComputeWireGroup_update(context map[string]interface{}) string {
        return acctest.Nprintf(`
data "google_project" "project" {
}

resource "google_compute_cross_site_network" "example-cross-site-network" {
  name        = "tf-test-cross-site-network"
  description = "Example cross site network"
  provider    = google-beta
}

resource "google_compute_wire_group" "example-test-wire-group" {
  name               = "tf-test-test-wire-group%{random_suffix}"
  description        = "Example Wire Group Updated%{random_suffix}"
  crossSiteNetwork = google_compute_cross_site_network.example-cross-site-network.name
  provider           = google-beta
}
`, context)
}
