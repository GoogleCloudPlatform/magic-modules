package compute_test
{{ if ne $.TargetVersionName `ga` -}}
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeWireGroup_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckComputeWireGroupDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeWireGroup_basic(context),
			},
			{
				ResourceName:            "google_compute_wire_group.example-test-wire-group",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"cross_site_network"},
			},
			{
				Config: testAccComputeWireGroup_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_compute_wire_group.example-test-wire-group", plancheck.ResourceActionUpdate),
					},
				},
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("google_compute_wire_group.example-test-wire-group", "description", "Example Wire Group Updated"+context["random_suffix"].(string)),
				),
			},
			{
				ResourceName:            "google_compute_wire_group.example-test-wire-group",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"cross_site_network"},
			},
		},
	})
}

func testAccComputeWireGroup_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
provider = google-beta
}

resource "google_compute_cross_site_network" "example-cross-site-network" {
  name        = "tf-test-cross-site-network%{random_suffix}"
  description = "Example cross site network"
  provider    = google-beta
}

resource "google_compute_wire_group" "example-test-wire-group" {
  name               = "tf-test-test-wire-group%{random_suffix}"
  description        = "Example Wire Group%{random_suffix}"
  cross_site_network = google_compute_cross_site_network.example-cross-site-network.name
  provider           = google-beta
  depends_on = [
    google_compute_cross_site_network.example-cross-site-network
  ]
  wire_properties {
    bandwidth_unmetered = 1000
  }
  wire_group_properties {
    type = "REDUNDANT"
  }
  admin_enabled = true
}
`, context)
}

func testAccComputeWireGroup_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
provider = google-beta
}

resource "google_compute_cross_site_network" "example-cross-site-network" {
  name        = "tf-test-cross-site-network%{random_suffix}"
  description = "Example cross site network"
  provider    = google-beta
}

resource "google_compute_wire_group" "example-test-wire-group" {
  name               = "tf-test-test-wire-group%{random_suffix}"
  description        = "Example Wire Group Updated%{random_suffix}"
  cross_site_network = google_compute_cross_site_network.example-cross-site-network.name
  provider           = google-beta
  depends_on = [
    google_compute_cross_site_network.example-cross-site-network
  ]
  wire_properties {
    bandwidth_unmetered = 1000
  }
  wire_group_properties {
    type = "REDUNDANT"
  }
  admin_enabled = true
}
`, context)
}
{{- end }}