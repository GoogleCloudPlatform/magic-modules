package compute_test
{{ if ne $.TargetVersionName `ga` -}}
import (
  "testing"

  "github.com/hashicorp/terraform-plugin-testing/helper/resource"
  "github.com/hashicorp/terraform-plugin-testing/plancheck"

  "github.com/hashicorp/terraform-provider-google/google/acctest"
  "github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeRegionHealthAggregationPolicy_update(t *testing.T) {
  t.Parallel()

  context := map[string]interface{}{
    "project":       envvar.GetTestProjectFromEnv(),
    "random_suffix": acctest.RandString(t, 10),
    "region":        "us-central1",
  }

  acctest.VcrTest(t, resource.TestCase{
    PreCheck:                 func() { acctest.AccTestPreCheck(t) },
    ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
    CheckDestroy:             testAccCheckComputeRegionHealthAggregationPolicyDestroyProducer(t),
    Steps: []resource.TestStep{
      {
        Config: testAccComputeRegionHealthAggregationPolicy_basic(context),
      },
      {
        ResourceName:            "google_compute_region_health_aggregation_policy.example_test_health_aggregation_policy",
        ImportState:             true,
        ImportStateVerify:       true,
      },
      {
        Config: testAccComputeRegionHealthAggregationPolicy_update(context),
        ConfigPlanChecks: resource.ConfigPlanChecks{
          PreApply: []plancheck.PlanCheck{
            plancheck.ExpectResourceAction("google_compute_region_health_aggregation_policy.example_test_health_aggregation_policy", plancheck.ResourceActionUpdate),
          },
        },
        Check: resource.ComposeTestCheckFunc(
          resource.TestCheckResourceAttr("google_compute_region_health_aggregation_policy.example_test_health_aggregation_policy", "description", "Updated description "+context["random_suffix"].(string)),
        ),
      },
      {
        ResourceName:            "google_compute_region_health_aggregation_policy.example_test_health_aggregation_policy",
        ImportState:             true,
        ImportStateVerify:       true,
      },
    },
  })
}

func testAccComputeRegionHealthAggregationPolicy_basic(context map[string]interface{}) string {
  return acctest.Nprintf(`
    data "google_project" "project" { provider = google-beta }

    resource "google_compute_region_health_aggregation_policy" "example_test_health_aggregation_policy" {
      name        = "tf-test-health-aggregation-policy-%{random_suffix}"
      description = "Example health aggregation policy %{random_suffix}"
      region      = "%{region}"
      provider    = google-beta
    }
  `, context)
}

func testAccComputeRegionHealthAggregationPolicy_update(context map[string]interface{}) string {
return acctest.Nprintf(`
resource "google_compute_region_health_aggregation_policy" "example_test_health_aggregation_policy" {
  name        = "tf-test-health-aggregation-policy-%{random_suffix}"
  description = "Updated description %{random_suffix}"
  min_healthy_threshold = 2
  healthy_percent_threshold = 90
  region      = "%{region}"
  provider    = google-beta
}
`, context)
}
{{- end }}
