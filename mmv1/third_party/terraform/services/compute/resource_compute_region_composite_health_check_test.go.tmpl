package compute_test
{{ if ne $.TargetVersionName `ga` -}}
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeRegionCompositeHealthCheck_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
		"region":        "us-central1",
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckComputeRegionCompositeHealthCheckDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionCompositeHealthCheck_basic(context),
			},
			{
				ResourceName:      "google_compute_region_composite_health_check.example_test_composite_health_check",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccComputeRegionCompositeHealthCheck_update(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("google_compute_region_composite_health_check.example_test_composite_health_check", "description", "Updated description"),
				),
			},
			{
				ResourceName:      "google_compute_region_composite_health_check.example_test_composite_health_check",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccComputeRegionCompositeHealthCheck_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_region_composite_health_check" "example_test_composite_health_check" {
  provider           = google-beta
  name               = "tf-test-composite-health-check-%{random_suffix}"
  description        = "Example composite health check basic"
  region             = "%{region}"
  health_sources     = [google_compute_region_health_source.default.id]
  health_destination = google_compute_forwarding_rule.default.id
}

resource "google_compute_region_health_source" "default" {
  provider                  = google-beta
  name                      = "tf-test-hs-%{random_suffix}"
  region                    = "%{region}"
  source_type               = "BACKEND_SERVICE"
  sources                   = [google_compute_region_backend_service.default.id]
  health_aggregation_policy = google_compute_region_health_aggregation_policy.hap.id
}

resource "google_compute_region_health_aggregation_policy" "hap" {
  provider    = google-beta
  name        = "tf-test-hap-%{random_suffix}"
  description = "health aggregation policy for health source"
  region      = "%{region}"
}

resource "google_compute_health_check" "default" {
  provider = google-beta
  name     = "tf-test-hc-%{random_suffix}"
  http_health_check {
    port = 80
  }
}

resource "google_compute_region_backend_service" "default" {
  provider              = google-beta
  name                  = "tf-test-bs-%{random_suffix}"
  region                = "%{region}"
  health_checks         = [google_compute_health_check.default.id]
  load_balancing_scheme = "INTERNAL"
}

resource "google_compute_forwarding_rule" "default" {
  provider              = google-beta
  name                  = "tf-test-fr-%{random_suffix}"
  region                = "%{region}"
  load_balancing_scheme = "INTERNAL"
  backend_service       = google_compute_region_backend_service.default.id
  network               = google_compute_network.default.id
  subnetwork            = google_compute_subnetwork.default.id
  ip_protocol           = "TCP"
  all_ports             = true
}

resource "google_compute_network" "default" {
  provider                = google-beta
  name                    = "tf-test-net-%{random_suffix}"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "default" {
  provider      = google-beta
  name          = "tf-test-sub-%{random_suffix}"
  ip_cidr_range = "10.2.0.0/16"
  region        = "%{region}"
  network       = google_compute_network.default.id
}
`, context)
}

func testAccComputeRegionCompositeHealthCheck_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_region_composite_health_check" "example_test_composite_health_check" {
  provider           = google-beta
  name               = "tf-test-composite-health-check-%{random_suffix}"
  description        = "Updated description"
  region             = "%{region}"
  health_sources     = [google_compute_region_health_source.default.id, google_compute_region_health_source.default2.id]
  health_destination = google_compute_forwarding_rule.default.id
}

resource "google_compute_region_health_source" "default" {
  provider                  = google-beta
  name                      = "tf-test-hs-%{random_suffix}"
  region                    = "%{region}"
  source_type               = "BACKEND_SERVICE"
  sources                   = [google_compute_region_backend_service.default.id]
  health_aggregation_policy = google_compute_region_health_aggregation_policy.hap.id
}

resource "google_compute_region_health_aggregation_policy" "hap" {
  provider    = google-beta
  name        = "tf-test-hap-%{random_suffix}"
  description = "health aggregation policy for health source"
  region      = "%{region}"
}

resource "google_compute_health_check" "default" {
  provider = google-beta
  name     = "tf-test-hc-%{random_suffix}"
  http_health_check {
    port = 80
  }
}

resource "google_compute_region_backend_service" "default" {
  provider              = google-beta
  name                  = "tf-test-bs-%{random_suffix}"
  region                = "%{region}"
  health_checks         = [google_compute_health_check.default.id]
  load_balancing_scheme = "INTERNAL"
}

resource "google_compute_forwarding_rule" "default" {
  provider              = google-beta
  name                  = "tf-test-fr-%{random_suffix}"
  region                = "%{region}"
  load_balancing_scheme = "INTERNAL"
  backend_service       = google_compute_region_backend_service.default.id
  network               = google_compute_network.default.id
  subnetwork            = google_compute_subnetwork.default.id
  ip_protocol           = "TCP"
  all_ports             = true
}

resource "google_compute_network" "default" {
  provider                = google-beta
  name                    = "tf-test-net-%{random_suffix}"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "default" {
  provider      = google-beta
  name          = "tf-test-sub-%{random_suffix}"
  ip_cidr_range = "10.2.0.0/16"
  region        = "%{region}"
  network       = google_compute_network.default.id
}

resource "google_compute_region_health_source" "default2" {
  provider                  = google-beta
  name                      = "tf-test-hs2-%{random_suffix}"
  region                    = "%{region}"
  source_type               = "BACKEND_SERVICE"
  sources                   = [google_compute_region_backend_service.default2.id]
  health_aggregation_policy = google_compute_region_health_aggregation_policy.hap2.id
}

resource "google_compute_region_health_aggregation_policy" "hap2" {
  provider    = google-beta
  name        = "tf-test-hap2-%{random_suffix}"
  description = "health aggregation policy for health source 2"
  region      = "%{region}"
}

resource "google_compute_region_backend_service" "default2" {
  provider              = google-beta
  name                  = "tf-test-bs2-%{random_suffix}"
  region                = "%{region}"
  health_checks         = [google_compute_health_check.default.id]
  load_balancing_scheme = "INTERNAL"
}
`, context)
}
{{- end }}