package compute_test
{{ if ne $.TargetVersionName `ga` -}}
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeRegionHealthSource_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
		"region":        "us-central1",
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckComputeRegionHealthSourceDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeRegionHealthSource_basic(context),
			},
			{
				ResourceName:      "google_compute_region_health_source.example_test_health_source",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccComputeRegionHealthSource_update(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("google_compute_region_health_source.example_test_health_source", "description", "Updated description"),
				),
			},
			{
				ResourceName:      "google_compute_region_health_source.example_test_health_source",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccComputeRegionHealthSource_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_region_health_aggregation_policy" "hap" {
  provider    = google-beta
  name        = "tf-test-hap-%{random_suffix}"
  description = "health aggregation policy for health source"
  region      = "%{region}"
}

resource "google_compute_health_check" "default" {
  provider = google-beta
  name     = "tf-test-hc-%{random_suffix}"
  http_health_check {
    port = 80
  }
}

resource "google_compute_region_backend_service" "default" {
  provider              = google-beta
  name                  = "tf-test-bs-%{random_suffix}"
  region                = "%{region}"
  health_checks         = [google_compute_health_check.default.id]
  load_balancing_scheme = "INTERNAL"
}

resource "google_compute_region_health_source" "example_test_health_source" {
  provider                  = google-beta
  name                      = "tf-test-health-source-%{random_suffix}"
  description               = "Example health source basic"
  region                    = "%{region}"
  source_type               = "BACKEND_SERVICE"
  sources                   = [google_compute_region_backend_service.default.id]
  health_aggregation_policy = google_compute_region_health_aggregation_policy.hap.id
}
`, context)
}

func testAccComputeRegionHealthSource_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_region_health_aggregation_policy" "hap" {
  provider    = google-beta
  name        = "tf-test-hap-%{random_suffix}"
  description = "health aggregation policy for health source"
  region      = "%{region}"
}

resource "google_compute_health_check" "default" {
  provider = google-beta
  name     = "tf-test-hc-%{random_suffix}"
  http_health_check {
    port = 80
  }
}

resource "google_compute_region_backend_service" "default" {
  provider              = google-beta
  name                  = "tf-test-bs-%{random_suffix}"
  region                = "%{region}"
  health_checks         = [google_compute_health_check.default.id]
  load_balancing_scheme = "INTERNAL"
}

resource "google_compute_region_health_aggregation_policy" "hap2" {
  provider    = google-beta
  name        = "tf-test-hap2-%{random_suffix}"
  description = "health aggregation policy for health source 2"
  region      = "%{region}"
}

resource "google_compute_region_backend_service" "default2" {
  provider              = google-beta
  name                  = "tf-test-bs2-%{random_suffix}"
  region                = "%{region}"
  health_checks         = [google_compute_health_check.default.id]
  load_balancing_scheme = "INTERNAL"
}

resource "google_compute_region_health_source" "example_test_health_source" {
  provider                  = google-beta
  name                      = "tf-test-health-source-%{random_suffix}"
  description               = "Updated description"
  region                    = "%{region}"
  source_type               = "BACKEND_SERVICE"
  sources                   = [google_compute_region_backend_service.default2.id]
  health_aggregation_policy = google_compute_region_health_aggregation_policy.hap2.id
}
`, context)
}
{{- end }}