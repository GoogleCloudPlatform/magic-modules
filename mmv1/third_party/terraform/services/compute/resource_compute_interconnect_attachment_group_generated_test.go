// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccComputeInterconnectAttachmentGroup_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"deletion_protection": false,
		"random_suffix":       acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeInterconnectAttachmentGroupDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeInterconnectAttachmentGroup_basic(context),
			},
			{
				ResourceName:      "google_compute_interconnect_attachment_group.example-interconnect-attachment-group",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccComputeInterconnectAttachmentGroup_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_interconnect_attachment_group" "example-interconnect-attachment-group" {
  name   = "tf-test-example-interconnect-attachment-group%{random_suffix}"
  intent = "NO_SLA"
}
`, context)
}

func TestAccComputeInterconnectAttachmentGroup_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"deletion_protection": false,
		"random_suffix":       acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeInterconnectAttachmentGroupDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeInterconnectAttachmentGroup_basic(context),
			},
			{
				ResourceName:      "google_compute_interconnect_attachment_group.example-interconnect-attachment-group",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccComputeInterconnectAttachmentGroup_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
					   plancheck.ExpectResourceAction("google_compute_interconnect_group.example-interconnect-attachment-group", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:      "google_compute_interconnect_attachment_group.example-interconnect-attachment-group",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccComputeInterconnectAttachmentGroup_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_interconnect_attachment_group" "example-interconnect-attachment-group" {
  name   	  = "tf-test-example-interconnect-attachment-group%{random_suffix}"
  intent 	  = "NO_SLA"
  description = "New description"
}
`, context)
}
