<% autogen_exception -%>
package compute_test

import (
	"fmt"
	"testing"
	"github.com/hashicorp/terraform-provider-google/google/acctest"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

<% if version == "ga" -%>
	"google.golang.org/api/compute/v1"
<% else -%>
	compute "google.golang.org/api/compute/v0.beta"
<% end -%>
)

func TestAccComputeHttpHealthCheck_update(t *testing.T) {
	t.Parallel()

	var healthCheck compute.HttpHealthCheck

	hhckName := fmt.Sprintf("tf-test-%s", acctest.RandString(t, 10))

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy:             testAccCheckComputeHttpHealthCheckDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeHttpHealthCheck_update1(hhckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeHttpHealthCheckExists(
						t, "google_compute_http_health_check.foobar", &healthCheck),
					testAccCheckComputeHttpHealthCheckRequestPath(
						"/not_default", &healthCheck),
					testAccCheckComputeHttpHealthCheckThresholds(
						2, 2, &healthCheck),
				),
			},
			{
				Config: testAccComputeHttpHealthCheck_update2(hhckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeHttpHealthCheckExists(
						t, "google_compute_http_health_check.foobar", &healthCheck),
					testAccCheckComputeHttpHealthCheckRequestPath(
						"/", &healthCheck),
					testAccCheckComputeHttpHealthCheckThresholds(
						10, 10, &healthCheck),
				),
			},
		},
	})
}

func testAccCheckComputeHttpHealthCheckExists(t *testing.T, n string, healthCheck *compute.HttpHealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[n]
		if !ok {
			return fmt.Errorf("Not found: %s", n)
		}

		if rs.Primary.Attributes["name"] == "" {
			return fmt.Errorf("No name is set")
		}

		config := acctest.GoogleProviderConfig(t)

		found, err := config.NewComputeClient(config.UserAgent).HttpHealthChecks.Get(
			config.Project, rs.Primary.Attributes["name"]).Do()
		if err != nil {
			return err
		}

		if found.Name != rs.Primary.Attributes["name"] {
			return fmt.Errorf("HttpHealthCheck not found")
		}

		*healthCheck = *found

		return nil
	}
}

func testAccCheckComputeHttpHealthCheckRequestPath(path string, healthCheck *compute.HttpHealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		if healthCheck.RequestPath != path {
			return fmt.Errorf("RequestPath doesn't match: expected %s, got %s", path, healthCheck.RequestPath)
		}

		return nil
	}
}

func testAccCheckComputeHttpHealthCheckThresholds(healthy, unhealthy int64, healthCheck *compute.HttpHealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		if healthCheck.HealthyThreshold != healthy {
			return fmt.Errorf("HealthyThreshold doesn't match: expected %d, got %d", healthy, healthCheck.HealthyThreshold)
		}

		if healthCheck.UnhealthyThreshold != unhealthy {
			return fmt.Errorf("UnhealthyThreshold doesn't match: expected %d, got %d", unhealthy, healthCheck.UnhealthyThreshold)
		}

		return nil
	}
}

func testAccComputeHttpHealthCheck_update1(hhckName string) string {
	return fmt.Sprintf(`
resource "google_compute_http_health_check" "foobar" {
  name         = "%s"
  description  = "Resource created for Terraform acceptance testing"
  request_path = "/not_default"
}
`, hhckName)
}

func testAccComputeHttpHealthCheck_update2(hhckName string) string {
	return fmt.Sprintf(`
resource "google_compute_http_health_check" "foobar" {
  name                = "%s"
  description         = "Resource updated for Terraform acceptance testing"
  healthy_threshold   = 10
  unhealthy_threshold = 10
}
`, hhckName)
}

<% unless version == 'ga' -%>

func TestAccComputeHttpHealthCheck_updateWithSrcRegions(t *testing.T) {
	t.Parallel()

	var healthCheck compute.HttpHealthCheck

	hhckName := fmt.Sprintf("tf-src_region-test-%s", acctest.RandString(t, 10))

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t)
		CheckDestroy:             testAccCheckComputeHttpHealthCheckDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeHttpHealthCheckSrcRegion_update1(hhckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeHttpHealthCheckExists(
						t, "google_compute_http_health_check.src_region", &healthCheck),
						testAccCheckComputeHttpHealthCheckInterval(
						30, &healthCheck),
						testAccCheckComputeHttpHealthCheckSourceRegions(
						[]string{"us-central1", "us-east1", "asia-south1"}, &healthCheck),
				),
			},
			{
				Config: testAccComputeHttpHealthCheckSrcRegion_update2(hhckName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckComputeHttpHealthCheckExists(
						t, "google_compute_http_health_check.src_region", &healthCheck),
						testAccCheckComputeHttpHealthCheckSourceRegions(
						[]string{"us-west1", "europe-north1", "asia-south1"}, &healthCheck),
				),
			},
		},
	})
}

func testAccCheckComputeHttpHealthCheckInterval(interval int64, healthCheck *compute.HttpHealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		if healthCheck.check_interval != interval {
			return fmt.Errorf("CheckInterval doesn't match: expected %d, got %d", interval, healthCheck.check_interval)
		}

		return nil
	}
}

func testAccCheckComputeHttpHealthCheckSourceRegions(source_regions []string, healthCheck *compute.HttpHealthCheck) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		if healthCheck.source_regions != source_regions {
			return fmt.Errorf("SourceRegions doesn't match: expected %v, got %v", source_regions, healthCheck.source_regions)
		}

		return nil
	}
}

func testAccComputeHttpHealthCheckSrcRegion_update1(hhckName string) string {
	return fmt.Sprintf(`
resource "google_compute_http_health_check" "src_region" {
  provider            = "google-beta"
  name                = "%s"
  description         = "Resource created for Terraform acceptance testing"
  check_interval      = 30
  source_regions      = ["us-central1", "us-east1", "asia-south1"]
}
`, hhckName)
}

func testAccComputeHttpHealthCheckSrcRegion_update2(hhckName string) string {
	return fmt.Sprintf(`
resource "google_compute_http_health_check" "src_region" {
  provider            = "google-beta"
  name                = "%s"
  description         = "Resource updated for Terraform acceptance testing"
  check_interval      = 30
  source_regions      = ["us-west1", "europe-north1", "asia-south1"]
}
`, hhckName)
}

<% end -%>
