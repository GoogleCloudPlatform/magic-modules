// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package serviceusagev2_test
{{- if ne $.TargetVersionName "ga" }}
import (
	"regexp"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccServiceUsageV2ConsumerPolicy_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"project_id":    envvar.GetTestProjectFromEnv(),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyError(context),
				ExpectError: regexp.MustCompile("[\\s\\S]*.*\\[ services\\/compute.googleapis.com \\][\\s\\S]*.*services\\/oslogin.googleapis.com.*[\\s\\S]*"),
			},
			{
				Config: testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyOK(context),
			},
			{
				ResourceName:      "google_service_usage_v2_consumer_policy.default",
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					"validate_dependencies", "check_usage_on_remove",
				},
			},
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDepedencyError(context),
				ExpectError: regexp.MustCompile("[\\s\\S]*.*\\[ services\\/compute.googleapis.com \\][\\s\\S]*.*services\\/oslogin.googleapis.com.*[\\s\\S]*"),
			},
			{
				Config: testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDependencyOK(context),
			},
			{
				ResourceName:      "google_service_usage_v2_consumer_policy.default",
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					"validate_dependencies", "check_usage_on_remove",
				},
			},
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeCheckUsageError(context),
				ExpectError: regexp.MustCompile(".*has been used in the last 30 days or was enabled in the past 3 days\\. If you still wish to remove the service\\{s}, please set the check_usage_on_remove flag to false to proceed.*"),
			},
			{
				Config: testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOff(context),
			},
			{
				ResourceName:      "google_service_usage_v2_consumer_policy.default",
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					"validate_dependencies", "check_usage_on_remove",
				},
			},
			{
				Config:      testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOnError(context),
				ExpectError: regexp.MustCompile("[\\s\\S]*.*\\[ services\\/compute.googleapis.com \\][\\s\\S]*.*services\\/oslogin.googleapis.com.*[\\s\\S]*"),
			},
			{
				ResourceName:      "google_service_usage_v2_consumer_policy.default",
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{
					"validate_dependencies", "check_usage_on_remove",
				},
			},
		},
	})
}
func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_project" "basic" {
  provider = google-beta
  project_id = "tf-test-suv2%{random_suffix}"
  name       = "suv2-test%{random_suffix}"
  org_id     = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/${google_project.basic.project_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependencyOK(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_project" "basic" {
  provider = google-beta
  project_id = "tf-test-suv2%{random_suffix}"
  name       = "tf-test-suv2%{random_suffix}"
  org_id     = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/${google_project.basic.project_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com","services/oslogin.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDepedencyError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_project" "basic" {
  provider = google-beta
  project_id = "tf-test-suv2%{random_suffix}"
  name       = "tf-test-suv2%{random_suffix}"
  org_id     = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/${google_project.basic.project_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeDependencyOK(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_project" "basic" {
  provider = google-beta
  project_id = "tf-test-suv2%{random_suffix}"
  name       = "tf-test-suv2%{random_suffix}"
  org_id     = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/${google_project.basic.project_id}"
  name   = "default"
  enable_rules  {
    services = ["services/oslogin.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_removeCheckUsageError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_project" "basic" {
  provider = google-beta
  project_id = "tf-test-suv2%{random_suffix}"
  name       = "tf-test-suv2%{random_suffix}"
  org_id     = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/${google_project.basic.project_id}"
  name   = "default"
  enable_rules  {
  }
  validate_dependencies = true
  check_usage_on_remove = true
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOff(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_project" "basic" {
  provider = google-beta
  project_id = "tf-test-suv2%{random_suffix}"
  name       = "tf-test-suv2%{random_suffix}"
  org_id     = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/${google_project.basic.project_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = false
  check_usage_on_remove = false
}
`, context)
}

func testAccServiceUsageV2ConsumerPolicy_serviceusagev2Consumerpolicy_dependnecyValidationOnError(context map[string]interface{}) string {
	return acctest.Nprintf(`
provider "google-beta" {
  user_project_override = true
  billing_project = "%{project_id}"
}

resource "google_project" "basic" {
  provider = google-beta
  project_id = "tf-test-suv2%{random_suffix}"
  name       = "tf-test-suv2%{random_suffix}"
  org_id     = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_service_usage_v2_consumer_policy" "default" {
  provider = google-beta
  parent = "projects/${google_project.basic.project_id}"
  name   = "default"
  enable_rules  {
    services = ["services/compute.googleapis.com"]
  }
  validate_dependencies = true
  check_usage_on_remove = false
}
`, context)
}
{{- end }}
