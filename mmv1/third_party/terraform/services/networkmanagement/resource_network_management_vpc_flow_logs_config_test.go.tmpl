package networkmanagement_test
{{- if ne $.TargetVersionName "ga" }}

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccNetworkManagementVpcFlowLogsConfig_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckNetworkManagementVpcFlowLogsConfigDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkManagementVpcFlowLogsConfig_full(context),
			},
			{
				ResourceName:            "google_network_management_vpc_flow_logs_config.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "terraform_labels", "vpc_flow_logs_config_id"},
			},
      {
				Config: testAccNetworkManagementVpcFlowLogsConfig_update(context),
			},
			{
				ResourceName:            "google_network_management_vpc_flow_logs_config.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "terraform_labels", "vpc_flow_logs_config_id"},
			},
		},
	})
}

func testAccNetworkManagementVpcFlowLogsConfig_full(context map[string]interface{}) string {
	vpcFlowLogsCfg := acctest.Nprintf(`
data "google_project" "project" {
  provider = google-beta
}

resource "google_network_management_vpc_flow_logs_config" "example" {
  provider                = google-beta
  vpc_flow_logs_config_id = "id-example-%{random_suffix}"
  location                = "global"
  vpn_tunnel              = "projects/${data.google_project.project.number}/regions/us-central1/vpnTunnels/${google_compute_vpn_tunnel.tunnel.name}"
}
`, context)
  return fmt.Sprintf("%s\n\n%s\n\n", vpcFlowLogsCfg, testAccNetworkManagementVpcFlowLogsConfig_baseResources(context))
}

func testAccNetworkManagementVpcFlowLogsConfig_update(context map[string]interface{}) string {
	vpcFlowLogsCfg := acctest.Nprintf(`
data "google_project" "project" {
  provider = google-beta
}

resource "google_network_management_vpc_flow_logs_config" "example" {
  provider                = google-beta
  vpc_flow_logs_config_id = "id-example-%{random_suffix}"
  location                = "global"
  vpn_tunnel              = "projects/${data.google_project.project.number}/regions/us-central1/vpnTunnels/${google_compute_vpn_tunnel.tunnel.name}"
  state                   = "DISABLED"
}
`, context)
  return fmt.Sprintf("%s\n\n%s\n\n", vpcFlowLogsCfg, testAccNetworkManagementVpcFlowLogsConfig_baseResources(context))
}

func testAccNetworkManagementVpcFlowLogsConfig_baseResources(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_vpn_tunnel" "tunnel" {
  provider           = google-beta
  name               = "tf-test-example-tunnel%{random_suffix}"
  peer_ip            = "15.0.0.120"
  shared_secret      = "a secret message"
  target_vpn_gateway = google_compute_vpn_gateway.target_gateway.id

  depends_on = [
    google_compute_forwarding_rule.fr_esp,
    google_compute_forwarding_rule.fr_udp500,
    google_compute_forwarding_rule.fr_udp4500,
  ]
}

resource "google_compute_vpn_gateway" "target_gateway" {
  provider = google-beta
  name     = "tf-test-example-gateway%{random_suffix}"
  network  = google_compute_network.network.id
}

resource "google_compute_network" "network" {
  provider = google-beta
  name     = "tf-test-example-network%{random_suffix}"
}

resource "google_compute_address" "vpn_static_ip" {
  provider = google-beta
  name     = "tf-test-example-address%{random_suffix}"
}

resource "google_compute_forwarding_rule" "fr_esp" {
  provider    = google-beta
  name        = "tf-test-example-fresp%{random_suffix}"
  ip_protocol = "ESP"
  ip_address  = google_compute_address.vpn_static_ip.address
  target      = google_compute_vpn_gateway.target_gateway.id
}

resource "google_compute_forwarding_rule" "fr_udp500" {
  provider    = google-beta
  name        = "tf-test-example-fr500%{random_suffix}"
  ip_protocol = "UDP"
  port_range  = "500"
  ip_address  = google_compute_address.vpn_static_ip.address
  target      = google_compute_vpn_gateway.target_gateway.id
}

resource "google_compute_forwarding_rule" "fr_udp4500" {
  provider    = google-beta
  name        = "tf-test-example-fr4500%{random_suffix}"
  ip_protocol = "UDP"
  port_range  = "4500"
  ip_address  = google_compute_address.vpn_static_ip.address
  target      = google_compute_vpn_gateway.target_gateway.id
}

resource "google_compute_route" "route" {
  provider            = google-beta
  name                = "tf-test-example-route%{random_suffix}"
  network             = google_compute_network.network.name
  dest_range          = "15.0.0.0/24"
  priority            = 1000
  next_hop_vpn_tunnel = google_compute_vpn_tunnel.tunnel.id
}
`, context)
}

{{ end }}
