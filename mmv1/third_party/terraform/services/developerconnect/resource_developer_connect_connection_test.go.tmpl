
package developerconnect_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"

)

func TestAccDeveloperConnectConnection_developerConnectConnectionGithubUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDeveloperConnectConnection_Github(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels"},
			},
			{
				Config: testAccDeveloperConnectConnection_GithubUpdate(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}


func testAccDeveloperConnectConnection_Github(context map[string]interface{}) string {
        return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  github_config {
    github_app = "DEVELOPER_CONNECT"

    authorizer_credential {
      oauth_token_secret_version = "projects/devconnect-terraform-creds/secrets/tf-test-do-not-change-github-oauthtoken-e0b9e7/versions/1"
    }
  }
}
`, context)
}


func testAccDeveloperConnectConnection_GithubUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  github_config {
    github_app = "DEVELOPER_CONNECT"
    app_installation_id = 49439208

    authorizer_credential {
      oauth_token_secret_version = "projects/devconnect-terraform-creds/secrets/tf-test-do-not-change-github-oauthtoken-e0b9e7/versions/1"
    }
  }
}
`, context)
}


func TestAccDeveloperConnectConnection_developerConnectConnectionGithubEnterpriseUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDeveloperConnectConnection_GithubEnterprise(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels", "ssl_ca_certificate"},
			},
			{
				Config: testAccDeveloperConnectConnection_GithubEnterpriseUpdate(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels", "ssl_ca_certificate"},
			},
		},
	})
}


func testAccDeveloperConnectConnection_GithubEnterprise(context map[string]interface{}) string {
        return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  github_enterprise_config {
    host_uri = "https://ghe.proctor-staging-test.com"
    app_id = 864434
    private_key_secret_version = "projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-private-key-f522d2/versions/latest"
    webhook_secret_secret_version = "projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-webhook-secret-3c806f/versions/latest"
  }
}
`, context)
}


func testAccDeveloperConnectConnection_GithubEnterpriseUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  github_enterprise_config {
    host_uri = "https://ghe.proctor-staging-test.com"
    app_id = 864434
    private_key_secret_version = "projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-private-key-f522d2/versions/latest"
    webhook_secret_secret_version = "projects/devconnect-terraform-creds/secrets/tf-test-ghe-do-not-change-ghe-webhook-secret-3c806f/versions/latest"
    app_installation_id = 837537
  }
}
`, context)
}


func TestAccDeveloperConnectConnection_developerConnectConnectionGitlabUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDeveloperConnectConnection_Gitlab(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels"},
			},
			{
				Config: testAccDeveloperConnectConnection_GitlabUpdate(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}


func testAccDeveloperConnectConnection_Gitlab(context map[string]interface{}) string {
        return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  gitlab_config {
    webhook_secret_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-webhook/versions/latest"

    read_authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-read-cred/versions/latest"
    }

    authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-auth-cred/versions/latest"
    }
  }
}
`, context)
}


func testAccDeveloperConnectConnection_GitlabUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  gitlab_config {
    webhook_secret_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-webhook/versions/latest"

    read_authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-read-cred-update/versions/latest"
    }

    authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-auth-cred/versions/latest"
    }
  }
}
`, context)
}


func TestAccDeveloperConnectConnection_developerConnectConnectionGitlabEnterpriseUpdate(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDeveloperConnectConnection_GitlabEnterprise(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels"},
			},
			{
				Config: testAccDeveloperConnectConnection_GitlabEnterpriseUpdate(context),
			},
			{
				ResourceName:            "google_developer_connect_connection.my-connection",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "connection_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}


func testAccDeveloperConnectConnection_GitlabEnterprise(context map[string]interface{}) string {
        return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  gitlab_enterprise_config {
    host_uri = "https://gle-us-central1.gcb-test.com"

    webhook_secret_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-enterprise-webhook/versions/latest"

    read_authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-enterprise-read-cred/versions/latest"
    }

    authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-enterprise-auth-cred/versions/latest"
    }
  }
}
`, context)
}


func testAccDeveloperConnectConnection_GitlabEnterpriseUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_developer_connect_connection" "my-connection" {
  location = "us-central1"
  connection_id = "tf-test-tf-test-connection%{random_suffix}"

  gitlab_enterprise_config {
    host_uri = "https://gle-us-central1.gcb-test.com"

    webhook_secret_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-enterprise-webhook/versions/latest"

    read_authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-enterprise-read-cred-update/versions/latest"
    }

    authorizer_credential {
      user_token_secret_version = "projects/devconnect-terraform-creds/secrets/gitlab-enterprise-auth-cred/versions/latest"
    }
  }
}
`, context)
}

