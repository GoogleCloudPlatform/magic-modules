// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package developerconnect_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccDeveloperConnectInsightsConfig_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccDeveloperConnectInsightsConfig_basic(context),
			},
			{
				ResourceName:            "google_developer_connect_insights_config.my_insights_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"insights_config_id", "labels", "location", "terraform_labels", "workload"},
			},
			{
				Config: testAccDeveloperConnectInsightsConfig_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_developer_connect_insights_config.my_insights_config", plancheck.ResourceActionDestroyBeforeCreate),
					},
				},
			},
			{
				ResourceName:            "google_developer_connect_insights_config.my_insights_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"insights_config_id", "location", "labels", "terraform_labels", "workload"},
			},
		},
	})
}

func testAccDeveloperConnectInsightsConfig_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_project" "project" {
		project_id = "dci-terraform"
		name = "Service Project"
		org_id = "{{index $.TestEnvVars "org_id"}}"
		billing_account = "{{index $.TestEnvVars "billing_account"}}"
		deletion_policy = "DELETE"
	}

	# Enable APIs
	resource "google_project_service" "apphub_api_service" {
		project = google_project.project.project_id
		service = "apphub.googleapis.com"
		depends_on = [google_project.project]
	}

	# Wait delay after enabling APIs
	resource "time_sleep" "wait_enable_service_api" {
		depends_on       = [google_project_service.apphub_api_service]
		create_duration  = "30s"
	}

	resource "google_apphub_application" "my_apphub_application" {
		location = "us-central1"
		application_id = "{{index $.Vars "application_id"}}"
		scope {
			type = "REGIONAL"
		}
		project = google_project.project.project_id
	}
	
	resource "google_developer_connect_insights_config" "my_insights_config" {
		location           = "us-central1"
		insights_config_id = "tf-test-ic%{random_suffix}"
		project            = data.google_project.project.project_id
		annotations = {}
    	labels = {}
    	app_hub_application = format("//apphub.googleapis.com/projects/%s/locations/%s/applications/%s",
           google_project.project.number,
           google_apphub_application.my_app.location,
           google_apphub_application.my_app.application_id)
    }
  `, context)
}

func testAccDeveloperConnectInsightsConfig_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_project" "project" {
		project_id = "dci-terraform"
		name = "Service Project"
		org_id = "{{index $.TestEnvVars "org_id"}}"
		billing_account = "{{index $.TestEnvVars "billing_account"}}"
		deletion_policy = "DELETE"
	}
	
	# Enable APIs
	resource "google_project_service" "apphub_api_service" {
		project = google_project.project.project_id
		service = "apphub.googleapis.com"
		depends_on = [google_project.project]
	}

	# Wait delay after enabling APIs
	resource "time_sleep" "wait_enable_service_api" {
		depends_on       = [google_project_service.apphub_api_service]
		create_duration  = "30s"
	}

	resource "google_apphub_application" "my_apphub_application" {
		location = "us-central1"
		application_id = "{{index $.Vars "application_id"}}"
		scope {
			type = "REGIONAL"
		}
		project = google_project.project.project_id
	}
	resource "google_developer_connect_insights_config" "my_insights_config" {
		location           = "us-central1"
		insights_config_id = "tf-test-ic%{random_suffix}"
		project            = data.google_project.project.project_id
		annotations = {}
    	labels = {}
    	app_hub_application = format("//apphub.googleapis.com/projects/%s/locations/%s/applications/%s",
           google_project.project.number,
           google_apphub_application.my_app.location,
           google_apphub_application.my_app.application_id)
		}
    }
  `, context)
}
