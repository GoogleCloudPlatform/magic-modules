// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package developerconnect_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccDeveloperConnectInsightsConfig_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDeveloperConnectInsightsConfig_basic(context),
			},
			{
				ResourceName:            "google_developer_connect_insights_config.my_insights_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "insights_config_id", "labels", "location", "terraform_labels", "workload"},
			},
			{
				Config: testAccDeveloperConnectInsightsConfig_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_developer_connect_insights_config.my_insights_config", plancheck.ResourceActionDestroyBeforeCreate),
					},
				},
			},
			{
				ResourceName:            "google_developer_connect_insights_config.my_insights_config",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"insights_config_id", "location", "terraform_labels", "workload"},
			},
		},
	})
}

func testAccDeveloperConnectInsightsConfig_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
	data "google_project" "project" {
	  project_id = "devconnect-insights-terraform"
	}
	resource "google_apphub_application" "my_app" {
	  location       = "us-central1"
	  application_id = "tf-test-app-basic%{random_suffix}"
	  display_name   = "My Basic App for InsightsConfig"
	  project        = data.google_project.project.project_id
	  scope {
	    type = "REGIONAL"
	  }
	}
	resource "google_developer_connect_insights_config" "my_insights_config" {
  	  location           = "us-central1"
	  insights_config_id = "tf-test-ic%{random_suffix}"
	  project            = data.google_project.project.project_id
	  app_hub_application = format("//apphub.googleapis.com/projects/%s/locations/%s/applications/%s",
	  	data.google_project.project.number,
		google_apphub_application.my_app.location,
		google_apphub_application.my_app.application_id)
	}
  `, context)
}

func testAccDeveloperConnectInsightsConfig_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
	data "google_project" "project" {
          project_id = "devconnect-insights-terraform"
        }
	resource "google_apphub_application" "my_app" {
		location       = "us-central1"
		application_id = "tf-test-app-basic%{random_suffix}"
		display_name   = "My Other App for InsightsConfig"
		project        = data.google_project.project.project_id
		scope {
			type = "REGIONAL"
		}
	}
	resource "google_developer_connect_insights_config" "my_insights_config" {
		location           = "us-central1"
		insights_config_id = "tf-test-ic%{random_suffix}"
		project            = data.google_project.project.project_id
		app_hub_application = format("//apphub.googleapis.com/projects/%s/locations/%s/applications/%s",
			data.google_project.project.number,
			google_apphub_application.my_app.location,
			google_apphub_application.my_app.application_id)
		artifact_configs {
			uri = "us-docker.pkg.dev/my-project/my-repo/image"
		}
	}
  `, context)
}

