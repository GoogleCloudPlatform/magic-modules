package saasruntime_test

{{ if ne $.TargetVersionName `ga` -}}

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccSaasRuntimeTenant_update(t *testing.T) {
	t.Parallel()
	acctest.BootstrapIamMembers(t, []acctest.IamMember{
		{
			Member: "serviceAccount:service-{project_number}@gcp-sa-saasservicemgmt.iam.gserviceaccount.com",
			Role:   "roles/saasservicemgmt.serviceAgent",
		},
	})

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccSaasRuntimeTenant_basic(context),
			},
			{
				ResourceName:            "google_saas_runtime_tenant.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "labels", "location", "tenant_id", "terraform_labels"},
			},
			{
				Config: testAccSaasRuntimeTenant_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_saas_runtime_tenant.example", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_saas_runtime_tenant.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "labels", "location", "tenant_id", "terraform_labels"},
			},
		},
	})
}

func testAccSaasRuntimeTenant_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_saas_runtime_saas" "example_saas" {
  provider = google-beta
  saas_id  = "tf-test-example-saas%{random_suffix}"
  location = "global"

  locations {
    name = "us-central1"
  }
}

resource "google_saas_runtime_tenant" "example" {
  provider = google-beta
  location = "global"
  tenant_id = "tf-test-example-tenant%{random_suffix}"
  saas = google_saas_runtime_saas.example_saas.id
  consumer_resource = "//compute.googleapis.com/projects/example-project/zones/us-central1-a/instances/example-instance"
}
`, context)
}

func testAccSaasRuntimeTenant_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_saas_runtime_saas" "example_saas" {
  provider = google-beta
  saas_id  = "tf-test-example-saas%{random_suffix}"
  location = "global"

  locations {
    name = "us-central1"
  }
}

resource "google_saas_runtime_tenant" "example" {
  provider = google-beta
  location = "global"
  tenant_id = "tf-test-example-tenant%{random_suffix}"
  saas = google_saas_runtime_saas.example_saas.id
  consumer_resource = "//compute.googleapis.com/projects/example-project/zones/us-central1-a/instances/example-instance"
  labels = {
    "label-one": "foo"
  }
  annotations = {
    "annotation-one": "bar"
  }
}
`, context)
}
{{- end }}