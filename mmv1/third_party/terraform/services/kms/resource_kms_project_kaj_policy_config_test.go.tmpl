package kms_test

{{- if ne $.TargetVersionName "ga" }}
import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccKMSProjectKajPolicyConfig_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
                "billing_account": envvar.GetTestBillingAccountFromEnv(t),
                "org_id":          envvar.GetTestOrgFromEnv(t),
                "random_suffix":   acctest.RandString(t, 10),
        }

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
                        "time": {},
                },
		Steps: []resource.TestStep{
			{
				Config: testAccKMSProjectKajPolicyConfig_basic(context),
			},
			{
				ResourceName:      "google_kms_project_kaj_policy_config.example",
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				Config: testAccKMSProjectKajPolicyConfig_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_kms_project_kaj_policy_config.example", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:      "google_kms_project_kaj_policy_config.example",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccKMSProjectKajPolicyConfig_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
# Create a project
resource "google_project" "kms_project" {
  provider        = google-beta
  project_id      = "tf-test-my-project%{random_suffix}"
  name            = "tf-test-my-project%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}

# Enable the Cloud KMS API.
resource "google_project_service" "kms_api_service" {
  provider                   = google-beta
  service                    = "cloudkms.googleapis.com"
  project                    = google_project.kms_project.project_id
  disable_dependent_services = true
  depends_on                 = [google_project.kms_project]
}

resource "time_sleep" "wait_enable_service_api" {
        depends_on      = [google_project_service.kms_api_service]
        create_duration = "30s"
}

resource "google_kms_project_kaj_policy_config" "example" {
        provider                                = google-beta
        project                                 = google_project.kms_project.project_id
        default_key_access_justification_policy {
                allowed_access_reasons = [
                        "CUSTOMER_INITIATED_ACCESS",
                        "GOOGLE_INITIATED_SYSTEM_OPERATION",
                ]
        }
	depends_on                              = [time_sleep.wait_enable_service_api]
}
`, context)
}

func testAccKMSProjectKajPolicyConfig_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
# Create a project
resource "google_project" "kms_project" {
  provider        = google-beta
  project_id      = "tf-test-my-project%{random_suffix}"
  name            = "tf-test-my-project%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  deletion_policy = "DELETE"
}

# Enable the Cloud KMS API.
resource "google_project_service" "kms_api_service" {
  provider                   = google-beta
  service                    = "cloudkms.googleapis.com"
  project                    = google_project.kms_project.project_id
  disable_dependent_services = true
  depends_on                 = [google_project.kms_project]
}

resource "time_sleep" "wait_enable_service_api" {
        depends_on      = [google_project_service.kms_api_service]
        create_duration = "30s"
}

resource "google_kms_project_kaj_policy_config" "example" {
        provider                                = google-beta
        project                                 = google_project.kms_project.project_id
        default_key_access_justification_policy {
                allowed_access_reasons = [
                        "CUSTOMER_INITIATED_ACCESS",
                ]
        }
	depends_on                              = [time_sleep.wait_enable_service_api]
}
`, context)
}
{{- end}}
