package networksecurity_test
{{- if ne $.TargetVersionName "ga" -}}

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
  
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccNetworkSecurityBackendAuthenticationConfig_networkSecurityBackendAuthenticationConfigFullExample_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccNetworkSecurityBackendAuthenticationConfig_networkSecurityBackendAuthenticationConfigFullExample_full(context),
			},
			{
				ResourceName:            "google_network_security_backend_authentication_config.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "name", "terraform_labels"},
			},
			{
				Config: testAccNetworkSecurityBackendAuthenticationConfig_networkSecurityBackendAuthenticationConfigFullExample_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_pubsub_topic.foo", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_network_security_backend_authentication_config.default",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "name", "terraform_labels"},
			},
		},
	})
}

func testAccNetworkSecurityBackendAuthenticationConfig_networkSecurityBackendAuthenticationConfigFullExample_full(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_network_security_backend_authentication_config" "default" {
  provider = google-beta
  name     = "tf-test-my-backend-authentication-config%{random_suffix}"
  labels   = {
    foo = "bar"
  }
  location           = "global"
  description        = "my description"
  well_known_roots   = "NONE"
  client_certificate = google_certificate_manager_certificate.certificate.name
  trust_config       = google_certificate_manager_trust_config.trust_config.name
}

resource "google_certificate_manager_certificate" "certificate" {
  provider = google-beta
  labels = {
    foo = "bar"
  }
  location    = "global"
  certificate = file("test-fixtures/cert.pem")
  private_key = file("test-fixtures/key.pem")
  scope       = "CLIENT_AUTH"
}

resource "google_certificate_manager_trust_config" "trust_config" {
  provider = google-beta
  name        = ""
  description = "sample description for the trust config"
  location    = "global"

  trust_stores {
    trust_anchors { 
      pem_certificate = file("test-fixtures/cert.pem")
    }
    intermediate_cas { 
      pem_certificate = file("test-fixtures/cert.pem")
    }
  }

  labels = {
    foo = "bar"
  }
}
`, context)
}

func testAccNetworkSecurityBackendAuthenticationConfig_networkSecurityBackendAuthenticationConfigFullExample_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_network_security_backend_authentication_config" "default" {
  provider = google-beta
  name     = "tf-test-my-backend-authentication-config%{random_suffix}"
  labels   = {
    foo = "bar"
  }
  location           = "global"
  description        = "updated description"
  well_known_roots   = "PUBLIC_ROOTS"
   client_certificate = google_certificate_manager_certificate.certificate.name
  trust_config       = google_certificate_manager_trust_config.trust_config.name
}

resource "google_certificate_manager_certificate" "certificate" {
  labels = {
    foo = "bar"
  }
  location    = "global"
  certificate = file("test-fixtures/cert.pem")
  private_key = file("test-fixtures/key.pem")
  scope       = "CLIENT_AUTH"
}

resource "google_certificate_manager_trust_config" "trust_config" {
  name        = ""
  description = "sample description for the trust config"
  location    = "global"

  trust_stores {
    trust_anchors { 
      pem_certificate = file("test-fixtures/cert.pem")
    }
    intermediate_cas { 
      pem_certificate = file("test-fixtures/cert.pem")
    }
  }

  labels = {
    foo = "bar"
  }
}

`, context)
}

{{- end }}