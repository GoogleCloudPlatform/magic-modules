{{- if ne $.TargetVersionName "ga" -}}
package iambeta_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccIAMBetaWorkloadIdentityPoolManagedIdentity_minimal(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckIAMBetaWorkloadIdentityPoolManagedIdentityDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccIAMBetaWorkloadIdentityPoolManagedIdentity_minimal(context),
			},
			{
				ResourceName:            "google_iam_workload_identity_pool_managed_identity.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"workload_identity_pool_id", "workload_identity_pool_namespace_id", "workload_identity_pool_managed_identity_id"},
			},
			{
				Config: testAccIAMBetaWorkloadIdentityPoolManagedIdentity_updated(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_iam_workload_identity_pool_managed_identity.example", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_iam_workload_identity_pool_managed_identity.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"workload_identity_pool_id", "workload_identity_pool_namespace_id", "workload_identity_pool_managed_identity_id"},
			},
		},
	})
}

func TestAccIAMBetaWorkloadIdentityPoolManagedIdentity_full(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"project":       envvar.GetTestProjectNumberFromEnv(),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckIAMBetaWorkloadIdentityPoolManagedIdentityDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccIAMBetaWorkloadIdentityPoolManagedIdentity_full(context),
			},
			{
				ResourceName:            "google_iam_workload_identity_pool_managed_identity.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"workload_identity_pool_id", "workload_identity_pool_namespace_id", "workload_identity_pool_managed_identity_id"},
			},
			{
				Config: testAccIAMBetaWorkloadIdentityPoolManagedIdentity_updated(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
				PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_iam_workload_identity_pool_managed_identity.example", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_iam_workload_identity_pool_managed_identity.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"workload_identity_pool_id", "workload_identity_pool_namespace_id", "workload_identity_pool_managed_identity_id"},
			},
		},
	})
}

func testAccIAMBetaWorkloadIdentityPoolManagedIdentity_minimal(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_iam_workload_identity_pool" "pool" {
  provider = google-beta

  workload_identity_pool_id = "tf-test-example-pool%{random_suffix}"
  mode                      = "TRUST_DOMAIN"
}

resource "google_iam_workload_identity_pool_namespace" "ns" {
  provider = google-beta

  workload_identity_pool_id           = google_iam_workload_identity_pool.pool.workload_identity_pool_id
  workload_identity_pool_namespace_id = "tf-test-example-namespace%{random_suffix}"
}

resource "google_iam_workload_identity_pool_managed_identity" "example" {
  provider = google-beta

  workload_identity_pool_id                  = google_iam_workload_identity_pool.pool.workload_identity_pool_id
  workload_identity_pool_namespace_id        = google_iam_workload_identity_pool_namespace.ns.workload_identity_pool_namespace_id
  workload_identity_pool_managed_identity_id = "tf-test-example-managed-identity%{random_suffix}"
}
`, context)
}

func testAccIAMBetaWorkloadIdentityPoolManagedIdentity_full(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_iam_workload_identity_pool" "pool" {
  provider = google-beta

  workload_identity_pool_id = "tf-test-example-pool%{random_suffix}"
  mode                      = "TRUST_DOMAIN"
}

resource "google_iam_workload_identity_pool_namespace" "ns" {
  provider = google-beta

  workload_identity_pool_id           = google_iam_workload_identity_pool.pool.workload_identity_pool_id
  workload_identity_pool_namespace_id = "tf-test-example-namespace%{random_suffix}"
}

resource "google_iam_workload_identity_pool_managed_identity" "example" {
  provider = google-beta

  workload_identity_pool_id                  = google_iam_workload_identity_pool.pool.workload_identity_pool_id
  workload_identity_pool_namespace_id        = google_iam_workload_identity_pool_namespace.ns.workload_identity_pool_namespace_id
  workload_identity_pool_managed_identity_id = "tf-test-example-managed-identity%{random_suffix}"
  description                                = "Example Managed Identity in a Workload Identity Pool Namespace"
  disabled                                   = true
  attestation_rules {
    google_cloud_resource = "//compute.googleapis.com/projects/%{project}/uid/zones/us-central1-a/instances/12345678"
  }
  attestation_rules {
    google_cloud_resource = "//run.googleapis.com/projects/%{project}/name/locations/us-east1/services/my-service"
  }
}
`, context)
}

func testAccIAMBetaWorkloadIdentityPoolManagedIdentity_updated(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_iam_workload_identity_pool" "pool" {
  provider = google-beta

  workload_identity_pool_id = "tf-test-example-pool%{random_suffix}"
  mode                      = "TRUST_DOMAIN"
}

resource "google_iam_workload_identity_pool_namespace" "ns" {
  provider = google-beta

  workload_identity_pool_id           = google_iam_workload_identity_pool.pool.workload_identity_pool_id
  workload_identity_pool_namespace_id = "tf-test-example-namespace%{random_suffix}"
}

resource "google_iam_workload_identity_pool_managed_identity" "example" {
  provider = google-beta

  workload_identity_pool_id                  = google_iam_workload_identity_pool.pool.workload_identity_pool_id
  workload_identity_pool_namespace_id        = google_iam_workload_identity_pool_namespace.ns.workload_identity_pool_namespace_id
  workload_identity_pool_managed_identity_id = "tf-test-example-managed-identity%{random_suffix}"
  description                                = "Updated Managed Identity in a Workload Identity Pool Namespace"
  disabled                                   = false
}
`, context)
}
{{- end -}}
