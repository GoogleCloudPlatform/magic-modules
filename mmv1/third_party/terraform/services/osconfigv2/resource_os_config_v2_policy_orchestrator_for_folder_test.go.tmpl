package osconfigv2_test
{{- if ne $.TargetVersionName "ga" }}

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccOSConfigV2PolicyOrchestratorForFolder_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccOSConfigV2PolicyOrchestratorForFolder_basic(context),
			},
			{
				ResourceName:            "google_os_config_v2_policy_orchestrator_for_folder.policy_orchestrator_for_folder",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"folder_id", "labels", "policy_orchestrator_id", "terraform_labels"},
			},
			{
				Config: testAccOSConfigV2PolicyOrchestratorForFolder_update(context),
			},
			{
				ResourceName:            "google_os_config_v2_policy_orchestrator_for_folder.policy_orchestrator_for_folder",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"folder_id", "labels", "policy_orchestrator_id", "terraform_labels"},
			},
		},
	})
}

func testAccOSConfigV2PolicyOrchestratorForFolder_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_os_config_v2_policy_orchestrator_for_folder" "policy_orchestrator_for_folder" {
    provider = google-beta
    policy_orchestrator_id = "tf-test-test-po-folder%{random_suffix}"
    folder_id = "1087380508887"
    
    state = "ACTIVE"
    action = "UPSERT"
    
    orchestrated_resource {
        id = "tf-test-test-orchestrated-resource-folder%{random_suffix}"
        os_policy_assignment_v1_payload {
            os_policies {
                id = "tf-test-test-os-policy-folder%{random_suffix}"
                mode = "VALIDATION"
                resource_groups {
                    resources {
                        id = "resource-tf"
                        file {
                            content = "file-content-tf"
                            path = "file-path-tf-1"
                            state = "PRESENT"
                        }
                    }
                }
            }
            instance_filter {
                inventories {
                    os_short_name = "windows-10"
                }
            }
            rollout {
                disruption_budget {
                    percent = 100
                }
                min_wait_duration = "60s"
            }
        }
    }
}
`, context)
}

func testAccOSConfigV2PolicyOrchestratorForFolder_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_os_config_v2_policy_orchestrator_for_folder" "policy_orchestrator_for_folder" {
    provider = google-beta
    policy_orchestrator_id = "tf-test-test-po-folder%{random_suffix}"
    folder_id = "1087380508887"
    
    state = "STOPPED"
    action = "DELETE"
    description = "Updated description"
    
    orchestrated_resource {
        id = "tf-test-test-orchestrated-resource-folder%{random_suffix}"
        os_policy_assignment_v1_payload {
            os_policies {
                id = "tf-test-test-os-policy-folder%{random_suffix}"
                mode = "VALIDATION"
                resource_groups {
                    resources {
                        id = "resource-tf"
                        file {
                            content = "file-content-tf"
                            path = "file-path-tf-1"
                            state = "PRESENT"
                        }
                    }
                }
            }
            instance_filter {
                inventories {
                    os_short_name = "windows-10"
                }
            }
            rollout {
                disruption_budget {
                    percent = 100
                }
                min_wait_duration = "60s"
            }
        }
    }
}
`, context)
}
{{ end }}
