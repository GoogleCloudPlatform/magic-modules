package gemini_test
{{- if ne $.TargetVersionName "ga" }}

import (
    "fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
)

func TestAccGeminiCodeToolsSetting_geminiCodeToolsSettingBasicExample_update(t *testing.T) {
	t.Parallel()
	context := map[string]interface{}{
		"setting_id": fmt.Sprintf("tf-test-ls-%s", acctest.RandString(t, 10)),
	}
	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccGeminiCodeToolsSetting_geminiCodeToolsSettingBasicExample_basic(context),
			},
			{
				ResourceName:            "google_gemini_code_tools_setting.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "code_tools_setting_id", "terraform_labels"},
			},
			{
				Config: testAccGeminiCodeToolsSetting_geminiCodeToolsSettingBasicExample_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_gemini_code_tools_setting.example", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_gemini_code_tools_setting.example",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "code_tools_setting_id", "terraform_labels"},
			},
		},
	})
}
func testAccGeminiCodeToolsSetting_geminiCodeToolsSettingBasicExample_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_gemini_code_tools_setting" "example" {
    provider = google-beta
    code_tools_setting_id = "%{setting_id}"
    location = "global"
    enabled_tool = {
        handle = "my_handle1"
        tool = "my_tool1"
    }
}
`, context)
}
func testAccGeminiCodeToolsSetting_geminiCodeToolsSettingBasicExample_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_gemini_code_tools_setting" "example" {
    provider = google-beta
    code_tools_setting_id = "%{setting_id}"
    location = "global"
    labels = {"my_key" = "my_value"}
    enabled_tool {
        handle = "my_handle1"
        tool = "my_tool1"
    }
    enabled_tool {
        handle = "my_handle2"
        tool = "my_tool2"
    }
}
`, context)
}
{{ end }}