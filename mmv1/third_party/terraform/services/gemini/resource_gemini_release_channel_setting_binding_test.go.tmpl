package gemini_test
{{- if ne $.TargetVersionName "ga" }}

import (
    "fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"

	"github.com/hashicorp/terraform-provider-google/google/acctest"
    "github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccGeminiReleaseChannelSettingBinding_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"release_channel_setting_id": fmt.Sprintf("tf-test-ls-%s", acctest.RandString(t, 10)),
		"setting_binding_id": fmt.Sprintf("tf-test-lsb-%s", acctest.RandString(t, 10)),
        "new_project_id": fmt.Sprintf("tf-test-prj-%s", acctest.RandString(t, 6)),
        "org_id": envvar.GetTestOrgFromEnv(t),
        "billing_account": envvar.GetTestBillingAccountFromEnv(t),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccGeminiReleaseChannelSettingBinding_basic(context),
			},
			{
				ResourceName:            "google_gemini_release_channel_setting_binding.basic_binding",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "release_channel_setting_id", "terraform_labels"},
			},
			{
				Config: testAccGeminiReleaseChannelSettingBinding_update(context),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_gemini_release_channel_setting_binding.basic_binding", plancheck.ResourceActionUpdate),
					},
				},
			},
			{
				ResourceName:            "google_gemini_release_channel_setting_binding.basic_binding",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "location", "release_channel_setting_id", "terraform_labels"},
			},
		},
	})
}

func testAccGeminiReleaseChannelSettingBinding_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "new_project" {
    provider = google-beta
    project_id = "%{new_project_id}"
    name = "Terraform Acc Test Project"
    org_id = "%{org_id}"
    billing_account = "%{billing_account}"
    deletion_policy = "DELETE"
}

resource "google_gemini_release_channel_setting" "basic" {
    provider = google-beta
    release_channel_setting_id = "%{release_channel_setting_id}"
    location = "global"
    labels = {"my_key" = "my_value"}
    release_channel = "EXPERIMENTAL"
}

resource "google_gemini_release_channel_setting_binding" "basic_binding" {
    provider = google-beta
    release_channel_setting_id = google_gemini_release_channel_setting.basic.release_channel_setting_id
    setting_binding_id = "%{setting_binding_id}"
    location = "global"
    target = "projects/${resource.google_project.new_project.number}"
}
`, context)
}

func testAccGeminiReleaseChannelSettingBinding_update(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "new_project" {
    provider = google-beta
    project_id = "%{new_project_id}"
    name = "Terraform Acc Test Project"
}

resource "time_sleep" "wait_1_min" {
    depends_on = [google_project.new_project]
    create_duration = "60s"
}

resource "google_gemini_release_channel_setting" "basic" {
    provider = google-beta
    release_channel_setting_id = "%{release_channel_setting_id}"
    location = "global"
    labels = {"my_key" = "my_value"}
    release_channel = "EXPERIMENTAL"
    depends_on = [time_sleep.wait_1_min]
}

resource "google_gemini_release_channel_setting_binding" "basic_binding" {
    provider = google-beta
    release_channel_setting_id = google_gemini_release_channel_setting.basic.release_channel_setting_id
    setting_binding_id = "%{setting_binding_id}"
    location = "global"
    target = "projects/${resource.google_project.new_project.number}"
    labels = {"my_key" = "my_value"}
    product = "GEMINI_CODE_ASSIST"
}
`, context)
}
{{ end }}
