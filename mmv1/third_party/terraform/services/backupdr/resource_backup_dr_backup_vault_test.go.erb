<% autogen_exception -%>
package backupdr_test
<% unless version == 'ga' -%>

import (
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	"testing"
	"time"
)

func TestAccBackupDRBackupVault_fullUpdate(t *testing.T) {
	t.Parallel()

	timeNow := time.Now().UTC()
	referenceTime := time.Date(timeNow.Year(), timeNow.Month(), timeNow.Day(), 0, 0, 0, 0, time.UTC)

	context := map[string]interface{}{
		"project":                   envvar.GetTestProjectFromEnv(),
		"effective_time": referenceTime.Add(24 * time.Hour).Format(time.RFC3339),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccBackupDRBackupVault_fullCreate(context),
			},
			{
				ResourceName:            "google_backup_dr_backup_vault.backup-vault-test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "backup_vault_id", "labels", "location", "terraform_labels"},
			},
			{
				Config: testAccBackupDRBackupVault_fullUpdate(context),
			},
			{
				ResourceName:            "google_backup_dr_backup_vault.backup-vault-test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "backup_vault_id", "labels", "location", "terraform_labels"},
			},
		},
	})
}

func testAccBackupDRBackupVault_fullCreate(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_backup_dr_backup_vault" "backup-vault-test" {
	provider = google-beta
	location = "us-central1"
	backup_vault_id    = "backup-vault-test"
	description = "This is a backup vault built by Terraform."
	backup_minimum_enforced_retention_duration = "100000s"
	effective_time = "%{effective_time}" 
	labels = {
		foo = "bar"
		bar = "baz"
	}
	annotations = {
		annotations1 = "bar"
		annotations2 = "baz"
	}
	}
`, context)
}

func testAccBackupDRBackupVault_fullUpdate(context map[string]interface{}) string {
	return acctest.Nprintf(`
	resource "google_backup_dr_backup_vault" "backup-vault-test" {
	provider = google-beta
	location = "us-central1"
	backup_vault_id    = "backup-vault-test"
	description = "This is a second backup vault built by Terraform."
	backup_minimum_enforced_retention_duration = "200000s"
	effective_time = "%{effective_time}" 
	labels = {
		foo = "bar1"
		bar = "baz1"
	}
	annotations = {
		annotations1 = "bar1"
		annotations2 = "baz1"
	}
	}
`, context)
}
<% end -%>