package backupdr
{{- if ne $.TargetVersionName "ga" }}

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func DataSourceBackupDRDataSource() *schema.Resource {
	dsSchema := map[string]*schema.Schema{
		"name": {
			Type:     schema.TypeString,
			Computed: true,
			Description: `Name of the datasource to create.
			It must have the format "projects/{project}/locations/{location}/backupVaults/{backupvault}/dataSources/{datasource}".
			'{datasource}' cannot be changed after creation. It must be between 3-63 characters long and must be unique within the backup vault.`,
		},
		"state": {
			Type:     schema.TypeString,
			Computed: true,
			Description: `The DataSource resource instance state.`,
		},
		"labels": {
			Type: schema.TypeMap,
			Computed: true,
			Elem: &schema.Schema{Type: schema.TypeString},
			Description: `Resource labels to represent user provided metadata.`,
		},
		"create_time": {
			Type:     schema.TypeString,
			Computed: true,
			Description: `The time when the instance was created.`,
		},
		"update_time": {
			Type:     schema.TypeString,
			Computed: true,
			Description: `The time when the instance was updated.`,
		},
		"backup_count": {
			Type:     schema.TypeInt,
			Computed: true,
			Description: `Number of backups in the data source.`,
		},
		"etag": {
			Type:     schema.TypeString,
			Computed: true,
			Description: `Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.`,
		},
		"total_stored_bytes": {
			Type:     schema.TypeInt,
			Computed: true,
			Description: `The number of bytes (metadata and data) stored in this datasource.`,
		},
		"data_source_gcp_resource": {
			Type:     schema.TypeList,
			Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"gcp_resourcename": {
						Type:     schema.TypeString,
						Computed: true,
						Description: `Full resource pathname URL of the source Google Cloud resource.`,
					},
					"location": {
						Type:     schema.TypeString,
						Computed: true,
						Description: `Location of the resource: <region>/<zone>/"global"/"unspecified".`,
					},
					"type": {
						Type:     schema.TypeString,
						Computed: true,
						Description: `The type of the Google Cloud resource. Use the Unified Resource Type,
						eg. compute.googleapis.com/Instance.`,
					},
					"compute_instance_data_source_properties": {
						Type:     schema.TypeList,
						Computed: true,
						Elem: &schema.Resource{
							Schema: map[string]*schema.Schema{
								"name": {
									Type:     schema.TypeString,
									Computed: true,
									Description: `Name of the compute instance backed up by the datasource.`,
								},
								"description": {
									Type:     schema.TypeString,
									Computed: true,
									Description: `The description of the Compute Engine instance.`,
								},
								"machine_type": {
									Type:     schema.TypeString,
									Computed: true,
									Description: `The machine type of the instance.`,
								},
								"total_disk_count": {
									Type:     schema.TypeInt,
									Computed: true,
									Description: `The total number of disks attached to the Instance.`,
								},
								"total_disk_size_gb": {
									Type:     schema.TypeInt,
									Computed: true,
									Description: `The sum of all the disk sizes.`,
								},
							},
						},
						Description: `ComputeInstanceDataSourceProperties has a subset of Compute Instance properties that are useful at the Datasource level.`,
					},
				},
			},
			Description: `The backed up resource is a Google Cloud resource.
			The word 'DataSource' was included in the names to indicate that this is
			the representation of the Google Cloud resource used within the
			DataSource object.`,
		},
		"data_source_backup_appliance_application": {
			Type:     schema.TypeList,
			Computed: true,
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"application_name": {
						Type:     schema.TypeString,
						Computed: true,
						Description: `The name of the Application as known to the Backup Appliance.`,
					},
					"backup_appliance": {
						Type:     schema.TypeString,
						Computed: true,
						Description: `Appliance name.`,
					},
					"appliance_id": {
						Type:     schema.TypeInt,
						Computed: true,
						Description: `Appliance Id of the Backup Appliance.`,
					},
					"type": {
						Type:     schema.TypeString,
						Computed: true,
						Description: `The type of the application. e.g. VMBackup`,
					},
					"application_id": {
						Type:     schema.TypeInt,
						Computed: true,
						Description: `The appid field of the application within the Backup Appliance.`,
					},
					"hostname": {
						Type:     schema.TypeString,
						Computed: true,
						Description: `Hostname of the host where the application is running.`,
					},
					"host_id": {
						Type:     schema.TypeInt,
						Computed: true,
						Description: `Hostid of the application host.`,
					},
				},
			},
			Description: `The backed up resource is a backup appliance application.`,
		},
		"location": {
			Type:     schema.TypeString,
			Required: true,
		},
		"project": {
			Type:     schema.TypeString,
			Required: true,
		},
		"data_source_id": {
			Type:     schema.TypeString,
			Required: true,
		},
		"backup_vault_id": {
			Type:     schema.TypeString,
			Required: true,
		},
	}

	return &schema.Resource{
		Read:   DataSourceBackupDRDataSourceRead,
		Schema: dsSchema,
	}
}

func DataSourceBackupDRDataSourceRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return err
	}

	location, err := tpgresource.GetLocation(d, config)
	if err != nil {
		return err
	}
	if len(location) == 0 {
		return fmt.Errorf("Cannot determine location: set location in this data source or at provider-level")
	}

	billingProject := project
	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}BackupDRBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/backupVaults/{{"{{"}}backup_vault_id{{"}}"}}/dataSources/{{"{{"}}data_source_id{{"}}"}}")

	if err != nil {
		return err
	}
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})

	if err != nil {
		return fmt.Errorf("Error reading BackupVault: %s", err)
	}

	if err := d.Set("name", flattenDataSourceBackupDRDataSourceName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataSource: %s", err)
	}

	if err := d.Set("create_time", flattenDataSourceBackupDRDataSourceCreateTime(res["create_time"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataSource: %s", err)
	}

	if err := d.Set("update_time", flattenDataSourceBackupDRDataSourceUpdateTime(res["update_time"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataSource: %s", err)
	}

	if err := d.Set("backup_count", flattenDataSourceBackupDRDataSourceBackupCount(res["backup_count"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataSource: %s", err)
	}

	if err := d.Set("etag", flattenDataSourceBackupDRDataSourceEtag(res["etag"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataSource: %s", err)
	}

	if err := d.Set("state", flattenDataSourceBackupDRDataSourceState(res["state"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataSource: %s", err)
	}

	if err := d.Set("total_stored_bytes", flattenDataSourceBackupDRDataSourceTotalStoredBytes(res["total_stored_bytes"], d, config)); err != nil {
		return fmt.Errorf("Error reading DataSource: %s", err)
	}

	d.SetId(res["name"].(string))

	return nil
}

func flattenDataSourceBackupDRDataSourceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataSourceBackupDRDataSourceCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataSourceBackupDRDataSourceUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataSourceBackupDRDataSourceBackupCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataSourceBackupDRDataSourceEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataSourceBackupDRDataSourceState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataSourceBackupDRDataSourceTotalStoredBytes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
{{- end }}