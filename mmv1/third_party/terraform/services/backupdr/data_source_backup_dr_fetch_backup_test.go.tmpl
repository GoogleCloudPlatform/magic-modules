package backupdr_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

// this test cannot be ran locally without seeding your environment with a backup vault and scheduling the backup of a compute instance
// to generate a unique datasourceId, that this test would need to be modified to use. the values in this test correspond to those used
// in our testing processes.
func TestAccDataSourceGoogleBackupDRFetchBackups_basic(t *testing.T) {
	t.Parallel()

	project := envvar.GetTestProjectFromEnv()
	location := "us-central1"
	resourceType := "compute.googleapis.com/Instance"
	backupVaultId := "bv-test"
	{{ if ne $.TargetVersionName "ga" -}}
	dataSourceId := "ds-test"
	{{ else -}}
	dataSourceId := "56b93b14529b77d764b21b2251e1ea8f0006e8dd"
	{{- end }}

	name := fmt.Sprintf("projects/%s/locations/%s/backupVaults/%s/dataSources/%s/backups:fetchForResourceType?resourceType=%s", project, location, backupVaultId, dataSourceId,resourceType)

	context := map[string]interface{}{
		"backup_vault_id": backupVaultId,
		"data_source_id":  dataSourceId,
    "location":       location,
    "resource_type": resourceType,
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceGoogleBackupDRFetchBackups_basic(context),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.google_backup_dr_fetch_backups.foo", "id", name),
					resource.TestCheckResourceAttrSet("data.google_backup_dr_fetch_backups.foo", "backups.0.name"),
					resource.TestCheckResourceAttrSet("data.google_backup_dr_fetch_backups.foo", "backups.0.backup_type"),
					resource.TestCheckResourceAttrSet("data.google_backup_dr_fetch_backups.foo", "backups.0.state"),
					resource.TestCheckResourceAttrSet("data.google_backup_dr_fetch_backups.foo", "backups.0.create_time"),
				),
			},
		},
	})
}

func testAccDataSourceGoogleBackupDRFetchBackups_basic(context map[string]interface{}) string {
	return acctest.Nprintf(`
data "google_project" "project" {
}

data "google_backup_dr_fetch_backups" "foo" {
	project       = data.google_project.project.project_id
	location      = "%{location}"
	resource_type = "%{resource_type}"
	backup_vault_id = "%{backup_vault_id}"
	data_source_id  = "%{data_source_id}"
}

`, context)
}
