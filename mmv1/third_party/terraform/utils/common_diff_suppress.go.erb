<% autogen_exception -%>
// Contains common diff suppress functions.

package google

import (
	"net"
	"reflect"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google/google/verify"
)

func OptionalPrefixSuppress(prefix string) schema.SchemaDiffSuppressFunc {
	return verify.OptionalPrefixSuppress(prefix)
}

func IgnoreMissingKeyInMap(key string) schema.SchemaDiffSuppressFunc {
	return verify.IgnoreMissingKeyInMap(key)
}

func OptionalSurroundingSpacesSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.OptionalSurroundingSpacesSuppress(k, old, new, d)
}

func EmptyOrDefaultStringSuppress(defaultVal string) schema.SchemaDiffSuppressFunc {
	return verify.EmptyOrDefaultStringSuppress(defaultVal)
}

func IpCidrRangeDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.IpCidrRangeDiffSuppress(k, old, new, d)
}

// Sha256DiffSuppress
// if old is the hex-encoded sha256 sum of new, treat them as equal
func Sha256DiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.Sha256DiffSuppress(k, old, new, d)
}

func CaseDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.CaseDiffSuppress(k, old, new, d)
}

// Port range '80' and '80-80' is equivalent.
// `old` is read from the server and always has the full range format (e.g. '80-80', '1024-2048').
// `new` can be either a single port or a port range.
func PortRangeDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.PortRangeDiffSuppress(k, old, new, d)
}

// Single-digit hour is equivalent to hour with leading zero e.g. suppress diff 1:00 => 01:00.
// Assume either value could be in either format.
func Rfc3339TimeDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.Rfc3339TimeDiffSuppress(k, old, new, d)
}

// Suppress diffs for blocks where one version is completely unset and the other is set
// to an empty block. This might occur in situations where removing a block completely
// is impossible (if it's computed or part of an AtLeastOneOf), so instead the user sets
// its values to empty.
// NOTE: Using Optional + Computed is *strongly* preferred to this DSF, as it's
// more well understood and resilient to API changes.
func EmptyOrUnsetBlockDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	o, n := d.GetChange(strings.TrimSuffix(k, ".#"))
	return EmptyOrUnsetBlockDiffSuppressLogic(k, old, new, o, n)
}

// The core logic for EmptyOrUnsetBlockDiffSuppress, in a format that is more conducive
// to unit testing.
func EmptyOrUnsetBlockDiffSuppressLogic(k, old, new string, o, n interface{}) bool {
	if !strings.HasSuffix(k, ".#") {
		return false
	}
	var l []interface{}
	if old == "0" && new == "1" {
		l = n.([]interface{})
	} else if new == "0" && old == "1" {
		l = o.([]interface{})
	} else {
		// we don't have one set and one unset, so don't suppress the diff
		return false
	}

	contents, ok := l[0].(map[string]interface{})
	if !ok {
		return false
	}
	for _, v := range contents {
		if !isEmptyValue(reflect.ValueOf(v)) {
			return false
		}
	}
	return true
}

// Suppress diffs for values that are equivalent except for their use of the words "location"
// compared to "region" or "zone"
func LocationDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.LocationDiffSuppress(k, old, new, d)
}

func locationDiffSuppressHelper(a, b string) bool {
	return verify.LocationDiffSuppressHelper(a, b)
}

// For managed SSL certs, if new is an absolute FQDN (trailing '.') but old isn't, treat them as equals.
func AbsoluteDomainSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.AbsoluteDomainSuppress(k, old, new, d)
}

func TimestampDiffSuppress(format string) schema.SchemaDiffSuppressFunc {
	return verify.TimestampDiffSuppress(format)
}

// suppress diff when saved is Ipv4 format while new is required a reference
// this happens for an internal ip for Private Services Connect
func InternalIpDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.InternalIpDiffSuppress(k, old, new, d)
}

// Suppress diffs for duration format. ex "60.0s" and "60s" same
// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration
func DurationDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.DurationDiffSuppress(k, old, new, d)
}

// Use this method when the field accepts either an IP address or a
// self_link referencing a resource (such as google_compute_route's
// next_hop_ilb)
func CompareIpAddressOrSelfLinkOrResourceName(_, old, new string, _ *schema.ResourceData) bool {
	// if we can parse `new` as an IP address, then compare as strings
	if net.ParseIP(new) != nil {
		return new == old
	}

	// otherwise compare as self links
	return compareSelfLinkOrResourceName("", old, new, nil)
}

<% if version != "ga" -%>
// Suppress all diffs, used for Disk.Interface which is a nonfunctional field
func AlwaysDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.AlwaysDiffSuppress(k, old, new, d)
}
<% end -%>

// Use this method when subnet is optioanl and auto_create_subnetworks = true
// API sometimes choose a subnet so the diff needs to be ignored
func CompareOptionalSubnet(_, old, new string, _ *schema.ResourceData) bool {
	if isEmptyValue(reflect.ValueOf(new)) {
		return true
	}
	// otherwise compare as self links
	return compareSelfLinkOrResourceName("", old, new, nil)
}

// Suppress diffs in below cases
// "https://hello-rehvs75zla-uc.a.run.app/" -> "https://hello-rehvs75zla-uc.a.run.app"
// "https://hello-rehvs75zla-uc.a.run.app" -> "https://hello-rehvs75zla-uc.a.run.app/"
func LastSlashDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.LastSlashDiffSuppress(k, old, new, d)
}

// Suppress diffs when the value read from api
// has the project number instead of the project name
func ProjectNumberDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	return verify.ProjectNumberDiffSuppress(k, old, new, d)
}
