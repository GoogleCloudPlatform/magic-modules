<% autogen_exception -%>
package google

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
	"log"
	"os"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

const TestEnvVar = acctest.TestEnvVar

var TestAccProviders map[string]*schema.Provider
var testAccProvider *schema.Provider

// providerConfigEnvNames returns a list of all the environment variables that could be set by a user to configure the provider
func providerConfigEnvNames() []string {
	return acctest.ProviderConfigEnvNames()
}

var CredsEnvVars = acctest.CredsEnvVars

var projectNumberEnvVars = acctest.ProjectNumberEnvVars

var ProjectEnvVars = acctest.ProjectEnvVars

var firestoreProjectEnvVars = acctest.FirestoreProjectEnvVars

var regionEnvVars = acctest.RegionEnvVars

var zoneEnvVars = acctest.ZoneEnvVars

var orgEnvVars = acctest.OrgEnvVars

// This value is the Customer ID of the GOOGLE_ORG_DOMAIN workspace.
// See https://admin.google.com/ac/accountsettings when logged into an org admin for the value.
var custIdEnvVars = acctest.CustIdEnvVars

// This value is the username of an identity account within the GOOGLE_ORG_DOMAIN workspace.
// For example in the org example.com with a user "foo@example.com", this would be set to "foo".
// See https://admin.google.com/ac/users when logged into an org admin for a list.
var identityUserEnvVars = acctest.IdentityUserEnvVars

var orgEnvDomainVars = acctest.OrgEnvDomainVars

var serviceAccountEnvVars = acctest.ServiceAccountEnvVars

var orgTargetEnvVars = acctest.OrgTargetEnvVars

// This is the billing account that will be charged for the infrastructure used during testing. For
// that reason, it is also the billing account used for creating new projects.
var billingAccountEnvVars = acctest.BillingAccountEnvVars

// This is the billing account that will be modified to test billing-related functionality. It is
// expected to have more permissions granted to the test user and support subaccounts.
var masterBillingAccountEnvVars = acctest.MasterBillingAccountEnvVars

// This value is the description used for test PublicAdvertisedPrefix setup to avoid required DNS
// setup. This is only used during integration tests and would be invalid to surface to users
var papDescriptionEnvVars = acctest.PapDescriptionEnvVars

func init() {
	configs = make(map[string]*transport_tpg.Config)
	fwProviders = make(map[string]*frameworkTestProvider)
	sources = make(map[string]VcrSource)
	testAccProvider = Provider()
	TestAccProviders = map[string]*schema.Provider{
		"google": testAccProvider,
	}
}

func GoogleProviderConfig(t *testing.T) *transport_tpg.Config {
	configsLock.RLock()
	config, ok := configs[t.Name()]
	configsLock.RUnlock()
	if ok {
		return config
	}

	sdkProvider := Provider()
	rc := terraform.ResourceConfig{}
	sdkProvider.Configure(context.Background(), &rc)
	return sdkProvider.Meta().(*transport_tpg.Config)
}

func AccTestPreCheck(t *testing.T) {
	acctest.AccTestPreCheck(t)
}

// GetTestRegion has the same logic as the provider's getRegion, to be used in tests.
func GetTestRegion(is *terraform.InstanceState, config *transport_tpg.Config) (string, error) {
	if res, ok := is.Attributes["region"]; ok {
		return res, nil
	}
	if config.Region != "" {
		return config.Region, nil
	}
	return "", fmt.Errorf("%q: required field is not set", "region")
}

// GetTestProject has the same logic as the provider's getProject, to be used in tests.
func GetTestProject(is *terraform.InstanceState, config *transport_tpg.Config) (string, error) {
	if res, ok := is.Attributes["project"]; ok {
		return res, nil
	}
	if config.Project != "" {
		return config.Project, nil
	}
	return "", fmt.Errorf("%q: required field is not set", "project")
}

// AccTestPreCheck ensures at least one of the project env variables is set.
func GetTestProjectNumberFromEnv() string {
	return MultiEnvSearch(projectNumberEnvVars)
}

// AccTestPreCheck ensures at least one of the project env variables is set.
func GetTestProjectFromEnv() string {
	return MultiEnvSearch(ProjectEnvVars)
}

// AccTestPreCheck ensures at least one of the credentials env variables is set.
func GetTestCredsFromEnv() string {
	// Return empty string if GOOGLE_USE_DEFAULT_CREDENTIALS is set to true.
	if MultiEnvSearch(CredsEnvVars) == "true" {
		return ""
	}
	return MultiEnvSearch(CredsEnvVars)
}

// AccTestPreCheck ensures at least one of the region env variables is set.
func GetTestRegionFromEnv() string {
	return MultiEnvSearch(regionEnvVars)
}

func GetTestZoneFromEnv() string {
	return MultiEnvSearch(zoneEnvVars)
}

func GetTestCustIdFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, custIdEnvVars...)
	return MultiEnvSearch(custIdEnvVars)
}

func GetTestIdentityUserFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, identityUserEnvVars...)
	return MultiEnvSearch(identityUserEnvVars)
}

// Firestore can't be enabled at the same time as Datastore, so we need a new
// project to manage it until we can enable Firestore programmatically.
func GetTestFirestoreProjectFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, firestoreProjectEnvVars...)
	return MultiEnvSearch(firestoreProjectEnvVars)
}

// Returns the raw organization id like 1234567890, skipping the test if one is
// not found.
func GetTestOrgFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, orgEnvVars...)
	return MultiEnvSearch(orgEnvVars)
}

// Alternative to GetTestOrgFromEnv that doesn't need *testing.T
// If using this, you need to process unset values at the call site
func UnsafeGetTestOrgFromEnv() string {
	return MultiEnvSearch(orgEnvVars)
}

func GetTestOrgDomainFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, orgEnvDomainVars...)
	return MultiEnvSearch(orgEnvDomainVars)
}

func GetTestOrgTargetFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, orgTargetEnvVars...)
	return MultiEnvSearch(orgTargetEnvVars)
}

// This is the billing account that will be charged for the infrastructure used during testing. For
// that reason, it is also the billing account used for creating new projects.
func GetTestBillingAccountFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, billingAccountEnvVars...)
	return MultiEnvSearch(billingAccountEnvVars)
}

// This is the billing account that will be modified to test billing-related functionality. It is
// expected to have more permissions granted to the test user and support subaccounts.
func GetTestMasterBillingAccountFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, masterBillingAccountEnvVars...)
	return MultiEnvSearch(masterBillingAccountEnvVars)
}

func GetTestServiceAccountFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, serviceAccountEnvVars...)
	return MultiEnvSearch(serviceAccountEnvVars)
}

func GetTestPublicAdvertisedPrefixDescriptionFromEnv(t *testing.T) string {
	SkipIfEnvNotSet(t, papDescriptionEnvVars...)
	return MultiEnvSearch(papDescriptionEnvVars)
}

// Some tests fail during VCR. One common case is race conditions when creating resources.
// If a test config adds two fine-grained resources with the same parent it is undefined
// which will be created first, causing VCR to fail ~50% of the time
func SkipIfVcr(t *testing.T) {
	if isVcrEnabled() {
		t.Skipf("VCR enabled, skipping test: %s", t.Name())
	}
}

func SleepInSecondsForTest(t int) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		time.Sleep(time.Duration(t) * time.Second)
		return nil
	}
}

func SkipIfEnvNotSet(t *testing.T, envs ...string) {
	if t == nil {
		log.Printf("[DEBUG] Not running inside of test - skip skipping")
		return
	}

	for _, k := range envs {
		if os.Getenv(k) == "" {
			log.Printf("[DEBUG] Warning - environment variable %s is not set - skipping test %s", k, t.Name())
			t.Skipf("Environment variable %s is not set", k)
		}
	}
}
