<% autogen_exception -%>
package google

import (
    "context"
    "fmt"
    "net/http"
    "os"
    "time"

    "github.com/hashicorp/terraform-plugin-framework/datasource"
    "github.com/hashicorp/terraform-plugin-framework/path"
    "github.com/hashicorp/terraform-plugin-framework/provider"
    "github.com/hashicorp/terraform-plugin-framework/provider/metaschema"
    "github.com/hashicorp/terraform-plugin-framework/provider/schema"
    "github.com/hashicorp/terraform-plugin-framework/resource"
    "github.com/hashicorp/terraform-plugin-framework/schema/validator"
    "github.com/hashicorp/terraform-plugin-framework/types"
    "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"

    "google.golang.org/api/option"
)

// Ensure the implementation satisfies the expected interfaces
var (
    _ provider.ProviderWithMetaSchema = &frameworkProvider{}

    defaultClientScopes = []string{
        "https://www.googleapis.com/auth/cloud-platform",
        "https://www.googleapis.com/auth/userinfo.email",
    }
)

// New is a helper function to simplify provider server and testing implementation.
func New(version string) provider.ProviderWithMetaSchema {
    return &frameworkProvider{
        version: version,
    }
}

// frameworkProvider is the provider implementation.
type frameworkProvider struct{
    billingProject types.String
    client *http.Client
    context context.Context
    gRPCLoggingOptions []option.ClientOption
    pollInterval time.Duration
    project types.String
    region string
    requestBatcherIam *RequestBatcher
    requestBatcherServiceUsage *RequestBatcher
    scopes []string
    userAgent string
    userProjectOverride bool
    version string

    // paths for client setup
    <% products.each do |product| -%>
    <%= product[:definitions].name -%>BasePath string
    <% end -%>
}

// Metadata returns the provider type name.
func (p *frameworkProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
    resp.TypeName = "google"
    resp.Version = p.version
}

// MetaSchema returns the provider meta schema.
func (p *frameworkProvider) MetaSchema(_ context.Context, _ provider.MetaSchemaRequest, resp *provider.MetaSchemaResponse) {
    resp.Schema = metaschema.Schema{
        Attributes: map[string]metaschema.Attribute{
            "module_name": metaschema.StringAttribute{
                Optional: true,
            },
        },
    }
}

// Schema defines the provider-level schema for configuration data.
func (p *frameworkProvider) Schema(_ context.Context, _ provider.SchemaRequest, resp *provider.SchemaResponse) {
    resp.Schema = schema.Schema{
        Attributes: map[string]schema.Attribute{
            "credentials": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    stringvalidator.ConflictsWith(path.Expressions{
                        path.MatchRoot("access_token"),
                    }...),
                    CredentialsValidator(),
                },
            },
            "access_token": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    stringvalidator.ConflictsWith(path.Expressions{
                        path.MatchRoot("credentials"),
                    }...),
                },
            },
            "impersonate_service_account": schema.StringAttribute{
                Optional: true,
            },
            "impersonate_service_account_delegates": schema.ListAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "project": schema.StringAttribute{
                Optional: true,
            },
            "billing_project": schema.StringAttribute{
                Optional: true,
            },
            "region": schema.StringAttribute{
                Optional: true,
            },
            "zone": schema.StringAttribute{
                Optional: true,
            },
            "scopes": schema.ListAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "user_project_override": schema.BoolAttribute{
                Optional: true,
            },
            "request_timeout": schema.StringAttribute{
                Optional: true,
            },
            "request_reason": schema.StringAttribute{
                Optional: true,
            },

            // Generated Products
            <% products.each do |product| -%>
            "<%= product[:definitions].name.underscore -%>_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            <% end -%>

            // Handwritten Products / Versioned / Atypical Entries
            "cloud_billing_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "composer_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "container_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "dataflow_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "iam_credentials_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "resource_manager_v3_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            <% unless version == "ga" -%>
            "runtimeconfig_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            <% end -%>
            "iam_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "service_networking_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "tags_location_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },

            // dcl
            "container_aws_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
            "container_azure_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    CustomEndpointValidator(),
                },
            },
        },
        Blocks: map[string]schema.Block{
            "batching": schema.ListNestedBlock{
                NestedObject: schema.NestedBlockObject{
                    Attributes: map[string]schema.Attribute{
                        "send_after": schema.StringAttribute{
                            Optional: true,
                            Validators: []validator.String{
                                NonNegativeDurationValidator(),
                            },
                        },
                        "enable_batching": schema.BoolAttribute{
                            Optional: true,
                        },
                    },
                },
            },
        },
    }

    configureDCLFrameworkProvider(&resp.Schema)
}

// Configure prepares an API client for data sources and resources.
func (p *frameworkProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
    var data ProviderModel

    resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

    if resp.Diagnostics.HasError() {
        return
    }

    // Configuration values are now available.

    // Set defaults if needed
    p.HandleDefaults(ctx, &data, &resp.Diagnostics)
    if resp.Diagnostics.HasError() {
        return
    }

    
    // Handle User Agent string
    p.userAgent = CompileUserAgentString("terraform-provider-google<%= "-" + version unless version == 'ga'  -%>", req.TerraformVersion, p.version)
    // opt in extension for adding to the User-Agent header
    if ext := os.Getenv("GOOGLE_TERRAFORM_USERAGENT_EXTENSION"); ext != "" {
        ua := p.userAgent
        p.userAgent = fmt.Sprintf("%s %s", ua, ext)
    }

    // Set up client configuration
    p.SetupClient(ctx, data, &resp.Diagnostics)
    if resp.Diagnostics.HasError() {
        return
    }

    // gRPC Logging setup
    p.SetupGrpcLogging()

    // Handle Batching Config
    batchingConfig := GetBatchingConfig(ctx, data.Batching, &resp.Diagnostics)
    if resp.Diagnostics.HasError() {
        return
    }

    // Setup Base Paths for clients
    // Generated products
    <% products.map.each do |product| -%>
    p.<%= product[:definitions].name -%>BasePath = data.<%= product[:definitions].name -%>CustomEndpoint.ValueString()
    <% end -%>

    p.context = ctx
    p.region = data.Region.String()
    p.pollInterval = 10 * time.Second
    p.project = data.Project
    p.requestBatcherServiceUsage = NewRequestBatcher("Service Usage", ctx, batchingConfig)
    p.requestBatcherIam = NewRequestBatcher("IAM", ctx, batchingConfig)

    // Example client configuration for data sources and resources
    resp.DataSourceData = p
    resp.ResourceData = p
}


// DataSources defines the data sources implemented in the provider.
func (p *frameworkProvider) DataSources(_ context.Context) []func() datasource.DataSource {
    return []func() datasource.DataSource{
        NewGoogleDnsRecordSetDataSource,
    }
}

// Resources defines the resources implemented in the provider.
func (p *frameworkProvider) Resources(_ context.Context) []func() resource.Resource {
    return nil
}
