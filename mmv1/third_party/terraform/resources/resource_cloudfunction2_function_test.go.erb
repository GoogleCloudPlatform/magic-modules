<% autogen_exception -%>
package google
<% unless version == 'ga' -%>

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccCloudFunctions2Function_update(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"zip_path":      "./test-fixtures/cloudfunctions2/function-source.zip",
		"random_suffix": randString(t, 10),
	}

	vcrTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProvidersOiCS,
		CheckDestroy: testAccCheckCloudfunctions2functionDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccCloudfunctions2function_basic(context),
			},
			{
				ResourceName:            "google_cloudfunctions2_function.terraform-test2",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "build_config.0.source.0.storage_source.0.object", "build_config.0.source.0.storage_source.0.bucket"},
			},
			{
				Config: testAccCloudFunctions2Function_test_update(context),
			},
			{
				ResourceName:            "google_cloudfunctions2_function.terraform-test2",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "build_config.0.source.0.storage_source.0.object", "build_config.0.source.0.storage_source.0.bucket"},
			},
			{
				Config: testAccCloudFunctions2Function_test_redeploy(context),
			},
			{
				ResourceName:            "google_cloudfunctions2_function.terraform-test2",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"location", "build_config.0.source.0.storage_source.0.object", "build_config.0.source.0.storage_source.0.bucket"},
			},
		},
	})
}

func testAccCloudfunctions2function_basic(context map[string]interface{}) string {
	return Nprintf(`
resource "google_storage_bucket" "bucket" {
  provider = google-beta
  name     = "tf-test-cloudfunctions2-function-bucket%{random_suffix}"
  location = "US"
  uniform_bucket_level_access = true
}
 
resource "google_storage_bucket_object" "object" {
  provider = google-beta
  name   = "function-source.zip"
  bucket = google_storage_bucket.bucket.name
  source = "%{zip_path}"
}
 
resource "google_cloudfunctions2_function" "terraform-test2" {
  provider = google-beta
  name = "tf-test-test-function%{random_suffix}"
  location = "us-central1"
  description = "a new function"
 
  build_config {
    runtime = "nodejs12"
    entry_point = "helloHttp"
    source {
      storage_source {
        bucket = google_storage_bucket.bucket.name
        object = google_storage_bucket_object.object.name
      }
    }
  }
 
  service_config {
    max_instance_count  = 1
    available_memory    = "1536Mi"
    timeout_seconds     = 30
  }
}
`, context)
}

func testAccCloudFunctions2Function_test_update(context map[string]interface{}) string {
	return Nprintf(`
resource "google_storage_bucket" "bucket" {
  provider = google-beta
  name     = "tf-test-cloudfunctions2-function-bucket%{random_suffix}"
  location = "US"
  uniform_bucket_level_access = true
}
 
resource "google_storage_bucket_object" "object" {
  provider = google-beta
  name   = "function-source.zip"
  bucket = google_storage_bucket.bucket.name
  source = "%{zip_path}"
}
 
resource "google_cloudfunctions2_function" "terraform-test2" {
  provider = google-beta
  name = "tf-test-test-function%{random_suffix}"
  location = "us-central1"
  description = "an updated function"
 
  build_config {
    runtime = "nodejs12"
    entry_point = "helloHttp"
    source {
      storage_source {
        bucket = google_storage_bucket.bucket.name
        object = google_storage_bucket_object.object.name
      }
    }
  }
 
  service_config {
    max_instance_count  = 1
    available_memory    = "1536Mi"
    timeout_seconds     = 30
  }
}
`, context)
}

func testAccCloudFunctions2Function_test_redeploy(context map[string]interface{}) string {
	return Nprintf(`
resource "google_storage_bucket" "bucket" {
  provider = google-beta
  name     = "tf-test-cloudfunctions2-function-bucket%{random_suffix}"
  location = "US"
  uniform_bucket_level_access = true
}
 
resource "google_storage_bucket_object" "object" {
  provider = google-beta
  name   = "function-source.zip"
  bucket = google_storage_bucket.bucket.name
  source = "%{zip_path}"
}
 
resource "google_cloudfunctions2_function" "terraform-test2" {
  provider = google-beta
  name = "tf-test-test-function%{random_suffix}"
  location = "us-west1"
  description = "function test"
 
  build_config {
    runtime = "nodejs16"
    entry_point = "helloHttp"
    environment_variables = {
        BUILD_CONFIG_TEST = "build_test"
    }
    source {
      storage_source {
        bucket = google_storage_bucket.bucket.name
        object = google_storage_bucket_object.object.name
      }
    }
  }
 
  service_config {
    max_instance_count  = 5
    min_instance_count = 1
    available_memory    = "256M"
    timeout_seconds     = 60
    environment_variables = {
        SERVICE_CONFIG_TEST = "build_test"
    }
  }
}
`, context)
}

func TestAccCloudFunctions2Function_eventFiltering(t *testing.T) {
  t.Parallel()

  random_suffix := randString(t, 10)

  context := map[string]interface{}{
    "zip_path":        "./test-fixtures/cloudfunctions2/function-source-eventarc-gcs.zip",
    "random_suffix":   random_suffix,
    "project":         fmt.Sprintf("tf-test-%s", random_suffix),
    "org_id":          getTestOrgFromEnv(t),
    "billing_account": getTestBillingAccountFromEnv(t),
  }

  vcrTest(t, resource.TestCase{
    PreCheck:     func() { testAccPreCheck(t) },
    Providers:    testAccProvidersOiCS,
    CheckDestroy: testAccCheckCloudfunctions2functionDestroyProducer(t),
    Steps: []resource.TestStep{
      {
        Config: testAccCloudfunctions2function_eventFilteringProjectSetup(context),
      },
      {
        Config: testAccCloudfunctions2function_eventFilteringAddResources(context),
      },
    },
  })
}

func testAccCloudfunctions2function_eventFilteringProjectSetup(context map[string]interface{}) string {
  return Nprintf(`
resource "google_project" "project" {
  provider        = google-beta
  project_id      = "%{project}"
  name            = "%{project}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
}


# APIs need to be activated before resources can be created
resource "google_project_service" "iam" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "iam.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "cloudfunctions" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "cloudfunctions.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "eventarc" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "eventarc.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "run" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "run.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "artifactregistry" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "artifactregistry.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "cloudbuild" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "cloudbuild.googleapis.com"

  disable_dependent_services = true
}`, context)
}

func testAccCloudfunctions2function_eventFilteringAddResources(context map[string]interface{}) string {
  return Nprintf(`
resource "google_project" "project" {
  provider        = google-beta
  project_id      = "%{project}"
  name            = "%{project}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
}


# APIs need to be activated before resources can be created
resource "google_project_service" "iam" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "iam.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "cloudfunctions" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "cloudfunctions.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "eventarc" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "eventarc.googleapis.com"

  disable_dependent_services = false # Fix for issue when disabling Eventarc API
}

resource "google_project_service" "run" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "run.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "artifactregistry" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "artifactregistry.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "cloudbuild" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "cloudbuild.googleapis.com"

  disable_dependent_services = true
}

resource "google_project_service" "pubsub" {
  provider     = google-beta
  project      = google_project.project.project_id
  service      = "pubsub.googleapis.com"

  disable_dependent_services = true
}

resource "google_service_account" "account" {
  provider = google-beta
  project = google_project.project.project_id
  account_id = "tf-test-sa-%{random_suffix}"
  display_name = "Test Service Account - used for both the cloud function and eventarc trigger in the test"
}

resource "google_storage_bucket" "source-bucket" {
  provider = google-beta
  project = google_project.project.project_id
  name     = "tf-test-source-bucket-%{random_suffix}"
  location = "US"
  uniform_bucket_level_access = true
}
 
resource "google_storage_bucket_object" "object" {
  provider = google-beta
  name   = "function-source.zip"
  bucket = google_storage_bucket.source-bucket.name
  source = "%{zip_path}"  # Add path to the zipped function source code
}

resource "google_storage_bucket" "trigger-bucket" {
  provider = google-beta
  project  = google_project.project.project_id
  name     = "tf-test-trigger-bucket-%{random_suffix}"
  location = "us-central1" # The trigger must be in the same location as the bucket
  uniform_bucket_level_access = true
}

data "google_storage_project_service_account" "gcs_account" {
  provider = google-beta
  project = google_project.project.project_id
}

# To use GCS CloudEvent triggers, the GCS service account requires the Pub/Sub Publisher(roles/pubsub.publisher) IAM role in the specified project.
# (See https://cloud.google.com/eventarc/docs/run/quickstart-storage#before-you-begin)
resource "google_project_iam_member" "gcs-pubsub-publishing" {
  provider = google-beta
  project  = google_project.project.project_id # Required argument
  role     = "roles/pubsub.publisher"
  member   = "serviceAccount:${data.google_storage_project_service_account.gcs_account.email_address}"
}

# Permissions on the service account for the function and Eventarc trigger
resource "google_project_iam_member" "invoking" {
  provider = google-beta
  project  = google_project.project.project_id # Required argument
  role     = "roles/run.invoker"
  member   = "serviceAccount:${google_service_account.account.email}"
}

resource "google_project_iam_member" "event-receiving" {
  provider = google-beta
  project = google_project.project.project_id # Required argument
  role    = "roles/eventarc.eventReceiver"
  member  = "serviceAccount:${google_service_account.account.email}"
}

resource "google_project_iam_member" "artifactregistry-reader" {
  provider = google-beta
  project  = google_project.project.project_id # Required argument
  role     = "roles/artifactregistry.reader"
  member   = "serviceAccount:${google_service_account.account.email}"
}

resource "google_cloudfunctions2_function" "tf-test-function-%{random_suffix}" {
  provider    = google-beta
  depends_on = [
    google_project_iam_member.event-receiving,
    google_project_iam_member.artifactregistry-reader,
  ]
  project     = google_project.project.project_id
  name        = "tf-test-function-%{random_suffix}"
  location    = "us-central1"
  description = "a new function"
 
  build_config {
    runtime     = "nodejs12"
    entry_point = "entryPoint" # Set the entry point 
    environment_variables = {
      BUILD_CONFIG_TEST = "build_test"
    }
    source {
      storage_source {
        bucket = google_storage_bucket.source-bucket.name
        object = google_storage_bucket_object.object.name
      }
    }
  }
 
  service_config {
    max_instance_count  = 3
    min_instance_count = 1
    available_memory    = "256M"
    timeout_seconds     = 60
    environment_variables = {
        SERVICE_CONFIG_TEST = "config_test"
    }
    ingress_settings = "ALLOW_INTERNAL_ONLY"
    all_traffic_on_latest_revision = true
    service_account_email = google_service_account.account.email
  }

  event_trigger {
    trigger_region = "us-central1" # The trigger must be in the same location as the bucket
    event_type = "google.cloud.storage.object.v1.finalized"
    retry_policy = "RETRY_POLICY_RETRY"
    service_account_email = google_service_account.account.email
    event_filters {
      attribute = "bucket"
      value = google_storage_bucket.trigger-bucket.name
    }
  }
}
`, context)
}

<% end -%>
