<% autogen_exception -%>
package google
<% unless version == 'ga' -%>
import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google/google/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

func TestAccGkeonpremVmwareNodePool_vmwareNodePoolUpdate(t *testing.T) {
  // TODO: https://github.com/hashicorp/terraform-provider-google/issues/14417
  t.Skip()

  t.Parallel()

  context := map[string]interface{}{}

  VcrTest(t, resource.TestCase{
    PreCheck:                 func() { AccTestPreCheck(t) },
    ProtoV5ProviderFactories: ProtoV5ProviderBetaFactories(t),
    CheckDestroy:             testAccCheckGkeonpremVmwareNodePoolDestroyProducer(t),
    Steps: []resource.TestStep{
      {
        Config: testAccGkeonpremVmwareNodePool_vmwareNodePoolUpdateStart(context),
      },
      {
        ResourceName:      "google_gkeonprem_vmware_node_pool.nodepool",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGkeonpremVmwareNodePool_vmwareNodePoolUpdate(context),
      },
      {
        ResourceName:      "google_gkeonprem_vmware_node_pool.nodepool",
        ImportState:       true,
        ImportStateVerify: true,
      },
    },
  })
}

func testAccGkeonpremVmwareNodePool_vmwareNodePoolUpdateStart(context map[string]interface{}) string {
  return Nprintf(`

  resource "google_gkeonprem_vmware_cluster" "cluster" {
    provider = google-beta  
    name = "cluster"
    location = "us-west1"
    admin_cluster_membership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test"
    description = "test cluster"
    on_prem_version = "1.13.1-gke.35"
    annotations = {}
    network_config {
      service_address_cidr_blocks = ["10.96.0.0/12"]
      pod_address_cidr_blocks = ["192.168.0.0/16"]
      dhcp_ip_config {
        enabled = true
      }
    }
    control_plane_node {
       cpus = 4
       memory = 8192
       replicas = 1
    }
    load_balancer {
      vip_config {
        control_plane_vip = "10.251.133.5"
        ingress_vip = "10.251.135.19"
      }
      metal_lb_config {
        address_pools {
          pool = "ingress-ip"
          manual_assign = "true"
          addresses = ["10.251.135.19"]
          avoid_buggy_ips = true
        }
        address_pools {
          pool = "lb-test-ip"
          manual_assign = "true"
          addresses = ["10.251.135.19"]
          avoid_buggy_ips = true
        }
      }
    }
  }

  resource "google_gkeonprem_vmware_node_pool" "nodepool" {
    provider = google-beta
    location = "us-west1"
    name = "nodepool"
    vmware_cluster = google_gkeonprem_vmware_cluster.cluster.name
    annotations = {}
    config {
        cpus = 4
        memory_mb = 8196
        replicas = 3
        image_type = "ubuntu_containerd"
        image = "image"
        boot_disk_size_gb = 10
        taints {
            key = "key"
            value = "value"
        }
        labels = {}
        enable_load_balancer = true
    }
    node_pool_autoscaling {
        min_replicas = 1
        max_replicas = 5
    }
  }
`, context)
}

func testAccGkeonpremVmwareNodePool_vmwareNodePoolUpdate(context map[string]interface{}) string {
  return Nprintf(`

  resource "google_gkeonprem_vmware_cluster" "cluster" {
    provider = google-beta  
    name = "cluster"
    location = "us-west1"
    admin_cluster_membership = "projects/870316890899/locations/global/memberships/gkeonprem-terraform-test"
    description = "test cluster"
    on_prem_version = "1.13.1-gke.35"
    annotations = {}
    network_config {
      service_address_cidr_blocks = ["10.96.0.0/12"]
      pod_address_cidr_blocks = ["192.168.0.0/16"]
      dhcp_ip_config {
        enabled = true
      }
    }
    control_plane_node {
       cpus = 4
       memory = 8192
       replicas = 1
    }
    load_balancer {
      vip_config {
        control_plane_vip = "10.251.133.5"
        ingress_vip = "10.251.135.19"
      }
      metal_lb_config {
        address_pools {
          pool = "ingress-ip"
          manual_assign = "true"
          addresses = ["10.251.135.19"]
          avoid_buggy_ips = true
        }
        address_pools {
          pool = "lb-test-ip"
          manual_assign = "true"
          addresses = ["10.251.135.19"]
          avoid_buggy_ips = true
        }
      }
    }
  }

  resource "google_gkeonprem_vmware_node_pool" "nodepool" {
    provider = google-beta
    location = "us-west1"
    name = "nodepool"
    vmware_cluster = google_gkeonprem_vmware_cluster.cluster.name
    annotations = {}
    config {
        cpus = 5
        memory_mb = 4096
        replicas = 3
        image_type = "windows"
        image = "image-updated"
        boot_disk_size_gb = 12
        taints {
            key = "key-updated"
            value = "value-updated"
        }
        labels = {}
        enable_load_balancer = false
    }
    node_pool_autoscaling {
        min_replicas = 2
        max_replicas = 6
    }
  }
`, context)
}

func testAccCheckGkeonpremVmwareNodePoolDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_gkeonprem_vmware_node_pool" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{GkeonpremBasePath}}projects/{{project}}/locations/{{location}}/vmwareClusters/{{vmware_cluster}}/vmwareNodePools/{{name}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("GkeonpremVmwareNodePool still exists at %s", url)
			}
		}

		return nil
	}
}

<% end -%>