<% autogen_exception -%>
package google
<% unless version == 'ga' -%>

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
  gkehub "github.com/GoogleCloudPlatform/declarative-resource-client-library/services/google/gkehub/beta"
)

func TestAccGKEHubFeature_gkehubFeatureMciUpdate(t *testing.T) {
  t.Parallel()

  context := map[string]interface{}{
    "random_suffix":   randString(t, 10),
    "org_id":          getTestOrgFromEnv(t),
    "billing_account": getTestBillingAccountFromEnv(t),
  }

  vcrTest(t, resource.TestCase{
    PreCheck:  func() { testAccPreCheck(t) },
    Providers: testAccProvidersOiCS,
    ExternalProviders: map[string]resource.ExternalProvider{
      "random": {},
    },
    CheckDestroy: testAccCheckGKEHubFeatureDestroyProducer(t),
    Steps: []resource.TestStep{
      {
        Config: testAccGKEHubFeature_gkehubFeatureMciUpdateStart(context),
      },
      {
        ResourceName:      "google_gkehub_feature.feature",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGKEHubFeature_gkehubFeatureMciUpdateEnd(context),
      },
      {
        ResourceName:      "google_gkehub_feature.feature",
        ImportState:       true,
        ImportStateVerify: true,
      },
    },
  })
}

func testAccGKEHubFeature_gkehubFeatureMciUpdateStart(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`

resource "google_container_cluster" "primary" {
  name               = "tf-test%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  project = google_project.project.project_id
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "secondary" {
  name               = "tf-test2%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  project = google_project.project.project_id
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  membership_id = "tf-test%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  project = google_project.project.project_id
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_second" {
  membership_id = "tf-test2%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.secondary.id}"
    }
  }
  description = "test resource."
  project = google_project.project.project_id
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  name = "multiclusteringress"
  location = "global"
  spec {
    multiclusteringress {
      config_membership = google_gke_hub_membership.membership.id
   }
  }
  project = google_project.project.project_id
  provider = google-beta
}
`, context)
}

func testAccGKEHubFeature_gkehubFeatureMciUpdateEnd(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`
resource "google_container_cluster" "primary" {
  name               = "tf-test%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  project = google_project.project.project_id
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "secondary" {
  name               = "tf-test2%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  project = google_project.project.project_id
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  membership_id = "tf-test%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  project = google_project.project.project_id
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_second" {
  membership_id = "tf-test2%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.secondary.id}"
    }
  }
  description = "test resource."
  project = google_project.project.project_id
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  name = "multiclusteringress"
  location = "global"
  spec {
    multiclusteringress {
      config_membership = google_gke_hub_membership.membership_second.id
    }
  }
  labels = {
    foo = "bar"
  }
  project = google_project.project.project_id
  provider = google-beta
}
`, context)
}

func TestAccGKEHubFeature_gkehubFeatureAcmUpdate(t *testing.T) {
  // Multiple fine-grained resources cause VCR to fail
  skipIfVcr(t)
  t.Parallel()

  context := map[string]interface{}{
    "random_suffix":   randString(t, 10),
    "org_id":          getTestOrgFromEnv(t),
    "billing_account": getTestBillingAccountFromEnv(t),
  }

  vcrTest(t, resource.TestCase{
    PreCheck:  func() { testAccPreCheck(t) },
    Providers: testAccProvidersOiCS,
    ExternalProviders: map[string]resource.ExternalProvider{
      "random": {},
    },
    CheckDestroy: testAccCheckGKEHubFeatureDestroyProducer(t),
    Steps: []resource.TestStep{
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmUpdateStart(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test1%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test2%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member_1",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmUpdateMiddle(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test1%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test2%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member_2",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmUpdateMiddle2(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipNotPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test1%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test2%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test3%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member_3",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmUpdateEnd(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipNotPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test2%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipNotPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("basic1%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test3%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member_3",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmUpdateMiddle2(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipNotPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test1%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test2%s", context["random_suffix"])),
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test3%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member_3",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member_2",
        ImportState:       true,
        ImportStateVerify: true,
      },
    },
  })
}

func testAccGKEHubFeature_gkehubFeatureAcmUpdateStart(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`
resource "google_container_cluster" "primary" {
  name               = "basiccluster%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  project = google_project.project.project_id
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "secondary" {
  name               = "basiccluster2%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  project = google_project.project.project_id
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "tertiary" {
  name               = "basiccluster3%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  project = google_project.project.project_id
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  project = google_project.project.project_id
  membership_id = "tf-test1%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_second" {
  project = google_project.project.project_id
  membership_id = "tf-test2%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.secondary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_third" {
  project = google_project.project.project_id
  membership_id = "tf-test3%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.tertiary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  project = google_project.project.project_id
  name = "configmanagement"
  location = "global"

  labels = {
    foo = "bar"
  }
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gkehub_feature_membership" "feature_member_1" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership.membership_id
  configmanagement {
    version = "1.6.2"
    config_sync {
      source_format = "hierarchy"
      git {
        sync_repo = "https://github.com/GoogleCloudPlatform/magic-modules"
      }
    }
  }
  provider = google-beta
}

resource "google_gkehub_feature_membership" "feature_member_2" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership_second.membership_id
  configmanagement {
    version = "1.6.1"
    config_sync {
      source_format = "hierarchy"
      git {
        sync_repo = "https://github.com/terraform-providers/terraform-provider-google"
      }
    }
  }
  provider = google-beta
}
`, context)
}

func testAccGKEHubFeature_gkehubFeatureAcmUpdateMiddle(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`
resource "google_container_cluster" "primary" {
  project = google_project.project.project_id
  name               = "basiccluster%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "secondary" {
  project = google_project.project.project_id
  name               = "basiccluster2%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "tertiary" {
  project = google_project.project.project_id
  name               = "basiccluster3%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  project = google_project.project.project_id
  membership_id = "tf-test1%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_second" {
  project = google_project.project.project_id
  membership_id = "tf-test2%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.secondary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_third" {
  project = google_project.project.project_id
  membership_id = "tf-test3%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.tertiary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  project = google_project.project.project_id
  name = "configmanagement"
  location = "global"

  labels = {
    foo = "changed"
  }
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gkehub_feature_membership" "feature_member_1" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership.membership_id
  configmanagement {
    version = "1.6.2"
    config_sync {
      source_format = "hierarchy"
      git {
        sync_repo = "https://github.com/GoogleCloudPlatform/magic-modules"
      }
    }
  }
  provider = google-beta
}

resource "google_gkehub_feature_membership" "feature_member_2" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership_second.membership_id
  configmanagement {
    version = "1.6.1"
    config_sync {
      source_format = "hierarchy"
      git {
        sync_repo = "https://github.com/terraform-providers/terraform-provider-google-beta"
      }
    }
    policy_controller {
      enabled = true
      audit_interval_seconds = "10"
      exemptable_namespaces = ["asdf", "1234"]
      template_library_installed = true
    }
  }
  provider = google-beta
}
`, context)
}

func testAccGKEHubFeature_gkehubFeatureAcmUpdateMiddle2(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`
resource "google_container_cluster" "primary" {
  project = google_project.project.project_id
  name               = "basiccluster%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "secondary" {
  project = google_project.project.project_id
  name               = "basiccluster2%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "tertiary" {
  project = google_project.project.project_id
  name               = "basiccluster3%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  project = google_project.project.project_id
  membership_id = "tf-test1%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_second" {
  project = google_project.project.project_id
  membership_id = "tf-test2%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.secondary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_third" {
  project = google_project.project.project_id
  membership_id = "tf-test3%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.tertiary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  project = google_project.project.project_id
  name = "configmanagement"
  location = "global"

  labels = {
    foo = "changed"
  }
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gkehub_feature_membership" "feature_member_2" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership_second.membership_id
  configmanagement {
    version = "1.6.2"
    config_sync {
      source_format = "unstructured"
      git {
        sync_repo = "https://github.com/terraform-providers/terraform-provider-google-beta"
      }
    }
    policy_controller {
      enabled = true
      audit_interval_seconds = "9"
      exemptable_namespaces = ["different", "1234"]
      template_library_installed = false
    }
    hierarchy_controller {
      enable_hierarchical_resource_quota = true
      enable_pod_tree_labels = false
      enabled = true
    }
  }
  provider = google-beta
}

resource "google_gkehub_feature_membership" "feature_member_3" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership_third.membership_id
  configmanagement {
    version = "1.6.2"
    config_sync {
      source_format = "hierarchy"
      git {
        sync_repo = "https://github.com/hashicorp/terraform"
      }
    }
    policy_controller {
      enabled = false
      audit_interval_seconds = "100"
      exemptable_namespaces = ["onetwothree", "fourfive"]
      template_library_installed = true
    }
    hierarchy_controller {
      enable_hierarchical_resource_quota = false
      enable_pod_tree_labels = true
      enabled = false
    }
  }
  provider = google-beta
}
`, context)
}

func testAccGKEHubFeature_gkehubFeatureAcmUpdateEnd(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`
resource "google_container_cluster" "primary" {
  project = google_project.project.project_id
  name               = "basiccluster%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "secondary" {
  project = google_project.project.project_id
  name               = "basiccluster2%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_container_cluster" "tertiary" {
  project = google_project.project.project_id
  name               = "basiccluster3%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  project = google_project.project.project_id
  membership_id = "tf-test1%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_second" {
  project = google_project.project.project_id
  membership_id = "tf-test2%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.secondary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gke_hub_membership" "membership_third" {
  project = google_project.project.project_id
  membership_id = "tf-test3%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.tertiary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  project = google_project.project.project_id
  name = "configmanagement"
  location = "global"

  labels = {
    foo = "changed"
  }
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gkehub_feature_membership" "feature_member_3" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership_third.membership_id
  configmanagement {
    version = "1.6.2"
    config_sync {
      source_format = "hierarchy"
      git {
        sync_repo = "https://github.com/hashicorp/terraform"
      }
    }
    policy_controller {
      enabled = false
      audit_interval_seconds = "100"
      exemptable_namespaces = ["onetwothree", "fourfive"]
      template_library_installed = true
    }
  }
  provider = google-beta
}
`, context)
}

func TestAccGKEHubFeature_gkehubFeatureAcmAllFields(t *testing.T) {
  t.Parallel()

  context := map[string]interface{}{
    "random_suffix":   randString(t, 10),
    "org_id":          getTestOrgFromEnv(t),
    "billing_account": getTestBillingAccountFromEnv(t),
  }

  vcrTest(t, resource.TestCase{
    PreCheck:  func() { testAccPreCheck(t) },
    Providers: testAccProvidersOiCS,
    ExternalProviders: map[string]resource.ExternalProvider{
      "random": {},
    },
    CheckDestroy: testAccCheckGKEHubFeatureDestroyProducer(t),
    Steps: []resource.TestStep{
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmFewFields(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test1%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmAllFields(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test1%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member",
        ImportState:       true,
        ImportStateVerify: true,
      },
      {
        Config: testAccGKEHubFeature_gkehubFeatureAcmFewFields(context),
        Check: resource.ComposeTestCheckFunc(
          testAccCheckGkeHubFeatureMembershipPresent(t, getTestProjectFromEnv(), "global", "configmanagement", fmt.Sprintf("tf-test1%s", context["random_suffix"])),
        ),
      },
      {
        ResourceName:      "google_gkehub_feature_membership.feature_member",
        ImportState:       true,
        ImportStateVerify: true,
      },
    },
  })
}

func testAccGKEHubFeature_gkehubFeatureAcmAllFields(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`
resource "google_container_cluster" "primary" {
  project = google_project.project.project_id
  name               = "basiccluster%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  project = google_project.project.project_id
  membership_id = "tf-test1%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  project = google_project.project.project_id
  name = "configmanagement"
  location = "global"

  labels = {
    foo = "bar"
  }
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gkehub_feature_membership" "feature_member" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership.membership_id
  configmanagement {
    version = "1.6.2"
    config_sync {
      git {
        sync_repo = "https://github.com/hashicorp/terraform"
        https_proxy = "https://example.com"
        policy_dir = "google/"
        sync_branch = "some-branch"
        sync_rev = "v3.60.0"
        sync_wait_secs = "30"
      }
    }
    policy_controller {
      enabled = true
      audit_interval_seconds = "100"
      exemptable_namespaces = ["onetwothree", "fourfive"]
      template_library_installed = true
      referential_rules_enabled = true
      log_denies_enabled = true
    }
  }
  provider = google-beta
}
`, context)
}

func testAccGKEHubFeature_gkehubFeatureAcmFewFields(context map[string]interface{}) string {
  return projectSetup(context) + Nprintf(`
resource "google_container_cluster" "primary" {
  project = google_project.project.project_id
  name               = "basiccluster%{random_suffix}"
  location           = "us-central1-a"
  initial_node_count = 1
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_gke_hub_membership" "membership" {
  project = google_project.project.project_id
  membership_id = "tf-test1%{random_suffix}"
  endpoint {
    gke_cluster {
      resource_link = "//container.googleapis.com/${google_container_cluster.primary.id}"
    }
  }
  description = "test resource."
  provider = google-beta
}

resource "google_gkehub_feature" "feature" {
  project = google_project.project.project_id
  name = "configmanagement"
  location = "global"

  labels = {
    foo = "bar"
  }
  provider = google-beta
  depends_on = [google_project_service.mci, google_project_service.container, google_project_service.container, google_project_service.gkehub]
}

resource "google_service_account" "feature_sa" {
  project = google_project.project.project_id
  account_id = "feature-sa"
  provider = google-beta
}

resource "google_gkehub_feature_membership" "feature_member" {
  project = google_project.project.project_id
  location = "global"
  feature = google_gkehub_feature.feature.name
  membership = google_gke_hub_membership.membership.membership_id
  configmanagement {
    version = "1.6.2"
    config_sync {
      git {
        sync_repo = "https://github.com/hashicorp/terraform"
      }
    }
  }
  provider = google-beta
}
`, context)
}

func projectSetup(context map[string]interface{}) string {
  return Nprintf(`
resource "google_project" "project" {
  name            = "tf-test-gkehub%{random_suffix}"
  project_id      = "tf-test-gkehub%{random_suffix}"
  org_id          = "%{org_id}"
  billing_account = "%{billing_account}"
  provider        = google-beta
}

resource "google_project_service" "mci" {
  project = google_project.project.project_id
  service = "multiclusteringress.googleapis.com"
  provider = google-beta
}

resource "google_project_service" "mcsd" {
  project = google_project.project.project_id
  service = "multiclusterservicediscovery.googleapis.com"
  provider = google-beta
}

resource "google_project_service" "compute" {
  project = google_project.project.project_id
  service = "compute.googleapis.com"
  disable_on_destroy = false
  provider = google-beta
}

resource "google_project_service" "container" {
  project = google_project.project.project_id
  service = "container.googleapis.com"
  disable_on_destroy = false
  provider = google-beta
}

resource "google_project_service" "gkehub" {
  project = google_project.project.project_id
  service = "gkehub.googleapis.com"
  disable_on_destroy = false
  provider = google-beta
}
`, context)
}

func testAccCheckGKEHubFeatureDestroyProducer(t *testing.T) func(s *terraform.State) error {
  return func(s *terraform.State) error {
    for name, rs := range s.RootModule().Resources {
      if rs.Type != "google_gkehub_feature" {
        continue
      }
      if strings.HasPrefix(name, "data.") {
        continue
      }

      config := googleProviderConfig(t)

      url, err := replaceVarsForTest(config, rs, "{{GKEHubBasePath}}projects/{{project}}/locations/{{location}}/features/{{name}}")
      if err != nil {
        return err
      }

      billingProject := ""

      if config.BillingProject != "" {
        billingProject = config.BillingProject
      }

      _, err = sendRequest(config, "GET", billingProject, url, config.userAgent, nil)
      if err == nil {
        return fmt.Errorf("GKEHubFeature still exists at %s", url)
      }
    }

    return nil
  }
}

func testAccCheckGkeHubFeatureMembershipPresent(t *testing.T, project, location, feature, membership string) resource.TestCheckFunc {
  return func(s *terraform.State) error {
    config := googleProviderConfig(t)
    obj := &gkehub.FeatureMembership{
      Feature:    dcl.StringOrNil(feature),
      Location:   dcl.StringOrNil(location),
      Membership: dcl.StringOrNil(membership),
      Project:    dcl.String(project),
    }

    _, err := CreateGkeHubClient(config, "", "").GetFeatureMembership(context.Background(), obj)
    if err != nil {
      return err
    }
    return nil
  }
}

func testAccCheckGkeHubFeatureMembershipNotPresent(t *testing.T, project, location, feature, membership string) resource.TestCheckFunc {
  return func(s *terraform.State) error {
    config := googleProviderConfig(t)
    obj := &gkehub.FeatureMembership{
      Feature:    dcl.StringOrNil(feature),
      Location:   dcl.StringOrNil(location),
      Membership: dcl.StringOrNil(membership),
      Project:    dcl.String(project),
    }

    _, err := CreateGkeHubClient(config, "", "").GetFeatureMembership(context.Background(), obj)
    if err == nil {
      return fmt.Errorf("Did not expect to find GKE Feature Membership for projects/%s/locations/%s/features/%s/membershipId/%s", project, location, feature, membership)
    }
    if dcl.IsNotFound(err) {
      return nil
    }
    return err
  }
}
<% end -%>
