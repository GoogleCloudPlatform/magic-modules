<% autogen_exception -%>
package google
<% unless version == 'ga' -%>

import (
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

// Tests both PrivateCloud and Cluster data source. Because its very expensive to
// create PC and cluster, and PrivateCloud is required for Cluster and merging tests
// make sense here.
func TestAccDataSourceVmwareEnginePrivateCloudAndCluster_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"region":          "southamerica-west1",
		"random_suffix":   RandString(t, 10),
		"organization":    acctest.GetTestOrgFromEnv(t),
		"billing_account": acctest.GetTestBillingAccountFromEnv(t),
	}

	VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckVmwareengineClusterDestroyProducer(t),
    ExternalProviders: map[string]resource.ExternalProvider{
			"time":   {},
		},
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceVmwareEngineClusterConfig(context),
				Check: resource.ComposeTestCheckFunc(
					acctest.CheckDataSourceStateMatchesResourceStateWithIgnores("data.google_vmwareengine_cluster.ds", "google_vmwareengine_cluster.cls", map[string]struct{}{}),
          acctest.CheckDataSourceStateMatchesResourceStateWithIgnores("data.google_vmwareengine_private_cloud.ds", "google_vmwareengine_private_cloud.pc", map[string]struct{}{}),
				),
			},
		},
	})
}

func testAccDataSourceVmwareEngineClusterConfig(context map[string]interface{}) string {
	return Nprintf(`

# there can be only 1 Legacy network per region for a given project, so creating new project to isolate tests.
resource "google_project" "acceptance" {
  name            = "tf-test-%{random_suffix}"
  provider        = google-beta
  project_id      = "tf-test-%{random_suffix}"
  org_id          = "%{organization}"
  billing_account = "%{billing_account}"
}

resource "google_project_service" "acceptance" {
  project  = google_project.acceptance.project_id
  provider = google-beta
  service  = "vmwareengine.googleapis.com"

  # Needed for CI tests for permissions to propagate, should not be needed for actual usage
  depends_on = [time_sleep.wait_60_seconds]
}

resource "time_sleep" "wait_60_seconds" {
  depends_on = [google_project.acceptance]

  create_duration = "60s"
}

resource "google_vmwareengine_network" "default-nw" {
  name              = "%{region}-default"
  project           = google_project_service.acceptance.project
  provider 		      = google-beta
  location          = "%{region}"
  type              = "LEGACY"
}

resource "google_vmwareengine_private_cloud" "pc" {
  location = "%{region}-a"
  project  = google_project_service.acceptance.project
  name = "tf-test-sample-pc%{random_suffix}"
  provider = google-beta
  description = ""
  network_config {
    management_cidr = "192.168.30.0/24"
    vmware_engine_network = google_vmwareengine_network.default-nw.id
  }

  management_cluster {
    cluster_id = "tf-test-sample-mgmt-cluster%{random_suffix}"
    node_type_configs {
      node_type_id = "standard-72"
      node_count = 3
    }
  }
}

resource "google_vmwareengine_cluster" "cls" {
  name = "tf-test-ext-cluster%{random_suffix}"
	provider = google-beta
  parent =  google_vmwareengine_private_cloud.pc.id
  node_type_configs {
    node_type_id = "standard-72"
    node_count = 3
    custom_core_count = 32
  }
}

data "google_vmwareengine_cluster" ds {
  name = "tf-test-ext-cluster%{random_suffix}"
	provider = google-beta
	parent = google_vmwareengine_private_cloud.pc.id
	depends_on = [
    google_vmwareengine_cluster.cls,
  ]
}

data "google_vmwareengine_private_cloud" ds {
	location = "%{region}-a"
	provider = google-beta
  name = "tf-test-sample-pc%{random_suffix}"
	depends_on = [
   	google_vmwareengine_private_cloud.pc,
  ]
}
`, context)
}
<% end -%>