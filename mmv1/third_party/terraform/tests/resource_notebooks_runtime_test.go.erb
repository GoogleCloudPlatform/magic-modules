<% autogen_exception -%>
package google

<% unless version == 'ga' %>

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
)

func TestAccNotebooksRuntime_basic(t *testing.T) {
	t.Parallel()

	prefix := fmt.Sprintf("%d", randInt(t))
	name := fmt.Sprintf("tf-%s", prefix)

	vcrTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccNotebooksRuntime_basic(name),
			},
			{
				ResourceName:            "google_notebooks_runtime.runtime",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"virtual_machine", "metadata"},
			},
		},
	})
}

func TestAccNotebooksRuntime_full(t *testing.T) {
	t.Parallel()

	prefix := fmt.Sprintf("%d", randInt(t))
	name := fmt.Sprintf("tf-%s", prefix)

	vcrTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccNotebooksRuntime_full(name),
			},
			{
				ResourceName:            "google_notebooks_runtime.runtime_full",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"virtual_machine", "metadata"},
			},
		},
	})
}

func testAccNotebooksRuntime_basic(name string) string {
	return fmt.Sprintf(`
resource "google_notebooks_runtime" "runtime" {
  name = "%s"
  location = "us-central1"
  access_config {
    access_type = "SINGLE_USER"
    runtime_owner = "admin@hashicorptest.com"
  }
  virtual_machine {
    virtual_machine_config {
      machine_type = "n1-standard-4"
      data_disk {
        initialize_params {
          disk_size_gb = "100"
          disk_type = "PD_STANDARD"
        }
      }
    }
  }
}
`, name)
}

func testAccNotebooksRuntime_full(name string) string {
	return fmt.Sprintf(`
resource "google_notebooks_runtime" "runtime_full" {
  name = "%s"
  location = "us-central1"
  access_config {
    access_type = "SINGLE_USER"
    runtime_owner = "admin@hashicorptest.com"
  }
  software_config {
    enable_health_monitoring = true
    idle_shutdown           = true
    idle_shutdown_timeout    = 180
    install_gpu_driver       = true
  }
  virtual_machine {
    virtual_machine_config {
      machine_type = "n1-standard-4"
      data_disk {
        initialize_params {
          disk_size_gb = 100
          disk_type = "PD_STANDARD"
        }
      }
      accelerator_config {
        core_count = "1"
        type = "NVIDIA_TESLA_V100"
      }
      internal_ip_only = true
      network = data.google_compute_network.my_network.id
      subnet = data.google_compute_subnetwork.my_subnetwork.id
    }
  }
}

data "google_compute_network" "my_network" {
  name = "default"
}

data "google_compute_subnetwork" "my_subnetwork" {
  name   = "default"
  region = "us-central1"
}
`, name)
}

<% end -%>
