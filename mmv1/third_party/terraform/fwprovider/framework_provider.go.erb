<% autogen_exception -%>
package fwprovider

import (
    "context"

    "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
    "github.com/hashicorp/terraform-plugin-framework/datasource"
    "github.com/hashicorp/terraform-plugin-framework/path"
    "github.com/hashicorp/terraform-plugin-framework/provider"
    "github.com/hashicorp/terraform-plugin-framework/provider/metaschema"
    "github.com/hashicorp/terraform-plugin-framework/provider/schema"
    "github.com/hashicorp/terraform-plugin-framework/resource"
    "github.com/hashicorp/terraform-plugin-framework/schema/validator"
    "github.com/hashicorp/terraform-plugin-framework/types"

    "github.com/hashicorp/terraform-provider-google/google/fwmodels"
    "github.com/hashicorp/terraform-provider-google/google/fwtransport"
    "github.com/hashicorp/terraform-provider-google/google/services/resourcemanager"
    "github.com/hashicorp/terraform-provider-google/google/services/dns"
    <% unless version == 'ga' -%>
    "github.com/hashicorp/terraform-provider-google/google/services/firebase"
    <% end -%>

    transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

// Ensure the implementation satisfies the expected interfaces
var (
    _ provider.ProviderWithMetaSchema = &FrameworkProvider{}
)

// New is a helper function to simplify provider server and testing implementation.
func New(version string) provider.ProviderWithMetaSchema {
    return &FrameworkProvider{
        Version: version,
    }
}

// FrameworkProvider is the provider implementation.
type FrameworkProvider struct {
    fwtransport.FrameworkProviderConfig
    Version string
}

// Metadata returns the provider type name.
func (p *FrameworkProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
    resp.TypeName = "google"
    resp.Version = p.Version
}

// MetaSchema returns the provider meta schema.
func (p *FrameworkProvider) MetaSchema(_ context.Context, _ provider.MetaSchemaRequest, resp *provider.MetaSchemaResponse) {
    resp.Schema = metaschema.Schema{
        Attributes: map[string]metaschema.Attribute{
            "module_name": metaschema.StringAttribute{
                Optional: true,
            },
        },
    }
}

// Schema defines the provider-level schema for configuration data.
func (p *FrameworkProvider) Schema(_ context.Context, _ provider.SchemaRequest, resp *provider.SchemaResponse) {
    resp.Schema = schema.Schema{
        Attributes: map[string]schema.Attribute{
            "credentials": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    stringvalidator.ConflictsWith(path.Expressions{
                        path.MatchRoot("access_token"),
                    }...),
                    CredentialsValidator(),
                    NonEmptyStringValidator(),
                },
            },
            "access_token": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    stringvalidator.ConflictsWith(path.Expressions{
                        path.MatchRoot("credentials"),
                    }...),
                    NonEmptyStringValidator(),
                },
            },
            "impersonate_service_account": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    NonEmptyStringValidator(),
                },
            },
            "impersonate_service_account_delegates": schema.ListAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "project": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    NonEmptyStringValidator(),
                },
            },
            "billing_project": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    NonEmptyStringValidator(),
                },
            },
            "region": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    NonEmptyStringValidator(),
                },
            },
            "zone": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    NonEmptyStringValidator(),
                },
            },
            "scopes": schema.ListAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "user_project_override": schema.BoolAttribute{
                Optional: true,
            },
            "request_timeout": schema.StringAttribute{
                Optional: true,
            },
            "request_reason": schema.StringAttribute{
                Optional: true,
            },
            "universe_domain": schema.StringAttribute{
                Optional: true,
            },
            "default_labels": schema.MapAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "add_terraform_attribution_label": schema.BoolAttribute{
                Optional: true,
            },
            "terraform_attribution_label_addition_strategy": schema.StringAttribute{
                Optional: true,
            },
            // Generated Products
            <% products.each do |product| -%>
            "<%= product[:definitions].name.underscore -%>_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            <% end -%>

            // Handwritten Products / Versioned / Atypical Entries
            "cloud_billing_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "composer_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "container_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "dataflow_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "iam_credentials_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "resource_manager_v3_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            <% unless version == "ga" -%>
            "runtimeconfig_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            <% end -%>
            "iam_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "service_networking_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "tags_location_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },

            // dcl
            "container_aws_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "container_azure_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
        },
        Blocks: map[string]schema.Block{
            "batching": schema.ListNestedBlock{
                NestedObject: schema.NestedBlockObject{
                    Attributes: map[string]schema.Attribute{
                        "send_after": schema.StringAttribute{
                            Optional: true,
                            Validators: []validator.String{
                                NonNegativeDurationValidator(),
                            },
                        },
                        "enable_batching": schema.BoolAttribute{
                            Optional: true,
                        },
                    },
                },
            },
        },
    }

    transport_tpg.ConfigureDCLCustomEndpointAttributesFramework(&resp.Schema)
}

// Configure prepares an API client for data sources and resources.
func (p *FrameworkProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
    var data fwmodels.ProviderModel

    resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

    if resp.Diagnostics.HasError() {
        return
    }

    // Configuration values are now available.
    p.LoadAndValidateFramework(ctx, &data, req.TerraformVersion, &resp.Diagnostics, p.Version)
    if resp.Diagnostics.HasError() {
        return
    }

    // Example client configuration for data sources and resources
    resp.DataSourceData = &p.FrameworkProviderConfig
    resp.ResourceData = &p.FrameworkProviderConfig
}


// DataSources defines the data sources implemented in the provider.
func (p *FrameworkProvider) DataSources(_ context.Context) []func() datasource.DataSource {
    return []func() datasource.DataSource{
        resourcemanager.NewGoogleClientConfigDataSource,
        resourcemanager.NewGoogleClientOpenIDUserinfoDataSource,
        dns.NewGoogleDnsManagedZoneDataSource,
        dns.NewGoogleDnsManagedZonesDataSource,
        dns.NewGoogleDnsRecordSetDataSource,
        dns.NewGoogleDnsKeysDataSource,
        <% unless version == 'ga' -%>
        firebase.NewGoogleFirebaseAndroidAppConfigDataSource,
        firebase.NewGoogleFirebaseAppleAppConfigDataSource,
        firebase.NewGoogleFirebaseWebAppConfigDataSource,
        <% end -%>
    }
}

// Resources defines the resources implemented in the provider.
func (p *FrameworkProvider) Resources(_ context.Context) []func() resource.Resource {
    return nil
}
