package fwprovider

import (
    "context"

    sdk_schema "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

    "github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
    "github.com/hashicorp/terraform-plugin-framework/datasource"
    "github.com/hashicorp/terraform-plugin-framework/ephemeral"
    "github.com/hashicorp/terraform-plugin-framework/function"
    "github.com/hashicorp/terraform-plugin-framework/path"
    "github.com/hashicorp/terraform-plugin-framework/provider"
    "github.com/hashicorp/terraform-plugin-framework/provider/metaschema"
    "github.com/hashicorp/terraform-plugin-framework/provider/schema"
    "github.com/hashicorp/terraform-plugin-framework/resource"
    "github.com/hashicorp/terraform-plugin-framework/schema/validator"
    "github.com/hashicorp/terraform-plugin-framework/types"

    "github.com/hashicorp/terraform-provider-google/google/fwvalidators"
    "github.com/hashicorp/terraform-provider-google/google/functions"
    "github.com/hashicorp/terraform-provider-google/google/fwmodels"
    "github.com/hashicorp/terraform-provider-google/google/services/resourcemanager"
	"github.com/hashicorp/terraform-provider-google/version"
    {{- if ne $.TargetVersionName "ga" }}
    "github.com/hashicorp/terraform-provider-google/google/services/firebase"
    {{- end }}

    transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

// Ensure the implementation satisfies the expected interfaces
var (
    _ provider.Provider               = &FrameworkProvider{}
    _ provider.ProviderWithMetaSchema = &FrameworkProvider{}
    _ provider.ProviderWithFunctions  = &FrameworkProvider{}
    _ provider.ProviderWithEphemeralResources  = &FrameworkProvider{}
)

// New is a helper function to simplify provider server and testing implementation.
func New(primary *sdk_schema.Provider) provider.ProviderWithMetaSchema {
    return &FrameworkProvider{
        Version: version.ProviderVersion,
        Primary: primary,
    }
}

// FrameworkProvider is the provider implementation.
type FrameworkProvider struct {
    Version string
    Primary *sdk_schema.Provider
}

// Metadata returns
// - the provider type name : this controls how "google" is present at the start of all resource type names
// - the provider version   : this is currently unused by Terraform core
func (p *FrameworkProvider) Metadata(_ context.Context, _ provider.MetadataRequest, resp *provider.MetadataResponse) {
    resp.TypeName = "google"
    resp.Version = p.Version
}

// MetaSchema returns the provider meta schema.
func (p *FrameworkProvider) MetaSchema(_ context.Context, _ provider.MetaSchemaRequest, resp *provider.MetaSchemaResponse) {
    resp.Schema = metaschema.Schema{
        Attributes: map[string]metaschema.Attribute{
            "module_name": metaschema.StringAttribute{
                Optional: true,
            },
        },
    }
}

// Schema defines the provider-level schema for configuration data.
// See: https://developer.hashicorp.com/terraform/plugin/framework/migrating/mux
// "The schema and configuration handling must exactly match between all underlying providers of the mux server"
// This schema matches the schema implemented with SDKv2 in google/provider/provider.go
func (p *FrameworkProvider) Schema(_ context.Context, _ provider.SchemaRequest, resp *provider.SchemaResponse) {
    resp.Schema = schema.Schema{
        Attributes: map[string]schema.Attribute{
            "credentials": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    stringvalidator.ConflictsWith(path.Expressions{
                        path.MatchRoot("access_token"),
                    }...),
                    fwvalidators.CredentialsValidator(),
                    fwvalidators.NonEmptyStringValidator(),
                },
            },
            "access_token": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    stringvalidator.ConflictsWith(path.Expressions{
                        path.MatchRoot("credentials"),
                    }...),
                    fwvalidators.NonEmptyStringValidator(),
                },
            },
            "impersonate_service_account": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    fwvalidators.NonEmptyStringValidator(),
                },
            },
            "impersonate_service_account_delegates": schema.ListAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "project": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    fwvalidators.NonEmptyStringValidator(),
                },
            },
            "billing_project": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    fwvalidators.NonEmptyStringValidator(),
                },
            },
            "region": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    fwvalidators.NonEmptyStringValidator(),
                },
            },
            "zone": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    fwvalidators.NonEmptyStringValidator(),
                },
            },
            "scopes": schema.ListAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "user_project_override": schema.BoolAttribute{
                Optional: true,
            },
            "request_timeout": schema.StringAttribute{
                Optional: true,
                Validators: []validator.String{
                    fwvalidators.NonEmptyStringValidator(),
                    fwvalidators.NonNegativeDurationValidator(),
                },
            },
            "request_reason": schema.StringAttribute{
                Optional: true,
            },
            "universe_domain": schema.StringAttribute{
                Optional: true,
            },
            "default_labels": schema.MapAttribute{
                Optional:    true,
                ElementType: types.StringType,
            },
            "add_terraform_attribution_label": schema.BoolAttribute{
                Optional: true,
            },
            "terraform_attribution_label_addition_strategy": schema.StringAttribute{
                Optional: true,
            },
            // Generated Products
            {{- range $product := $.Products }}
            "{{ underscore $product.Name }}_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            {{- end }}

            // Handwritten Products / Versioned / Atypical Entries
            "cloud_billing_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "container_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "dataflow_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "iam_credentials_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "resource_manager_v3_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            {{- if ne $.TargetVersionName "ga" }}
            "runtimeconfig_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            {{- end }}
            "iam_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "tags_location_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },

            // dcl
            "container_aws_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
            "container_azure_custom_endpoint": &schema.StringAttribute{
                Optional:     true,
                Validators: []validator.String{
                    transport_tpg.CustomEndpointValidator(),
                },
            },
        },
        Blocks: map[string]schema.Block{
            "batching": schema.ListNestedBlock{
                NestedObject: schema.NestedBlockObject{
                    Attributes: map[string]schema.Attribute{
                        "send_after": schema.StringAttribute{
                            Optional: true,
                            Validators: []validator.String{
                                fwvalidators.NonNegativeDurationValidator(),
                            },
                        },
                        "enable_batching": schema.BoolAttribute{
                            Optional: true,
                        },
                    },
                },
            },
        },
    }

    transport_tpg.ConfigureDCLCustomEndpointAttributesFramework(&resp.Schema)
}

// Configure prepares the metadata/'meta' required for data sources and resources to function.
// Configuration logic implemented here should take user inputs and use them to populate a struct
// with that necessary metadata, e.g. default project value, configured client, etc.
// That prepared 'meta' struct is then returned in the response, and that value will later be supplied to all resources/data sources when they need to configure themselves.
func (p *FrameworkProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
    var data fwmodels.ProviderModel

    resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

    if resp.Diagnostics.HasError() {
        return
    }

	// Configuration values are now available.
    // However we don't use them; for the plugin-framework implementation of the provider
	// we take the configuration values from the SDK implementation of the provider. This avoids duplicated logic and inconsistencies in implementation.
	// The trade off is that we don't benefit from the new type system that differentiates Null and Unknown values, which is especially useful for strings.
	// This makes it necessary to write code that stops empty strings (etc) being passed from the Config struct to PF-implemented resources/datasources.
	//    E.g. GetProjectFramework treats Null and "" the same way : https://github.com/hashicorp/terraform-provider-google/blob/74c815ee4ad059453e06b84448af244d80490ec1/google/fwresource/field_helpers.go#L21-L36
	//    See also, new approaches to handle this: https://github.com/GoogleCloudPlatform/magic-modules/pull/11925


	// This is how we make provider configuration info (configured clients, default project, etc) available to resources and data sources
	// implemented using the plugin-framework. The resources' Configure functions receive this data in the ConfigureRequest argument.
	meta := p.Primary.Meta().(*transport_tpg.Config)
	resp.DataSourceData = meta
	resp.ResourceData = meta
	resp.EphemeralResourceData = meta
}


// DataSources defines the data sources implemented in the provider.
func (p *FrameworkProvider) DataSources(_ context.Context) []func() datasource.DataSource {
    return []func() datasource.DataSource{
        resourcemanager.NewGoogleClientConfigDataSource,
        resourcemanager.NewGoogleClientOpenIDUserinfoDataSource,
        {{- if ne $.TargetVersionName "ga" }}
        firebase.NewGoogleFirebaseAndroidAppConfigDataSource,
        firebase.NewGoogleFirebaseAppleAppConfigDataSource,
        firebase.NewGoogleFirebaseWebAppConfigDataSource,
        {{- end }}
    }
}

// Resources defines the resources implemented in the provider.
func (p *FrameworkProvider) Resources(_ context.Context) []func() resource.Resource {
	return nil
}

// Functions defines the provider functions implemented in the provider.
func (p *FrameworkProvider) Functions(_ context.Context) []func() function.Function {
	return []func() function.Function{
		functions.NewLocationFromIdFunction,
		functions.NewNameFromIdFunction,
		functions.NewProjectFromIdFunction,
		functions.NewRegionFromIdFunction,
		functions.NewRegionFromZoneFunction,
		functions.NewZoneFromIdFunction,
	}
}

// EphemeralResources defines the resources that are of ephemeral type implemented in the provider.
func (p *FrameworkProvider) EphemeralResources(_ context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{
        resourcemanager.GoogleEphemeralServiceAccountAccessToken,
        resourcemanager.GoogleEphemeralServiceAccountIdToken,
        resourcemanager.GoogleEphemeralServiceAccountJwt,
        resourcemanager.GoogleEphemeralServiceAccountKey,
	}
}
