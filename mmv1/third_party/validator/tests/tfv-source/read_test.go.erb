<% autogen_exception -%>
package test

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/GoogleCloudPlatform/terraform-validator/converters/google"
	"github.com/GoogleCloudPlatform/terraform-validator/tfgcv"
	"go.uber.org/zap/zaptest"
)

func TestReadPlannedAssetsCoverage(t *testing.T) {
	cases := []struct {
		name string
	}{
		// read-only, the following tests are not in cli_test or
		// have unique parameters that separate them
		{name: "example_folder_iam_binding"},
		{name: "example_folder_iam_member"},
		{name: "example_project_create"},
		{name: "example_project_update"},
		{name: "example_project_iam_binding"},
		{name: "example_project_iam_member"},
		{name: "example_storage_bucket"},
		{name: "example_storage_bucket_iam_binding"},
		{name: "example_storage_bucket_iam_member"},
		{name: "example_project_create_empty_project_id"},
		{name: "example_project_iam_member_empty_project"},
		// auto inserted tests that are not in list above or manually inserted in cli_test.go
	<% @non_defined_tests.each do |test| -%>
		{name: "<%= test -%>"},
	<% end -%>
	}
	for i := range cases {
		// Allocate a variable to make sure test can run in parallel.
		c := cases[i]
		t.Run(c.name, func(t *testing.T) {
			t.Parallel()
			// Create a temporary directory for running terraform.
			dir, err := ioutil.TempDir(tmpDir, "terraform")
			if err != nil {
				log.Fatal(err)
			}
			defer os.RemoveAll(dir)

			generateTestFiles(t, "../testdata/templates", dir, c.name+".json")
			generateTestFiles(t, "../testdata/templates", dir, c.name+".tfplan.json")

			// Unmarshal payload from testfile into `want` variable.
			f := filepath.Join(dir, c.name+".json")
			want, err := readExpectedTestFile(f)
			if err != nil {
				t.Fatal(err)
			}

			planfile := filepath.Join(dir, c.name+".tfplan.json")
			ctx := context.Background()
			ancestryCache := map[string]string{
				data.Provider["project"]: data.Ancestry,
			}
			got, err := tfgcv.ReadPlannedAssets(ctx, planfile, data.Provider["project"], "", "", ancestryCache, true, false, zaptest.NewLogger(t), "")
			if err != nil {
				t.Fatalf("ReadPlannedAssets(%s, %s, \"\", \"\", %s, %t): %v", planfile, data.Provider["project"], ancestryCache, true, err)
			}

			expectedAssets := normalizeAssets(t, want, true)
			actualAssets := normalizeAssets(t, got, true)
			require.ElementsMatch(t, actualAssets, expectedAssets)
		})
	}
}



func TestReadPlannedAssetsCoverage_WithoutDefaultProject(t *testing.T) {
	cases := []struct {
		name string
	}{
		{name: "example_project_create_empty_project_id"},
		{name: "example_storage_bucket"},
		{name: "example_project_iam_member_empty_project"},
	}
	for i := range cases {
		// Allocate a variable to make sure test can run in parallel.
		c := cases[i]
		t.Run(c.name, func(t *testing.T) {
			t.Parallel()
			// Create a temporary directory for running terraform.
			dir, err := ioutil.TempDir(tmpDir, "terraform")
			if err != nil {
				log.Fatal(err)
			}
			defer os.RemoveAll(dir)

			generateTestFiles(t, "../testdata/templates", dir, c.name+"_without_default_project.json")
			generateTestFiles(t, "../testdata/templates", dir, c.name+".tfplan.json")

			// Unmarshal payload from testfile into `want` variable.
			f := filepath.Join(dir, c.name+"_without_default_project.json")
			want, err := readExpectedTestFile(f)
			if err != nil {
				t.Fatal(err)
			}

			planfile := filepath.Join(dir, c.name+".tfplan.json")
			ctx := context.Background()
			ancestryCache := map[string]string{
				// data.Provider["project"]: data.Ancestry,
			}
			got, err := tfgcv.ReadPlannedAssets(ctx, planfile, "", "", "", ancestryCache, true, false, zaptest.NewLogger(t), "")
			if err != nil {
				t.Fatalf("ReadPlannedAssets(%s, %s, \"\", \"\", %s, %t): %v", planfile, data.Provider["project"], ancestryCache, true, err)
			}

			expectedAssets := normalizeAssets(t, want, true)
			actualAssets := normalizeAssets(t, got, true)
			require.ElementsMatch(t, actualAssets, expectedAssets)
		})
	}
}
