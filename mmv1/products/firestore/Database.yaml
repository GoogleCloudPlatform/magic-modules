# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'Database'
base_url: 'projects/{{project}}/databases'
create_url: 'projects/{{project}}/databases?databaseId={{name}}'
update_verb: :PATCH
update_mask: true
description: |
  A Cloud Firestore Database.

  If you wish to use Firestore with App Engine, use the
  [`google_app_engine_application`](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/app_engine_application)
  resource instead. If you were previously using the `google_app_engine_application` resource exclusively for managing a Firestore database
  and would like to use the `google_firestore_database` resource instead, please follow the instructions
  [here](https://cloud.google.com/firestore/docs/app-engine-requirement).
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Official Documentation': 'https://cloud.google.com/firestore/docs/'
  api: 'https://cloud.google.com/firestore/docs/reference/rest/v1/projects.databases'
async: !ruby/object:Api::OpAsync
  actions: ['create', 'update']
  operation: !ruby/object:Api::OpAsync::Operation
    path: 'name'
    base_url: '{{op_id}}'
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: 'response'
    resource_inside_response: true
  status: !ruby/object:Api::OpAsync::Status
    path: 'done'
    complete: true
    allowed:
      - true
      - false
  error: !ruby/object:Api::OpAsync::Error
    path: 'error'
    message: 'message'
autogen_async: true
id_format: 'projects/{{project}}/databases/{{name}}'
import_format:
  - 'projects/{{project}}/databases/{{name}}'
  - '{{project}}/{{name}}'
  - '{{name}}'
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'firestore_default_database'
    primary_resource_id: 'database'
    test_env_vars:
      project_id: :PROJECT_NAME
    ignore_read_extra:
      - project
      - etag
      - deletion_policy
    skip_test: true
  - !ruby/object:Provider::Terraform::Examples
    name: 'firestore_database'
    primary_resource_id: 'database'
    vars:
      database_id: "database-id"
      delete_protection_state: "DELETE_PROTECTION_ENABLED"
    test_env_vars:
      project_id: :PROJECT_NAME
    test_vars_overrides:
      delete_protection_state: '"DELETE_PROTECTION_DISABLED"'
    ignore_read_extra:
      - project
      - etag
      - deletion_policy
  - !ruby/object:Provider::Terraform::Examples
    name: 'firestore_default_database_in_datastore_mode'
    primary_resource_id: 'datastore_mode_database'
    test_env_vars:
      project_id: :PROJECT_NAME
    ignore_read_extra:
      - project
      - etag
      - deletion_policy
    skip_test: true
  - !ruby/object:Provider::Terraform::Examples
    name: 'firestore_database_in_datastore_mode'
    primary_resource_id: 'datastore_mode_database'
    vars:
      database_id: "database-id"
      delete_protection_state: "DELETE_PROTECTION_ENABLED"
    test_env_vars:
      project_id: :PROJECT_NAME
    test_vars_overrides:
      delete_protection_state: '"DELETE_PROTECTION_DISABLED"'
    ignore_read_extra:
      - project
      - etag
      - deletion_policy
virtual_fields:
  - !ruby/object:Api::Type::Enum
    name: 'deletion_policy'
    description: |
      Deletion behavior for this database.
      If the deletion policy is `ABANDON`, the database will be removed from Terraform state but not deleted from Google Cloud upon destruction.
      If the deletion policy is `DELETE`, the database will both be removed from Terraform state and deleted from Google Cloud upon destruction.
      The default value is `ABANDON`.
      See also `delete_protection`.
    values:
      - :ABANDON
      - :DELETE
    default_value: :ABANDON
custom_code: !ruby/object:Provider::Terraform::CustomCode
  pre_delete: templates/terraform/pre_delete/firestore_database.go.erb
properties:
  - !ruby/object:Api::Type::String
    name: name
    required: true
    description: |
      The ID to use for the database, which will become the final
      component of the database's resource name. This value should be 4-63
      characters. Valid characters are /[a-z][0-9]-/ with first character
      a letter and the last a letter or a number. Must not be
      UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.
      "(default)" database id is also valid.
    immutable: true
    custom_expand: 'templates/terraform/custom_expand/shortname_to_url.go.erb'
    custom_flatten: templates/terraform/custom_flatten/name_from_self_link.erb
  - !ruby/object:Api::Type::String
    name: locationId
    required: true
    description: |
      The location of the database. Available locations are listed at
      https://cloud.google.com/firestore/docs/locations.
    immutable: true
  - !ruby/object:Api::Type::Enum
    name: type
    required: true
    description: |
      The type of the database.
      See https://cloud.google.com/datastore/docs/firestore-or-datastore
      for information about how to choose.
    values:
      - :FIRESTORE_NATIVE
      - :DATASTORE_MODE
  - !ruby/object:Api::Type::Enum
    name: concurrencyMode
    description: |
      The concurrency control mode to use for this database.
    values:
      - :OPTIMISTIC
      - :PESSIMISTIC
      - :OPTIMISTIC_WITH_ENTITY_GROUPS
    default_from_api: true
  - !ruby/object:Api::Type::Enum
    name: appEngineIntegrationMode
    description: |
      The App Engine integration mode to use for this database.
    values:
      - :ENABLED
      - :DISABLED
    default_from_api: true
  - !ruby/object:Api::Type::Enum
    name: pointInTimeRecoveryEnablement
    description: |
      Whether to enable the PITR feature on this database.
      If `POINT_IN_TIME_RECOVERY_ENABLED` is selected, reads are supported on selected versions of the data from within the past 7 days.
      versionRetentionPeriod and earliestVersionTime can be used to determine the supported versions. These include reads against any timestamp within the past hour
      and reads against 1-minute snapshots beyond 1 hour and within 7 days.
      If `POINT_IN_TIME_RECOVERY_DISABLED` is selected, reads are supported on any version of the data from within the past 1 hour.
    values:
      - :POINT_IN_TIME_RECOVERY_ENABLED
      - :POINT_IN_TIME_RECOVERY_DISABLED
    default_value: :POINT_IN_TIME_RECOVERY_DISABLED
  - !ruby/object:Api::Type::String
    name: key_prefix
    description: |
      Output only. The keyPrefix for this database.
      This keyPrefix is used, in combination with the project id ("~") to construct the application id
      that is returned from the Cloud Datastore APIs in Google App Engine first generation runtimes.
      This value may be empty in which case the appid to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
    output: true
  - !ruby/object:Api::Type::Enum
    name: deleteProtectionState
    description: |
      State of delete protection for the database.
      When delete protection is enabled, this database cannot be deleted.
      The default value is `DELETE_PROTECTION_STATE_UNSPECIFIED`, which is currently equivalent to `DELETE_PROTECTION_DISABLED`.
      **Note:** Additionally, to delete this database using `terraform destroy`, `deletion_policy` must be set to `DELETE`.
    values:
      - :DELETE_PROTECTION_STATE_UNSPECIFIED
      - :DELETE_PROTECTION_ENABLED
      - :DELETE_PROTECTION_DISABLED
    default_from_api: true
  - !ruby/object:Api::Type::Fingerprint
    name: etag
    description: |
      Output only. This checksum is computed by the server based on the value of other fields,
      and may be sent on update and delete requests to ensure the client has an
      up-to-date value before proceeding.
    output: true
  - !ruby/object:Api::Type::String
    name: create_time
    description: |
      Output only. The timestamp at which this database was created.
    output: true
  - !ruby/object:Api::Type::String
    name: update_time
    description: |
      Output only. The timestamp at which this database was most recently updated.
    output: true
  - !ruby/object:Api::Type::String
    name: uid
    description: |
      Output only. The system-generated UUID4 for this Database.
    output: true
  - !ruby/object:Api::Type::String
    name: versionRetentionPeriod
    description: |
      Output only. The period during which past versions of data are retained in the database.
      Any read or query can specify a readTime within this window, and will read the state of the database at that time.
      If the PITR feature is enabled, the retention period is 7 days. Otherwise, the retention period is 1 hour.
      A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
    output: true
  - !ruby/object:Api::Type::String
    name: earliestVersionTime
    description: |
      Output only. The earliest timestamp at which older versions of the data can be read from the database. See versionRetentionPeriod above; this field is populated with now - versionRetentionPeriod.
      This value is continuously updated, and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.
      A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    output: true
