# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: ContainerAnalysis
display_name: Container Registry
versions:
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://containeranalysis.googleapis.com/v1/
  - !ruby/object:Api::Product::Version
    name: beta
    base_url: https://containeranalysis.googleapis.com/v1beta1/
scopes:
  - https://www.googleapis.com/auth/cloud-platform
objects:
  - !ruby/object:Api::Resource
    name: 'Note'
    base_url: projects/{{project}}/notes?noteId={{name}}
    self_link: projects/{{project}}/notes/{{name}}
    update_verb: :PATCH
    update_mask: true
    description: |
      A Container Analysis note is a high-level piece of metadata that
      describes a type of analysis that can be done for a resource.
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Official Documentation': 'https://cloud.google.com/container-analysis/'
        'Creating Attestations (Occurrences)': 'https://cloud.google.com/binary-authorization/docs/making-attestations'
      api: 'https://cloud.google.com/container-analysis/api/reference/rest/'
    properties:
      - !ruby/object:Api::Type::String
        name: name
        description: |
          The name of the note.
        required: true
        input: true
      - !ruby/object:Api::Type::String
        name: shortDescription
        description: |
          A one sentence description of the note.
      - !ruby/object:Api::Type::String
        name: longDescription
        description: |
          A detailed description of the note
      - !ruby/object:Api::Type::Enum
        name: 'kind'
        description: |
          The type of analysis this note describes
        values:
          - NOTE_KIND_UNSPECIFIED
          - VULNERABILITY
          - BUILD
          - IMAGE
          - PACKAGE
          - DEPLOYMENT
          - DISCOVERY
          - ATTESTATION
          - UPGRADE
        output: true
      - !ruby/object:Api::Type::Array
        name: relatedUrl
        description: |
          URLs associated with this note and related metadata.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: url
              description: |
                Specific URL associated with the resource.
              required: true
            - !ruby/object:Api::Type::String
              name: label
              description: |
                Label to describe usage of the URL
      - !ruby/object:Api::Type::Time
        name: expirationTime
        description: |
          Time of expiration for this note. Leave empty if note does not expire.
      - !ruby/object:Api::Type::Time
        name: createTime
        description: The time this note was created.
        output: true
      - !ruby/object:Api::Type::Time
        name: updateTime
        description: The time this note was last updated.
        output: true
      - !ruby/object:Api::Type::Array
        name: relatedNoteNames
        description: |
          Names of other notes related to this note.
        item_type: Api::Type::String
      - !ruby/object:Api::Type::NestedObject
        name: attestationAuthority
        description: |
          Note kind that represents a logical attestation "role" or "authority".
          For example, an organization might have one AttestationAuthority for
          "QA" and one for "build". This Note is intended to act strictly as a
          grouping mechanism for the attached Occurrences (Attestations). This
          grouping mechanism also provides a security boundary, since IAM ACLs
          gate the ability for a principle to attach an Occurrence to a given
          Note. It also provides a single point of lookup to find all attached
          Attestation Occurrences, even if they don't all live in the same
          project.
        required: true
        properties:
          - !ruby/object:Api::Type::NestedObject
            name: hint
            description: |
              This submessage provides human-readable hints about the purpose of
              the AttestationAuthority. Because the name of a Note acts as its
              resource reference, it is important to disambiguate the canonical
              name of the Note (which might be a UUID for security purposes)
              from "readable" names more suitable for debug output. Note that
              these hints should NOT be used to look up AttestationAuthorities
              in security sensitive contexts, such as when looking up
              Attestations to verify.
            required: true
            properties:
              - !ruby/object:Api::Type::String
                name: humanReadableName
                description: |
                  The human readable name of this Attestation Authority, for
                  example "qa".
                required: true

  - !ruby/object:Api::Resource
    name: 'Occurrence'
    base_url: projects/{{project}}/occurrences
    self_link: projects/{{project}}/occurrences/{{name}}
    update_verb: :PATCH
    update_mask: true
    description: |
      An occurrence is an instance of a Note, or type of analysis that
      can be done for a resource.
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Official Documentation': 'https://cloud.google.com/container-analysis/'
      api: 'https://cloud.google.com/container-analysis/api/reference/rest/'
    properties:
      - !ruby/object:Api::Type::String
        name: name
        description: |
          The name of the occurrence.
        output: true
      - !ruby/object:Api::Type::String
        name: resourceUri
        description: |
          Required. Immutable. A URI that represents the resource for which
          the occurrence applies. For example,
          https://gcr.io/project/image@sha256:123abc for a Docker image.
        required: true
        input: true
      - !ruby/object:Api::Type::String
        name: noteName
        description: |
          The analysis note associated with this occurrence, in the form of
          projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
          filter in list requests.
        required: true
        input: true
      - !ruby/object:Api::Type::String
        name: kind
        description: |
          The note kind which explicitly denotes which of the occurrence
          details are specified. This field can be used as a filter in list
          requests.
        output: true
      - !ruby/object:Api::Type::String
        name: remediation
        description: |
          A description of actions that can be taken to remedy the note.
      - !ruby/object:Api::Type::Time
        name: createTime
        description: The time when the repository was created.
        output: true
      - !ruby/object:Api::Type::Time
        name: updateTime
        description: The time when the repository was last updated.
        output: true
      - !ruby/object:Api::Type::NestedObject
        name: attestation
        description: |
          Occurrence that represents a single "attestation". The authenticity
          of an attestation can be verified using the attached signature.
          If the verifier trusts the public key of the signer, then verifying
          the signature is sufficient to establish trust. In this circumstance,
          the authority to which this attestation is attached is primarily
          useful for lookup (how to find this attestation if you already
          know the authority and artifact to be verified) and intent (for
          which authority this attestation was intended to sign.
        required: true
        properties:
          - !ruby/object:Api::Type::String
            name: serializedPayload
            description: |
              The serialized payload that is verified by one or
              more signatures. A base64-encoded string.
            required: true
          - !ruby/object:Api::Type::Array
            name: signatures
            description: |
              One or more signatures over serializedPayload.
              Verifier implementations should consider this attestation
              message verified if at least one signature verifies
              serializedPayload. See Signature in common.proto for more
              details on signature structure and verification.
            required: true
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
                - !ruby/object:Api::Type::String
                  name: signature
                  description: |
                    The content of the signature, an opaque bytestring.
                    The payload that this signature verifies MUST be
                    unambiguously provided with the Signature during
                    verification. A wrapper message might provide the
                    payload explicitly. Alternatively, a message might
                    have a canonical serialization that can always be
                    unambiguously computed to derive the payload.
                - !ruby/object:Api::Type::String
                  name: publicKeyId
                  required: true
                  description: |
                    The identifier for the public key that verifies this
                    signature. MUST be an RFC3986 conformant
                    URI. * When possible, the key id should be an
                    immutable reference, such as a cryptographic digest.
                    Examples of valid values:

                    * OpenPGP V4 public key fingerprint. See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr
                      for more details on this scheme.
                        * `openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA`
                    * RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization):
                        * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU"
