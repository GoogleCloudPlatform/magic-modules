# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'TcpRoute'
base_url: 'projects/{{project}}/locations/global/tcpRoutes'
create_url: 'projects/{{project}}/locations/global/tcpRoutes?tcpRouteId={{name}}'
self_link: 'projects/{{project}}/locations/global/tcpRoutes/{{name}}'
min_version: beta
update_verb: :PATCH
update_mask: true
description: |
  TcpRoute is the resource defining how TCP traffic should be routed by a Mesh/Gateway resource.
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Setup TCP Services': 'https://cloud.google.com/traffic-director/docs/set-up-tcp-route'
  api: 'https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1beta1/projects.locations.tcpRoutes'
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    path: 'name'
    base_url: '{{op_id}}'
    wait_ms: 1000
    timeouts: !ruby/object:Api::Timeouts
      insert_minutes: 30
      update_minutes: 30
      delete_minutes: 30
  result: !ruby/object:Api::OpAsync::Result
    path: 'response'
  status: !ruby/object:Api::OpAsync::Status
    path: 'done'
    complete: true
    allowed:
      - true
      - false
  error: !ruby/object:Api::OpAsync::Error
    path: 'error'
    message: 'message'
autogen_async: true
import_format: ['projects/{{project}}/locations/global/tcpRoutes/{{name}}']
examples:
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_services_tcp_route_basic'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-tcp-route'
      backend_service_name: 'my-backend-service'
      http_health_check_name: 'backend-service-health-check'
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_services_tcp_route_actions'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-tcp-route'
      backend_service_name: 'my-backend-service'
      http_health_check_name: 'backend-service-health-check'
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_services_tcp_route_mesh_basic'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-tcp-route'
      backend_service_name: 'my-backend-service'
      http_health_check_name: 'backend-service-health-check'
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_services_tcp_route_gateway_basic'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-tcp-route'
      backend_service_name: 'my-backend-service'
      http_health_check_name: 'backend-service-health-check'
parameters:
  - !ruby/object:Api::Type::String
    name: 'name'
    required: true
    url_param_only: true
    immutable: true
    description: |
      Name of the TcpRoute resource.
properties:
  - !ruby/object:Api::Type::String
    name: 'selfLink'
    description: |
      Server-defined URL of this resource.
    output: true
  - !ruby/object:Api::Type::Time
    name: 'createTime'
    description: |
      Time the TcpRoute was created in UTC.
    output: true
  - !ruby/object:Api::Type::Time
    name: 'updateTime'
    description: |
      Time the TcpRoute was updated in UTC.
    output: true
  - !ruby/object:Api::Type::KeyValueLabels
    name: 'labels'
    description: Set of label tags associated with the TcpRoute resource.
  - !ruby/object:Api::Type::String
    name: 'description'
    description: |
      A free-text description of the resource. Max length 1024 characters.
  - !ruby/object:Api::Type::Array
    name: meshes
    item_type: Api::Type::String
    description: |
      Meshes defines a list of meshes this TcpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
      Each mesh reference should match the pattern: projects/*/locations/global/meshes/<mesh_name>
      The attached Mesh should be of a type SIDECAR
    send_empty_value: true
  - !ruby/object:Api::Type::Array
    name: gateways
    item_type: Api::Type::String
    description: |
      Gateways defines a list of gateways this TcpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
      Each gateway reference should match the pattern: projects/*/locations/global/gateways/<gateway_name>
    send_empty_value: true
  - !ruby/object:Api::Type::Array
    name: rules
    description: |
      Rules that define how traffic is routed and handled. At least one RouteRule must be supplied.
      If there are multiple rules then the action taken will be the first rule to match.
    required: true
    send_empty_value: true
    item_type: !ruby/object:Api::Type::NestedObject
      properties:
        - !ruby/object:Api::Type::Array
          name: matches
          description: |
            RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
            If no routeMatch field is specified, this rule will unconditionally match traffic.
          send_empty_value: true
          item_type: !ruby/object:Api::Type::NestedObject
            properties:
              - !ruby/object:Api::Type::String
                name: address
                description: |
                  Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
                  By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
                required: true
              - !ruby/object:Api::Type::String
                name: port
                description: |
                  Specifies the destination port to match against.
                required: true
        - !ruby/object:Api::Type::NestedObject
          name: action
          description: |
            A detailed rule defining how to route traffic.
          required: true
          properties:
            - !ruby/object:Api::Type::Array
              name: destinations
              description: |
                The destination services to which traffic should be forwarded. At least one destination service is required.
              item_type: !ruby/object:Api::Type::NestedObject
                properties:
                  - !ruby/object:Api::Type::String
                    name: serviceName
                    description: |
                      The URL of a BackendService to route traffic to.
                  - !ruby/object:Api::Type::Integer
                    name: weight
                    description: |
                      Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports.
                      If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend.
                      If weights are specified for any one service name, they need to be specified for all of them.
                      If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
            - !ruby/object:Api::Type::Boolean
              name: originalDestination
              description: |
                If true, Router will use the destination IP and port of the original connection as the destination of the request.
