<<<<<<< HEAD
# Copyright 2023 Google Inc.
=======
# Copyright 2024 Google Inc.
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

<<<<<<< HEAD
--- !ruby/object:Api::Resource
name: 'DomainMapping'
description: |
  A domain serving an App Engine application.
base_url: 'apps/{{project}}/domainMappings'
self_link: 'apps/{{project}}/domainMappings/{{domain_name}}'
update_verb: :PATCH
update_mask: true
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Official Documentation': 'https://cloud.google.com/appengine/docs/standard/python/mapping-custom-domains'
  api: 'https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.domainMappings'
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    path: 'name'
    base_url: '{{op_id}}'
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: 'response'
    resource_inside_response: true
  status: !ruby/object:Api::OpAsync::Status
    path: 'done'
    complete: true
    allowed:
      - true
      - false
  error: !ruby/object:Api::OpAsync::Error
    path: 'error'
    message: 'message'
id_format: 'apps/{{project}}/domainMappings/{{domain_name}}'
import_format: ['apps/{{project}}/domainMappings/{{domain_name}}']
mutex: 'apps/{{project}}'
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'app_engine_domain_mapping_basic'
    primary_resource_id: 'domain_mapping'
    ignore_read_extra:
      - 'ssl_settings.0.ssl_management_type'
custom_code: !ruby/object:Provider::Terraform::CustomCode
  decoder: templates/terraform/decoders/app_engine_domain_mapping.go.erb
parameters:
  - !ruby/object:Api::Type::Enum
    name: 'overrideStrategy'
=======
---
name: 'DomainMapping'
description: |
  A domain serving an App Engine application.
references:
  guides:
    'Official Documentation': 'https://cloud.google.com/appengine/docs/standard/python/mapping-custom-domains'
  api: 'https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.domainMappings'
docs:
id_format: 'apps/{{project}}/domainMappings/{{domain_name}}'
base_url: 'apps/{{project}}/domainMappings'
self_link: 'apps/{{project}}/domainMappings/{{domain_name}}'
update_verb: 'PATCH'
update_mask: true
mutex: 'apps/{{project}}'
import_format:
  - 'apps/{{project}}/domainMappings/{{domain_name}}'
timeouts:
  insert_minutes: 20
  update_minutes: 20
  delete_minutes: 20
async:
  actions: ['create', 'delete', 'update']
  type: 'OpAsync'
  operation:
    base_url: '{{op_id}}'
    path: 'name'
    wait_ms: 1000
  result:
    path: 'response'
    resource_inside_response: true
  error:
    path: 'error'
    message: 'message'
custom_code:
  decoder: 'templates/terraform/decoders/app_engine_domain_mapping.go.tmpl'
examples:
  - name: 'app_engine_domain_mapping_basic'
    primary_resource_id: 'domain_mapping'
    ignore_read_extra:
      - 'ssl_settings.0.ssl_management_type'
parameters:
  - name: 'overrideStrategy'
    type: Enum
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
    description: |
      Whether the domain creation should override any existing mappings for this domain.
      By default, overrides are rejected.
    url_param_only: true
<<<<<<< HEAD
    values:
      - :STRICT
      - :OVERRIDE
    default_value: :STRICT
    ignore_read: true
  - !ruby/object:Api::Type::String
    name: 'domainName'
    api_name: 'id'
    description: |
      Relative name of the domain serving the application. Example: example.com.
    immutable: true
    required: true
properties:
  - !ruby/object:Api::Type::String
    name: 'name'
    description: |
      Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
    output: true
  - !ruby/object:Api::Type::NestedObject
    name: 'sslSettings'
=======
    ignore_read: true
    default_value: "STRICT"
    enum_values:
      - 'STRICT'
      - 'OVERRIDE'
  - name: 'domainName'
    type: String
    description: |
      Relative name of the domain serving the application. Example: example.com.
    api_name: id
    required: true
    immutable: true
properties:
  - name: 'name'
    type: String
    description: |
      Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.
    output: true
  - name: 'sslSettings'
    type: NestedObject
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
    description: |
      SSL configuration for this domain. If unconfigured, this domain will not serve with SSL.
    default_from_api: true
    update_mask_fields:
      - 'ssl_settings.certificate_id'
      - 'ssl_settings.ssl_management_type'
    properties:
<<<<<<< HEAD
      - !ruby/object:Api::Type::String
        name: 'certificateId'
=======
      - name: 'certificateId'
        type: String
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
        description: |
          ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
          remove SSL support.
          By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
          or to configure SSL manually, specify `SslManagementType.MANUAL` on a `CREATE` or `UPDATE` request. You must be
          authorized to administer the `AuthorizedCertificate` resource to manually map it to a DomainMapping resource.
          Example: 12345.
        default_from_api: true
<<<<<<< HEAD
      - !ruby/object:Api::Type::Enum
        name: 'sslManagementType'
        required: true
        description: |
          SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
          If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
        values:
          - :AUTOMATIC
          - :MANUAL
      - !ruby/object:Api::Type::Enum
        name: 'pendingManagedCertificateId'
        output: true
=======
      - name: 'sslManagementType'
        type: Enum
        description: |
          SSL management type for this domain. If `AUTOMATIC`, a managed certificate is automatically provisioned.
          If `MANUAL`, `certificateId` must be manually specified in order to configure SSL for this domain.
        required: true
        enum_values:
          - 'AUTOMATIC'
          - 'MANUAL'
      - name: 'pendingManagedCertificateId'
        type: Enum
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
        description: |
          ID of the managed `AuthorizedCertificate` resource currently being provisioned, if applicable. Until the new
          managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
          provisioning process completes, the `certificateId` field will reflect the new managed certificate and this
          field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
          `certificateId` field with an update request.
<<<<<<< HEAD
        values:
          - :AUTOMATIC
          - :MANUAL
  - !ruby/object:Api::Type::Array
    name: 'resourceRecords'
=======
        output: true
        enum_values:
          - 'AUTOMATIC'
          - 'MANUAL'
  - name: 'resourceRecords'
    type: Array
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
    description: |
      The resource records required to configure this domain mapping. These records must be added to the domain's DNS
      configuration in order to serve the application via this domain mapping.
    output: true
<<<<<<< HEAD
    item_type: !ruby/object:Api::Type::NestedObject
      properties:
        - !ruby/object:Api::Type::String
          name: 'name'
          description: |
            Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
        - !ruby/object:Api::Type::String
          name: 'rrdata'
          description: |
            Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
        - !ruby/object:Api::Type::Enum
          name: 'type'
          description: |
            Resource record type. Example: `AAAA`.
          values:
            - :A
            - :AAAA
            - :CNAME
=======
    item_type:
      type: NestedObject
      properties:
        - name: 'name'
          type: String
          description: |
            Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
        - name: 'rrdata'
          type: String
          description: |
            Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
        - name: 'type'
          type: Enum
          description: |
            Resource record type. Example: `AAAA`.
          enum_values:
            - 'A'
            - 'AAAA'
            - 'CNAME'
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
