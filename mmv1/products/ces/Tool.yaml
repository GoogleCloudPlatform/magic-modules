# Copyright 2025 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: Tool
description: Description
base_url: projects/{{project}}/locations/{{location}}/apps/{{app}}/tools
update_mask: true
self_link: projects/{{project}}/locations/{{location}}/apps/{{app}}/tools/{{name}}
create_url: projects/{{project}}/locations/{{location}}/apps/{{app}}/tools?toolId={{tool_id}}
update_verb: PATCH
id_format: projects/{{project}}/locations/{{location}}/apps/{{app}}/tools/{{name}}
import_format:
- projects/{{project}}/locations/{{location}}/apps/{{app}}/tools/{{name}}
examples:
- name: "ces_tool_client_function_basic"
  primary_resource_id: "ces_tool_client_function_basic"
  vars:
    tool_display_name: 'ces_tool_client_function_basic'
    app_display_name: 'my-app'
    tool_id: 'ces_tool_basic1'
    app_id: 'app-id'
- name: "ces_tool_data_store_tool_engine_source_basic"
  primary_resource_id: "ces_tool_data_store_tool_engine_source_basic"
  vars:
    tool_display_name: 'ces_tool_data_store_tool_engine_source_basic'
    app_display_name: 'my-app'
    tool_id: 'ces_tool_basic2'
    app_id: 'app-id'
    data_store_id: "data_store_id"
    data_store_id_2: "data_store_id_2"
    engine_id: "engine_id"
- name: "ces_tool_google_search_tool_basic"
  primary_resource_id: "ces_tool_google_search_tool_basic"
  vars:
    tool_display_name: 'ces_tool_google_search_tool_basic'
    app_display_name: 'my-app'
    tool_id: 'ces_tool_basic3'
    app_id: 'app-id'
- name: "ces_tool_python_function_basic"
  primary_resource_id: "ces_tool_python_function_basic"
  vars:
    tool_display_name: 'ces_tool_python_function_basic'
    app_display_name: 'my-app'
    tool_id: 'ces_tool_basic4'
    app_id: 'app-id'
autogen_status: VG9vbA==
parameters:
- name: location
  type: String
  description: Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
  immutable: true
  url_param_only: true
  required: true
- name: app
  type: String
  description: Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
  immutable: true
  url_param_only: true
  required: true
- name: toolId
  type: String
  description: |-
    The ID to use for the tool, which will become the final component of
    the tool's resource name. If not provided, a unique ID will be
    automatically assigned for the tool.
  immutable: true
  url_param_only: true
  required: true
properties:
- name: clientFunction
  type: NestedObject
  description: |-
    Represents a client-side function that the agent can invoke. When the
    tool is chosen by the agent, control is handed off to the client.
    The client is responsible for executing the function and returning the result
    as a ToolResponse to continue the interaction with the agent.
  properties:
  - name: description
    type: String
    description: The function description.
  - name: name
    type: String
    description: The function name.
    required: true
  - name: parameters
    type: NestedObject
    description: Represents a select subset of an OpenAPI 3.0 schema object.
    properties:
    - name: description
      type: String
      description: The description of the data.
    - name: enum
      type: Array
      description: |-
        Possible values of the element of primitive type with enum format.
        Examples:
        1. We can define direction as :
        {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]}
        2. We can define apartment number as :
        {type:INTEGER, format:enum, enum:["101", "201", "301"]}
      item_type:
        type: String
    - name: nullable
      type: Boolean
      description: Indicates if the value may be null.
    - name: ref
      type: String
      description: |-
        Allows indirect references between schema nodes. The value should be a
        valid reference to a child of the root `defs`.
        For example, the following schema defines a reference to a schema node
        named "Pet":
        type: object
        properties:
          pet:
            ref: #/defs/Pet
        defs:
          Pet:
            type: object
            properties:
              name:
                type: string
        The value of the "pet" property is a reference to the schema node
        named "Pet".
        See details in
        https://json-schema.org/understanding-json-schema/structuring.
    - name: required
      type: Array
      description: Required properties of Type.OBJECT.
      item_type:
        type: String
    - name: type
      type: String
      description: |-
        The type of the data.
        Possible values:
        STRING
        INTEGER
        NUMBER
        BOOLEAN
        OBJECT
        ARRAY
      required: true
    - name: uniqueItems
      type: Boolean
      description: Indicate the items in the array must be unique. Only applies to TYPE.ARRAY.
    - name: defs
      type: String
      description: A map of definitions for use by ref. Only allowed at the root of the schema.
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: default
      description: |-
        Optional. Default value of the data. Represents a dynamically typed value
        which can be either null, a number, a string, a boolean, a struct,
        or a list of values. The provided default value must be compatible
        with the defined 'type' and other schema constraints.
      required: false
    - name: additionalProperties
      type: String
      description: |-
        Optional. Defines the schema for additional properties allowed in an object.
        The value must be a valid JSON string representing the Schema object.
        (Note: OpenAPI also allows a boolean, this definition expects a Schema JSON).
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
      required: false
    - name: anyOf
      type: String
      description: Optional. The instance value should be valid against at least one of the schemas in this list.
      required: false
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: prefixItems
      type: String
      description: Optional. Schemas of initial elements of Type.ARRAY.
      required: false
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: properties
      type: String
      description: Properties of Type.OBJECT.
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: items
      type: String
      description: Schema of the elements of Type.ARRAY.
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
  - name: response
    type: NestedObject
    description: Represents a select subset of an OpenAPI 3.0 schema object.
    properties:
    - name: description
      type: String
      description: The description of the data.
    - name: enum
      type: Array
      description: |-
        Possible values of the element of primitive type with enum format.
        Examples:
        1. We can define direction as :
        {type:STRING, format:enum, enum:["EAST", NORTH", "SOUTH", "WEST"]}
        2. We can define apartment number as :
        {type:INTEGER, format:enum, enum:["101", "201", "301"]}
      item_type:
        type: String
    - name: nullable
      type: Boolean
      description: Indicates if the value may be null.
    - name: ref
      type: String
      description: |-
        Allows indirect references between schema nodes. The value should be a
        valid reference to a child of the root `defs`.
        For example, the following schema defines a reference to a schema node
        named "Pet":
        type: object
        properties:
          pet:
            ref: #/defs/Pet
        defs:
          Pet:
            type: object
            properties:
              name:
                type: string
        The value of the "pet" property is a reference to the schema node
        named "Pet".
        See details in
        https://json-schema.org/understanding-json-schema/structuring.
    - name: required
      type: Array
      description: Required properties of Type.OBJECT.
      item_type:
        type: String
    - name: type
      type: String
      description: |-
        The type of the data.
        Possible values:
        STRING
        INTEGER
        NUMBER
        BOOLEAN
        OBJECT
        ARRAY
      required: true
    - name: uniqueItems
      type: Boolean
      description: Indicate the items in the array must be unique. Only applies to TYPE.ARRAY.
    - name: defs
      type: String
      description: A map of definitions for use by ref. Only allowed at the root of the schema.
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: default
      description: |-
        Optional. Default value of the data. Represents a dynamically typed value
        which can be either null, a number, a string, a boolean, a struct,
        or a list of values. The provided default value must be compatible
        with the defined 'type' and other schema constraints.
      required: false
    - name: additionalProperties
      type: String
      description: |-
        Optional. Defines the schema for additional properties allowed in an object.
        The value must be a valid JSON string representing the Schema object.
        (Note: OpenAPI also allows a boolean, this definition expects a Schema JSON).
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
      required: false
    - name: anyOf
      type: String
      description: Optional. The instance value should be valid against at least one of the schemas in this list.
      required: false
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: prefixItems
      type: String
      description: Optional. Schemas of initial elements of Type.ARRAY.
      required: false
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: properties
      type: String
      description: Properties of Type.OBJECT.
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
    - name: items
      type: String
      description: Schema of the elements of Type.ARRAY.
      state_func: 'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v); return s }'
      custom_flatten: 'templates/terraform/custom_flatten/json_schema.tmpl'
      custom_expand: 'templates/terraform/custom_expand/json_value.tmpl'
      validation:
        function: 'validation.StringIsJSON'
- name: createTime
  type: String
  description: Timestamp when the tool was created.
  output: true
- name: dataStoreTool
  type: NestedObject
  description: |-
    Tool to retrieve from Vertex AI Search datastore or engine for grounding.
    Accepts either a datastore or an engine, but not both.
    See Vertex AI Search:
    https://cloud.google.com/generative-ai-app-builder/docs/enterprise-search-introduction.
  properties:
  - name: boostSpecs
    type: Array
    description: Boost specification to boost certain documents.
    item_type:
      type: NestedObject
      properties:
      - name: dataStores
        type: Array
        description: |-
          The Data Store where the boosting configuration is applied. Full resource
          name of DataStore, such as
          projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}.
        required: true
        item_type:
          type: String
      - name: spec
        type: Array
        description: A list of boosting specifications.
        required: true
        item_type:
          type: NestedObject
          properties:
          - name: conditionBoostSpecs
            type: Array
            description: A list of boosting specifications.
            required: true
            item_type:
              type: NestedObject
              properties:
              - name: boost
                type: Double
                description: |-
                  Strength of the boost, which should be in [-1, 1]. Negative boost means
                  demotion. Default is 0.0.
                  Setting to 1.0 gives the suggestions a big promotion. However, it does
                  not necessarily mean that the top result will be a boosted suggestion.
                  Setting to -1.0 gives the suggestions a big demotion. However, other
                  suggestions that are relevant might still be shown.
                  Setting to 0.0 means no boost applied. The boosting condition is
                  ignored.
              - name: boostControlSpec
                type: NestedObject
                description: |-
                  Specification for custom ranking based on customer specified attribute
                  value. It provides more controls for customized ranking than the simple
                  (condition, boost) combination above.
                properties:
                - name: attributeType
                  type: String
                  description: |-
                    The attribute type to be used to determine the boost amount. The
                    attribute value can be derived from the field value of the specified
                    field_name. In the case of numerical it is straightforward i.e.
                    attribute_value = numerical_field_value. In the case of freshness
                    however, attribute_value = (time.now() - datetime_field_value).
                    Possible values:
                    NUMERICAL
                    FRESHNESS
                - name: controlPoints
                  type: Array
                  description: |-
                    The control points used to define the curve. The monotonic function
                    (defined through the interpolation_type above) passes through the
                    control points listed here.
                  item_type:
                    type: NestedObject
                    properties:
                    - name: attributeValue
                      type: String
                      description: |-
                        Can be one of:
                        1. The numerical field value.
                        2. The duration spec for freshness:
                        The value must be formatted as an XSD `dayTimeDuration` value (a
                        restricted subset of an ISO 8601 duration value). The pattern for
                        this is: `nDnM]`.
                    - name: boostAmount
                      type: Double
                      description: |-
                        The value between -1 to 1 by which to boost the score if the
                        attribute_value evaluates to the value specified above.
                - name: fieldName
                  type: String
                  description: |-
                    The name of the field whose value will be used to determine the
                    boost amount.
                - name: interpolationType
                  type: String
                  description: |-
                    The interpolation type to be applied to connect the control points
                    listed below.
                    Possible values:
                    LINEAR
              - name: condition
                type: String
                description: |-
                  An expression which specifies a boost condition. The syntax is the same
                  as filter expression syntax. Currently, the only supported condition is
                  a list of BCP-47 lang codes.
                  Example: To boost suggestions in languages en or fr:
                  (lang_code: ANY("en", "fr"))
                required: true
  - name: description
    type: String
    description: The tool description.
  - name: engineSource
    type: NestedObject
    description: |-
      Configuration for searching within an Engine, potentially targeting
      specific DataStores.
    properties:
    - name: dataStoreSources
      type: Array
      description: |-
        Use to target specific DataStores within the Engine.
        If empty, the search applies to all DataStores associated with the
        Engine.
      item_type:
        type: NestedObject
        properties:
        - name: dataStore
          type: NestedObject
          description: A DataStore resource in Vertex AI Search.
          properties:
          - name: connectorConfig
            type: NestedObject
            description: The connector config for the data store connection.
            output: true
            properties:
            - name: collection
              type: String
              description: Resource name of the collection the data store belongs to.
            - name: collectionDisplayName
              type: String
              description: Display name of the collection the data store belongs to.
            - name: dataSource
              type: String
              description: |-
                The name of the data source.
                Example: `salesforce`, `jira`, `confluence`, `bigquery`.
          - name: createTime
            type: String
            description: Timestamp when the data store was created.
            output: true
          - name: displayName
            type: String
            description: The display name of the data store.
            output: true
          - name: documentProcessingMode
            type: String
            description: |-
              The document processing mode for the data store connection.
              Only set for PUBLIC_WEB and UNSTRUCTURED data stores.
              Possible values:
              DOCUMENTS
              CHUNKS
            output: true
          - name: name
            type: String
            description: |-
              Full resource name of the DataStore.
              Format:
              `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}`
            required: true
          - name: type
            type: String
            description: |-
              The type of the data store. This field is readonly and populated by the
              server.
              Possible values:
              PUBLIC_WEB
              UNSTRUCTURED
              FAQ
              CONNECTOR
            output: true
        - name: filter
          type: String
          description: |-
            Filter specification for the DataStore.
            See:
            https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata
    - name: engine
      type: String
      description: |-
        Full resource name of the Engine.
        Format:
        `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}`
      required: true
    - name: filter
      type: String
      description: |-
        A filter applied to the search across the Engine. Not relevant and not
        used if 'data_store_sources' is provided.
        See:
        https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata
  - name: maxResults
    type: Integer
    description: |-
      Number of search results to return per query.
      The default value is 10. The maximum allowed value is 10.
  - name: modalityConfigs
    type: Array
    description: The modality configs for the data store.
    item_type:
      type: NestedObject
      properties:
      - name: groundingConfig
        type: NestedObject
        description: Grounding configuration.
        properties:
        - name: disabled
          type: Boolean
          description: Whether grounding is disabled.
        - name: groundingLevel
          type: Double
          description: |-
            The groundedness threshold of the answer based on the retrieved sources.
            The value has a configurable range of [1, 5]. The level is used to
            threshold the groundedness of the answer, meaning that all responses with
            a groundedness score below the threshold will fall back to returning
            relevant snippets only.
            For example, a level of 3 means that the groundedness score must be
            3 or higher for the response to be returned.
      - name: modalityType
        type: String
        description: |-
          The modality type.
          Possible values:
          TEXT
          AUDIO
        required: true
      - name: rewriterConfig
        type: NestedObject
        description: Rewriter configuration.
        properties:
        - name: disabled
          type: Boolean
          description: Whether the rewriter is disabled.
        - name: modelSettings
          type: NestedObject
          description: Model settings contains various configurations for the LLM model.
          required: true
          properties:
          - name: model
            type: String
            description: |-
              The LLM model that the agent should use.
              If not set, the agent will inherit the model from its parent agent.
          - name: temperature
            type: Double
            description: |-
              If set, this temperature will be used for the LLM model. Temperature
              controls the randomness of the model's responses. Lower temperatures
              produce responses that are more predictable. Higher temperatures produce
              responses that are more creative.
        - name: prompt
          type: String
          description: The prompt definition. If not set, default prompt will be used.
      - name: summarizationConfig
        type: NestedObject
        description: Summarization configuration.
        properties:
        - name: disabled
          type: Boolean
          description: Whether summarization is disabled.
        - name: modelSettings
          type: NestedObject
          description: Model settings contains various configurations for the LLM model.
          properties:
          - name: model
            type: String
            description: |-
              The LLM model that the agent should use.
              If not set, the agent will inherit the model from its parent agent.
          - name: temperature
            type: Double
            description: |-
              If set, this temperature will be used for the LLM model. Temperature
              controls the randomness of the model's responses. Lower temperatures
              produce responses that are more predictable. Higher temperatures produce
              responses that are more creative.
        - name: prompt
          type: String
          description: The prompt definition. If not set, default prompt will be used.
  - name: name
    type: String
    description: The data store tool name.
    required: true
- name: displayName
  type: String
  description: |-
    The display name of the tool, derived based on the tool's type. For
    example, display name of a ClientFunction is derived
    from its `name` property.
  output: true
- name: etag
  type: String
  description: |-
    Etag used to ensure the object hasn't changed during a read-modify-write
    operation. If the etag is empty, the update will overwrite any concurrent
    changes.
  output: true
- name: executionType
  type: String
  description: |2-
    Possible values:
    SYNCHRONOUS
    ASYNCHRONOUS
- name: generatedSummary
  type: String
  description: |-
    If the tool is generated by the LLM assistant, this field contains a
    descriptive summary of the generation.
  output: true
- name: googleSearchTool
  type: NestedObject
  description: |-
    Represents a tool to perform Google web searches for grounding.
    See
    https://cloud.google.com/vertex-ai/generative-ai/docs/grounding/grounding-with-google-search.
  properties:
  - name: description
    type: String
    description: Description of the tool's purpose.
  - name: excludeDomains
    type: Array
    description: |-
      List of domains to be excluded from the search results.
      Example: "example.com".
      A maximum of 2000 domains can be excluded.
    item_type:
      type: String
  - name: name
    type: String
    description: The name of the tool.
    required: true
- name: name
  type: String
  description: |-
    Identifier. The unique identifier of the tool.
    Format:
    `projects/{project}/locations/{location}/apps/{app}/tools/{tool}`
  output: true
  custom_flatten: 'templates/terraform/custom_flatten/name_from_self_link.tmpl'
- name: openApiTool
  type: NestedObject
  description: A remote API tool defined by an OpenAPI schema.
  output: true
  properties:
  - name: apiAuthentication
    type: NestedObject
    description: Authentication information required for API calls.
    properties:
    - name: apiKeyConfig
      type: NestedObject
      description: Configurations for authentication with API key.
      properties:
      - name: apiKeySecretVersion
        type: String
        description: |-
          The name of the SecretManager secret version resource storing the API key.
          Format: `projects/{project}/secrets/{secret}/versions/{version}`
          Note: You should grant `roles/secretmanager.secretAccessor` role to the CES
          service agent
          `service-<PROJECT-NUMBER>@gcp-sa-ces.iam.gserviceaccount.com`.
        required: true
      - name: keyName
        type: String
        description: |-
          The parameter name or the header name of the API key.
          E.g., If the API request is "https://example.com/act?X-Api-Key=", "X-Api-Key" would be the parameter name.
        required: true
      - name: requestLocation
        type: String
        description: |-
          Key location in the request.
          Possible values:
          HEADER
          QUERY_STRING
        required: true
    - name: oauthConfig
      type: NestedObject
      description: Configurations for authentication with OAuth.
      properties:
      - name: clientId
        type: String
        description: The client ID from the OAuth provider.
        required: true
      - name: clientSecretVersion
        type: String
        description: |-
          The name of the SecretManager secret version resource storing the
          client secret.
          Format: `projects/{project}/secrets/{secret}/versions/{version}`
          Note: You should grant `roles/secretmanager.secretAccessor` role to the CES
          service agent
          `service-<PROJECT-NUMBER>@gcp-sa-ces.iam.gserviceaccount.com`.
        required: true
      - name: oauthGrantType
        type: String
        description: |-
          OAuth grant types.
          Possible values:
          CLIENT_CREDENTIAL
        required: true
      - name: scopes
        type: Array
        description: The OAuth scopes to grant.
        item_type:
          type: String
      - name: tokenEndpoint
        type: String
        description: The token endpoint in the OAuth provider to exchange for an access token.
        required: true
    - name: serviceAccountAuthConfig
      type: NestedObject
      description: Configurations for authentication using a custom service account.
      properties:
      - name: serviceAccount
        type: String
        description: |-
          The email address of the service account used for authenticatation. CES
          uses this service account to exchange an access token and the access token
          is then sent in the `Authorization` header of the request.
          The service account must have the
          `roles/iam.serviceAccountTokenCreator` role granted to the
          CES service agent
          `service-<PROJECT-NUMBER>@gcp-sa-ces.iam.gserviceaccount.com`.
        required: true
    - name: serviceAgentIdTokenAuthConfig
      type: NestedObject
      description: |-
        Configurations for authentication with [ID
        token](https://cloud.google.com/docs/authentication/token-types#id) generated
        from service agent.
      allow_empty_object: true
      send_empty_value: true
      properties: [] # Explicitly show no properties
  - name: description
    type: String
    description: |-
      The description of the tool. If not provided, the description of the tool
      will be derived from the OpenAPI schema, from `operation.description` or
      `operation.summary`.
  - name: ignoreUnknownFields
    type: Boolean
    description: If true, the agent will ignore unknown fields in the API response.
  - name: name
    type: String
    description: |-
      The name of the tool. If not provided, the name of the tool will be
      derived from the OpenAPI schema, from `operation.operationId`.
  - name: openApiSchema
    type: String
    description: The OpenAPI schema in JSON or YAML format.
    required: true
  - name: serviceDirectoryConfig
    type: NestedObject
    description: Configuration for tools using Service Directory.
    properties:
    - name: service
      type: String
      description: |-
        The name of [Service
        Directory](https://cloud.google.com/service-directory) service.
        Format:
        `projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}`.
        Location of the service directory must be the same as the location of the
        app.
      required: true
  - name: tlsConfig
    type: NestedObject
    description: The TLS configuration.
    properties:
    - name: caCerts
      type: Array
      description: |-
        Specifies a list of allowed custom CA certificates for HTTPS
        verification.
      required: true
      item_type:
        type: NestedObject
        properties:
        - name: cert
          type: String
          description: |-
            The allowed custom CA certificates (in DER format) for
            HTTPS verification. This overrides the default SSL trust store. If this
            is empty or unspecified, CES will use Google's default trust
            store to verify certificates. N.B. Make sure the HTTPS server
            certificates are signed with "subject alt name". For instance a
            certificate can be self-signed using the following command,
            openssl x509 -req -days 200 -in example.com.csr \
            -signkey example.com.key \
            -out example.com.crt \
            -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")

            A base64-encoded string.
          required: true
        - name: displayName
          type: String
          description: |-
            The name of the allowed custom CA certificates. This
            can be used to disambiguate the custom CA certificates.
          required: true
  - name: url
    type: String
    description: |-
      The server URL of the Open API schema. This field is only set in tools in the 
      environment dependencies during the export process if the schema contains a 
      server url. During the import process, if this url is present in the environment 
      dependencies and the schema has the $env_var placeholder, it will replace the 
      placeholder in the schema.
- name: pythonFunction
  type: NestedObject
  description: A Python function tool.
  properties:
  - name: description
    type: String
    description: |-
      The description of the Python function, parsed from the python code's
      docstring.
    output: true
  - name: name
    type: String
    description: |-
      The name of the Python function to execute. Must match a Python function
      name defined in the python code. Case sensitive. If the name is not
      provided, the first function defined in the python code will be used.
  - name: pythonCode
    type: String
    description: The Python code to execute for the tool.
- name: updateTime
  type: String
  description: Timestamp when the tool was last updated.
  output: true
- name: systemTool
  type: NestedObject
  description: The system tool.
  output: true
  properties:
  - name: description
    type: String
    description: |-
      The description of the system tool.
    output: true
  - name: name
    type: String
    description: |-
      The name of the system tool.
  