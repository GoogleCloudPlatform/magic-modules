# Copyright 2024 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Warning: This is a temporary file, and should not be edited directly
---
name: 'KeyRingImportJob'
description: |
  A `KeyRingImportJob` can be used to create `CryptoKeys` and `CryptoKeyVersions` using pre-existing
  key material, generated outside of Cloud KMS. A `KeyRingImportJob` expires 3 days after it is created.
  Once expired, Cloud KMS will no longer be able to import or unwrap any key material that
  was wrapped with the `KeyRingImportJob`'s public key.


  ~> **Note:** KeyRingImportJobs cannot be deleted from Google Cloud Platform.
  Destroying a Terraform-managed KeyRingImportJob will remove it from state but
  *will not delete the resource from the project.*
references:
  guides:
    'Importing a key': 'https://cloud.google.com/kms/docs/importing-a-key'
  api: 'https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.importJobs'
docs:
id_format: '{{name}}'
base_url: '{{key_ring}}/importJobs'
self_link: '{{name}}'
create_url: '{{key_ring}}/importJobs?importJobId={{import_job_id}}'
immutable: true
import_format:
  - '{{name}}'
timeouts:
  insert_minutes: 20
  update_minutes: 20
  delete_minutes: 20
custom_code:
  custom_import: 'templates/terraform/custom_import/go/kms_key_ring_import_job.go.tmpl'
examples:
  - name: 'kms_key_ring_import_job'
    primary_resource_id: 'import-job'
    vars:
      keyring: 'keyring-example'
      cryptokey: 'cryptokey-example'
    exclude_test: true
parameters:
  - name: 'keyRing'
    type: String
    description: |
      The KeyRing that this import job belongs to.
      Format: `'projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}'`.
    url_param_only: true
    required: true
    immutable: true
    ignore_read: true
    diff_suppress_func: 'kmsCryptoKeyRingsEquivalent'
  - name: 'importJobId'
    type: String
    description: |
      It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
    url_param_only: true
    required: true
    immutable: true
properties:
  - name: 'name'
    type: String
    description: |
      The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.
    output: true
  - name: 'importMethod'
    type: Enum
    description: |
      The wrapping method to be used for incoming key material.
    required: true
    immutable: true
    enum_values:
      - 'RSA_OAEP_3072_SHA1_AES_256'
      - 'RSA_OAEP_4096_SHA1_AES_256'
  - name: 'protectionLevel'
    type: Enum
    description: |
      The protection level of the ImportJob. This must match the protectionLevel of the
      versionTemplate on the CryptoKey you attempt to import into.
    required: true
    immutable: true
    enum_values:
      - 'SOFTWARE'
      - 'HSM'
      - 'EXTERNAL'
  - name: 'expireTime'
    type: Time
    description: |
      The time at which this resource is scheduled for expiration and can no longer be used.
      This is in RFC3339 text format.
    output: true
  - name: 'state'
    type: String
    description: |
      The current state of the ImportJob, indicating if it can be used.
    output: true
  - name: 'publicKey'
    type: NestedObject
    description: |
      The public key with which to wrap key material prior to import. Only returned if state is `ACTIVE`.
    output: true
    properties:
      - name: 'pem'
        type: String
        description: |
          The public key, encoded in PEM format. For more information, see the RFC 7468 sections
          for General Considerations and Textual Encoding of Subject Public Key Info.
        output: true
  - name: 'attestation'
    type: NestedObject
    description: |
      Statement that was generated and signed by the key creator (for example, an HSM) at key creation time.
      Use this statement to verify attributes of the key as stored on the HSM, independently of Google.
      Only present if the chosen ImportMethod is one with a protection level of HSM.
    output: true
    properties:
      - name: 'format'
        type: String
        description: |
          The format of the attestation data.
        output: true
      - name: 'content'
        type: String
        description: |
          The attestation data provided by the HSM when the key operation was performed.
          A base64-encoded string.
        output: true
