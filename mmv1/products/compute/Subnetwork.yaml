# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'Subnetwork'
kind: 'compute#subnetwork'
base_url: projects/{{project}}/regions/{{region}}/subnetworks
collection_url_key: 'items'
immutable: true
has_self_link: true
description: |
  A VPC network is a virtual version of the traditional physical networks
  that exist within and between physical data centers. A VPC network
  provides connectivity for your Compute Engine virtual machine (VM)
  instances, Container Engine containers, App Engine Flex services, and
  other network-related resources.

  Each GCP project contains one or more VPC networks. Each VPC network is a
  global entity spanning all GCP regions. This global VPC network allows VM
  instances and other resources to communicate with each other via internal,
  private IP addresses.

  Each VPC network is subdivided into subnets, and each subnet is contained
  within a single region. You can have more than one subnet in a region for
  a given VPC network. Each subnet has a contiguous private RFC1918 IP
  space. You create instances, containers, and the like in these subnets.
  When you create an instance, you must create it in a subnet, and the
  instance draws its internal IP address from that subnet.

  Virtual machine (VM) instances in a VPC network can communicate with
  instances in all other subnets of the same VPC network, regardless of
  region, using their RFC1918 private IP addresses. You can isolate portions
  of the network, even entire subnets, using firewall rules.
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    kind: 'compute#operation'
    path: 'name'
    base_url: 'projects/{{project}}/regions/{{region}}/operations/{{op_id}}'
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: 'targetLink'
  status: !ruby/object:Api::OpAsync::Status
    path: 'status'
    complete: 'DONE'
    allowed:
      - 'PENDING'
      - 'RUNNING'
      - 'DONE'
  error: !ruby/object:Api::OpAsync::Error
    path: 'error/errors'
    message: 'message'
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Private Google Access': 'https://cloud.google.com/vpc/docs/configure-private-google-access'
    'Cloud Networking': 'https://cloud.google.com/vpc/docs/using-vpc'
  api: 'https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks'
iam_policy: !ruby/object:Api::Resource::IamPolicy
  allowed_iam_role: 'roles/compute.networkUser'
  parent_resource_attribute: 'subnetwork'
  iam_conditions_request_type: :QUERY_PARAM
custom_code: !ruby/object:Provider::Terraform::CustomCode
  constants: templates/terraform/constants/subnetwork.erb
  extra_schema_entry: templates/terraform/extra_schema_entry/subnetwork.erb
custom_diff: [
  'customdiff.ForceNewIfChange("ip_cidr_range", IsShrinkageIpCidr)',
]
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_basic'
    primary_resource_id: 'network-with-private-secondary-ip-ranges'
    vars:
      subnetwork_name: 'test-subnetwork'
      network_name: 'test-network'
    primary_resource_name: "fmt.Sprintf(\"tf-test-test-subnetwork%s\",
      context[\"\
      random_suffix\"])"
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_logging_config'
    primary_resource_id: 'subnet-with-logging'
    vars:
      subnetwork_name: 'log-test-subnetwork'
      network_name: 'log-test-network'
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_internal_l7lb'
    min_version: beta
    primary_resource_id: 'network-for-l7lb'
    vars:
      subnetwork_name: 'l7lb-test-subnetwork'
      network_name: 'l7lb-test-network'
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_ipv6'
    primary_resource_id: 'subnetwork-ipv6'
    vars:
      subnetwork_name: 'ipv6-test-subnetwork'
      network_name: 'ipv6-test-network'
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_internal_ipv6'
    primary_resource_id: 'subnetwork-internal-ipv6'
    vars:
      subnetwork_name: 'internal-ipv6-test-subnetwork'
      network_name: 'internal-ipv6-test-network'
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_purpose_private_nat'
    min_version: beta
    primary_resource_id: 'subnetwork-purpose-private-nat'
    vars:
      subnetwork_name: 'subnet-purpose-test-subnetwork'
      network_name: 'subnet-purpose-test-network'
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_cidr_overlap'
    min_version: beta
    primary_resource_id: 'subnetwork-cidr-overlap'
    vars:
      subnetwork_name: 'subnet-cidr-overlap'
      network_name: 'net-cidr-overlap'
  - !ruby/object:Provider::Terraform::Examples
    name: 'subnetwork_reserved_internal_range'
    min_version: beta
    primary_resource_id: 'subnetwork-reserved-internal-range'
    vars:
      subnetwork_name: 'subnetwork-reserved-internal-range'
      network_name: 'network-reserved-internal-range'
properties:
  - !ruby/object:Api::Type::Time
    name: 'creationTimestamp'
    description: 'Creation timestamp in RFC3339 text format.'
    output: true
  - !ruby/object:Api::Type::String
    name: 'description'
    description: |
      An optional description of this resource. Provide this property when
      you create the resource. This field can be set only at resource
      creation time.
  - !ruby/object:Api::Type::String
    name: 'gatewayAddress'
    description: |
      The gateway address for default routes to reach destination addresses
      outside this subnetwork.
    output: true
  - !ruby/object:Api::Type::String
    name: 'ipCidrRange'
    default_from_api: true
    description: |
      The range of internal addresses that are owned by this subnetwork.
      Provide this property when you create the subnetwork. For example,
      10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and
      non-overlapping within a network. Only IPv4 is supported.
      Field is optional when `reserved_internal_range` is defined, otherwise required.
    required: false
    update_verb: :POST
    update_url: 'projects/{{project}}/regions/{{region}}/subnetworks/{{name}}/expandIpCidrRange'
    validation: !ruby/object:Provider::Terraform::Validation
      function: 'verify.ValidateIpCidrRange'
  - !ruby/object:Api::Type::ResourceRef
    name: 'reservedInternalRange'
    description: |
      The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
      E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
    resource: 'InternalRange'
    imports: 'selfLink'
  - !ruby/object:Api::Type::String
    name: 'name'
    description: |
      The name of the resource, provided by the client when initially
      creating the resource. The name must be 1-63 characters long, and
      comply with RFC1035. Specifically, the name must be 1-63 characters
      long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which
      means the first character must be a lowercase letter, and all
      following characters must be a dash, lowercase letter, or digit,
      except the last character, which cannot be a dash.
    required: true
    validation: !ruby/object:Provider::Terraform::Validation
      function: 'verify.ValidateGCEName'
  - !ruby/object:Api::Type::ResourceRef
    name: 'network'
    resource: 'Network'
    imports: 'selfLink'
    description: |
      The network this subnet belongs to.
      Only networks that are in the distributed mode can have subnetworks.
    immutable: true
    required: true
    custom_expand: 'templates/terraform/custom_expand/resourceref_with_validation.go.erb'
  - !ruby/object:Api::Type::String
    name: 'purpose'
    immutable: true
    description: |
      The purpose of the resource. This field can be either `PRIVATE_RFC_1918`, `REGIONAL_MANAGED_PROXY`, `GLOBAL_MANAGED_PROXY`, `PRIVATE_SERVICE_CONNECT` or `PRIVATE_NAT`([Beta](https://terraform.io/docs/providers/google/guides/provider_versions.html)).
      A subnet with purpose set to `REGIONAL_MANAGED_PROXY` is a user-created subnetwork that is reserved for regional Envoy-based load balancers.
      A subnetwork in a given region with purpose set to `GLOBAL_MANAGED_PROXY` is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.
      A subnetwork with purpose set to `PRIVATE_SERVICE_CONNECT` reserves the subnet for hosting a Private Service Connect published service.
      A subnetwork with purpose set to `PRIVATE_NAT` is used as source range for Private NAT gateways.
      Note that `REGIONAL_MANAGED_PROXY` is the preferred setting for all regional Envoy load balancers.
      If unspecified, the purpose defaults to `PRIVATE_RFC_1918`.
    default_from_api: true
  - !ruby/object:Api::Type::Enum
    name: 'role'
    update_verb: :PATCH
    update_url: projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    update_id: 'role'
    fingerprint_name: 'fingerprint'
    values:
      - :ACTIVE
      - :BACKUP
    description: |
      The role of subnetwork.
      Currently, this field is only used when `purpose` is `REGIONAL_MANAGED_PROXY`.
      The value can be set to `ACTIVE` or `BACKUP`.
      An `ACTIVE` subnetwork is one that is currently being used for Envoy-based load balancers in a region.
      A `BACKUP` subnetwork is one that is ready to be promoted to `ACTIVE` or is currently draining.
  - !ruby/object:Api::Type::Array
    name: 'secondaryIpRange'
    api_name: secondaryIpRanges
    unordered_list: true
    default_from_api: true
    schema_config_mode_attr: true
    send_empty_value: true
    description: |
      An array of configurations for secondary IP ranges for VM instances
      contained in this subnetwork. The primary IP of such VM must belong
      to the primary ipCidrRange of the subnetwork. The alias IPs may belong
      to either primary or secondary ranges.

      **Note**: This field uses [attr-as-block mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html) to avoid
      breaking users during the 0.12 upgrade. To explicitly send a list
      of zero objects you must use the following syntax:
      `example=[]`
      For more details about this behavior, see [this section](https://www.terraform.io/docs/configuration/attr-as-blocks.html#defining-a-fixed-object-collection-value).
    update_verb: :PATCH
    update_url: projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    update_id: 'secondaryIpRanges'
    fingerprint_name: 'fingerprint'
    item_type: !ruby/object:Api::Type::NestedObject
      properties:
        - !ruby/object:Api::Type::String
          name: 'rangeName'
          required: true
          validation: !ruby/object:Provider::Terraform::Validation
            function: 'verify.ValidateGCEName'
          description: |
            The name associated with this subnetwork secondary range, used
            when adding an alias IP range to a VM instance. The name must
            be 1-63 characters long, and comply with RFC1035. The name
            must be unique within the subnetwork.
        - !ruby/object:Api::Type::String
          name: 'ipCidrRange'
          required: false
          default_from_api: true
          validation: !ruby/object:Provider::Terraform::Validation
            function: 'verify.ValidateIpCidrRange'
          description: |
            The range of IP addresses belonging to this subnetwork secondary
            range. Provide this property when you create the subnetwork.
            Ranges must be unique and non-overlapping with all primary and
            secondary IP ranges within a network. Only IPv4 is supported.
            Field is optional when `reserved_internal_range` is defined, otherwise required.
        - !ruby/object:Api::Type::ResourceRef
          name: 'reservedInternalRange'
          description: |
            The ID of the reserved internal range. Must be prefixed with `networkconnectivity.googleapis.com`
            E.g. `networkconnectivity.googleapis.com/projects/{project}/locations/global/internalRanges/{rangeId}`
          resource: 'InternalRange'
          imports: 'selfLink'
  - !ruby/object:Api::Type::Boolean
    name: 'privateIpGoogleAccess'
    description: |
      When enabled, VMs in this subnetwork without external IP addresses can
      access Google APIs and services by using Private Google Access.
    update_verb: :POST
    update_url: 'projects/{{project}}/regions/{{region}}/subnetworks/{{name}}/setPrivateIpGoogleAccess'
    default_from_api: true
  - !ruby/object:Api::Type::String
    name: 'privateIpv6GoogleAccess'
    update_verb: :PATCH
    update_url: projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    description: The private IPv6 google access type for the VMs in this subnet.
    fingerprint_name: 'fingerprint'
    default_from_api: true
  - !ruby/object:Api::Type::ResourceRef
    name: 'region'
    resource: 'Region'
    imports: 'name'
    description: |
      The GCP region for this subnetwork.
    required: false
    immutable: true
    default_from_api: true
    custom_flatten: 'templates/terraform/custom_flatten/name_from_self_link.erb'
    custom_expand: 'templates/terraform/custom_expand/resourceref_with_validation.go.erb'
  - !ruby/object:Api::Type::NestedObject
    name: 'logConfig'
    update_verb: :PATCH
    update_url: projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    fingerprint_name: 'fingerprint'
    update_id: 'logConfig'
    description: |
      This field denotes the VPC flow logging options for this subnetwork. If
      logging is enabled, logs are exported to Cloud Logging. Flow logging
      isn't supported if the subnet `purpose` field is set to subnetwork is
      `REGIONAL_MANAGED_PROXY` or `GLOBAL_MANAGED_PROXY`.
    send_empty_value: true
    custom_expand: 'templates/terraform/custom_expand/subnetwork_log_config.go.erb'
    custom_flatten: 'templates/terraform/custom_flatten/subnetwork_log_config.go.erb'
    properties:
      - !ruby/object:Api::Type::Enum
        name: 'aggregationInterval'
        at_least_one_of:
          - log_config.0.aggregation_interval
          - log_config.0.flow_sampling
          - log_config.0.metadata
          - log_config.0.filterExpr
        description: |
          Can only be specified if VPC flow logging for this subnetwork is enabled.
          Toggles the aggregation interval for collecting flow logs. Increasing the
          interval time will reduce the amount of generated flow logs for long
          lasting connections. Default is an interval of 5 seconds per connection.
        values:
          - :INTERVAL_5_SEC
          - :INTERVAL_30_SEC
          - :INTERVAL_1_MIN
          - :INTERVAL_5_MIN
          - :INTERVAL_10_MIN
          - :INTERVAL_15_MIN
        default_value: :INTERVAL_5_SEC
      - !ruby/object:Api::Type::Double
        name: 'flowSampling'
        at_least_one_of:
          - log_config.0.aggregation_interval
          - log_config.0.flow_sampling
          - log_config.0.metadata
          - log_config.0.filterExpr
        description: |
          Can only be specified if VPC flow logging for this subnetwork is enabled.
          The value of the field must be in [0, 1]. Set the sampling rate of VPC
          flow logs within the subnetwork where 1.0 means all collected logs are
          reported and 0.0 means no logs are reported. Default is 0.5 which means
          half of all collected logs are reported.
        default_value: 0.5
      - !ruby/object:Api::Type::Enum
        name: 'metadata'
        at_least_one_of:
          - log_config.0.aggregation_interval
          - log_config.0.flow_sampling
          - log_config.0.metadata
          - log_config.0.filterExpr
        description: |
          Can only be specified if VPC flow logging for this subnetwork is enabled.
          Configures whether metadata fields should be added to the reported VPC
          flow logs.
        values:
          - :EXCLUDE_ALL_METADATA
          - :INCLUDE_ALL_METADATA
          - :CUSTOM_METADATA
        default_value: :INCLUDE_ALL_METADATA
      - !ruby/object:Api::Type::Array
        name: 'metadataFields'
        description: |
          List of metadata fields that should be added to reported logs.
          Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" is set to CUSTOM_METADATA.
        is_set: true
        item_type: Api::Type::String
      - !ruby/object:Api::Type::String
        name: 'filterExpr'
        at_least_one_of:
          - log_config.0.aggregation_interval
          - log_config.0.flow_sampling
          - log_config.0.metadata
          - log_config.0.filterExpr
        description: |
          Export filter used to define which VPC flow logs should be logged, as as CEL expression. See
          https://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.
          The default value is 'true', which evaluates to include everything.
        default_value: 'true'
  - !ruby/object:Api::Type::Enum
    name: 'stackType'
    update_verb: :PATCH
    update_url: projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    fingerprint_name: 'fingerprint'
    values:
      - :IPV4_ONLY
      - :IPV4_IPV6
    description: |
      The stack type for this subnet to identify whether the IPv6 feature is enabled or not.
      If not specified IPV4_ONLY will be used.
    default_from_api: true
  - !ruby/object:Api::Type::Enum
    name: 'ipv6AccessType'
    update_verb: :PATCH
    update_url: projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    fingerprint_name: 'fingerprint'
    values:
      - :EXTERNAL
      - :INTERNAL
    description: |
      The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation
      or the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet
      cannot enable direct path.
  - !ruby/object:Api::Type::String
    name: 'ipv6CidrRange'
    output: true
    description: |
      The range of internal IPv6 addresses that are owned by this subnetwork.
  - !ruby/object:Api::Type::String
    name: 'internalIpv6Prefix'
    output: true
    description: |
      The internal IPv6 address range that is assigned to this subnetwork.
  - !ruby/object:Api::Type::String
    name: 'externalIpv6Prefix'
    default_from_api: true
    description: |
      The range of external IPv6 addresses that are owned by this subnetwork.
  - !ruby/object:Api::Type::Boolean
    name: 'allowSubnetCidrRoutesOverlap'
    default_from_api: true
    update_verb: :PATCH
    update_url: projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
    fingerprint_name: 'fingerprint'
    send_empty_value: true
    min_version: beta
    description: |
      Typically packets destined to IPs within the subnetwork range that do not match
      existing resources are dropped and prevented from leaving the VPC.
      Setting this field to true will allow these packets to match dynamic routes injected
      via BGP even if their destinations match existing subnet ranges.
