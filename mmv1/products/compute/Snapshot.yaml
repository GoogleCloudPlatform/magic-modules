# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'Snapshot'
kind: 'compute#snapshot'
immutable: true
base_url: projects/{{project}}/global/snapshots
create_url: PRE_CREATE_REPLACE_ME/createSnapshot
collection_url_key: 'items'
has_self_link: true
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Official Documentation': 'https://cloud.google.com/compute/docs/disks/create-snapshots'
  api: 'https://cloud.google.com/compute/docs/reference/rest/v1/snapshots'
iam_policy: !ruby/object:Api::Resource::IamPolicy
  parent_resource_attribute: 'name'
  import_format: ['projects/{{project}}/global/snapshots/{{name}}', '{{name}}']
description: |
  Represents a Persistent Disk Snapshot resource.

  Use snapshots to back up data from your persistent disks. Snapshots are
  different from public images and custom images, which are used primarily
  to create instances or configure instance templates. Snapshots are useful
  for periodic backup of the data on your persistent disks. You can create
  snapshots from persistent disks even while they are attached to running
  instances.

  Snapshots are incremental, so you can create regular snapshots on a
  persistent disk faster and at a much lower cost than if you regularly
  created a full image of the disk.
# 'createSnapshot' is a zonal operation while 'snapshot.delete' is a global
# operation. we'll leave the object as global operation and use the disk's
# zonal operation for the create action.
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    kind: 'compute#operation'
    path: 'name'
    full_url: 'selfLink'
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: 'targetLink'
  status: !ruby/object:Api::OpAsync::Status
    path: 'status'
    complete: 'DONE'
    allowed:
      - 'PENDING'
      - 'RUNNING'
      - 'DONE'
  error: !ruby/object:Api::OpAsync::Error
    path: 'error/errors'
    message: 'message'
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'snapshot_basic'
    primary_resource_id: 'snapshot'
    primary_resource_name: "fmt.Sprintf(\"tf-test-my-snapshot%s\",
      context[\"random_suffix\"\
      ])"
    vars:
      snapshot_name: 'my-snapshot'
      disk_name: 'debian-disk'
  - !ruby/object:Provider::Terraform::Examples
    name: 'snapshot_chainname'
    primary_resource_id: 'snapshot'
    primary_resource_name: "fmt.Sprintf(\"tf-test-snapshot-chainname%s\",
      context[\"\
      random_suffix\"])"
    vars:
      snapshot_name: 'my-snapshot'
      disk_name: 'debian-disk'
      chain_name: 'snapshot-chain'
custom_code: !ruby/object:Provider::Terraform::CustomCode
  decoder: templates/terraform/decoders/snapshot.go.erb
  pre_create: templates/terraform/pre_create/compute_snapshot_precreate_url.go.erb
parameters:
  - !ruby/object:Api::Type::ResourceRef
    name: 'sourceDisk'
    resource: 'Disk'
    imports: 'name'
    description: 'A reference to the disk used to create this snapshot.'
    immutable: true
    required: true
    # ignore_read in providers - this is only used in Create
    diff_suppress_func: 'tpgresource.CompareSelfLinkOrResourceName'
    custom_expand: 'templates/terraform/custom_expand/resourceref_with_validation.go.erb'
  - !ruby/object:Api::Type::ResourceRef
    name: 'zone'
    resource: 'Zone'
    imports: 'name'
    description: 'A reference to the zone where the disk is hosted.'
    immutable: true
    ignore_read: true
    default_from_api: true
    required: false
    custom_expand: 'templates/terraform/custom_expand/resourceref_with_validation.go.erb'
  - !ruby/object:Api::Type::NestedObject
    name: 'snapshotEncryptionKey'
    description: |
      Encrypts the snapshot using a customer-supplied encryption key.

      After you encrypt a snapshot using a customer-supplied key, you must
      provide the same key if you use the snapshot later. For example, you
      must provide the encryption key when you create a disk from the
      encrypted snapshot in a future request.

      Customer-supplied encryption keys do not protect access to metadata of
      the snapshot.

      If you do not provide an encryption key when creating the snapshot,
      then the snapshot will be encrypted using an automatically generated
      key and you do not need to provide a key to use the snapshot later.
    properties:
      - !ruby/object:Api::Type::String
        name: 'rawKey'
        description: |
          Specifies a 256-bit customer-supplied encryption key, encoded in
          RFC 4648 base64 to either encrypt or decrypt this resource.
        ignore_read: true
        sensitive: true
        custom_flatten: templates/terraform/custom_flatten/compute_snapshot_snapshot_encryption_raw_key.go.erb
      - !ruby/object:Api::Type::String
        name: 'sha256'
        description: |
          The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
          encryption key that protects this resource.
        output: true
        # TODO(chrisst) Change to ResourceRef once KMS is in Magic Modules
      - !ruby/object:Api::Type::String
        name: 'kmsKeySelfLink'
        api_name: 'kmsKeyName'
        description: |
          The name of the encryption key that is stored in Google Cloud KMS.
      - !ruby/object:Api::Type::String
        name: 'kmsKeyServiceAccount'
        description: |
          The service account used for the encryption request for the given KMS key.
          If absent, the Compute Engine Service Agent service account is used.
    # ignore_read in providers - this is only used in Create
  - !ruby/object:Api::Type::NestedObject
    name: 'sourceDiskEncryptionKey'
    description: |
      The customer-supplied encryption key of the source snapshot. Required
      if the source snapshot is protected by a customer-supplied encryption
      key.
    ignore_read: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'rawKey'
        description: |
          Specifies a 256-bit customer-supplied encryption key, encoded in
          RFC 4648 base64 to either encrypt or decrypt this resource.
        # The docs list this field but it is never returned.
        sensitive: true
      - !ruby/object:Api::Type::String
        name: 'kmsKeyServiceAccount'
        description: |
          The service account used for the encryption request for the given KMS key.
          If absent, the Compute Engine Service Agent service account is used.
properties:
  - !ruby/object:Api::Type::Time
    name: 'creationTimestamp'
    description: 'Creation timestamp in RFC3339 text format.'
    output: true
  - !ruby/object:Api::Type::Integer
    name: 'snapshot_id'
    api_name: 'id'
    description: 'The unique identifier for the resource.'
    output: true
  # 'status' not useful for object convergence.
  - !ruby/object:Api::Type::Integer
    name: 'diskSizeGb'
    description: 'Size of the snapshot, specified in GB.'
    output: true
  - !ruby/object:Api::Type::String
    name: 'chainName'
    description: |
      Creates the new snapshot in the snapshot chain labeled with the
      specified name. The chain name must be 1-63 characters long and
      comply with RFC1035. This is an uncommon option only for advanced
      service owners who needs to create separate snapshot chains, for
      example, for chargeback tracking.  When you describe your snapshot
      resource, this field is visible only if it has a non-empty value.
  - !ruby/object:Api::Type::String
    name: 'name'
    required: true
    immutable: true
    description: |
      Name of the resource; provided by the client when the resource is
      created. The name must be 1-63 characters long, and comply with
      RFC1035. Specifically, the name must be 1-63 characters long and match
      the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the
      first character must be a lowercase letter, and all following
      characters must be a dash, lowercase letter, or digit, except the last
      character, which cannot be a dash.
  - !ruby/object:Api::Type::String
    name: 'description'
    immutable: true
    description: 'An optional description of this resource.'
  # 'sourceDiskId' not useful for object convergence.
  - !ruby/object:Api::Type::Integer
    name: 'storageBytes'
    description: |
      A size of the storage used by the snapshot. As snapshots share
      storage, this number is expected to change with snapshot
      creation/deletion.
    output: true
  # 'storageBytesStatus' not useful for object convergence.
  - !ruby/object:Api::Type::Array
    name: 'storageLocations'
    description: |
      Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    default_from_api: true
    item_type: Api::Type::String
  - !ruby/object:Api::Type::Array
    name: 'licenses'
    output: true
    description: |
      A list of public visible licenses that apply to this snapshot. This
      can be because the original image had licenses attached (such as a
      Windows image).  snapshotEncryptionKey nested object Encrypts the
      snapshot using a customer-supplied encryption key.
    item_type: !ruby/object:Api::Type::ResourceRef
      name: 'license'
      resource: 'License'
      imports: 'selfLink'
      description: 'A reference to a license associated with this snapshot'
    custom_expand: 'templates/terraform/custom_expand/array_resourceref_with_validation.go.erb'
  - !ruby/object:Api::Type::KeyValueLabels
    name: 'labels'
    description: Labels to apply to this Snapshot.
    update_verb: :POST
    update_url: 'projects/{{project}}/global/snapshots/{{name}}/setLabels'
  - !ruby/object:Api::Type::Fingerprint
    name: 'labelFingerprint'
    description: |
      The fingerprint used for optimistic locking of this resource. Used
      internally during updates.
    update_url: 'projects/{{project}}/global/snapshots/{{name}}/setLabels'
    update_verb: :POST
