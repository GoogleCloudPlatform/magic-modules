# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'ServerTlsPolicy'
base_url: 'projects/{{project}}/locations/{{location}}/serverTlsPolicies'
create_url: 'projects/{{project}}/locations/{{location}}/serverTlsPolicies?serverTlsPolicyId={{name}}'
min_version: beta
update_verb: :PATCH
update_mask: true
description: |
  ClientTlsPolicy is a resource that specifies how a client should authenticate connections to backends of a service. This resource itself does not affect configuration unless it is attached to a backend service resource.
references: !ruby/object:Api::Resource::ReferenceLinks
  api: 'https://cloud.google.com/traffic-director/docs/reference/network-security/rest/v1beta1/projects.locations.serverTlsPolicies'
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    path: 'name'
    base_url: '{{op_id}}'
    wait_ms: 1000
    timeouts: !ruby/object:Api::Timeouts
      insert_minutes: 30
      update_minutes: 30
      delete_minutes: 30
  result: !ruby/object:Api::OpAsync::Result
    path: 'response'
  status: !ruby/object:Api::OpAsync::Status
    path: 'done'
    complete: true
    allowed:
      - true
      - false
  error: !ruby/object:Api::OpAsync::Error
    path: 'error'
    message: 'message'
autogen_async: true
import_format:
  ['projects/{{project}}/locations/{{location}}/serverTlsPolicies/{{name}}']
examples:
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_security_server_tls_policy_basic'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-server-tls-policy'
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_security_server_tls_policy_advanced'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-server-tls-policy'
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_security_server_tls_policy_server_cert'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-server-tls-policy'
  - !ruby/object:Provider::Terraform::Examples
    min_version: beta
    name: 'network_security_server_tls_policy_mtls'
    primary_resource_id: 'default'
    vars:
      resource_name: 'my-server-tls-policy'
      trust_config_name: 'my-trust-config'
parameters:
  - !ruby/object:Api::Type::String
    name: 'name'
    required: true
    url_param_only: true
    immutable: true
    description: |
      Name of the ServerTlsPolicy resource.
  - !ruby/object:Api::Type::String
    name: 'location'
    default_value: 'global'
    description: |
      The location of the server tls policy.
      The default value is `global`.
    url_param_only: true
properties:
  - !ruby/object:Api::Type::Time
    name: 'createTime'
    description: |
      Time the ServerTlsPolicy was created in UTC.
    output: true
  - !ruby/object:Api::Type::Time
    name: 'updateTime'
    description: |
      Time the ServerTlsPolicy was updated in UTC.
    output: true
  - !ruby/object:Api::Type::KeyValueLabels
    name: 'labels'
    description: Set of label tags associated with the ServerTlsPolicy resource.
  - !ruby/object:Api::Type::String
    name: 'description'
    description: |
      A free-text description of the resource. Max length 1024 characters.
  - !ruby/object:Api::Type::Boolean
    name: 'allowOpen'
    description: |
      This field applies only for Traffic Director policies. It is must be set to false for external HTTPS load balancer policies.
      Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if allowOpen and mtlsPolicy are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility.
      Consider using it if you wish to upgrade in place your deployment to TLS while having mixed TLS and non-TLS traffic reaching port :80.
  - !ruby/object:Api::Type::NestedObject
    name: 'serverCertificate'
    description: |
      Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.
    properties:
      - !ruby/object:Api::Type::NestedObject
        name: 'grpcEndpoint'
        description: |
          gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        exactly_one_of:
          - grpc_endpoint
          - certificate_provider_instance
        properties:
          - !ruby/object:Api::Type::String
            name: 'targetUri'
            description: |
              The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
            required: true
      - !ruby/object:Api::Type::NestedObject
        name: 'certificateProviderInstance'
        description: |
          Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
          Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
        exactly_one_of:
          - grpc_endpoint
          - certificate_provider_instance
        properties:
          - !ruby/object:Api::Type::String
            name: 'pluginInstance'
            description: |
              Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
            required: true
  - !ruby/object:Api::Type::NestedObject
    name: 'mtlsPolicy'
    description: |
      This field is required if the policy is used with external HTTPS load balancers. This field can be empty for Traffic Director.
      Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If allowOpen and mtlsPolicy are set, server allows both plain text and mTLS connections.
    properties:
      - !ruby/object:Api::Type::Enum
        name: 'clientValidationMode'
        description: |
          When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
          Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
        values:
          - :CLIENT_VALIDATION_MODE_UNSPECIFIED
          - :ALLOW_INVALID_OR_MISSING_CLIENT_CERT
          - :REJECT_INVALID
      - !ruby/object:Api::Type::String
        name: 'clientValidationTrustConfig'
        description: |
          Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
          If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
          Allowed only if the policy is to be used with external HTTPS load balancers.
      - !ruby/object:Api::Type::Array
        name: 'clientValidationCa'
        description: |
          Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
          Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::NestedObject
              name: 'grpcEndpoint'
              description: |
                gRPC specific configuration to access the gRPC server to obtain the cert and private key.
              exactly_one_of:
                - grpc_endpoint
                - certificate_provider_instance
              properties:
                - !ruby/object:Api::Type::String
                  name: 'targetUri'
                  description: |
                    The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
                  required: true
            - !ruby/object:Api::Type::NestedObject
              name: 'certificateProviderInstance'
              description: |
                Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
                Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
              exactly_one_of:
                - grpc_endpoint
                - certificate_provider_instance
              properties:
                - !ruby/object:Api::Type::String
                  name: 'pluginInstance'
                  description: |
                    Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
                  required: true
