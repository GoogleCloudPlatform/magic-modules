# Copyright 2024 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Warning: This is a temporary file, and should not be edited directly
---
name: 'AutoscalingPolicy'
description: |
  Describes an autoscaling policy for Dataproc cluster autoscaler.
docs:
id_format: 'projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{policy_id}}'
base_url: 'projects/{{project}}/locations/{{location}}/autoscalingPolicies'
self_link: 'projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{policy_id}}'
import_format:
  - 'projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{policy_id}}'
timeouts:
  insert_minutes: 20
  update_minutes: 20
  delete_minutes: 20
collection_url_key: 'policies'
iam_policy:
  method_name_separator: ':'
  fetch_iam_policy_verb: 'POST'
  parent_resource_attribute: 'policy_id'
  example_config_body: 'templates/terraform/iam/go/iam_attributes.go.tmpl'
  import_format:
    - 'projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{policy_id}}'
    - '{{policy_id}}'
custom_code:
examples:
  - name: 'dataproc_autoscaling_policy_basic'
    primary_resource_id: 'basic'
    primary_resource_name: 'fmt.Sprintf("tf-test-dataproc-policy%s", context["random_suffix"])'
    vars:
      name: 'dataproc-policy'
    exclude_docs: true
  - name: 'dataproc_autoscaling_policy'
    primary_resource_id: 'asp'
    vars:
      name: 'dataproc-policy'
parameters:
  - name: 'location'
    type: String
    description: |
      The  location where the autoscaling policy should reside.
      The default value is `global`.
    url_param_only: true
    immutable: true
    default_value: "global"
properties:
  - name: 'policy_id'
    type: String
    description: |
      The policy id. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
      and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
      3 and 50 characters.
    api_name: id
    required: true
  - name: 'name'
    type: String
    description: |
      The "resource name" of the autoscaling policy.
    output: true
  - name: 'workerConfig'
    type: NestedObject
    description: |
      Describes how the autoscaler will operate for primary workers.
    properties:
      - name: 'minInstances'
        type: Integer
        description: |
          Minimum number of instances for this group. Bounds: [2, maxInstances]. Defaults to 2.
        default_value: 2
      - name: 'maxInstances'
        type: Integer
        description: |
          Maximum number of instances for this group.
        required: true
      - name: 'weight'
        type: Integer
        description: |
          Weight for the instance group, which is used to determine the fraction of total workers
          in the cluster from this instance group. For example, if primary workers have weight 2,
          and secondary workers have weight 1, the cluster will have approximately 2 primary workers
          for each secondary worker.

          The cluster may not reach the specified balance if constrained by min/max bounds or other
          autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
          primary workers will be added. The cluster can also be out of balance when created.

          If weight is not set on any instance group, the cluster will default to equal weight for
          all groups: the cluster will attempt to maintain an equal number of workers in each group
          within the configured size bounds for each group. If weight is set for one group only,
          the cluster will default to zero weight on the unset group. For example if weight is set
          only on primary workers, the cluster will use primary workers only and no secondary workers.
        default_value: 1
  - name: 'secondaryWorkerConfig'
    type: NestedObject
    description: |
      Describes how the autoscaler will operate for secondary workers.
    properties:
      - name: 'minInstances'
        type: Integer
        description: |
          Minimum number of instances for this group. Bounds: [0, maxInstances]. Defaults to 0.
        at_least_one_of:
          - 'secondary_worker_config.0.min_instances'
          - 'secondary_worker_config.0.max_instances'
          - 'secondary_worker_config.0.weight'
        default_value: 0
      - name: 'maxInstances'
        type: Integer
        description: |
          Maximum number of instances for this group. Note that by default, clusters will not use
          secondary workers. Required for secondary workers if the minimum secondary instances is set.
          Bounds: [minInstances, ). Defaults to 0.
        at_least_one_of:
          - 'secondary_worker_config.0.min_instances'
          - 'secondary_worker_config.0.max_instances'
          - 'secondary_worker_config.0.weight'
        default_value: 0
      - name: 'weight'
        type: Integer
        description: |
          Weight for the instance group, which is used to determine the fraction of total workers
          in the cluster from this instance group. For example, if primary workers have weight 2,
          and secondary workers have weight 1, the cluster will have approximately 2 primary workers
          for each secondary worker.

          The cluster may not reach the specified balance if constrained by min/max bounds or other
          autoscaling settings. For example, if maxInstances for secondary workers is 0, then only
          primary workers will be added. The cluster can also be out of balance when created.

          If weight is not set on any instance group, the cluster will default to equal weight for
          all groups: the cluster will attempt to maintain an equal number of workers in each group
          within the configured size bounds for each group. If weight is set for one group only,
          the cluster will default to zero weight on the unset group. For example if weight is set
          only on primary workers, the cluster will use primary workers only and no secondary workers.
        at_least_one_of:
          - 'secondary_worker_config.0.min_instances'
          - 'secondary_worker_config.0.max_instances'
          - 'secondary_worker_config.0.weight'
        default_value: 1
  - name: 'basicAlgorithm'
    type: NestedObject
    description: |
      Basic algorithm for autoscaling.
    properties:
      - name: 'cooldownPeriod'
        type: String
        description: |
          Duration between scaling events. A scaling period starts after the
          update operation from the previous event has completed.

          Bounds: [2m, 1d]. Default: 2m.
        default_value: "120s"
      - name: 'yarnConfig'
        type: NestedObject
        description: |
          YARN autoscaling configuration.
        required: true
        properties:
          - name: 'gracefulDecommissionTimeout'
            type: String
            description: |
              Timeout for YARN graceful decommissioning of Node Managers. Specifies the
              duration to wait for jobs to complete before forcefully removing workers
              (and potentially interrupting jobs). Only applicable to downscaling operations.

              Bounds: [0s, 1d].
            required: true
          - name: 'scaleUpFactor'
            type: Double
            description: |
              Fraction of average pending memory in the last cooldown period for which to
              add workers. A scale-up factor of 1.0 will result in scaling up so that there
              is no pending memory remaining after the update (more aggressive scaling).
              A scale-up factor closer to 0 will result in a smaller magnitude of scaling up
              (less aggressive scaling).

              Bounds: [0.0, 1.0].
            required: true
          - name: 'scaleDownFactor'
            type: Double
            description: |
              Fraction of average pending memory in the last cooldown period for which to
              remove workers. A scale-down factor of 1 will result in scaling down so that there
              is no available memory remaining after the update (more aggressive scaling).
              A scale-down factor of 0 disables removing workers, which can be beneficial for
              autoscaling a single job.

              Bounds: [0.0, 1.0].
            required: true
          - name: 'scaleUpMinWorkerFraction'
            type: Double
            description: |
              Minimum scale-up threshold as a fraction of total cluster size before scaling
              occurs. For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler
              must recommend at least a 2-worker scale-up for the cluster to scale. A threshold of
              0 means the autoscaler will scale up on any recommended change.

              Bounds: [0.0, 1.0]. Default: 0.0.
            default_value: 0.0
          - name: 'scaleDownMinWorkerFraction'
            type: Double
            description: |
              Minimum scale-down threshold as a fraction of total cluster size before scaling occurs.
              For example, in a 20-worker cluster, a threshold of 0.1 means the autoscaler must
              recommend at least a 2 worker scale-down for the cluster to scale. A threshold of 0
              means the autoscaler will scale down on any recommended change.

              Bounds: [0.0, 1.0]. Default: 0.0.
            default_value: 0.0
