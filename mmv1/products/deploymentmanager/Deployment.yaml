<<<<<<< HEAD
# Copyright 2023 Google Inc.
=======
# Copyright 2024 Google Inc.
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

<<<<<<< HEAD
--- !ruby/object:Api::Resource
name: 'Deployment'
kind: 'deploymentmanager#deployment'
base_url: projects/{{project}}/global/deployments
self_link: projects/{{project}}/global/deployments/{{name}}
create_url: projects/{{project}}/global/deployments?preview={{preview}}&createPolicy={{create_policy}}
delete_url: projects/{{project}}/global/deployments/{{name}}?deletePolicy={{delete_policy}}
# A deployment is updatable, but we need to have custom update behavior.
immutable: true
update_verb: :PATCH
update_url: projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}
description: |
  A collection of resources that are deployed and managed together using
  a configuration file
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    kind: 'deploymentmanager#operation'
    path: 'name'
    full_url: 'selfLink'
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: 'targetLink'
  status: !ruby/object:Api::OpAsync::Status
    path: 'status'
    complete: 'DONE'
    allowed:
      - 'PENDING'
      - 'RUNNING'
      - 'DONE'
  error: !ruby/object:Api::OpAsync::Error
    path: 'error/errors'
    message: 'message'
id_format: 'projects/{{project}}/deployments/{{name}}'
import_format: ['projects/{{project}}/deployments/{{name}}']
timeouts: !ruby/object:Api::Timeouts  # Very long to support very long deployments
  insert_minutes: 60
  update_minutes: 60
  delete_minutes: 60
docs: !ruby/object:Provider::Terraform::Docs
=======
---
name: 'Deployment'
kind: 'deploymentmanager#deployment'
description: |
  A collection of resources that are deployed and managed together using
  a configuration file
docs:
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
  warning: |
    Deployment Manager shares similar behavior with Terraform as both
    products manage GCP resource lifecycle and state. This Terraform
    resource is intended only to manage a Deployment resource,
    and attempts to manage the Deployment's resources in Terraform as well
    will likely result in errors or unexpected behavior as the two tools
    fight over ownership. We strongly discourage doing so unless you are an
    experienced user of both tools.

    In addition, due to limitations of the API, Terraform will treat
    deployments in preview as recreate-only for any update operation other
    than actually deploying an in-preview deployment (i.e. `preview=true` to
    `preview=false`).
<<<<<<< HEAD
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'deployment_manager_deployment_basic'
    primary_resource_id: 'deployment'
    primary_resource_name: "fmt.Sprintf(\"tf-test-my-deployment-%s\",
      context[\"random_suffix\"\
      ])"
    vars:
      deployment_name: 'my-deployment'
    skip_test: true
  - !ruby/object:Provider::Terraform::Examples
    name: 'deployment_manager_deployment_imports'
    primary_resource_id: 'deployment'
    primary_resource_name: "fmt.Sprintf(\"tf-test-my-deployment-%s\",
      context[\"random_suffix\"\
      ])"
    vars:
      deployment_name: 'my-deployment'
    skip_test: true
custom_code: !ruby/object:Provider::Terraform::CustomCode
  # post-create failure: Delete deployment if an invalid deployment was created
  post_create_failure: 'templates/terraform/post_create_failure/delete_on_failure.go.erb'
  # Custom diff to force new if 'preview' is true
  constants: 'templates/terraform/constants/deployment_manager_deployment.go.erb'
custom_diff: [
  'customDiffDeploymentManagerDeployment',
]
parameters:
  # These properties are query parameters given on create/update/delete.
  # They should be tracked and updatable.
  - !ruby/object:Api::Type::Enum
    name: 'createPolicy'
=======
id_format: 'projects/{{project}}/deployments/{{name}}'
base_url: 'projects/{{project}}/global/deployments'
self_link: 'projects/{{project}}/global/deployments/{{name}}'
create_url: 'projects/{{project}}/global/deployments?preview={{preview}}&createPolicy={{create_policy}}'
update_url: 'projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}'
update_verb: 'PATCH'
delete_url: 'projects/{{project}}/global/deployments/{{name}}?deletePolicy={{delete_policy}}'
# A deployment is updatable, but we need to have custom update behavior.
immutable: true
import_format:
  - 'projects/{{project}}/deployments/{{name}}'
 # Very long to support very long deployments
timeouts:
  insert_minutes: 60
  update_minutes: 60
  delete_minutes: 60
async:
  actions: ['create', 'delete', 'update']
  type: 'OpAsync'
  operation:
    full_url: 'selfLink'
    kind: 'deploymentmanager#operation'
    path: 'name'
    wait_ms: 1000
  result:
    path: 'targetLink'
    resource_inside_response: false
  error:
    path: 'error/errors'
    message: 'message'
custom_code:
  # Custom diff to force new if 'preview' is true
  constants: 'templates/terraform/constants/deployment_manager_deployment.go.tmpl'
  # post-create failure: Delete deployment if an invalid deployment was created
  post_create_failure: 'templates/terraform/post_create_failure/delete_on_failure.go.tmpl'
custom_diff:
  - 'customDiffDeploymentManagerDeployment'
examples:
  - name: 'deployment_manager_deployment_basic'
    primary_resource_id: 'deployment'
    primary_resource_name: 'fmt.Sprintf("tf-test-my-deployment-%s", context["random_suffix"])'
    vars:
      deployment_name: 'my-deployment'
    exclude_test: true
  - name: 'deployment_manager_deployment_imports'
    primary_resource_id: 'deployment'
    primary_resource_name: 'fmt.Sprintf("tf-test-my-deployment-%s", context["random_suffix"])'
    vars:
      deployment_name: 'my-deployment'
    exclude_test: true
parameters:
  # These properties are query parameters given on create/update/delete.
  # They should be tracked and updatable.
  - name: 'createPolicy'
    type: Enum
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
    description: |
      Set the policy to use for creating new resources. Only used on
      create and update. Valid values are `CREATE_OR_ACQUIRE` (default) or
      `ACQUIRE`. If set to `ACQUIRE` and resources do not already exist,
      the deployment will fail. Note that updating this field does not
      actually affect the deployment, just how it is updated.
    url_param_only: true
<<<<<<< HEAD
    default_value: :CREATE_OR_ACQUIRE
    values:
      - :ACQUIRE
      - :CREATE_OR_ACQUIRE
  - !ruby/object:Api::Type::Enum
    name: 'deletePolicy'
=======
    default_value: "CREATE_OR_ACQUIRE"
    enum_values:
      - 'ACQUIRE'
      - 'CREATE_OR_ACQUIRE'
  - name: 'deletePolicy'
    type: Enum
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
    description: |
      Set the policy to use for deleting new resources on update/delete.
      Valid values are `DELETE` (default) or `ABANDON`. If `DELETE`,
      resource is deleted after removal from Deployment Manager. If
      `ABANDON`, the resource is only removed from Deployment Manager
      and is not actually deleted. Note that updating this field does not
      actually change the deployment, just how it is updated.
    url_param_only: true
<<<<<<< HEAD
    default_value: :DELETE
    values:
      - :ABANDON
      - :DELETE
  - !ruby/object:Api::Type::Boolean
    # Custom Update
    name: 'preview'
=======
    default_value: "DELETE"
    enum_values:
      - 'ABANDON'
      - 'DELETE'
    # Custom Update
  - name: 'preview'
    type: Boolean
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
    description: |
      If set to true, a deployment is created with "shell" resources
      that are not actually instantiated. This allows you to preview a
      deployment. It can be updated to false to actually deploy
      with real resources.
       ~>**NOTE:** Deployment Manager does not allow update
      of a deployment in preview (unless updating to preview=false). Thus,
      Terraform will force-recreate deployments if either preview is updated
      to true or if other fields are updated while preview is true.
<<<<<<< HEAD
    default_value: false
    url_param_only: true
    update_id: '0_preview'
    fingerprint_name: 'fingerprint'
    update_verb: :PATCH
    update_url: projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}
properties:
  - !ruby/object:Api::Type::String
    name: 'name'
    description: |
      Unique name for the deployment
    required: true
  - !ruby/object:Api::Type::String
    # Custom Update
    name: 'description'
    description: |
      Optional user-provided description of deployment.
    fingerprint_name: 'fingerprint'
    update_id: '1_non-preview'
    update_verb: :PATCH
    update_url: projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}
  - !ruby/object:Api::Type::Array
    # Custom Update
    name: 'labels'
    description: |
      Key-value pairs to apply to this labels.
    send_empty_value: true
    fingerprint_name: 'fingerprint'
    update_id: '1_non-preview'
    update_verb: :PATCH
    update_url: projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}
    is_set: true
    item_type: !ruby/object:Api::Type::NestedObject
      properties:
        - !ruby/object:Api::Type::String
          name: 'key'
          description: |
            Key for label.
        - !ruby/object:Api::Type::String
          name: 'value'
          description: |
            Value of label.
  - !ruby/object:Api::Type::NestedObject
    # Custom Update
    name: 'target'
    required: true
    description: |
      Parameters that define your deployment, including the deployment
      configuration and relevant templates.
    fingerprint_name: 'fingerprint'
    update_id: '1_non-preview'
    update_verb: :PATCH
    update_url: projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}
    ignore_read: true
    properties:
      - !ruby/object:Api::Type::NestedObject
        name: 'config'
        required: true
        description: |
          The root configuration file to use for this deployment.
        properties:
          - !ruby/object:Api::Type::String
            name: 'content'
            required: true
            description: |
              The full YAML contents of your configuration file.
      - !ruby/object:Api::Type::Array
        name: 'imports'
=======
    url_param_only: true
    update_url: 'projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}'
    update_id: '0_preview'
    fingerprint_name: 'fingerprint'
    default_value: false
properties:
  - name: 'name'
    type: String
    description: |
      Unique name for the deployment
    required: true
    # Custom Update
  - name: 'description'
    type: String
    description: |
      Optional user-provided description of deployment.
    update_url: 'projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}'
    update_id: '1_non-preview'
    fingerprint_name: 'fingerprint'
    # Custom Update
  - name: 'labels'
    type: Array
    description: |
      Key-value pairs to apply to this labels.
    is_set: true
    send_empty_value: true
    update_url: 'projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}'
    update_id: '1_non-preview'
    fingerprint_name: 'fingerprint'
    item_type:
      type: NestedObject
      properties:
        - name: 'key'
          type: String
          description: |
            Key for label.
        - name: 'value'
          type: String
          description: |
            Value of label.
    # Custom Update
  - name: 'target'
    type: NestedObject
    description: |
      Parameters that define your deployment, including the deployment
      configuration and relevant templates.
    required: true
    ignore_read: true
    update_url: 'projects/{{project}}/global/deployments/{{name}}?preview={{preview}}&createPolicy={{create_policy}}&deletePolicy={{delete_policy}}'
    update_id: '1_non-preview'
    fingerprint_name: 'fingerprint'
    properties:
      - name: 'config'
        type: NestedObject
        description: |
          The root configuration file to use for this deployment.
        required: true
        properties:
          - name: 'content'
            type: String
            description: |
              The full YAML contents of your configuration file.
            required: true
      - name: 'imports'
        type: Array
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
        description: |
          Specifies import files for this configuration. This can be
          used to import templates or other files. For example, you might
          import a text file in order to use the file in a template.
<<<<<<< HEAD
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: 'content'
              description: |
                The full contents of the template that you want to import.
            - !ruby/object:Api::Type::String
              name: 'name'
              description: |
                The name of the template to import, as declared in the YAML
                configuration.
  - !ruby/object:Api::Type::String
    name: 'deployment_id'
    api_name: id
    output: true
    description: |
      Unique identifier for deployment. Output only.
  - !ruby/object:Api::Type::String
    name: 'manifest'
    output: true
    description: |
      Output only. URL of the manifest representing the last manifest that
      was successfully deployed.
  - !ruby/object:Api::Type::String
    name: 'selfLink'
    output: true
    description: |
      Output only. Server defined URL for the resource.
=======
        item_type:
          type: NestedObject
          properties:
            - name: 'content'
              type: String
              description: |
                The full contents of the template that you want to import.
            - name: 'name'
              type: String
              description: |
                The name of the template to import, as declared in the YAML
                configuration.
  - name: 'deployment_id'
    type: String
    description: |
      Unique identifier for deployment. Output only.
    api_name: id
    output: true
  - name: 'manifest'
    type: String
    description: |
      Output only. URL of the manifest representing the last manifest that
      was successfully deployed.
    output: true
  - name: 'selfLink'
    type: String
    description: |
      Output only. Server defined URL for the resource.
    output: true
>>>>>>> 2fdda66097e2c96688e59f7c58c1f717c7785856
