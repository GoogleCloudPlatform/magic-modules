# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'Certificate'
base_url: 'projects/{{project}}/locations/{{location}}/certificates'
create_url: 'projects/{{project}}/locations/{{location}}/certificates?certificateId={{name}}'
self_link: 'projects/{{project}}/locations/{{location}}/certificates/{{name}}'
update_verb: :PATCH
update_mask: true
description: |
  Certificate represents a HTTP-reachable backend for a Certificate.
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    path: 'name'
    base_url: '{{op_id}}'
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: 'response'
  status: !ruby/object:Api::OpAsync::Status
    path: 'done'
    complete: true
    allowed:
      - true
      - false
  error: !ruby/object:Api::OpAsync::Error
    path: 'error'
    message: 'message'
docs: !ruby/object:Provider::Terraform::Docs
autogen_async: true
import_format:
  ['projects/{{project}}/locations/{{location}}/certificates/{{name}}']
id_format: 'projects/{{project}}/locations/{{location}}/certificates/{{name}}'
schema_version: 1
state_upgraders: true
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'certificate_manager_google_managed_certificate_dns'
    primary_resource_id: 'default'
    vars:
      dns_auth_name: 'dns-auth'
      dns_auth_subdomain: 'subdomain'
      dns_auth_name2: 'dns-auth2'
      dns_auth_subdomain2: 'subdomain2'
      cert_name: 'dns-cert'
  - !ruby/object:Provider::Terraform::Examples
    name: 'certificate_manager_google_managed_certificate_issuance_config'
    primary_resource_id: 'default'
    vars:
      cert_name: 'issuance-config-cert'
      ca_name: 'ca-authority'
      pool_name: 'ca-pool'
      issuance_config_name: 'issuance-config'
  - !ruby/object:Provider::Terraform::Examples
    name: 'certificate_manager_self_managed_certificate'
    primary_resource_id: 'default'
    vars:
      cert_name: 'self-managed-cert'
  - !ruby/object:Provider::Terraform::Examples
    name: 'certificate_manager_self_managed_certificate_regional'
    primary_resource_id: 'default'
    vars:
      cert_name: 'self-managed-cert'
  - !ruby/object:Provider::Terraform::Examples
    name: 'certificate_manager_google_managed_certificate_issuance_config_all_regions'
    primary_resource_id: 'default'
    vars:
      cert_name: 'issuance-config-cert'
      ca_name: 'ca-authority'
      pool_name: 'ca-pool'
      issuance_config_name: 'issuance-config'
  - !ruby/object:Provider::Terraform::Examples
    name: 'certificate_manager_google_managed_certificate_dns_all_regions'
    primary_resource_id: 'default'
    vars:
      dns_auth_name: 'dns-auth'
      dns_auth_subdomain: 'subdomain'
      dns_auth_name2: 'dns-auth2'
      dns_auth_subdomain2: 'subdomain2'
      cert_name: 'dns-cert'
  - !ruby/object:Provider::Terraform::Examples
    name: 'certificate_manager_google_managed_regional_certificate_dns_auth'
    primary_resource_id: 'default'
    vars:
      dns_auth_name: 'dns-auth'
      dns_auth_subdomain: 'subdomain'
      cert_name: 'dns-cert'
custom_code: !ruby/object:Provider::Terraform::CustomCode
  constants: templates/terraform/constants/cert_manager.erb
parameters:
  - !ruby/object:Api::Type::String
    name: 'name'
    required: true
    immutable: true
    url_param_only: true
    description: |
      A user-defined name of the certificate. Certificate names must be unique
      The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
      and all following characters must be a dash, underscore, letter or digit.
  - !ruby/object:Api::Type::String
    name: 'location'
    description: |
      The Certificate Manager location. If not specified, "global" is used.
    default_value: global
    immutable: true
    url_param_only: true
properties:
  - !ruby/object:Api::Type::String
    name: 'description'
    description: |
      A human-readable description of the resource.
  - !ruby/object:Api::Type::KeyValueLabels
    name: 'labels'
    description: 'Set of label tags associated with the Certificate resource.'
  - !ruby/object:Api::Type::String
    name: scope
    immutable: true
    description: |
      The scope of the certificate.

      DEFAULT: Certificates with default scope are served from core Google data centers.
      If unsure, choose this option.

      EDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence.
      See https://cloud.google.com/vpc/docs/edge-locations.

      ALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).
      See https://cloud.google.com/compute/docs/regions-zones
    default_value: DEFAULT
    diff_suppress_func: 'certManagerDefaultScopeDiffSuppress'
  - !ruby/object:Api::Type::NestedObject
    name: selfManaged
    immutable: true
    exactly_one_of:
      - self_managed
      - managed
    description: |
      Certificate data for a SelfManaged Certificate.
      SelfManaged Certificates are uploaded by the user. Updating such
      certificates before they expire remains the user's responsibility.
    ignore_read: true
    properties:
      - !ruby/object:Api::Type::String
        name: certificatePem
        immutable: true
        exactly_one_of:
          - self_managed.0.certificate_pem
          - self_managed.0.pem_certificate
        deprecation_message: >-
          `certificate_pem` is deprecated and will be removed in a future major release. Use `pem_certificate` instead.
        description: |
          The certificate chain in PEM-encoded form.

          Leaf certificate comes first, followed by intermediate ones if any.
        sensitive: true
      - !ruby/object:Api::Type::String
        name: privateKeyPem
        immutable: true
        exactly_one_of:
          - self_managed.0.private_key_pem
          - self_managed.0.pem_private_key
        deprecation_message: >-
          `private_key_pem` is deprecated and will be removed in a future major release. Use `pem_private_key` instead.
        description: |
          The private key of the leaf certificate in PEM-encoded form.
        sensitive: true
      - !ruby/object:Api::Type::String
        name: pemCertificate
        immutable: true
        exactly_one_of:
          - self_managed.0.certificate_pem
          - self_managed.0.pem_certificate
        description: |
          The certificate chain in PEM-encoded form.

          Leaf certificate comes first, followed by intermediate ones if any.
      - !ruby/object:Api::Type::String
        name: pemPrivateKey
        immutable: true
        exactly_one_of:
          - self_managed.0.private_key_pem
          - self_managed.0.pem_private_key
        description: |
          The private key of the leaf certificate in PEM-encoded form.
        sensitive: true
  - !ruby/object:Api::Type::NestedObject
    name: managed
    immutable: true
    exactly_one_of:
      - self_managed
      - managed
    description: |
      Configuration and state of a Managed Certificate.
      Certificate Manager provisions and renews Managed Certificates
      automatically, for as long as it's authorized to do so.
    properties:
      - !ruby/object:Api::Type::Array
        name: domains
        immutable: true
        description: |
          The domains for which a managed SSL certificate will be generated.
          Wildcard domains are only supported with DNS challenge resolution
        item_type: Api::Type::String
      - !ruby/object:Api::Type::Array
        name: dnsAuthorizations
        immutable: true
        description: |
          Authorizations that will be used for performing domain authorization. Either issuanceConfig or dnsAuthorizations should be specificed, but not both.
        diff_suppress_func: 'tpgresource.ProjectNumberDiffSuppress'
        item_type: Api::Type::String
      - !ruby/object:Api::Type::String
        name: issuanceConfig
        immutable: true
        description: |
          The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.
          If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
          Either issuanceConfig or dnsAuthorizations should be specificed, but not both.

        # when the certificate is created with issuanceConfig in the format "projects/{{project_id}}/locations/global/certificateIssuanceConfigs/{{CICName}}", the
        # format changes in the response message to "projects/{{project_number}}/locations/global/certificateIssuanceConfigs/{{CICName}}". That causes the tests to fail
        # that's why "tpgresource.CompareResourceNames" is needed.
        diff_suppress_func: 'tpgresource.CompareResourceNames'
      - !ruby/object:Api::Type::String
        name: 'state'
        output: true
        description: |
          A state of this Managed Certificate.
      - !ruby/object:Api::Type::NestedObject
        name: 'provisioningIssue'
        output: true
        description: |
          Information about issues with provisioning this Managed Certificate.
        properties:
          - !ruby/object:Api::Type::String
            name: 'reason'
            output: true
            description: |
              Reason for provisioning failures.
          - !ruby/object:Api::Type::String
            name: details
            output: true
            description: |
              Human readable explanation about the issue. Provided to help address
              the configuration issues.
              Not guaranteed to be stable. For programmatic access use `reason` field.
      - !ruby/object:Api::Type::Array
        name: 'authorizationAttemptInfo'
        output: true
        description: |
          Detailed state of the latest authorization attempt for each domain
          specified for this Managed Certificate.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: domain
              output: true
              description: |
                Domain name of the authorization attempt.
            - !ruby/object:Api::Type::String
              name: 'state'
              output: true
              description: |
                State of the domain for managed certificate issuance.
            - !ruby/object:Api::Type::String
              name: 'failureReason'
              output: true
              description: |
                Reason for failure of the authorization attempt for the domain.
            - !ruby/object:Api::Type::String
              name: details
              output: true
              description: |
                Human readable explanation for reaching the state. Provided to help
                address the configuration issues.
                Not guaranteed to be stable. For programmatic access use `failure_reason` field.
