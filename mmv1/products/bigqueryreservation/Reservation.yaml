# Copyright 2024 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: 'Reservation'
description: |
  A reservation is a mechanism used to guarantee BigQuery slots to users.
references:
  guides:
    'Introduction to Reservations': 'https://cloud.google.com/bigquery/docs/reservations-intro'
  api: 'https://cloud.google.com/bigquery/docs/reference/reservations/rest/v1/projects.locations.reservations/create'
docs:
base_url: 'projects/{{project}}/locations/{{location}}/reservations'
create_url: 'projects/{{project}}/locations/{{location}}/reservations?reservationId={{name}}'
update_verb: 'PATCH'
update_mask: true
timeouts:
  insert_minutes: 20
  update_minutes: 20
  delete_minutes: 20
custom_code:
exclude_sweeper: true
examples:
  - name: 'bigquery_reservation_basic'
    primary_resource_id: 'reservation'
    vars:
      name: 'my-reservation'
  - name: 'bigquery_reservation_with_disaster_recovery'
    primary_resource_id: 'reservation'
    vars:
      name: 'my-reservation'
    exclude_docs: true
parameters:
  - name: 'location'
    type: String
    description: |
      The geographic location where the transfer config should reside.
      Examples: US, EU, asia-northeast1. The default value is US.
    url_param_only: true
    immutable: true
    default_value: "US"
  - name: 'name'
    type: String
    description: |
      The name of the reservation. This field must only contain alphanumeric characters or dash.
    url_param_only: true
    required: true
    immutable: true
properties:
  - name: 'slotCapacity'
    type: Integer
    description: |
      Minimum slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the
      unit of parallelism. Queries using this reservation might use more slots during runtime if ignoreIdleSlots is set to false.
    required: true
  - name: 'ignoreIdleSlots'
    type: Boolean
    description: |
      If false, any query using this reservation will use idle slots from other reservations within
      the same admin project. If true, a query using this reservation will execute with the slot
      capacity specified above at most.
    default_value: false
  - name: 'concurrency'
    type: Integer
    description: |
      Maximum number of queries that are allowed to run concurrently in this reservation. This is a soft limit due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency will be automatically set based on the reservation size.
    default_value: 0
  - name: 'edition'
    type: String
    description: |
      The edition type. Valid values are STANDARD, ENTERPRISE, ENTERPRISE_PLUS
    immutable: true
    default_from_api: true
  - name: 'autoscale'
    type: NestedObject
    description: |
      The configuration parameters for the auto scaling feature.
    properties:
      - name: 'currentSlots'
        type: Integer
        description: |
          The slot capacity added to this reservation when autoscale happens. Will be between [0, max_slots].
        output: true
      - name: 'maxSlots'
        type: Integer
        description: |
          Number of slots to be scaled when needed.
  - name: 'primaryLocation'
    type: String
    description: |
      The current location of the reservation's primary replica. This field is only set for
      reservations using the managed disaster recovery feature.
    output: true
  - name: 'secondaryLocation'
    type: String
    description: |
      The current location of the reservation's secondary replica. This field is only set for
      reservations using the managed disaster recovery feature. Users can set this in create
      reservation calls to create a failover reservation or in update reservation calls to convert
      a non-failover reservation to a failover reservation(or vice versa).
  - name: 'originalPrimaryLocation'
    type: String
    description: |
      The location where the reservation was originally created. This is set only during the
      failover reservation's creation. All billing charges for the failover reservation will be
      applied to this location.
    output: true
  - name: 'replicationStatus'
    type: NestedObject
    description: |
      The Disaster Recovery(DR) replication status of the reservation. This is only available for
      the primary replicas of DR/failover reservations and provides information about the both the
      staleness of the secondary and the last error encountered while trying to replicate changes
      from the primary to the secondary. If this field is blank, it means that the reservation is
      either not a DR reservation or the reservation is a DR secondary or that any replication
      operations on the reservation have succeeded.
    properties:
      - name: 'error'
        type: NestedObject
        description: |
          The last error encountered while trying to replicate changes from the primary to the
          secondary. This field is only available if the replication has not succeeded since.
        properties:
          - name: 'code'
            type: Integer
            description: |
              The status code, which should be an enum value of [google.rpc.Code](https://cloud.google.com/bigquery/docs/reference/reservations/rpc/google.rpc#google.rpc.Code).
            output: true
          - name: 'message'
            type: String
            description: |
              A developer-facing error message, which should be in English.
            output: true
        output: true
      - name: 'lastErrorTime'
        type: Time
        description: |
          The time at which the last error was encountered while trying to replicate changes from
          the primary to the secondary. This field is only available if the replication has not
          succeeded since.
        output: true
      - name: 'lastReplicationTime'
        type: Time
        description: |
          A timestamp corresponding to the last change on the primary that was successfully
          replicated to the secondary.
        output: true
    output: true
  - name: 'scalingMode'
    type: Enum
    min_version: beta
    description: |
      The scaling mode for the reservation. If the field is present but maxSlots is not present,
      requests will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.

      Enum values:

      `SCALING_MODE_UNSPECIFIED`: Default value of ScalingMode.

      `AUTOSCALE_ONLY`: The reservation will scale up only using slots from autoscaling. It will
      not use any idle slots even if there may be some available. The upper limit that autoscaling
      can scale up to will be maxSlots - baseline. For example, if maxSlots is 1000, baseline is 200
      and customer sets ScalingMode to AUTOSCALE_ONLY, then autoscalerg will scale up to 800 slots
      and no idle slots will be used. Please note, in this mode, the ignoreIdleSlots field must be
      set to true. Otherwise the request will be rejected with error code
      google.rpc.Code.INVALID_ARGUMENT.

      `IDLE_SLOTS_ONLY`: The reservation will scale up using only idle slots contributed by other
      reservations or from unassigned commitments. If no idle slots are available it will not scale
      up further. If the idle slots which it is using are reclaimed by the contributing reservation(s)
      it may be forced to scale down. The max idle slots the reservation can be maxSlots - baseline
      capacity. For example, if maxSlots is 1000, baseline is 200 and customer sets ScalingMode to
      IDLE_SLOTS_ONLY, 1. if there are 1000 idle slots available in other reservations, the
      reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2. if there are
      500 idle slots available in other reservations, the reservation will scale up to 700 slots with
      200 baseline and 300 idle slots. Please note, in this mode, the reservation might not be able to
      scale up to maxSlots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
      Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT

      `ALL_SLOTS`: The reservation will scale up using all slots available to it. It will use idle slots
      contributed by other reservations or from unassigned commitments first. If no idle slots are
      available it will scale up using autoscaling. For example, if maxSlots is 1000, baseline is 200
      and customer sets ScalingMode to ALL_SLOTS, 1. if there are 800 idle slots available in other
      reservations, the reservation will scale up to 1000 slots with 200 baseline and 800 idle slots. 2.
      if there are 500 idle slots available in other reservations, the reservation will scale up to 1000
      slots with 200 baseline, 500 idle slots and 300 autoscaling slots. 3. if there are no idle slots
      available in other reservations, it will scale up to 1000 slots with 200 baseline and 800
      autoscaling slots. Please note, in this mode, the ignoreIdleSlots field must be set to false.
      Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.
    enum_values:
      - 'SCALING_MODE_UNSPECIFIED'
      - 'AUTOSCALE_ONLY'
      - 'IDLE_SLOTS_ONLY'
      - 'ALL_SLOTS'
    required_with:
      - 'maxSlots'
    conflicts:
      - 'autoscale'
  - name: 'maxSlots'
    type: Integer
    min_version: beta
    description: |
      The overall max slots for the reservation, covering slotCapacity (baseline), idle slots
      (if ignoreIdleSlots is false) and scaled slots. If present, the reservation won't use
      more than the specified number of slots, even if there is demand and supply (from idle
      slots). NOTE: capping a reservation's idle slot usage is best effort and its usage may
      exceed the maxSlots value. However, in terms of autoscale.current_slots (which accounts
      for the additional added slots), it will never exceed the maxSlots - baseline.

      This field must be set together with the scalingMode enum value, otherwise the request
      will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.

      If the maxSlots and scalingMode are set, the autoscale or autoscale.max_slots field
      must be unset. Otherwise the request will be rejected with error code
      google.rpc.Code.INVALID_ARGUMENT. However, the autoscale field may still be in the
      output. The autopscale.max_slots will always show as 0 and the autoscaler.current_slots
      will represent the current slots from autoscaler excluding idle slots. For example,
      if the maxSlots is 1000 and scalingMode is AUTOSCALE_ONLY, then in the output, the
      autoscaler.max_slots will be 0 and the autoscaler.current_slots may be any value
      between 0 and 1000.

      If the maxSlots is 1000, scalingMode is ALL_SLOTS, the baseline is 100 and idle slots
      usage is 200, then in the output, the autoscaler.max_slots will be 0 and the
      autoscaler.current_slots will not be higher than 700.

      If the maxSlots is 1000, scalingMode is IDLE_SLOTS_ONLY, then in the output, the
      autoscaler field will be null.

      If the maxSlots and scalingMode are set, then the ignoreIdleSlots field must be
      aligned with the scalingMode enum value.(See details in ScalingMode comments).
      Otherwise the request will be rejected with error code google.rpc.Code.INVALID_ARGUMENT.

      Please note, the maxSlots is for user to manage the part of slots greater than the
      baseline. Therefore, we don't allow users to set maxSlots smaller or equal to the
      baseline as it will not be meaningful. If the field is present and
      slotCapacity>=maxSlots, requests will be rejected with error code
      google.rpc.Code.INVALID_ARGUMENT.

      Please note that if maxSlots is set to 0, we will treat it as unset. Customers can set
      maxSlots to 0 and set scalingMode to SCALING_MODE_UNSPECIFIED to disable the maxSlots
      feature.
    required_with:
      - 'scalingMode'
    conflicts:
      - 'autoscale'
