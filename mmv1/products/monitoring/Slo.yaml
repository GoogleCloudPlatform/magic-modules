# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: Slo
base_url: v3/projects/{{project}}/services/{{service}}/serviceLevelObjectives
# name = projects/{{project}}/services/{{service}}/serviceLevelObjectives/{{slo_id}}
self_link: 'v3/{{name}}'
create_url: v3/projects/{{project}}/services/{{service}}/serviceLevelObjectives?serviceLevelObjectiveId={{slo_id}}
update_verb: :PATCH
update_mask: true
description: |
  A Service-Level Objective (SLO) describes the level of desired good
  service. It consists of a service-level indicator (SLI), a performance
  goal, and a period over which the objective is to be evaluated against
  that goal. The SLO can use SLIs defined in a number of different manners.
  Typical SLOs might include "99% of requests in each rolling week have
  latency below 200 milliseconds" or "99.5% of requests in each calendar
  month return successfully."
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Service Monitoring': 'https://cloud.google.com/monitoring/service-monitoring'
    'Monitoring API Documentation': 'https://cloud.google.com/monitoring/api/v3/'
  api: 'https://cloud.google.com/monitoring/api/ref_v3/rest/v3/services.serviceLevelObjectives'
id_format: '{{name}}'
import_format: ['{{name}}']
mutex: monitoring/project/{{project}}/service/{{service}}
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'monitoring_slo_appengine'
    primary_resource_id: 'appeng_slo'
    vars:
      slo_id: 'ae-slo'
  - !ruby/object:Provider::Terraform::Examples
    name: 'monitoring_slo_request_based'
    primary_resource_id: 'request_based_slo'
    test_env_vars:
      project: :PROJECT_NAME
    vars:
      service_id: 'custom-srv-request-slos'
      slo_id: 'consumed-api-slo'
  - !ruby/object:Provider::Terraform::Examples
    name: 'monitoring_slo_windows_based_good_bad_metric_filter'
    primary_resource_id: 'windows_based'
    vars:
      service_id: 'custom-srv-windows-slos'
      slo_id: 'good-bad-metric-filter'
  - !ruby/object:Provider::Terraform::Examples
    name: 'monitoring_slo_windows_based_metric_mean'
    primary_resource_id: 'windows_based'
    vars:
      service_id: 'custom-srv-windows-slos'
      slo_id: 'metric-mean-range'
  - !ruby/object:Provider::Terraform::Examples
    name: 'monitoring_slo_windows_based_metric_sum'
    primary_resource_id: 'windows_based'
    vars:
      service_id: 'custom-srv-windows-slos'
      slo_id: 'metric-sum-range'
  - !ruby/object:Provider::Terraform::Examples
    name: 'monitoring_slo_windows_based_ratio_threshold'
    primary_resource_id: 'windows_based'
    vars:
      service_id: 'custom-srv-windows-slos'
      slo_id: 'ratio-threshold'
custom_code: !ruby/object:Provider::Terraform::CustomCode
  constants: templates/terraform/constants/monitoring_slo.go.erb
  custom_import: templates/terraform/custom_import/self_link_as_name.erb
  encoder: templates/terraform/encoders/monitoring_slo.go.erb

parameters:
  - !ruby/object:Api::Type::String
    name: service
    required: true
    url_param_only: true
    immutable: true
    description: |
      ID of the service to which this SLO belongs.
  - !ruby/object:Api::Type::String
    name: sloId
    description: |
      The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
    immutable: true
    api_name: 'name'
    custom_flatten: templates/terraform/custom_flatten/name_from_self_link.erb
    default_from_api: true
    validation: !ruby/object:Provider::Terraform::Validation
      regex: '^[a-zA-Z0-9\-_:.]+$'
properties:
  - !ruby/object:Api::Type::String
    name: name
    description: |
      The full resource name for this service. The syntax is:
      projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
    output: true
  - !ruby/object:Api::Type::String
    name: displayName
    description: |
      Name used for UI elements listing this SLO.
  - !ruby/object:Api::Type::Double
    name: goal
    required: true
    description: |
      The fraction of service that must be good in order for this objective
      to be met. 0 < goal <= 0.999
    validation: !ruby/object:Provider::Terraform::Validation
      function: validateMonitoringSloGoal
  - !ruby/object:Api::Type::Integer
    name: rollingPeriodDays
    api_name: rollingPeriod
    exactly_one_of:
      - rolling_period_days
      - calendar_period
    description: |
      A rolling time period, semantically "in the past X days".
      Must be between 1 to 30 days, inclusive.
    custom_flatten: templates/terraform/custom_expand/days_to_duration_string.go.erb
    custom_expand: templates/terraform/custom_flatten/duration_string_to_days.go.erb
    validation: !ruby/object:Provider::Terraform::Validation
      function: 'validation.IntBetween(1, 30)'
  - !ruby/object:Api::Type::Enum
    name: calendarPeriod
    exactly_one_of:
      - rolling_period_days
      - calendar_period
    description: |
      A calendar period, semantically "since the start of the current
      <calendarPeriod>".
    values:
      - DAY
      - WEEK
      - FORTNIGHT
      - MONTH
  - !ruby/object:Api::Type::KeyValuePairs
    name: userLabels
    description: |
      This field is intended to be used for organizing and identifying the AlertPolicy
      objects.The field can contain up to 64 entries. Each key and value is limited
      to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
      can contain only lowercase letters, numerals, underscores, and dashes. Keys
      must begin with a letter.
    send_empty_value: true
  - !ruby/object:Api::Type::NestedObject
    name: serviceLevelIndicator
    description: |
      serviceLevelIndicator (SLI) describes a good service.
      It is used to measure and calculate the quality of the Service's
      performance with respect to a single aspect of service quality.
    flatten_object: true
    properties:
      - !ruby/object:Api::Type::NestedObject
        name: basicSli
        exactly_one_of:
          - service_level_indicator.0.basic_sli
          - service_level_indicator.0.request_based_sli
          - service_level_indicator.0.windows_based_sli
        description: |
          Basic Service-Level Indicator (SLI) on a well-known service type.
          Performance will be computed on the basis of pre-defined metrics.

          SLIs are used to measure and calculate the quality of the Service's
          performance with respect to a single aspect of service quality.

          Exactly one of the following must be set:
          `basic_sli`, `request_based_sli`, `windows_based_sli`
        properties:
          - !ruby/object:Api::Type::Array
            name: method
            description: |
              An optional set of RPCs to which this SLI is relevant.
              Telemetry from other methods will not be used to calculate
              performance for this SLI. If omitted, this SLI applies to all
              the Service's methods. For service types that don't support
              breaking down by method, setting this field will result in an
              error.
            is_set: true
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: location
            description: |
              An optional set of locations to which this SLI is relevant.
              Telemetry from other locations will not be used to calculate
              performance for this SLI. If omitted, this SLI applies to all
              locations in which the Service has activity. For service types
              that don't support breaking down by location, setting this
              field will result in an error.
            is_set: true
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: version
            description: |
              The set of API versions to which this SLI is relevant.
              Telemetry from other API versions will not be used to
              calculate performance for this SLI. If omitted,
              this SLI applies to all API versions. For service types
              that don't support breaking down by version, setting this
              field will result in an error.
            is_set: true
            item_type: Api::Type::String
          - !ruby/object:Api::Type::NestedObject
            name: latency
            description: |
              Parameters for a latency threshold SLI.
            exactly_one_of:
              - service_level_indicator.0.basic_sli.0.latency
              - service_level_indicator.0.basic_sli.0.availability
            properties:
              - !ruby/object:Api::Type::String
                required: true
                name: threshold
                description: |
                  A duration string, e.g. 10s.
                  Good service is defined to be the count of requests made to
                  this service that return in no more than threshold.
          - !ruby/object:Api::Type::NestedObject
            name: availability
            description: |
              Availability based SLI, dervied from count of requests made to this service that return successfully.
            exactly_one_of:
              - service_level_indicator.0.basic_sli.0.latency
              - service_level_indicator.0.basic_sli.0.availability
            custom_flatten: 'templates/terraform/custom_flatten/monitoring_slo_availability_sli.go.erb'
            properties:
              - !ruby/object:Api::Type::Boolean
                name: enabled
                default_value: true
                description: |
                  Whether an availability SLI is enabled or not. Must be set to true. Defaults to `true`.
                validation: !ruby/object:Provider::Terraform::Validation
                  function: validateAvailabilitySli
      - !ruby/object:Api::Type::NestedObject
        name: requestBasedSli
        api_name: 'requestBased'
        exactly_one_of:
          - service_level_indicator.0.basic_sli
          - service_level_indicator.0.request_based_sli
          - service_level_indicator.0.windows_based_sli
        description: |
          A request-based SLI defines a SLI for which atomic units of
          service are counted directly.

          A SLI describes a good service.
          It is used to measure and calculate the quality of the Service's
          performance with respect to a single aspect of service quality.
          Exactly one of the following must be set:
          `basic_sli`, `request_based_sli`, `windows_based_sli`
        update_mask_fields:
          - 'serviceLevelIndicator.requestBased.goodTotalRatio.badServiceFilter'
          - 'serviceLevelIndicator.requestBased.goodTotalRatio.goodServiceFilter'
          - 'serviceLevelIndicator.requestBased.goodTotalRatio.totalServiceFilter'
          - 'serviceLevelIndicator.requestBased.distributionCut.range'
          - 'serviceLevelIndicator.requestBased.distributionCut.distributionFilter'
        properties:
          - !ruby/object:Api::Type::NestedObject
            name: goodTotalRatio
            exactly_one_of:
              - service_level_indicator.0.request_based_sli.0.good_total_ratio
              - service_level_indicator.0.request_based_sli.0.distribution_cut
            description: |
              A means to compute a ratio of `good_service` to `total_service`.
              Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
              Must specify exactly two of good, bad, and total service filters.
              The relationship good_service + bad_service = total_service
              will be assumed.

              Exactly one of `distribution_cut` or `good_total_ratio` can be set.
            properties:
              - !ruby/object:Api::Type::String
                name: goodServiceFilter
                at_least_one_of:
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.good_service_filter
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.bad_service_filter
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.total_service_filter
                description: |
                  A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                  quantifying good service provided.
                  Must have ValueType = DOUBLE or ValueType = INT64 and
                  must have MetricKind = DELTA or MetricKind = CUMULATIVE.

                  Exactly two of `good_service_filter`,`bad_service_filter`,`total_service_filter`
                  must be set (good + bad = total is assumed).
              - !ruby/object:Api::Type::String
                name: badServiceFilter
                at_least_one_of:
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.good_service_filter
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.bad_service_filter
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.total_service_filter
                description: |
                  A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                  quantifying bad service provided, either demanded service that
                  was not provided or demanded service that was of inadequate
                  quality.

                  Must have ValueType = DOUBLE or ValueType = INT64 and
                  must have MetricKind = DELTA or MetricKind = CUMULATIVE.

                  Exactly two of `good_service_filter`,`bad_service_filter`,`total_service_filter`
                  must be set (good + bad = total is assumed).
              - !ruby/object:Api::Type::String
                name: totalServiceFilter
                at_least_one_of:
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.good_service_filter
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.bad_service_filter
                  - service_level_indicator.0.request_based_sli.0.good_total_ratio.0.total_service_filter
                description: |
                  A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                  quantifying total demanded service.

                  Must have ValueType = DOUBLE or ValueType = INT64 and
                  must have MetricKind = DELTA or MetricKind = CUMULATIVE.

                  Exactly two of `good_service_filter`,`bad_service_filter`,`total_service_filter`
                  must be set (good + bad = total is assumed).
          - !ruby/object:Api::Type::NestedObject
            name: distributionCut
            exactly_one_of:
              - service_level_indicator.0.request_based_sli.0.good_total_ratio
              - service_level_indicator.0.request_based_sli.0.distribution_cut
            description: |
              Used when good_service is defined by a count of values aggregated in a
              Distribution that fall into a good range. The total_service is the
              total count of all values aggregated in the Distribution.
              Defines a distribution TimeSeries filter and thresholds used for
              measuring good service and total service.

              Exactly one of `distribution_cut` or `good_total_ratio` can be set.
            properties:
              - !ruby/object:Api::Type::String
                name: distributionFilter
                required: true
                description: |
                  A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                  aggregating values to quantify the good service provided.

                  Must have ValueType = DISTRIBUTION and
                  MetricKind = DELTA or MetricKind = CUMULATIVE.
              - !ruby/object:Api::Type::NestedObject
                name: range
                required: true
                description: |
                  Range of numerical values. The computed good_service
                  will be the count of values x in the Distribution such
                  that range.min <= x <= range.max. inclusive of min and
                  max. Open ranges can be defined by setting
                  just one of min or max.
                properties:
                  - !ruby/object:Api::Type::Double
                    name: min
                    at_least_one_of:
                      - service_level_indicator.0.request_based_sli.0.distribution_cut.0.range.0.min
                      - service_level_indicator.0.request_based_sli.0.distribution_cut.0.range.0.max
                    description: |
                      Min value for the range (inclusive). If not given,
                      will be set to 0
                  - !ruby/object:Api::Type::Double
                    name: max
                    at_least_one_of:
                      - service_level_indicator.0.request_based_sli.0.distribution_cut.0.range.0.min
                      - service_level_indicator.0.request_based_sli.0.distribution_cut.0.range.0.max
                    description: |
                      max value for the range (inclusive). If not given,
                      will be set to 0
      - !ruby/object:Api::Type::NestedObject
        name: windowsBasedSli
        api_name: 'windowsBased'
        exactly_one_of:
          - service_level_indicator.0.basic_sli
          - service_level_indicator.0.request_based_sli
          - service_level_indicator.0.windows_based_sli
        description: |
          A windows-based SLI defines the criteria for time windows.
          good_service is defined based off the count of these time windows
          for which the provided service was of good quality.

          A SLI describes a good service. It is used to measure and calculate
          the quality of the Service's performance with respect to a single
          aspect of service quality.

          Exactly one of the following must be set:
          `basic_sli`, `request_based_sli`, `windows_based_sli`
        update_mask_fields:
          - 'serviceLevelIndicator.windowsBased.windowPeriod'
          - 'serviceLevelIndicator.windowsBased.goodBadMetricFilter'
          - 'serviceLevelIndicator.windowsBased.goodTotalRatioThreshold.threshold'
          - 'serviceLevelIndicator.windowsBased.goodTotalRatioThreshold.performance.goodTotalRatio.badServiceFilter'
          - 'serviceLevelIndicator.windowsBased.goodTotalRatioThreshold.performance.goodTotalRatio.goodServiceFilter'
          - 'serviceLevelIndicator.windowsBased.goodTotalRatioThreshold.performance.goodTotalRatio.totalServiceFilter'
          - 'serviceLevelIndicator.windowsBased.goodTotalRatioThreshold.performance.distributionCut.range'
          - 'serviceLevelIndicator.windowsBased.goodTotalRatioThreshold.performance.distributionCut.distributionFilter'
          - 'serviceLevelIndicator.windowsBased.goodTotalRatioThreshold.basicSliPerformance'
          - 'serviceLevelIndicator.windowsBased.metricMeanInRange.timeSeries'
          - 'serviceLevelIndicator.windowsBased.metricMeanInRange.range'
          - 'serviceLevelIndicator.windowsBased.metricSumInRange.timeSeries'
          - 'serviceLevelIndicator.windowsBased.metricSumInRange.range'
        properties:
          # NOTE: If adding properties to windowsBasedSli, remember to add to the
          # custom updateMask fields in property overrides.
          - !ruby/object:Api::Type::String
            name: windowPeriod
            description: |
              Duration over which window quality is evaluated, given as a
              duration string "{X}s" representing X seconds. Must be an
              integer fraction of a day and at least 60s.
          # START window_criterion FIELDS
          - !ruby/object:Api::Type::String
            name: goodBadMetricFilter
            exactly_one_of:
              - service_level_indicator.0.windows_based_sli.0.good_bad_metric_filter
              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold
              - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range
              - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range
            description: |
              A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
              with ValueType = BOOL. The window is good if any true values
              appear in the window. One of `good_bad_metric_filter`,
              `good_total_ratio_threshold`, `metric_mean_in_range`,
              `metric_sum_in_range` must be set for `windows_based_sli`.
          - !ruby/object:Api::Type::NestedObject
            name: goodTotalRatioThreshold
            exactly_one_of:
              - service_level_indicator.0.windows_based_sli.0.good_bad_metric_filter
              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold
              - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range
              - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range
            description: |
              Criterion that describes a window as good if its performance is
              high enough. One of `good_bad_metric_filter`,
              `good_total_ratio_threshold`, `metric_mean_in_range`,
              `metric_sum_in_range` must be set for `windows_based_sli`.
            properties:
              - !ruby/object:Api::Type::Double
                name: threshold
                description: |
                  If window performance >= threshold, the window is counted
                  as good.
              - !ruby/object:Api::Type::NestedObject
                name: performance
                exactly_one_of:
                  - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance
                  - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.basic_sli_performance
                description: |
                  Request-based SLI to evaluate to judge window quality.
                properties:
                  - !ruby/object:Api::Type::NestedObject
                    name: goodTotalRatio
                    exactly_one_of:
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.distribution_cut
                    description: |
                      A means to compute a ratio of `good_service` to `total_service`.
                      Defines computing this ratio with two TimeSeries [monitoring filters](https://cloud.google.com/monitoring/api/v3/filters)
                      Must specify exactly two of good, bad, and total service filters.
                      The relationship good_service + bad_service = total_service
                      will be assumed.
                    properties:
                      - !ruby/object:Api::Type::String
                        name: goodServiceFilter
                        at_least_one_of:
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.good_service_filter
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.bad_service_filter
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.total_service_filter
                        description: |
                          A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                          quantifying good service provided. Exactly two of
                          good, bad, or total service filter must be defined (where
                          good + bad = total is assumed)

                          Must have ValueType = DOUBLE or ValueType = INT64 and
                          must have MetricKind = DELTA or MetricKind = CUMULATIVE.
                      - !ruby/object:Api::Type::String
                        name: badServiceFilter
                        at_least_one_of:
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.good_service_filter
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.bad_service_filter
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.total_service_filter
                        description: |
                          A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                          quantifying bad service provided, either demanded service that
                          was not provided or demanded service that was of inadequate
                          quality. Exactly two of
                          good, bad, or total service filter must be defined (where
                          good + bad = total is assumed)

                          Must have ValueType = DOUBLE or ValueType = INT64 and
                          must have MetricKind = DELTA or MetricKind = CUMULATIVE.
                      - !ruby/object:Api::Type::String
                        name: totalServiceFilter
                        at_least_one_of:
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.good_service_filter
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.bad_service_filter
                          - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio.0.total_service_filter
                        description: |
                          A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                          quantifying total demanded service. Exactly two of
                          good, bad, or total service filter must be defined (where
                          good + bad = total is assumed)

                          Must have ValueType = DOUBLE or ValueType = INT64 and
                          must have MetricKind = DELTA or MetricKind = CUMULATIVE.
                  - !ruby/object:Api::Type::NestedObject
                    name: distributionCut
                    exactly_one_of:
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.good_total_ratio
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.distribution_cut
                    description: |
                      Used when good_service is defined by a count of values aggregated in a
                      Distribution that fall into a good range. The total_service is the
                      total count of all values aggregated in the Distribution.
                      Defines a distribution TimeSeries filter and thresholds used for
                      measuring good service and total service.
                    properties:
                      - !ruby/object:Api::Type::String
                        name: distributionFilter
                        required: true
                        description: |
                          A TimeSeries [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                          aggregating values to quantify the good service provided.

                          Must have ValueType = DISTRIBUTION and
                          MetricKind = DELTA or MetricKind = CUMULATIVE.
                      - !ruby/object:Api::Type::NestedObject
                        name: range
                        required: true
                        description: |
                          Range of numerical values. The computed good_service
                          will be the count of values x in the Distribution such
                          that range.min <= x <= range.max. inclusive of min and
                          max. Open ranges can be defined by setting
                          just one of min or max.
                        properties:
                          - !ruby/object:Api::Type::Double
                            name: min
                            at_least_one_of:
                              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.distribution_cut.0.range.0.min
                              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.distribution_cut.0.range.0.max
                            description: |
                              Min value for the range (inclusive). If not given,
                              will be set to 0
                          - !ruby/object:Api::Type::Double
                            name: max
                            at_least_one_of:
                              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.distribution_cut.0.range.0.min
                              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance.0.distribution_cut.0.range.0.max
                            description: |
                              max value for the range (inclusive). If not given,
                              will be set to 0
              - !ruby/object:Api::Type::NestedObject
                name: basicSliPerformance
                exactly_one_of:
                  - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.performance
                  - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.basic_sli_performance
                description: |
                  Basic SLI to evaluate to judge window quality.
                properties:
                  - !ruby/object:Api::Type::Array
                    name: method
                    description: |
                      An optional set of RPCs to which this SLI is relevant.
                      Telemetry from other methods will not be used to calculate
                      performance for this SLI. If omitted, this SLI applies to all
                      the Service's methods. For service types that don't support
                      breaking down by method, setting this field will result in an
                      error.
                    is_set: true
                    item_type: Api::Type::String
                  - !ruby/object:Api::Type::Array
                    name: location
                    description: |
                      An optional set of locations to which this SLI is relevant.
                      Telemetry from other locations will not be used to calculate
                      performance for this SLI. If omitted, this SLI applies to all
                      locations in which the Service has activity. For service types
                      that don't support breaking down by location, setting this
                      field will result in an error.
                    is_set: true
                    item_type: Api::Type::String
                  - !ruby/object:Api::Type::Array
                    name: version
                    description: |
                      The set of API versions to which this SLI is relevant.
                      Telemetry from other API versions will not be used to
                      calculate performance for this SLI. If omitted,
                      this SLI applies to all API versions. For service types
                      that don't support breaking down by version, setting this
                      field will result in an error.
                    is_set: true
                    item_type: Api::Type::String
                  - !ruby/object:Api::Type::NestedObject
                    name: latency
                    description: |
                      Parameters for a latency threshold SLI.
                    exactly_one_of:
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.basic_sli_performance.0.latency
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.basic_sli_performance.0.availability
                    properties:
                      - !ruby/object:Api::Type::String
                        required: true
                        name: threshold
                        description: |
                          A duration string, e.g. 10s.
                          Good service is defined to be the count of requests made to
                          this service that return in no more than threshold.
                  - !ruby/object:Api::Type::NestedObject
                    name: availability
                    description: |
                      Availability based SLI, dervied from count of requests made to this service that return successfully.
                    exactly_one_of:
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.basic_sli_performance.0.latency
                      - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold.0.basic_sli_performance.0.availability
                    custom_flatten: 'templates/terraform/custom_flatten/monitoring_slo_availability_sli.go.erb'
                    properties:
                      - !ruby/object:Api::Type::Boolean
                        name: enabled
                        default_value: true
                        description: |
                          Whether an availability SLI is enabled or not. Must be set to `true. Defaults to `true`.
                        validation: !ruby/object:Provider::Terraform::Validation
                          function: validateAvailabilitySli
          - !ruby/object:Api::Type::NestedObject
            name: metricMeanInRange
            exactly_one_of:
              - service_level_indicator.0.windows_based_sli.0.good_bad_metric_filter
              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold
              - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range
              - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range
            description: |
              Criterion that describes a window as good if the metric's value
              is in a good range, *averaged* across returned streams.
              One of `good_bad_metric_filter`,

              `good_total_ratio_threshold`, `metric_mean_in_range`,
              `metric_sum_in_range` must be set for `windows_based_sli`.
              Average value X of `time_series` should satisfy
              `range.min <= X <= range.max` for a good window.
            properties:
              - !ruby/object:Api::Type::String
                name: timeSeries
                required: true
                description: |
                  A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                  specifying the TimeSeries to use for evaluating window
                  The provided TimeSeries must have ValueType = INT64 or
                  ValueType = DOUBLE and MetricKind = GAUGE. Mean value `X`
                  should satisfy `range.min <= X <= range.max`
                  under good service.
              - !ruby/object:Api::Type::NestedObject
                name: range
                required: true
                description: |
                  Range of numerical values. The computed good_service
                  will be the count of values x in the Distribution such
                  that range.min <= x <= range.max. inclusive of min and
                  max. Open ranges can be defined by setting
                  just one of min or max. Mean value `X` of `time_series`
                  values should satisfy `range.min <= X <= range.max` for a
                  good service.
                properties:
                  - !ruby/object:Api::Type::Double
                    name: min
                    at_least_one_of:
                      - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range.0.range.0.min
                      - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range.0.range.0.max
                    description: |
                      Min value for the range (inclusive). If not given,
                      will be set to "-infinity", defining an open range
                      "< range.max"
                  - !ruby/object:Api::Type::Double
                    name: max
                    at_least_one_of:
                      - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range.0.range.0.min
                      - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range.0.range.0.max
                    description: |
                      max value for the range (inclusive). If not given,
                      will be set to "infinity", defining an open range
                      ">= range.min"
          - !ruby/object:Api::Type::NestedObject
            name: metricSumInRange
            exactly_one_of:
              - service_level_indicator.0.windows_based_sli.0.good_bad_metric_filter
              - service_level_indicator.0.windows_based_sli.0.good_total_ratio_threshold
              - service_level_indicator.0.windows_based_sli.0.metric_mean_in_range
              - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range
            description: |
              Criterion that describes a window as good if the metric's value
              is in a good range, *summed* across returned streams.
              Summed value `X` of `time_series` should satisfy
              `range.min <= X <= range.max` for a good window.

              One of `good_bad_metric_filter`,
              `good_total_ratio_threshold`, `metric_mean_in_range`,
              `metric_sum_in_range` must be set for `windows_based_sli`.
            properties:
              - !ruby/object:Api::Type::String
                name: timeSeries
                required: true
                description: |
                  A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
                  specifying the TimeSeries to use for evaluating window
                  quality. The provided TimeSeries must have
                  ValueType = INT64 or ValueType = DOUBLE and
                  MetricKind = GAUGE.

                  Summed value `X` should satisfy
                  `range.min <= X <= range.max` for a good window.
              - !ruby/object:Api::Type::NestedObject
                name: range
                required: true
                description: |
                  Range of numerical values. The computed good_service
                  will be the count of values x in the Distribution such
                  that range.min <= x <= range.max. inclusive of min and
                  max. Open ranges can be defined by setting
                  just one of min or max. Summed value `X` should satisfy
                  `range.min <= X <= range.max` for a good window.
                properties:
                  - !ruby/object:Api::Type::Double
                    name: min
                    at_least_one_of:
                      - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range.0.range.0.min
                      - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range.0.range.0.max
                    description: |
                      Min value for the range (inclusive). If not given,
                      will be set to "-infinity", defining an open range
                      "< range.max"
                  - !ruby/object:Api::Type::Double
                    name: max
                    at_least_one_of:
                      - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range.0.range.0.min
                      - service_level_indicator.0.windows_based_sli.0.metric_sum_in_range.0.range.0.max
                    description: |
                      max value for the range (inclusive). If not given,
                      will be set to "infinity", defining an open range
                      ">= range.min"
        # END window_criterion FIELDS
