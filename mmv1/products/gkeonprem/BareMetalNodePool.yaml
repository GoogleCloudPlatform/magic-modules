# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'BareMetalNodePool'
base_url: 'projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools'
create_url: 'projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools?bare_metal_node_pool_id={{name}}'
update_url: 'projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools/{{name}}'
self_link: 'projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools/{{name}}'
update_verb: :PATCH
update_mask: true
description: 'A Google Bare Metal Node Pool.'
autogen_async: false
id_format: 'projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools/{{name}}'
import_format:
  [
    'projects/{{project}}/locations/{{location}}/bareMetalClusters/{{bare_metal_cluster}}/bareMetalNodePools/{{name}}',
  ]
taint_resource_on_failed_create: true
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'gkeonprem_bare_metal_node_pool_basic'
    primary_resource_id: 'nodepool-basic'
    vars:
      name: 'my-nodepool'
      cluster: 'my-cluster'
    test_env_vars:
      project: 'fake-backend-360322'
  - !ruby/object:Provider::Terraform::Examples
    name: 'gkeonprem_bare_metal_node_pool_full'
    primary_resource_id: 'nodepool-full'
    vars:
      name: 'my-nodepool'
      cluster: 'my-cluster'
    test_env_vars:
      project: 'fake-backend-360322'
skip_sweeper: true
parameters:
  - !ruby/object:Api::Type::String
    name: 'name'
    description: The bare metal node pool name.
    immutable: true
    url_param_only: true
    required: true
  - !ruby/object:Api::Type::ResourceRef
    name: 'bareMetalCluster'
    resource: 'BareMetalCluster'
    imports: 'name'
    immutable: true
    description: 'The cluster this node pool belongs to.'
    url_param_only: true
    required: true
  - !ruby/object:Api::Type::String
    name: 'location'
    description: The location of the resource.
    immutable: true
    url_param_only: true
    required: true
properties:
  - !ruby/object:Api::Type::String
    name: 'displayName'
    description: |
      The display name for the Bare Metal Node Pool.
  - !ruby/object:Api::Type::KeyValueAnnotations
    name: 'annotations'
    description: |
      Annotations on the Bare Metal Node Pool.
      This field has the same restrictions as Kubernetes annotations.
      The total size of all keys and values combined is limited to 256k.
      Key can have 2 segments: prefix (optional) and name (required),
      separated by a slash (/).
      Prefix must be a DNS subdomain.
      Name must be 63 characters or less, begin and end with alphanumerics,
      with dashes (-), underscores (_), dots (.), and alphanumerics between.
  - !ruby/object:Api::Type::NestedObject
    name: 'nodePoolConfig'
    required: true
    description: |
      Node pool configuration.
    properties:
      - !ruby/object:Api::Type::Array
        name: 'nodeConfigs'
        required: true
        description: The list of machine addresses in the Bare Metal Node Pool.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: 'nodeIp'
              description: |
                The default IPv4 address for SSH access and Kubernetes node.
                Example: 192.168.0.1
            - !ruby/object:Api::Type::KeyValuePairs
              name: 'labels'
              description: |
                The map of Kubernetes labels (key/value pairs) to be applied to
                each node. These will added in addition to any default label(s)
                that Kubernetes may apply to the node. In case of conflict in
                label keys, the applied set may differ depending on the Kubernetes
                version -- it's best to assume the behavior is undefined and
                conflicts should be avoided. For more information, including usage
                and the valid values, see:
                  http://kubernetes.io/v1.1/docs/user-guide/labels.html
                An object containing a list of "key": value pairs.
                Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
      - !ruby/object:Api::Type::String
        name: 'operatingSystem'
        description: |
          Specifies the nodes operating system (default: LINUX).
        default_from_api: true
      - !ruby/object:Api::Type::Array
        name: 'taints'
        description: |
          The initial taints assigned to nodes of this node pool.
        default_from_api: true
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: 'key'
              description: |
                Key associated with the effect.
            - !ruby/object:Api::Type::String
              name: 'value'
              description: |
                Value associated with the effect.
            - !ruby/object:Api::Type::Enum
              name: 'effect'
              description: |
                Specifies the nodes operating system (default: LINUX).
              values:
                - EFFECT_UNSPECIFIED
                - PREFER_NO_SCHEDULE
                - NO_EXECUTE
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'labels'
        description: |
          The map of Kubernetes labels (key/value pairs) to be applied to
          each node. These will added in addition to any default label(s)
          that Kubernetes may apply to the node. In case of conflict in
          label keys, the applied set may differ depending on the Kubernetes
          version -- it's best to assume the behavior is undefined and
          conflicts should be avoided. For more information, including usage
          and the valid values, see:
            http://kubernetes.io/v1.1/docs/user-guide/labels.html
          An object containing a list of "key": value pairs.
          Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
        default_from_api: true
  - !ruby/object:Api::Type::NestedObject
    name: 'status'
    output: true
    description: |
      Specifies detailed node pool status.
    properties:
      - !ruby/object:Api::Type::String
        name: 'errorMessage'
        description: |
          Human-friendly representation of the error message from the user cluster
          controller. The error message can be temporary as the user cluster
          controller creates a cluster or node pool. If the error message persists
          for a longer period of time, it can be used to surface error message to
          indicate real problems requiring user intervention.
        output: true
      - !ruby/object:Api::Type::Array
        name: 'conditions'
        description: |
          ResourceConditions provide a standard mechanism for higher-level status reporting from user cluster controller.
        output: true
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: 'type'
              description: |
                Type of the condition.
                (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)
            - !ruby/object:Api::Type::String
              name: 'reason'
              description: |
                Machine-readable message indicating details about last transition.
            - !ruby/object:Api::Type::String
              name: 'message'
              description: |
                Human-readable message indicating details about last transition.
            - !ruby/object:Api::Type::Time
              name: 'lastTransitionTime'
              description: |
                Last time the condition transit from one status to another.
              output: true
            - !ruby/object:Api::Type::Enum
              name: 'state'
              description: The lifecycle state of the condition.
              output: true
              values:
                - STATE_UNSPECIFIED
                - STATE_TRUE
                - STATE_FALSE
                - STATE_UNKNOWN
  - !ruby/object:Api::Type::String
    name: 'uid'
    description: 'The unique identifier of the Bare Metal Node Pool.'
    output: true
  - !ruby/object:Api::Type::Enum
    name: 'state'
    description: The current state of this cluster.
    output: true
    values:
      - STATE_UNSPECIFIED
      - PROVISIONING
      - RUNNING
      - RECONCILING
      - STOPPING
      - ERROR
      - DEGRADED
  - !ruby/object:Api::Type::Boolean
    name: 'reconciling'
    description: |
      If set, there are currently changes in flight to the Bare Metal User Cluster.
    output: true
  - !ruby/object:Api::Type::Time
    name: 'createTime'
    description: |
      The time the cluster was created, in RFC3339 text format.
    output: true
  - !ruby/object:Api::Type::Time
    name: 'updateTime'
    description: |
      The time the cluster was last updated, in RFC3339 text format.
    output: true
  - !ruby/object:Api::Type::Time
    name: 'deleteTime'
    description: |
      The time the cluster was deleted, in RFC3339 text format.
    output: true
  - !ruby/object:Api::Type::String
    name: 'etag'
    description: |
      This checksum is computed by the server based on the value of other
      fields, and may be sent on update and delete requests to ensure the
      client has an up-to-date value before proceeding.
      Allows clients to perform consistent read-modify-writes
      through optimistic concurrency control.
    output: true
