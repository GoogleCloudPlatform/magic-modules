# Copyright 2021 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: DataprocMetastore
versions:
  - !ruby/object:Api::Product::Version
    name: beta
    base_url: https://metastore.googleapis.com/v1beta/
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://metastore.googleapis.com/v1/    
scopes:
  - https://www.googleapis.com/auth/cloud-identity
apis_required:
  - !ruby/object:Api::Product::ApiReference
    name: Dataproc Metastore API
    url: https://console.cloud.google.com/apis/library/metastore.googleapis.com
objects:
  - !ruby/object:Api::Resource
    name: 'Service'
    base_url: "projects/{{project}}/locations/{{location}}/services"
    create_url: 'projects/{{project}}/locations/{{location}}/services?serviceId={{service_id}}'
    self_link: "projects/{{project}}/locations/{{location}}/services/{{service_id}}"
    update_verb: :PATCH
    update_mask: true
    description: |
      A managed metastore service that serves metadata queries.
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Official Documentation': 'https://cloud.google.com/dataproc-metastore/docs/overview'
      api: 'https://cloud.google.com/dataproc-metastore/docs/reference/rest/v1/projects.locations.services'
    iam_policy: !ruby/object:Api::Resource::IamPolicy
      parent_resource_attribute: service_id
      exclude: false
      method_name_separator: ':'
      import_format: ["projects/{{project}}/locations/{{location}}/services/{{service_id}}", "{{service_id}}"]
    async: !ruby/object:Api::OpAsync
      operation: !ruby/object:Api::OpAsync::Operation
        path: 'name'
        base_url: '{{op_id}}'
        wait_ms: 1000
        timeouts: !ruby/object:Api::Timeouts
          insert_minutes: 60
          update_minutes: 60
          delete_minutes: 60
      result: !ruby/object:Api::OpAsync::Result
        path: 'response'
      status: !ruby/object:Api::OpAsync::Status
        path: 'done'
        complete: true
        allowed:
          - true
          - false
      error: !ruby/object:Api::OpAsync::Error
        path: 'error'
        message: 'message'
    parameters:
      - !ruby/object:Api::Type::String
        name: 'serviceId'
        required: true
        input: true
        url_param_only: true
        description: |
          The ID of the metastore service. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
          and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
          3 and 63 characters.
      - !ruby/object:Api::Type::String
        name: 'location'
        url_param_only: true
        input: true
        default_value: global
        description: |
          The location where the metastore service should reside.
          The default value is `global`.
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        output: true
        description: |
          The relative resource name of the metastore service.
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'labels'
        description: 'User-defined labels for the metastore service.'
      # This is an x-product resource reference.
      - !ruby/object:Api::Type::String
        name: 'network'
        input: true
        description: |
          The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:

          "projects/{projectNumber}/global/networks/{network_id}".
      - !ruby/object:Api::Type::String
        name: 'endpointUri'
        output: true
        description: |
          The URI of the endpoint used to access the metastore service.
      - !ruby/object:Api::Type::Integer
        name: 'port'
        description: |
          The TCP port at which the metastore service is reached. Default: 9083.
      - !ruby/object:Api::Type::String
        name: 'state'
        output: true
        description: |
          The current state of the metastore service.
      - !ruby/object:Api::Type::String
        name: 'stateMessage'
        output: true
        description: |
          Additional information about the current state of the metastore service, if available.
      - !ruby/object:Api::Type::String
        name: 'artifactGcsUri'
        output: true
        description: |
          A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.
      - !ruby/object:Api::Type::Enum
        name: 'tier'
        description: |
          The tier of the service.
        values:
          - :DEVELOPER
          - :ENTERPRISE
      - !ruby/object:Api::Type::NestedObject
        name: 'maintenanceWindow'
        description: |
          The one hour maintenance window of the metastore service.
          This specifies when the service can be restarted for maintenance purposes in UTC time.
          Maintenance window is not needed for services with the `SPANNER` database type.
        properties:
          - !ruby/object:Api::Type::Integer
            name: 'hourOfDay'
            description: |
              The hour of day (0-23) when the window starts.
            required: true
          - !ruby/object:Api::Type::Enum
              name: 'dayOfWeek'
              description: |
                The day of week, when the window starts.
              required: true
              values:
              - :MONDAY
              - :TUESDAY
              - :WEDNESDAY
              - :THURSDAY
              - :FRIDAY
              - :SATURDAY
              - :SUNDAY
      - !ruby/object:Api::Type::NestedObject
        name: 'encryptionConfig'
        description: |
          Information used to configure the Dataproc Metastore service to encrypt
          customer data at rest.
        properties:
          - !ruby/object:Api::Type::String
            name: 'kmsKey'
            description: |
              The fully qualified customer provided Cloud KMS key name to use for customer data encryption.
              Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
            required: true
            input: true
      - !ruby/object:Api::Type::NestedObject
        name: 'hiveMetastoreConfig'
        description: |
         Configuration information specific to running Hive metastore software as the metastore service.
        properties:
          - !ruby/object:Api::Type::Enum
            name: 'endpointProtocol'
            min_version: beta
            input: true
            default_value: :THRIFT
            description: |
              The protocol to use for the metastore service endpoint. If unspecified, defaults to `THRIFT`.
            values:
              - :THRIFT
              - :GRPC         
          - !ruby/object:Api::Type::String
            name: 'version'
            input: true
            required: true
            description: |
              The Hive metastore schema version.
          - !ruby/object:Api::Type::KeyValuePairs
            name: 'configOverrides'
            description: |
              A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml).
              The mappings override system defaults (some keys cannot be overridden)
          - !ruby/object:Api::Type::NestedObject
            name: 'kerberosConfig'
            description: |
              Information used to configure the Hive metastore service as a service principal in a Kerberos realm.
            properties:
              - !ruby/object:Api::Type::NestedObject
                name: 'keytab'
                required: true
                description: |
                  A Kerberos keytab file that can be used to authenticate a service principal with a Kerberos Key Distribution Center (KDC).
                properties:
                  - !ruby/object:Api::Type::String
                    required: true
                    name: 'cloudSecret'
                    description: |
                      The relative resource name of a Secret Manager secret version, in the following form:

                      "projects/{projectNumber}/secrets/{secret_id}/versions/{version_id}".
              - !ruby/object:Api::Type::String
                name: 'principal'
                required: true
                description: |
                  A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form "primary/instance@REALM", but there is no exact format.
              - !ruby/object:Api::Type::String
                name: 'krb5ConfigGcsUri'
                required: true
                description: |
                  A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.
          - !ruby/object:Api::Type::Map
            name: 'auxiliaryVersions'
            min_version: beta
            description: |
                  A mapping of Hive metastore version to the auxiliary version configuration.
                  When specified, a secondary Hive metastore service is created along with the primary service.
                  All auxiliary versions must be less than the service's primary version.
                  The key is the auxiliary service name and it must match the regular expression a-z?.
                  This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.
            key_name: 'key'
            key_description: |
              The auxiliary service name
            value_type: !ruby/object:Api::Type::NestedObject
              properties:
                - !ruby/object:Api::Type::String
                  name: 'version'
                  required: true
                  description: |
                    The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.
                - !ruby/object:Api::Type::KeyValuePairs
                  name: 'configOverrides'
                  description: |
                    A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides.
                    If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.
      - !ruby/object:Api::Type::NestedObject
        name: 'networkConfig'
        input: true
        description: |
          The configuration specifying the network settings for the Dataproc Metastore service.
        properties:
        - !ruby/object:Api::Type::Array
          name: 'consumers'
          description: |
            The consumer-side network configuration for the Dataproc Metastore instance.
          required: true
          input: true
          item_type: !ruby/object:Api::Type::NestedObject
            properties:
            - !ruby/object:Api::Type::String
              name: 'endpointUri'
              description: |
                The URI of the endpoint used to access the metastore service.
              output: true
            - !ruby/object:Api::Type::String
              name: 'subnetwork'
              required: true
              description: |
                The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint.
                It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network.
                There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:
                `projects/{projectNumber}/regions/{region_id}/subnetworks/{subnetwork_id}
      - !ruby/object:Api::Type::Enum
        name: 'databaseType'
        input: true
        default_value: :MYSQL
        description: |
          The database type that the Metastore service stores its data.
        values:
          - :MYSQL
          - :SPANNER
      - !ruby/object:Api::Type::Enum
        name: 'releaseChannel'
        input: true
        default_value: :STABLE
        description: |
          The release channel of the service. If unspecified, defaults to `STABLE`.
        values:
          - :CANARY
          - :STABLE
      - !ruby/object:Api::Type::String
        name: 'uid'
        output: true
        description: |
          The globally unique resource identifier of the metastore service.
      - !ruby/object:Api::Type::NestedObject
        name: 'metadataIntegration'
        min_version: beta
        description: |
          The setting that defines how metastore metadata should be integrated with external services and systems.
        properties:
          - !ruby/object:Api::Type::NestedObject
            name: 'dataCatalogConfig'
            required: true
            description: |
              The integration config for the Data Catalog service.
            properties:
              - !ruby/object:Api::Type::Boolean
                name: 'enabled'
                required: true
                description: |
                  Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.      
  - !ruby/object:Api::Resource
    name: 'Federation'
    min_version: beta
    base_url: "projects/{{project}}/locations/{{location}}/federations"
    create_url: 'projects/{{project}}/locations/{{location}}/federations?federationId={{federation_id}}'
    self_link: "projects/{{project}}/locations/{{location}}/federations/{{federation_id}}"    
    update_verb: :PATCH
    update_mask: true
    description: |
      A managed metastore federation.
    iam_policy: !ruby/object:Api::Resource::IamPolicy
      parent_resource_attribute: federation_id
      exclude: false
      method_name_separator: ':'
      import_format: ["projects/{{project}}/locations/{{location}}/federations/{{federation_id}}", "{{federation_id}}"]
    async: !ruby/object:Api::OpAsync
      operation: !ruby/object:Api::OpAsync::Operation
        path: 'name'
        base_url: '{{op_id}}'
        wait_ms: 1000
      result: !ruby/object:Api::OpAsync::Result
        path: 'response'
      status: !ruby/object:Api::OpAsync::Status
        path: 'done'
        complete: true
        allowed:
          - true
          - false
      error: !ruby/object:Api::OpAsync::Error
        path: 'error'
        message: 'message'
    parameters:
      - !ruby/object:Api::Type::String
        name: 'federationId'
        required: true
        input: true
        url_param_only: true
        description: |
          The ID of the metastore federation. The id must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
          and hyphens (-). Cannot begin or end with underscore or hyphen. Must consist of between
          3 and 63 characters.
      - !ruby/object:Api::Type::String
        name: 'location'
        url_param_only: true
        input: true
        description: |
          The location where the metastore federation should reside.
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        output: true
        description: |
          The relative resource name of the metastore federation.
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'labels'
        description: 'User-defined labels for the metastore federation.'
      - !ruby/object:Api::Type::String
        name: 'endpointUri'
        output: true
        description: |
          The URI of the endpoint used to access the metastore federation.
      - !ruby/object:Api::Type::String
        name: 'state'
        output: true
        description: |
          The current state of the metastore federation.
      - !ruby/object:Api::Type::String
        name: 'stateMessage'
        output: true
        description: |
          Additional information about the current state of the metastore federation, if available.
      - !ruby/object:Api::Type::String
        name: 'uid'
        output: true
        description: |
          The globally unique resource identifier of the metastore federation.
      - !ruby/object:Api::Type::String
        name: 'version'
        input: true
        required: true
        description: |
          The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.
      - !ruby/object:Api::Type::Map
        name: 'backendMetastores'
        description: |
          A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.
        required: true
        key_name: 'rank'
        key_description: |
          represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero.
        value_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: 'name'
              required: true
              description: |
                The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: Dataplex: projects/{projectId}/locations/{location}/lakes/{lake_id} BigQuery: projects/{projectId} Dataproc Metastore: projects/{projectId}/locations/{location}/services/{serviceId}
            - !ruby/object:Api::Type::Enum
              name: 'metastoreType'
              required: true
              description: |
                The type of the backend metastore.
              values:
                - :METASTORE_TYPE_UNSPECIFIED
                - :DATAPROC_METASTORE
                - :BIGQUERY
