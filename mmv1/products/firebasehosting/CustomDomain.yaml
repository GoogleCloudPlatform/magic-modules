# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
!ruby/object:Api::Resource
name: "CustomDomain"
min_version: beta
base_url: projects/{{project}}/sites/{{site_id}}/customDomains
self_link: projects/{{project}}/sites/{{site_id}}/customDomains/{{custom_domain}}
create_url: projects/{{project}}/sites/{{site_id}}/customDomains?customDomainId={{custom_domain}}
update_verb: :PATCH
update_mask: true
description: |
  Manages Custom Domains for Firebase Hosting. Custom Domains link your
  domain names with Firebase Hosting sites, allowing Hosting to serve content
  on those domain names.
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    "Official Documentation": "https://firebase.google.com/docs/hosting"
  api: "https://firebase.google.com/docs/reference/hosting/rest/v1beta1/projects.sites.customDomains"
import_format:
  [
    "projects/{{project}}/sites/{{site_id}}/customDomains/{{custom_domain}}",
    "{{project}}/{{site_id}}/{{custom_domain}}",
    "sites/{{site_id}}/customDomains/{{custom_domain}}",
    "{{site_id}}/{{custom_domain}}",
  ]
autogen_async: true
async: !ruby/object:Api::OpAsync
  actions: ["update", "delete"]
  operation: !ruby/object:Api::OpAsync::Operation
    path: "name"
    base_url: "{{op_id}}"
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: "response"
    resource_inside_response: true
  status: !ruby/object:Api::OpAsync::Status
    path: "done"
    complete: true
    allowed:
      - true
      - false
  error: !ruby/object:Api::OpAsync::Error
    path: "error"
    message: "message"
custom_code: !ruby/object:Provider::Terraform::CustomCode
  post_create: templates/terraform/post_create/firebasehosting_custom_domain_wait_dns_verification.erb
  test_check_destroy: templates/terraform/custom_check_destroy/firebasehosting_custom_domain_soft_delete.go.erb
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: "firebasehosting_customdomain_basic"
    min_version: "beta"
    primary_resource_id: "default"
    vars:
      site_id: site-id
      custom_domain: custom.domain.com
    test_env_vars:
      project_id: :PROJECT_NAME
    test_vars_overrides:
      # Use the default hosting site for the project in tests
      site_id: envvar.GetTestProjectFromEnv()
      # Don't add random suffix
      custom_domain: '"basic.custom.domain.com"'
  - !ruby/object:Provider::Terraform::Examples
    name: "firebasehosting_customdomain_full"
    min_version: "beta"
    primary_resource_id: "default"
    vars:
      site_id: site-id-full
      custom_domain: source.domain.com
      redirect_target: destination.domain.com
    test_env_vars:
      project_id: :PROJECT_NAME
    test_vars_overrides:
      # Don't add random suffix
      custom_domain: '"full.source.domain.com"'
      redirect_target: '"destination.domain.com"'
  - !ruby/object:Provider::Terraform::Examples
    name: "firebasehosting_customdomain_cloud_run"
    min_version: "beta"
    primary_resource_id: "default"
    vars:
      site_id: site-id
      custom_domain: run.custom.domain.com
      cloud_run_service_id: cloud-run-service-via-hosting
    test_env_vars:
      project_id: :PROJECT_NAME
    test_vars_overrides:
      # Don't add random suffix
      custom_domain: '"run.custom.domain.com"'
parameters:
  - !ruby/object:Api::Type::String
    name: site_id
    description: |
      The ID of the site in which to create this custom domain association.
    immutable: true
    required: true
    url_param_only: true
  - !ruby/object:Api::Type::String
    name: custom_domain
    description: |
      The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting.
    immutable: true
    required: true
    url_param_only: true
virtual_fields:
  - !ruby/object:Api::Type::Boolean
    name: wait_dns_verification
    description: |
      If true, Terraform will wait for DNS records to be fully resolved on the `CustomDomain`.
      If false, Terraform will not wait for DNS records on the `CustomDomain`. Any issues in
      the `CustomDomain` will be returned and stored in the Terraform state.
    immutable: true
    default_value: false
properties:
  - !ruby/object:Api::Type::String
    name: name
    description: |
      The fully-qualified name of the `CustomDomain`.
    output: true
  - !ruby/object:Api::Type::Time
    name: createTime
    output: true
    description: The `CustomDomain`'s create time.
  - !ruby/object:Api::Type::Time
    name: updateTime
    output: true
    description: The last time the `CustomDomain` was updated.
  - !ruby/object:Api::Type::Time
    name: deleteTime
    output: true
    description: |
      The time the `CustomDomain` was deleted; null for `CustomDomains` that
      haven't been deleted. Deleted `CustomDomains` persist for approximately 30
      days, after which time Hosting removes them completely.
  - !ruby/object:Api::Type::Time
    name: expireTime
    output: true
    description: |
      The minimum time before a soft-deleted `CustomDomain` is completely removed
      from Hosting; null for `CustomDomains` that haven't been deleted.
  - !ruby/object:Api::Type::Fingerprint
    name: etag
    output: true
    description: |
      A string that represents the current state of the `CustomDomain` and
      allows you to confirm its initial state in requests that would modify it.
  - !ruby/object:Api::Type::String
    name: hostState
    output: true
    description: |
      The host state of your domain name. Host state is determined by checking each
      IP address associated with your domain name to see if it's serving
      Hosting content.
        HOST_UNHOSTED:
          Your `CustomDomain`'s domain name isn't associated with any IP addresses.

        HOST_UNREACHABLE:
          Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
          queries to find your domain name's IP addresses resulted in errors. See
          your `CustomDomain`'s `issues` field for more details.

        HOST_MISMATCH:
          Your `CustomDomain`'s domain name has IP addresses that don't ultimately
          resolve to Hosting.

        HOST_CONFLICT:
          Your `CustomDomain`'s domain name has IP addresses that resolve to both
          Hosting and other services. To ensure consistent results, remove `A` and
          `AAAA` records related to non-Hosting services.

        HOST_ACTIVE:
          All requests against your `CustomDomain`'s domain name are served by
          Hosting. If the `CustomDomain`'s `OwnershipState` is also `ACTIVE`, Hosting
          serves your Hosting Site's content on the domain name.
  - !ruby/object:Api::Type::Enum
    name: ownershipState
    output: true
    description: |
      The ownership state of your domain name. Ownership is determined at a
      Firebase project level, and established by adding `TXT` records to your
      domain name's DNS records.

      Ownership cascades to subdomains. Granting a project ownership of `foo.com`
      also grants that project ownership over `bar.foo.com`, unless you add
      specific `TXT` records to `bar.foo.com` that grant a different project
      ownership.

      If your `CustomDomain` is in an `OwnershipState` other than
      `OWNERSHIP_ACTIVE` for more than 30 days and it hasn't been updated in at
      least 30 days, Hosting's ownership systems delete the `CustomDomain`.

      OWNERSHIP_MISSING:
        Your `CustomDomain`'s domain name has no Hosting-related ownership records;
        no Firebase project has permission to act on the domain name's behalf.

      OWNERSHIP_UNREACHABLE:
        Your `CustomDomain`'s domain name can't be reached. Hosting services' DNS
        queries to find your domain name's ownership records resulted in errors.
        See your `CustomDomain`'s `issues` field for more details.

      OWNERSHIP_MISMATCH:
        Your `CustomDomain`'s domain name is owned by another Firebase project.
        Remove the conflicting `TXT` records and replace them with project-specific
        records for your current Firebase project.

      OWNERSHIP_CONFLICT:
        Your `CustomDomain`'s domain name has conflicting `TXT` records that
        indicate ownership by both your current Firebase project and another
        project. Remove the other project's ownership records to grant the current
        project ownership.

      OWNERSHIP_PENDING:
        Your `CustomDomain`'s DNS records are configured correctly. Hosting will
        transfer ownership of your domain to this `CustomDomain` within 24 hours.

      OWNERSHIP_ACTIVE:
        Your `CustomDomain`'s domain name has `TXT` records that grant its project
        permission to act on its behalf.
    values:
      - :OWNERSHIP_MISSING
      - :OWNERSHIP_UNREACHABLE
      - :OWNERSHIP_MISMATCH
      - :OWNERSHIP_CONFLICT
      - :OWNERSHIP_PENDING
      - :ACTIVE
  - !ruby/object:Api::Type::Enum
    name: certPreference
    default_from_api: true
    description: |
      A field that lets you specify which SSL certificate type Hosting creates
      for your domain name. Spark plan `CustomDomain`s only have access to the
      `GROUPED` cert type, while Blaze plan can select any option.
    values:
      - :GROUPED
      - :PROJECT_GROUPED
      - :DEDICATED
  - !ruby/object:Api::Type::String
    name: redirectTarget
    description: |
      A domain name that this CustomDomain should direct traffic towards. If
      specified, Hosting will respond to requests against this CustomDomain
      with an HTTP 301 code, and route traffic to the specified `redirect_target`
      instead.
  - !ruby/object:Api::Type::NestedObject
    name: requiredDnsUpdates
    output: true
    description: |
      A set of updates you should make to the domain name's DNS records to
      let Hosting serve secure content on its behalf.
    properties:
      - !ruby/object:Api::Type::Time
        name: checkTime
        output: true
        description: |
          The last time Hosting checked your CustomDomain's DNS records.
      - !ruby/object:Api::Type::Array
        name: discovered
        description: |
          The set of DNS records Hosting discovered when inspecting a domain
        item_type: !ruby/object:Api::Type::NestedObject
          name: DnsRecordSet
          properties:
            - !ruby/object:Api::Type::String
              name: domainName
              description: The domain name the record set pertains to.
            - !ruby/object:Api::Type::Array
              name: records
              description: Records on the domain
              item_type: !ruby/object:Api::Type::NestedObject
                properties:
                  - !ruby/object:Api::Type::String
                    name: domainName
                    description: The domain name the record pertains to, e.g. `foo.bar.com.`.
                  - !ruby/object:Api::Type::String
                    name: type
                    description: |
                      The record's type, which determines what data the record contains.
                  - !ruby/object:Api::Type::String
                    name: rdata
                    description: |
                      The data of the record. The meaning of the value depends on record type:
                         - A and AAAA: IP addresses for the domain name.
                         - CNAME: Another domain to check for records.
                         - TXT: Arbitrary text strings associated with the domain name. Hosting
                           uses TXT records to determine a which Firebase Projects have
                           permission to act on the domain name's behalf.
                         - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.
                  - !ruby/object:Api::Type::String
                    name: requiredAction
                    description: |
                      Indicates the a required action for this record.
      - !ruby/object:Api::Type::Array
        name: desired
        description: |
          The set of DNS records Hosting needs to serve secure content on the domain.
        item_type: !ruby/object:Api::Type::NestedObject
          name: DnsRecordSet
          properties:
            - !ruby/object:Api::Type::String
              name: domainName
              description: The domain name the record set pertains to.
            - !ruby/object:Api::Type::Array
              name: records
              description: Records on the domain
              item_type: !ruby/object:Api::Type::NestedObject
                properties:
                  - !ruby/object:Api::Type::String
                    name: domainName
                    description: The domain name the record pertains to, e.g. `foo.bar.com.`.
                  - !ruby/object:Api::Type::String
                    name: type
                    description: |
                      The record's type, which determines what data the record contains.
                  - !ruby/object:Api::Type::String
                    name: rdata
                    description: |
                      The data of the record. The meaning of the value depends on record type:
                         - A and AAAA: IP addresses for the domain name.
                         - CNAME: Another domain to check for records.
                         - TXT: Arbitrary text strings associated with the domain name. Hosting
                           uses TXT records to determine a which Firebase Projects have
                           permission to act on the domain name's behalf.
                         - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.
                  - !ruby/object:Api::Type::String
                    name: requiredAction
                    description: |
                      Indicates the a required action for this record.
  - !ruby/object:Api::Type::Array
    name: issues
    output: true
    description: |
      A set of errors Hosting systems encountered when trying to establish
      Hosting's ability to serve secure content for your domain name. Resolve
      these issues to ensure your `CustomDomain` behaves properly.
    item_type: !ruby/object:Api::Type::NestedObject
      name: issue
      description: A `google.rpc.Status`
      properties:
        - !ruby/object:Api::Type::Integer
          name: code
          description: The status code, which should be an enum value of `google.rpc.Code`
        - !ruby/object:Api::Type::String
          name: message
          description: Error message
        - !ruby/object:Api::Type::String
          name: 'details'
          description: |
            A list of messages that carry the error details.
          custom_expand: 'templates/terraform/custom_expand/json_schema.erb'
          custom_flatten: 'templates/terraform/custom_flatten/json_schema.erb'
          state_func:
            'func(v interface{}) string { s, _ :=
            structure.NormalizeJsonString(v); return s }'
          validation: !ruby/object:Provider::Terraform::Validation
            function: 'validation.StringIsJSON'
  - !ruby/object:Api::Type::NestedObject
    name: cert
    output: true
    description: |
      The SSL certificate Hosting has for this `CustomDomain`'s domain name.
      For new `CustomDomain`s, this often represents Hosting's intent to create
      a certificate, rather than an actual cert. Check the `state` field for
      more.
    properties:
      - !ruby/object:Api::Type::String
        name: type
        description: The certificate's type.
      - !ruby/object:Api::Type::String
        name: state
        description: |
          The state of the certificate. Only the `CERT_ACTIVE` and
          `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the
          state is `PROPAGATING` and Hosting had an active cert for the domain name
          before, that formerly-active cert provides SSL coverage for the domain name
          until the current cert propagates.
      - !ruby/object:Api::Type::NestedObject
        name: verification
        description: |
          A set of ACME challenges you can add to your DNS records or existing,
          non-Hosting hosting provider to allow Hosting to create an SSL certificate
          for your domain name before you point traffic toward hosting. You can use
          thse challenges as part of a zero downtime transition from your old
          provider to Hosting.
        properties:
          - !ruby/object:Api::Type::NestedObject
            name: dns
            description: |
              A `TXT` record to add to your DNS records that confirms your intent to
              let Hosting create an SSL cert for your domain name.
            properties:
              - !ruby/object:Api::Type::Time
                name: checkTime
                output: true
                description: |
                  The last time Hosting checked your CustomDomain's DNS records.
              - !ruby/object:Api::Type::Array
                name: discovered
                description: |
                  The set of DNS records Hosting discovered when inspecting a domain
                item_type: !ruby/object:Api::Type::NestedObject
                  name: DnsRecordSet
                  properties:
                    - !ruby/object:Api::Type::String
                      name: domainName
                      description: The domain name the record set pertains to.
                    - !ruby/object:Api::Type::Array
                      name: records
                      description: Records on the domain
                      item_type: !ruby/object:Api::Type::NestedObject
                        properties:
                          - !ruby/object:Api::Type::String
                            name: domainName
                            description: The domain name the record pertains to, e.g. `foo.bar.com.`.
                          - !ruby/object:Api::Type::String
                            name: type
                            description: |
                              The record's type, which determines what data the record contains.
                          - !ruby/object:Api::Type::String
                            name: rdata
                            description: |
                              The data of the record. The meaning of the value depends on record type:
                                - A and AAAA: IP addresses for the domain name.
                                - CNAME: Another domain to check for records.
                                - TXT: Arbitrary text strings associated with the domain name. Hosting
                                  uses TXT records to determine a which Firebase Projects have
                                  permission to act on the domain name's behalf.
                                - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.
                          - !ruby/object:Api::Type::String
                            name: requiredAction
                            description: |
                              Indicates the a required action for this record.
              - !ruby/object:Api::Type::Array
                name: desired
                description: |
                  The set of DNS records Hosting needs to serve secure content on the domain.
                item_type: !ruby/object:Api::Type::NestedObject
                  name: DnsRecordSet
                  properties:
                    - !ruby/object:Api::Type::String
                      name: domainName
                      description: The domain name the record set pertains to.
                    - !ruby/object:Api::Type::Array
                      name: records
                      description: Records on the domain
                      item_type: !ruby/object:Api::Type::NestedObject
                        properties:
                          - !ruby/object:Api::Type::String
                            name: domainName
                            description: The domain name the record pertains to, e.g. `foo.bar.com.`.
                          - !ruby/object:Api::Type::String
                            name: type
                            description: |
                              The record's type, which determines what data the record contains.
                          - !ruby/object:Api::Type::String
                            name: rdata
                            description: |
                              The data of the record. The meaning of the value depends on record type:
                                - A and AAAA: IP addresses for the domain name.
                                - CNAME: Another domain to check for records.
                                - TXT: Arbitrary text strings associated with the domain name. Hosting
                                  uses TXT records to determine a which Firebase Projects have
                                  permission to act on the domain name's behalf.
                                - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.
                          - !ruby/object:Api::Type::String
                            name: requiredAction
                            description: |
                              Indicates the a required action for this record.
          - !ruby/object:Api::Type::NestedObject
            name: http
            description: |
              A file to add to your existing, non-Hosting hosting service that confirms
              your intent to let Hosting create an SSL cert for your domain name.
            properties:
              - !ruby/object:Api::Type::String
                name: path
                description: The path to the file.
              - !ruby/object:Api::Type::String
                name: desired
                description: A text string to serve at the path.
              - !ruby/object:Api::Type::String
                name: discovered
                description: |
                  Whether Hosting was able to find the required file contents on the
                  specified path during its last check.
              - !ruby/object:Api::Type::Time
                name: lastCheckTime
                output: true
                description: |
                  The last time Hosting systems checked for the file contents.
  - !ruby/object:Api::Type::Boolean
    name: reconciling
    output: true
    description: |
      if true, indicates that Hosting's systems are attmepting to
      make the `CustomDomain`'s state match your preferred state. This is most
      frequently `true` when initially provisioning a `CustomDomain` or when creating
      a new SSL certificate to match an updated `cert_preference`
