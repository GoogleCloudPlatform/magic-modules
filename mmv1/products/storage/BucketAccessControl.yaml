# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'BucketAccessControl'
kind: 'storage#bucketAccessControl'
base_url: b/{{bucket}}/acl
self_link: b/{{bucket}}/acl/{{entity}}
collection_url_key: items
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Official Documentation': 'https://cloud.google.com/storage/docs/access-control/lists'
  api: 'https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls'
description: |
  Bucket ACLs can be managed authoritatively using the
  [`storage_bucket_acl`](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/storage_bucket_acl)
  resource. Do not use these two resources in conjunction to manage the same bucket.

  The BucketAccessControls resource manages the Access Control List
  (ACLs) for a single entity/role pairing on a bucket. ACLs let you specify who
  has access to your data and to what extent.

  There are three roles that can be assigned to an entity:

  READERs can get the bucket, though no acl property will be returned, and
  list the bucket's objects.  WRITERs are READERs, and they can insert
  objects into the bucket and delete the bucket's objects.  OWNERs are
  WRITERs, and they can get the acl property of a bucket, update a bucket,
  and call all BucketAccessControls methods on the bucket.  For more
  information, see Access Control, with the caveat that this API uses
  READER, WRITER, and OWNER instead of READ, WRITE, and FULL_CONTROL.
identity:
  - entity
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'storage_bucket_access_control_public_bucket'
    primary_resource_id: 'public_rule'
    vars:
      bucket_name: 'static-content-bucket'
id_format: '{{bucket}}/{{entity}}'
import_format: ['{{bucket}}/{{entity}}']
mutex: 'storage/buckets/{{bucket}}'
skip_sweeper: true
properties:
  - !ruby/object:Api::Type::ResourceRef
    name: 'bucket'
    resource: 'Bucket'
    imports: 'name'
    description: 'The name of the bucket.'
    required: true
    immutable: true
  - !ruby/object:Api::Type::String
    name: 'domain'
    description: 'The domain associated with the entity.'
    output: true
  - !ruby/object:Api::Type::String
    name: 'email'
    description: 'The email address associated with the entity.'
    output: true
  - !ruby/object:Api::Type::String
    name: 'entity'
    description: |
      The entity holding the permission, in one of the following forms:
        user-userId
        user-email
        group-groupId
        group-email
        domain-domain
        project-team-projectId
        allUsers
        allAuthenticatedUsers
      Examples:
        The user liz@example.com would be user-liz@example.com.
        The group example@googlegroups.com would be
        group-example@googlegroups.com.
        To refer to all members of the Google Apps for Business domain
        example.com, the entity would be domain-example.com.
    required: true
    immutable: true
  - !ruby/object:Api::Type::Enum
    name: 'role'
    description: 'The access permission for the entity.'
    values:
      - :OWNER
      - :READER
      - :WRITER
