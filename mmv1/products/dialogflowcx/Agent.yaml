# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'Agent'
base_url: 'projects/{{project}}/locations/{{location}}/agents'
update_verb: :PATCH
update_mask: true
description: |
  Agents are best described as Natural Language Understanding (NLU) modules that transform user requests into actionable data. You can include agents in your app, product, or service to determine user intent and respond to the user in a natural way.
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Official Documentation': 'https://cloud.google.com/dialogflow/cx/docs'
  api: 'https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents'
timeouts: !ruby/object:Api::Timeouts
  insert_minutes: 40
  update_minutes: 40
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'dialogflowcx_agent_full'
    primary_resource_id: 'full_agent'
    vars:
      agent_name: 'dialogflowcx-agent'
      bucket_name: 'dialogflowcx-bucket'
    ignore_read_extra:
      - git_integration_settings.0.github_settings.0.access_token
id_format: 'projects/{{project}}/locations/{{location}}/agents/{{name}}'
import_format: ['projects/{{project}}/locations/{{location}}/agents/{{name}}']
skip_sweeper: true
properties:
  - !ruby/object:Api::Type::String
    name: 'name'
    output: true
    description: |
      The unique identifier of the agent.
    custom_flatten: templates/terraform/custom_flatten/name_from_self_link.erb
  - !ruby/object:Api::Type::String
    name: 'location'
    description: |
      The name of the location this agent is located in.

      ~> **Note:** The first time you are deploying an Agent in your project you must configure location settings.
       This is a one time step but at the moment you can only [configure location settings](https://cloud.google.com/dialogflow/cx/docs/concept/region#location-settings) via the Dialogflow CX console.
       Another options is to use global location so you don't need to manually configure location settings.
    required: true
    immutable: true
    url_param_only: true
  - !ruby/object:Api::Type::String
    name: 'displayName'
    required: true
    description: |
      The human-readable name of the agent, unique within the location.
  - !ruby/object:Api::Type::String
    name: 'defaultLanguageCode'
    description: |
      The default language of the agent as a language tag. [See Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
      for a list of the currently supported language codes. This field cannot be updated after creation.
    immutable: true
    required: true
  - !ruby/object:Api::Type::Array
    name: 'supportedLanguageCodes'
    item_type: Api::Type::String
    description: |
      The list of all languages supported by this agent (except for the default_language_code).
  - !ruby/object:Api::Type::String
    name: 'timeZone'
    description: |
      The time zone of this agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York,
      Europe/Paris.
    required: true
  - !ruby/object:Api::Type::String
    name: 'description'
    description: |
      The description of this agent. The maximum length is 500 characters. If exceeded, the request is rejected.
    validation: !ruby/object:Provider::Terraform::Validation
      function: 'validation.StringLenBetween(0, 500)'
  - !ruby/object:Api::Type::String
    name: 'avatarUri'
    description: |
      The URI of the agent's avatar. Avatars are used throughout the Dialogflow console and in the self-hosted Web Demo integration.
  - !ruby/object:Api::Type::NestedObject
    name: 'speechToTextSettings'
    description: |
      Settings related to speech recognition.
    properties:
      - !ruby/object:Api::Type::Boolean
        name: 'enableSpeechAdaptation'
        description: |
          Whether to use speech adaptation for speech recognition.
  - !ruby/object:Api::Type::String
    name: 'startFlow'
    output: true
    description: |
      Name of the start flow in this agent. A start flow will be automatically created when the agent is created, and can only be deleted by deleting the agent. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
  - !ruby/object:Api::Type::String
    name: 'securitySettings'
    description: |
      Name of the SecuritySettings reference for the agent. Format: projects/<Project ID>/locations/<Location ID>/securitySettings/<Security Settings ID>.
  - !ruby/object:Api::Type::Boolean
    name: 'enableStackdriverLogging'
    description: |
      Determines whether this agent should log conversation queries.
  - !ruby/object:Api::Type::Boolean
    name: 'enableSpellCorrection'
    description: |
      Indicates if automatic spell correction is enabled in detect intent requests.
  - !ruby/object:Api::Type::NestedObject
    name: 'advancedSettings'
    description: |
      Hierarchical advanced settings for this agent. The settings exposed at the lower level overrides the settings exposed at the higher level.
      Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
    default_from_api: true
    properties:
      - !ruby/object:Api::Type::NestedObject
        name: 'audioExportGcsDestination'
        description: |
          If present, incoming audio is exported by Dialogflow to the configured Google Cloud Storage destination. Exposed at the following levels:
          * Agent level
          * Flow level
        properties:
          - !ruby/object:Api::Type::String
            name: 'uri'
            description: |
              The Google Cloud Storage URI for the exported objects. Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.
              Format: gs://bucket/object-name-or-prefix
      - !ruby/object:Api::Type::NestedObject
        name: 'dtmfSettings'
        description: |
          Define behaviors for DTMF (dual tone multi frequency). DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Exposed at the following levels:
          * Agent level
          * Flow level
          * Page level
          * Parameter level
        properties:
          - !ruby/object:Api::Type::Boolean
            name: 'enabled'
            description: |
              If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a "3" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).
          - !ruby/object:Api::Type::Integer
            name: 'maxDigits'
            description: |
              Max length of DTMF digits.
          - !ruby/object:Api::Type::String
            name: 'finishDigit'
            description: |
              The digit that terminates a DTMF digit sequence.
  - !ruby/object:Api::Type::NestedObject
    name: 'gitIntegrationSettings'
    description: |
      Git integration settings for this agent.
    allow_empty_object: true
    properties:
      - !ruby/object:Api::Type::NestedObject
        name: 'githubSettings'
        description: |
          Settings of integration with GitHub.
        properties:
          - !ruby/object:Api::Type::String
            name: 'displayName'
            description: |
              The unique repository display name for the GitHub repository.
          - !ruby/object:Api::Type::String
            name: 'repositoryUri'
            description: |
              The GitHub repository URI related to the agent.
          - !ruby/object:Api::Type::String
            name: 'trackingBranch'
            description: |
              The branch of the GitHub repository tracked for this agent.
          - !ruby/object:Api::Type::String
            name: 'accessToken'
            description: |
              The access token used to authenticate the access to the GitHub repository.
            sensitive: true
            ignore_read: true
            custom_flatten: 'templates/terraform/custom_flatten/dialogflowcx_agent_git_integration_settings_github_settings_access_token.go.erb'
          - !ruby/object:Api::Type::Array
            name: 'branches'
            description: |
              A list of branches configured to be used from Dialogflow.
            item_type: Api::Type::String
  - !ruby/object:Api::Type::NestedObject
    name: 'textToSpeechSettings'
    description: |
      Settings related to speech synthesizing.
    allow_empty_object: true
    properties:
      # This is a map of language -> some settings. List of languages is large and constantly expanding so we use a string instead of a NestedObject with 100 properties.
      - !ruby/object:Api::Type::String
        name: 'synthesizeSpeechConfigs'
        description: |
          Configuration of how speech should be synthesized, mapping from [language](https://cloud.google.com/dialogflow/cx/docs/reference/language) to [SynthesizeSpeechConfig](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents#synthesizespeechconfig).
          These settings affect:
          * The phone gateway synthesize configuration set via Agent.text_to_speech_settings.
          * How speech is synthesized when invoking session APIs. `Agent.text_to_speech_settings` only applies if `OutputAudioConfig.synthesize_speech_config` is not specified.
        custom_expand: 'templates/terraform/custom_expand/json_schema.erb'
        custom_flatten: 'templates/terraform/custom_flatten/json_schema.erb'
        state_func:
          'func(v interface{}) string { s, _ := structure.NormalizeJsonString(v);
          return s }'
        validation: !ruby/object:Provider::Terraform::Validation
          function: 'validation.StringIsJSON'
