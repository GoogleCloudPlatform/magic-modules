# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'AccessLevelCondition'
# This is an unusual API, so we need to use a few fields to map the methods
# to the right URL.
# create_url is the Create URL
# base_url is the Get and Delete and Patch URL. It is empty on purpose.
# List won't work yet. It should share a URL with Create.
create_url: '{{access_level}}'
base_url: ''
self_link: '{{access_level}}'
create_verb: :PATCH
delete_verb: :PATCH
immutable: true
update_mask: true
identity:
  - ipSubnetworks
  - requiredAccessLevels
  - members
  - negate
  - devicePolicy
  - regions
nested_query: !ruby/object:Api::Resource::NestedQuery
  modify_by_patch: true
  keys:
    - basic
    - conditions
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
  api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels'
description: |
  Allows configuring a single access level condition to be appended to an access level's conditions.
  This resource is intended to be used in cases where it is not possible to compile a full list
  of conditions to include in a `google_access_context_manager_access_level` resource,
  to enable them to be added separately.

  ~> **Note:** If this resource is used alongside a `google_access_context_manager_access_level` resource,
  the access level resource must have a `lifecycle` block with `ignore_changes = [basic[0].conditions]` so
  they don't fight over which service accounts should be included.
docs: !ruby/object:Provider::Terraform::Docs
  warning: |
    If you are using User ADCs (Application Default Credentials) with this resource,
    you must specify a `billing_project` and set `user_project_override` to true
    in the provider configuration. Otherwise the ACM API will return a 403 error.
    Your account must have the `serviceusage.services.use` permission on the
    `billing_project` you defined.
async: !ruby/object:Provider::Terraform::PollAsync
  check_response_func_existence: transport_tpg.PollCheckForExistence
  actions: ['create']
autogen_async: true
exclude_tgc: true
exclude_import: true  # no unique way to specify
# Skipping the sweeper due to the non-standard base_url and because this is fine-grained under AccessLevel
skip_sweeper: true
id_format: '{{access_level}}'
import_format: ['{{access_level}}']
mutex: '{{access_level}}'
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'access_context_manager_access_level_condition_basic'
    skip_test: true
    primary_resource_id: 'access-level-condition'
    vars:
      access_level_name: 'chromeos_no_lock'
      account_id: 'my-account-id'
parameters:
  - !ruby/object:Api::Type::ResourceRef
    name: 'accessLevel'
    resource: 'AccessLevel'
    imports: 'name'
    description: |
      The name of the Access Level to add this condition to.
    required: true
    immutable: true
    url_param_only: true
properties:
  - !ruby/object:Api::Type::Array
    name: 'ipSubnetworks'
    description: |
      A list of CIDR block IP subnetwork specification. May be IPv4
      or IPv6.
      Note that for a CIDR IP address block, the specified IP address
      portion must be properly truncated (i.e. all the host bits must
      be zero) or the input is considered malformed. For example,
      "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
      for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
      is not. The originating IP of a request must be in one of the
      listed subnets in order for this Condition to be true.
      If empty, all IP addresses are allowed.
    item_type: Api::Type::String
  - !ruby/object:Api::Type::Array
    name: 'requiredAccessLevels'
    description: |
      A list of other access levels defined in the same Policy,
      referenced by resource name. Referencing an AccessLevel which
      does not exist is an error. All access levels listed must be
      granted for the Condition to be true.
      Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    item_type: Api::Type::String
  - !ruby/object:Api::Type::Array
    name: 'members'
    description: |
      An allowed list of members (users, service accounts).
      Using groups is not supported yet.

      The signed-in user originating the request must be a part of one
      of the provided members. If not specified, a request may come
      from any user (logged in/not logged in, not present in any
      groups, etc.).
      Formats: `user:{emailid}`, `serviceAccount:{emailid}`
    item_type: Api::Type::String
  - !ruby/object:Api::Type::Boolean
    name: 'negate'
    description: |
      Whether to negate the Condition. If true, the Condition becomes
      a NAND over its non-empty fields, each field must be false for
      the Condition overall to be satisfied. Defaults to false.
  - !ruby/object:Api::Type::NestedObject
    name: 'devicePolicy'
    description: |
      Device specific restrictions, all restrictions must hold for
      the Condition to be true. If not specified, all devices are
      allowed.
    properties:
      - !ruby/object:Api::Type::Boolean
        name: 'requireScreenLock'
        api_name: 'requireScreenlock'
        description: |
          Whether or not screenlock is required for the DevicePolicy
          to be true. Defaults to false.
      - !ruby/object:Api::Type::Array
        name: 'allowedEncryptionStatuses'
        description: |
          A list of allowed encryptions statuses.
          An empty list allows all statuses.
        item_type: !ruby/object:Api::Type::Enum
          name: 'undefined'
          description: |
            This field only has a name and description because of MM
            limitations. It should not appear in downstreams.
          values:
            - :ENCRYPTION_UNSPECIFIED
            - :ENCRYPTION_UNSUPPORTED
            - :UNENCRYPTED
            - :ENCRYPTED
      - !ruby/object:Api::Type::Array
        name: 'allowedDeviceManagementLevels'
        description: |
          A list of allowed device management levels.
          An empty list allows all management levels.
        item_type: !ruby/object:Api::Type::Enum
          name: 'undefined'
          description: |
            This field only has a name and description because of MM
            limitations. It should not appear in downstreams.
          values:
            - :MANAGEMENT_UNSPECIFIED
            - :NONE
            - :BASIC
            - :COMPLETE
      - !ruby/object:Api::Type::Array
        name: 'osConstraints'
        description: |
          A list of allowed OS versions.
          An empty list allows all types and all versions.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: 'minimumVersion'
              description: |
                The minimum allowed OS version. If not set, any version
                of this OS satisfies the constraint.
                Format: "major.minor.patch" such as "10.5.301", "9.2.1".
            - !ruby/object:Api::Type::Enum
              name: 'osType'
              required: true
              description: |
                The operating system type of the device.
              values:
                - :OS_UNSPECIFIED
                - :DESKTOP_MAC
                - :DESKTOP_WINDOWS
                - :DESKTOP_LINUX
                - :DESKTOP_CHROME_OS
                - :ANDROID
                - :IOS
      - !ruby/object:Api::Type::Boolean
        name: 'requireAdminApproval'
        description: |
          Whether the device needs to be approved by the customer admin.
      - !ruby/object:Api::Type::Boolean
        name: 'requireCorpOwned'
        description: |
          Whether the device needs to be corp owned.
  - !ruby/object:Api::Type::Array
    name: 'regions'
    description: |
      The request must originate from one of the provided
      countries/regions.
      Format: A valid ISO 3166-1 alpha-2 code.
    item_type: Api::Type::String
  - !ruby/object:Api::Type::Array
    name: 'vpcNetworkSources'
    description: 'The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with `ip_subnetworks`.'
    item_type: !ruby/object:Api::Type::NestedObject
      properties:
        - !ruby/object:Api::Type::NestedObject
          name: 'vpcSubnetwork'
          description: 'Sub networks within a VPC network.'
          properties:
            - !ruby/object:Api::Type::String
              name: 'network'
              required: true
              description: 'Required. Network name to be allowed by this Access Level. Networks of foreign organizations requires `compute.network.get` permission to be granted to caller.'
            - !ruby/object:Api::Type::Array
              name: 'vpcIpSubnetworks'
              description: 'CIDR block IP subnetwork specification. Must be IPv4.'
              item_type: Api::Type::String
