# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: AccessContextManager
display_name: Access Context Manager (VPC Service Controls)
versions:
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://accesscontextmanager.googleapis.com/v1/
scopes:
  - https://www.googleapis.com/auth/cloud-platform
async: !ruby/object:Api::OpAsync
  operation: !ruby/object:Api::OpAsync::Operation
    path: 'name'
    base_url: '{{op_id}}'
    wait_ms: 1000
  result: !ruby/object:Api::OpAsync::Result
    path: 'response'
    resource_inside_response: true
  status: !ruby/object:Api::OpAsync::Status
    path: 'done'
    complete: true
    allowed:
      - true
      - false
  error: !ruby/object:Api::OpAsync::Error
    path: 'error'
    message: 'message'
objects:
  - !ruby/object:Api::Resource
    name: 'AccessPolicy'
    base_url: accessPolicies
    self_link: "accessPolicies/{{name}}"
    update_verb: :PATCH
    update_mask: true
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies'
    description: |
      AccessPolicy is a container for AccessLevels (which define the necessary
      attributes to use GCP services) and ServicePerimeters (which define
      regions of services able to freely pass data within a perimeter). An
      access policy is globally visible within an organization, and the
      restrictions it specifies apply to all projects within an organization.
    parameters:
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        description: |
          The parent of this AccessPolicy in the Cloud Resource Hierarchy.
          Format: organizations/{organization_id}
      - !ruby/object:Api::Type::String
        name: title
        required: true
        description: |
          Human readable title. Does not affect behavior.
    properties:
      - !ruby/object:Api::Type::String
        name: name
        description: |
          Resource name of the AccessPolicy. Format: accessPolicies/{policy_id}
        output: true
      - !ruby/object:Api::Type::Time
        name: 'createTime'
        description: |
          Time the AccessPolicy was created in UTC.
        output: true
      - !ruby/object:Api::Type::Time
        name: 'updateTime'
        description: |
          Time the AccessPolicy was updated in UTC.
        output: true
  - !ruby/object:Api::Resource
    # This is the singular of `AccessLevels`, any changes here should be made to `AccessLevels` as well
    name: 'AccessLevel'
    # This is an unusual API, so we need to use a few fields to map the methods
    # to the right URL.
    # create_url is the Create URL
    # base_url is the Get and Delete and Patch URL. It is empty on purpose.
    # List won't work yet. It should share a URL with Create.
    create_url: "{{parent}}/accessLevels"
    base_url: ""
    self_link: "{{name}}"
    update_verb: :PATCH
    update_mask: true
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels'
    description: |
      An AccessLevel is a label that can be applied to requests to GCP services,
      along with a list of requirements necessary for the label to be applied.
    parameters:
      # Parent is a path parameter that _cannot_ be read or sent in the request at all.
      # This must be done at the provider level.
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        description: |
          The AccessPolicy this AccessLevel lives in.
          Format: accessPolicies/{policy_id}
      - !ruby/object:Api::Type::String
        name: name
        input: true
        required: true
        description: |
          Resource name for the Access Level. The short_name component must begin
          with a letter and only include alphanumeric and '_'.
          Format: accessPolicies/{policy_id}/accessLevels/{short_name}
    properties:
      - !ruby/object:Api::Type::String
        name: title
        required: true
        description: |
          Human readable title. Must be unique within the Policy.
      - !ruby/object:Api::Type::String
        name: 'description'
        description: |
          Description of the AccessLevel and its use. Does not affect behavior.
      # createTime and updateTime are listed in the docs but are not ever present
      # in actual API responses.
      - !ruby/object:Api::Type::Time
        exclude: true
        name: 'createTime'
        description: |
          Time the AccessPolicy was created in UTC.
        output: true
      - !ruby/object:Api::Type::Time
        exclude: true
        name: 'updateTime'
        description: |
          Time the AccessPolicy was updated in UTC.
        output: true
      - !ruby/object:Api::Type::NestedObject
        name: 'basic'
        description: |
          A set of predefined conditions for the access level and a combining function.
        conflicts:
          - custom
        properties:
          - !ruby/object:Api::Type::Enum
            name: 'combiningFunction'
            description: |
              How the conditions list should be combined to determine if a request
              is granted this AccessLevel. If AND is used, each Condition in
              conditions must be satisfied for the AccessLevel to be applied. If
              OR is used, at least one Condition in conditions must be satisfied
              for the AccessLevel to be applied.
            default_value: :AND
            values:
              - :AND
              - :OR
          # All of the false defaults below here are omitted on purpose.
          # Let's keep this as simple as possible, since they will all be set by the API.
          - !ruby/object:Api::Type::Array
            name: 'conditions'
            required: true
            min_size: 1
            description: |
              A set of requirements for the AccessLevel to be granted.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
              - !ruby/object:Api::Type::Array
                name: 'ipSubnetworks'
                description: |
                  A list of CIDR block IP subnetwork specification. May be IPv4
                  or IPv6.
                  Note that for a CIDR IP address block, the specified IP address
                  portion must be properly truncated (i.e. all the host bits must
                  be zero) or the input is considered malformed. For example,
                  "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
                  for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
                  is not. The originating IP of a request must be in one of the
                  listed subnets in order for this Condition to be true.
                  If empty, all IP addresses are allowed.
                item_type: Api::Type::String
              - !ruby/object:Api::Type::Array
                name: 'requiredAccessLevels'
                description: |
                  A list of other access levels defined in the same Policy,
                  referenced by resource name. Referencing an AccessLevel which
                  does not exist is an error. All access levels listed must be
                  granted for the Condition to be true.
                  Format: accessPolicies/{policy_id}/accessLevels/{short_name}
                item_type: Api::Type::String
              - !ruby/object:Api::Type::Array
                name: 'members'
                description: |
                  An allowed list of members (users, service accounts).
                  Using groups is not supported yet.

                  The signed-in user originating the request must be a part of one
                  of the provided members. If not specified, a request may come
                  from any user (logged in/not logged in, not present in any
                  groups, etc.).
                  Formats: `user:{emailid}`, `serviceAccount:{emailid}`
                item_type: Api::Type::String
              - !ruby/object:Api::Type::Boolean
                name: 'negate'
                description: |
                  Whether to negate the Condition. If true, the Condition becomes
                  a NAND over its non-empty fields, each field must be false for
                  the Condition overall to be satisfied. Defaults to false.
              - !ruby/object:Api::Type::NestedObject
                name: 'devicePolicy'
                description: |
                  Device specific restrictions, all restrictions must hold for
                  the Condition to be true. If not specified, all devices are
                  allowed.
                properties:
                  - !ruby/object:Api::Type::Boolean
                    name: 'requireScreenLock'
                    api_name: 'requireScreenlock'
                    description: |
                      Whether or not screenlock is required for the DevicePolicy
                      to be true. Defaults to false.
                  - !ruby/object:Api::Type::Array
                    name: 'allowedEncryptionStatuses'
                    description: |
                      A list of allowed encryptions statuses.
                      An empty list allows all statuses.
                    item_type: !ruby/object:Api::Type::Enum
                      name: 'undefined'
                      description: |
                        This field only has a name and description because of MM
                        limitations. It should not appear in downstreams.
                      values:
                        - :ENCRYPTION_UNSPECIFIED
                        - :ENCRYPTION_UNSUPPORTED
                        - :UNENCRYPTED
                        - :ENCRYPTED
                  - !ruby/object:Api::Type::Array
                    name: 'allowedDeviceManagementLevels'
                    description: |
                      A list of allowed device management levels.
                      An empty list allows all management levels.
                    item_type: !ruby/object:Api::Type::Enum
                      name: 'undefined'
                      description: |
                        This field only has a name and description because of MM
                        limitations. It should not appear in downstreams.
                      values:
                        - :MANAGEMENT_UNSPECIFIED
                        - :NONE
                        - :BASIC
                        - :COMPLETE
                  - !ruby/object:Api::Type::Array
                    name: 'osConstraints'
                    description: |
                      A list of allowed OS versions.
                      An empty list allows all types and all versions.
                    item_type: !ruby/object:Api::Type::NestedObject
                      properties:
                      - !ruby/object:Api::Type::String
                        name: 'minimumVersion'
                        description: |
                          The minimum allowed OS version. If not set, any version
                          of this OS satisfies the constraint.
                          Format: "major.minor.patch" such as "10.5.301", "9.2.1".
                      - !ruby/object:Api::Type::Boolean
                        name: 'requireVerifiedChromeOs'
                        description: If you specify DESKTOP_CHROME_OS for osType, you can optionally include requireVerifiedChromeOs to require Chrome Verified Access.
                      - !ruby/object:Api::Type::Enum
                        name: 'osType'
                        required: true
                        description: |
                          The operating system type of the device.
                        values:
                          - :OS_UNSPECIFIED
                          - :DESKTOP_MAC
                          - :DESKTOP_WINDOWS
                          - :DESKTOP_LINUX
                          - :DESKTOP_CHROME_OS
                          - :ANDROID
                          - :IOS
                  - !ruby/object:Api::Type::Boolean
                    name: 'requireAdminApproval'
                    description: |
                      Whether the device needs to be approved by the customer admin.
                  - !ruby/object:Api::Type::Boolean
                    name: 'requireCorpOwned'
                    description: |
                      Whether the device needs to be corp owned.
              - !ruby/object:Api::Type::Array
                name: 'regions'
                description: |
                  The request must originate from one of the provided
                  countries/regions.
                  Format: A valid ISO 3166-1 alpha-2 code.
                item_type: Api::Type::String
      - !ruby/object:Api::Type::NestedObject
        name: 'custom'
        description: |
          Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request. 
          See CEL spec at: https://github.com/google/cel-spec.
        conflicts:
          - basic  
        properties:
          - !ruby/object:Api::Type::NestedObject
            name: 'expr'
            required: true
            description: |
              Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
              This page details the objects and attributes that are used to the build the CEL expressions for 
              custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
            properties:
            - !ruby/object:Api::Type::String
              name: 'expression'
              required: true
              description: Textual representation of an expression in Common Expression Language syntax.
            - !ruby/object:Api::Type::String
              name: 'title'
              description: Title for the expression, i.e. a short string describing its purpose.
            - !ruby/object:Api::Type::String
              name: 'description'
              description: Description of the expression 
            - !ruby/object:Api::Type::String
              name: 'location'
              description: String indicating the location of the expression for error reporting, e.g. a file name and a position in the file      
  - !ruby/object:Api::Resource
    # This is the plural of `AccessLevel`, any changes here should be made to `AccessLevel` as well
    name: 'AccessLevels'
    base_url: "{{parent}}/accessLevels:replaceAll"
    update_url: "{{parent}}/accessLevels:replaceAll"
    self_link: "{{parent}}/accessLevels"
    update_verb: :POST
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels'
    description: |
      Replace all existing Access Levels in an Access Policy with the Access Levels provided. This is done atomically.
      This is a bulk edit of all Access Levels and may override existing Access Levels created by `google_access_context_manager_access_level`,
      thus causing a permadiff if used alongside `google_access_context_manager_access_level` on the same parent.
    parameters:
      # Parent is a path parameter that _cannot_ be read or sent in the request at all.
      # This must be done at the provider level.
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        url_param_only: true
        description: |
          The AccessPolicy this AccessLevel lives in.
          Format: accessPolicies/{policy_id}
    properties:
      - !ruby/object:Api::Type::Array
        name: 'accessLevels'
        description: |
          The desired Access Levels that should replace all existing Access Levels in the Access Policy.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: name
              input: true
              required: true
              description: |
                Resource name for the Access Level. The short_name component must begin
                with a letter and only include alphanumeric and '_'.
                Format: accessPolicies/{policy_id}/accessLevels/{short_name}
            - !ruby/object:Api::Type::String
              name: title
              required: true
              description: |
                Human readable title. Must be unique within the Policy.
            - !ruby/object:Api::Type::String
              name: 'description'
              description: |
                Description of the AccessLevel and its use. Does not affect behavior.
            # createTime and updateTime are listed in the docs but are not ever present
            # in actual API responses.
            - !ruby/object:Api::Type::Time
              exclude: true
              name: 'createTime'
              description: |
                Time the AccessPolicy was created in UTC.
              output: true
            - !ruby/object:Api::Type::Time
              exclude: true
              name: 'updateTime'
              description: |
                Time the AccessPolicy was updated in UTC.
              output: true
            - !ruby/object:Api::Type::NestedObject
              name: 'basic'
              description: |
                A set of predefined conditions for the access level and a combining function.
              # conflicts:
              #   - custom
              properties:
                - !ruby/object:Api::Type::Enum
                  name: 'combiningFunction'
                  description: |
                    How the conditions list should be combined to determine if a request
                    is granted this AccessLevel. If AND is used, each Condition in
                    conditions must be satisfied for the AccessLevel to be applied. If
                    OR is used, at least one Condition in conditions must be satisfied
                    for the AccessLevel to be applied.
                  default_value: :AND
                  values:
                    - :AND
                    - :OR
                # All of the false defaults below here are omitted on purpose.
                # Let's keep this as simple as possible, since they will all be set by the API.
                - !ruby/object:Api::Type::Array
                  name: 'conditions'
                  required: true
                  min_size: 1
                  description: |
                    A set of requirements for the AccessLevel to be granted.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::Array
                      name: 'ipSubnetworks'
                      description: |
                        A list of CIDR block IP subnetwork specification. May be IPv4
                        or IPv6.
                        Note that for a CIDR IP address block, the specified IP address
                        portion must be properly truncated (i.e. all the host bits must
                        be zero) or the input is considered malformed. For example,
                        "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
                        for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
                        is not. The originating IP of a request must be in one of the
                        listed subnets in order for this Condition to be true.
                        If empty, all IP addresses are allowed.
                      item_type: Api::Type::String
                    - !ruby/object:Api::Type::Array
                      name: 'requiredAccessLevels'
                      description: |
                        A list of other access levels defined in the same Policy,
                        referenced by resource name. Referencing an AccessLevel which
                        does not exist is an error. All access levels listed must be
                        granted for the Condition to be true.
                        Format: accessPolicies/{policy_id}/accessLevels/{short_name}
                      item_type: Api::Type::String
                    - !ruby/object:Api::Type::Array
                      name: 'members'
                      description: |
                        An allowed list of members (users, service accounts).
                        Using groups is not supported yet.

                        The signed-in user originating the request must be a part of one
                        of the provided members. If not specified, a request may come
                        from any user (logged in/not logged in, not present in any
                        groups, etc.).
                        Formats: `user:{emailid}`, `serviceAccount:{emailid}`
                      item_type: Api::Type::String
                    - !ruby/object:Api::Type::Boolean
                      name: 'negate'
                      description: |
                        Whether to negate the Condition. If true, the Condition becomes
                        a NAND over its non-empty fields, each field must be false for
                        the Condition overall to be satisfied. Defaults to false.
                    - !ruby/object:Api::Type::NestedObject
                      name: 'devicePolicy'
                      description: |
                        Device specific restrictions, all restrictions must hold for
                        the Condition to be true. If not specified, all devices are
                        allowed.
                      properties:
                        - !ruby/object:Api::Type::Boolean
                          name: 'requireScreenLock'
                          api_name: 'requireScreenlock'
                          description: |
                            Whether or not screenlock is required for the DevicePolicy
                            to be true. Defaults to false.
                        - !ruby/object:Api::Type::Array
                          name: 'allowedEncryptionStatuses'
                          description: |
                            A list of allowed encryptions statuses.
                            An empty list allows all statuses.
                          item_type: !ruby/object:Api::Type::Enum
                            name: 'undefined'
                            description: |
                              This field only has a name and description because of MM
                              limitations. It should not appear in downstreams.
                            values:
                              - :ENCRYPTION_UNSPECIFIED
                              - :ENCRYPTION_UNSUPPORTED
                              - :UNENCRYPTED
                              - :ENCRYPTED
                        - !ruby/object:Api::Type::Array
                          name: 'allowedDeviceManagementLevels'
                          description: |
                            A list of allowed device management levels.
                            An empty list allows all management levels.
                          item_type: !ruby/object:Api::Type::Enum
                            name: 'undefined'
                            description: |
                              This field only has a name and description because of MM
                              limitations. It should not appear in downstreams.
                            values:
                              - :MANAGEMENT_UNSPECIFIED
                              - :NONE
                              - :BASIC
                              - :COMPLETE
                        - !ruby/object:Api::Type::Array
                          name: 'osConstraints'
                          description: |
                            A list of allowed OS versions.
                            An empty list allows all types and all versions.
                          item_type: !ruby/object:Api::Type::NestedObject
                            properties:
                            - !ruby/object:Api::Type::String
                              name: 'minimumVersion'
                              description: |
                                The minimum allowed OS version. If not set, any version
                                of this OS satisfies the constraint.
                                Format: "major.minor.patch" such as "10.5.301", "9.2.1".
                            - !ruby/object:Api::Type::Enum
                              name: 'osType'
                              required: true
                              description: |
                                The operating system type of the device.
                              values:
                                - :OS_UNSPECIFIED
                                - :DESKTOP_MAC
                                - :DESKTOP_WINDOWS
                                - :DESKTOP_LINUX
                                - :DESKTOP_CHROME_OS
                                - :ANDROID
                                - :IOS
                        - !ruby/object:Api::Type::Boolean
                          name: 'requireAdminApproval'
                          description: |
                            Whether the device needs to be approved by the customer admin.
                        - !ruby/object:Api::Type::Boolean
                          name: 'requireCorpOwned'
                          description: |
                            Whether the device needs to be corp owned.
                    - !ruby/object:Api::Type::Array
                      name: 'regions'
                      description: |
                        The request must originate from one of the provided
                        countries/regions.
                        Format: A valid ISO 3166-1 alpha-2 code.
                      item_type: Api::Type::String
            - !ruby/object:Api::Type::NestedObject
              name: 'custom'
              description: |
                Custom access level conditions are set using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request. 
                See CEL spec at: https://github.com/google/cel-spec.
              # conflicts:
              #   - basic  
              properties:
                - !ruby/object:Api::Type::NestedObject
                  name: 'expr'
                  required: true
                  description: |
                    Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language.
                    This page details the objects and attributes that are used to the build the CEL expressions for 
                    custom access levels - https://cloud.google.com/access-context-manager/docs/custom-access-level-spec.
                  properties:
                  - !ruby/object:Api::Type::String
                    name: 'expression'
                    required: true
                    description: Textual representation of an expression in Common Expression Language syntax.
                  - !ruby/object:Api::Type::String
                    name: 'title'
                    description: Title for the expression, i.e. a short string describing its purpose.
                  - !ruby/object:Api::Type::String
                    name: 'description'
                    description: Description of the expression 
                  - !ruby/object:Api::Type::String
                    name: 'location'
                    description: String indicating the location of the expression for error reporting, e.g. a file name and a position in the file      
  - !ruby/object:Api::Resource
    name: 'AccessLevelCondition'
    # This is an unusual API, so we need to use a few fields to map the methods
    # to the right URL.
    # create_url is the Create URL
    # base_url is the Get and Delete and Patch URL. It is empty on purpose.
    # List won't work yet. It should share a URL with Create.
    create_url: "{{access_level}}"
    base_url: ""
    self_link: "{{access_level}}"
    create_verb: :PATCH
    delete_verb: :PATCH
    input: true
    update_mask: true
    identity:
      - ipSubnetworks
      - requiredAccessLevels
      - members
      - negate
      - devicePolicy
      - regions
    nested_query: !ruby/object:Api::Resource::NestedQuery
      modify_by_patch: true
      keys:
        - basic
        - conditions
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Access Policy Quickstart': 'https://cloud.google.com/access-context-manager/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.accessLevels'
    description: |
      Allows configuring a single access level condition to be appended to an access level's conditions.
      This resource is intended to be used in cases where it is not possible to compile a full list
      of conditions to include in a `google_access_context_manager_access_level` resource,
      to enable them to be added separately.

      ~> **Note:** If this resource is used alongside a `google_access_context_manager_access_level` resource,
      the access level resource must have a `lifecycle` block with `ignore_changes = [basic[0].conditions]` so
      they don't fight over which service accounts should be included.
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'accessLevel'
        resource: 'AccessLevel'
        imports: 'name'
        description: |
          The name of the Access Level to add this condition to.
        required: true
        input: true
        url_param_only: true
    properties:
      - !ruby/object:Api::Type::Array
        name: 'ipSubnetworks'
        description: |
          A list of CIDR block IP subnetwork specification. May be IPv4
          or IPv6.
          Note that for a CIDR IP address block, the specified IP address
          portion must be properly truncated (i.e. all the host bits must
          be zero) or the input is considered malformed. For example,
          "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
          for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
          is not. The originating IP of a request must be in one of the
          listed subnets in order for this Condition to be true.
          If empty, all IP addresses are allowed.
        item_type: Api::Type::String
      - !ruby/object:Api::Type::Array
        name: 'requiredAccessLevels'
        description: |
          A list of other access levels defined in the same Policy,
          referenced by resource name. Referencing an AccessLevel which
          does not exist is an error. All access levels listed must be
          granted for the Condition to be true.
          Format: accessPolicies/{policy_id}/accessLevels/{short_name}
        item_type: Api::Type::String
      - !ruby/object:Api::Type::Array
        name: 'members'
        description: |
          An allowed list of members (users, service accounts).
          Using groups is not supported yet.

          The signed-in user originating the request must be a part of one
          of the provided members. If not specified, a request may come
          from any user (logged in/not logged in, not present in any
          groups, etc.).
          Formats: `user:{emailid}`, `serviceAccount:{emailid}`
        item_type: Api::Type::String
      - !ruby/object:Api::Type::Boolean
        name: 'negate'
        description: |
          Whether to negate the Condition. If true, the Condition becomes
          a NAND over its non-empty fields, each field must be false for
          the Condition overall to be satisfied. Defaults to false.
      - !ruby/object:Api::Type::NestedObject
        name: 'devicePolicy'
        description: |
          Device specific restrictions, all restrictions must hold for
          the Condition to be true. If not specified, all devices are
          allowed.
        properties:
          - !ruby/object:Api::Type::Boolean
            name: 'requireScreenLock'
            api_name: 'requireScreenlock'
            description: |
              Whether or not screenlock is required for the DevicePolicy
              to be true. Defaults to false.
          - !ruby/object:Api::Type::Array
            name: 'allowedEncryptionStatuses'
            description: |
              A list of allowed encryptions statuses.
              An empty list allows all statuses.
            item_type: !ruby/object:Api::Type::Enum
              name: 'undefined'
              description: |
                This field only has a name and description because of MM
                limitations. It should not appear in downstreams.
              values:
                - :ENCRYPTION_UNSPECIFIED
                - :ENCRYPTION_UNSUPPORTED
                - :UNENCRYPTED
                - :ENCRYPTED
          - !ruby/object:Api::Type::Array
            name: 'allowedDeviceManagementLevels'
            description: |
              A list of allowed device management levels.
              An empty list allows all management levels.
            item_type: !ruby/object:Api::Type::Enum
              name: 'undefined'
              description: |
                This field only has a name and description because of MM
                limitations. It should not appear in downstreams.
              values:
                - :MANAGEMENT_UNSPECIFIED
                - :NONE
                - :BASIC
                - :COMPLETE
          - !ruby/object:Api::Type::Array
            name: 'osConstraints'
            description: |
              A list of allowed OS versions.
              An empty list allows all types and all versions.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
              - !ruby/object:Api::Type::String
                name: 'minimumVersion'
                description: |
                  The minimum allowed OS version. If not set, any version
                  of this OS satisfies the constraint.
                  Format: "major.minor.patch" such as "10.5.301", "9.2.1".
              - !ruby/object:Api::Type::Enum
                name: 'osType'
                required: true
                description: |
                  The operating system type of the device.
                values:
                  - :OS_UNSPECIFIED
                  - :DESKTOP_MAC
                  - :DESKTOP_WINDOWS
                  - :DESKTOP_LINUX
                  - :DESKTOP_CHROME_OS
                  - :ANDROID
                  - :IOS
          - !ruby/object:Api::Type::Boolean
            name: 'requireAdminApproval'
            description: |
              Whether the device needs to be approved by the customer admin.
          - !ruby/object:Api::Type::Boolean
            name: 'requireCorpOwned'
            description: |
              Whether the device needs to be corp owned.
      - !ruby/object:Api::Type::Array
        name: 'regions'
        description: |
          The request must originate from one of the provided
          countries/regions.
          Format: A valid ISO 3166-1 alpha-2 code.
        item_type: Api::Type::String
  - !ruby/object:Api::Resource
    # This is the singular of `ServicePerimeters`, any changes here should be made to `ServicePerimeters` as well
    name: 'ServicePerimeter'
    # This is an unusual API, so we need to use a few fields to map the methods
    # to the right URL.
    # create_url is the Create URL
    # base_url is the Get and Delete and Patch URL. It is empty on purpose.
    # List won't work yet. It should share a URL with Create.
    create_url: "{{parent}}/servicePerimeters"
    base_url: ""
    self_link: "{{name}}"
    update_verb: :PATCH
    update_mask: true
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Service Perimeter Quickstart': 'https://cloud.google.com/vpc-service-controls/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters'
    description: |
      ServicePerimeter describes a set of GCP resources which can freely import
      and export data amongst themselves, but not export outside of the
      ServicePerimeter. If a request with a source within this ServicePerimeter
      has a target outside of the ServicePerimeter, the request will be blocked.
      Otherwise the request is allowed. There are two types of Service Perimeter
      - Regular and Bridge. Regular Service Perimeters cannot overlap, a single
      GCP project can only belong to a single regular Service Perimeter. Service
      Perimeter Bridges can contain only GCP projects as members, a single GCP
      project may belong to multiple Service Perimeter Bridges.
    parameters:
      # Parent is a path parameter that _cannot_ be read or sent in the request at all.
      # This must be done at the provider level.
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        description: |
          The AccessPolicy this ServicePerimeter lives in.
          Format: accessPolicies/{policy_id}
      - !ruby/object:Api::Type::String
        name: name
        input: true
        required: true
        description: |
          Resource name for the ServicePerimeter. The short_name component must
          begin with a letter and only include alphanumeric and '_'.
          Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
    properties:
      - !ruby/object:Api::Type::String
        name: title
        required: true
        description: |
          Human readable title. Must be unique within the Policy.
      - !ruby/object:Api::Type::String
        name: 'description'
        description: |
          Description of the ServicePerimeter and its use. Does not affect
          behavior.
      - !ruby/object:Api::Type::Time
        name: 'createTime'
        description: |
          Time the AccessPolicy was created in UTC.
        output: true
      - !ruby/object:Api::Type::Time
        name: 'updateTime'
        description: |
          Time the AccessPolicy was updated in UTC.
        output: true
      - !ruby/object:Api::Type::Enum
        name: 'perimeterType'
        description: |
          Specifies the type of the Perimeter. There are two types: regular and
          bridge. Regular Service Perimeter contains resources, access levels,
          and restricted services. Every resource can be in at most
          ONE regular Service Perimeter.

          In addition to being in a regular service perimeter, a resource can also
          be in zero or more perimeter bridges. A perimeter bridge only contains
          resources. Cross project operations are permitted if all effected
          resources share some perimeter (whether bridge or regular). Perimeter
          Bridge does not contain access levels or services: those are governed
          entirely by the regular perimeter that resource is in.

          Perimeter Bridges are typically useful when building more complex
          topologies with many independent perimeters that need to share some data
          with a common perimeter, but should not be able to share data among
          themselves.
        values:
          - :PERIMETER_TYPE_REGULAR
          - :PERIMETER_TYPE_BRIDGE
        default_value: :PERIMETER_TYPE_REGULAR
      - !ruby/object:Api::Type::NestedObject
        name: 'status'
        description: |
          ServicePerimeter configuration. Specifies sets of resources,
          restricted services and access levels that determine
          perimeter content and boundaries.
        properties:
          - !ruby/object:Api::Type::Array
            name: 'resources'
            description: |
              A list of GCP resources that are inside of the service perimeter.
              Currently only projects are allowed.
              Format: projects/{project_number}
            at_least_one_of:
              - status.0.resources
              - status.0.access_levels
              - status.0.restricted_services
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'accessLevels'
            description: |
              A list of AccessLevel resource names that allow resources within
              the ServicePerimeter to be accessed from the internet.
              AccessLevels listed must be in the same policy as this
              ServicePerimeter. Referencing a nonexistent AccessLevel is a
              syntax error. If no AccessLevel names are listed, resources within
              the perimeter can only be accessed via GCP calls with request
              origins within the perimeter. For Service Perimeter Bridge, must
              be empty.

              Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
            at_least_one_of:
              - status.0.resources
              - status.0.access_levels
              - status.0.restricted_services
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'restrictedServices'
            description: |
              GCP services that are subject to the Service Perimeter
              restrictions. Must contain a list of services. For example, if
              `storage.googleapis.com` is specified, access to the storage
              buckets inside the perimeter must meet the perimeter's access
              restrictions.
            at_least_one_of:
              - status.0.resources
              - status.0.access_levels
              - status.0.restricted_services
            item_type: Api::Type::String
          - !ruby/object:Api::Type::NestedObject
            name: 'vpcAccessibleServices'
            description: |
              Specifies how APIs are allowed to communicate within the Service
              Perimeter.
            properties:
            - !ruby/object:Api::Type::Boolean
              name: 'enableRestriction'
              description: |
                Whether to restrict API calls within the Service Perimeter to the
                list of APIs specified in 'allowedServices'.
            - !ruby/object:Api::Type::Array
              name: 'allowedServices'
              description: |
                The list of APIs usable within the Service Perimeter.
                Must be empty unless `enableRestriction` is True.
              item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'ingressPolicies'
            description: |
              List of `IngressPolicies` to apply to the perimeter. A perimeter may
              have multiple `IngressPolicies`, each of which is evaluated
              separately. Access is granted if any `Ingress Policy` grants it.
              Must be empty for a perimeter bridge.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
              - !ruby/object:Api::Type::NestedObject                  
                name: 'ingressFrom'
                description: |
                  Defines the conditions on the source of a request causing this `IngressPolicy`
                  to apply.                      
                properties:
                - !ruby/object:Api::Type::Enum
                  name: 'identityType'
                  description: |
                    Specifies the type of identities that are allowed access from outside the 
                    perimeter. If left unspecified, then members of `identities` field will be 
                    allowed access.
                  values:
                    - :IDENTITY_TYPE_UNSPECIFIED
                    - :ANY_IDENTITY
                    - :ANY_USER_ACCOUNT
                    - :ANY_SERVICE_ACCOUNT
                - !ruby/object:Api::Type::Array
                  name: 'identities'
                  item_type: Api::Type::String
                  description: |
                    A list of identities that are allowed access through this ingress policy.
                    Should be in the format of email address. The email address should represent 
                    individual user or service account only.
                - !ruby/object:Api::Type::Array
                  name: 'sources'
                  description: |
                    Sources that this `IngressPolicy` authorizes access from.                       
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::String
                      name: 'accessLevel'
                      description: |
                        An `AccessLevel` resource name that allow resources within the 
                        `ServicePerimeters` to be accessed from the internet. `AccessLevels` listed 
                        must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent
                        `AccessLevel` will cause an error. If no `AccessLevel` names are listed, 
                        resources within the perimeter can only be accessed via Google Cloud calls 
                        with request origins within the perimeter. 
                        Example `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.` 
                        If * is specified, then all IngressSources will be allowed.
                    - !ruby/object:Api::Type::String
                      name: 'resource'
                      description: |
                        A Google Cloud resource that is allowed to ingress the perimeter. 
                        Requests from these resources will be allowed to access perimeter data. 
                        Currently only projects are allowed. Format `projects/{project_number}` 
                        The project may be in any Google Cloud organization, not just the 
                        organization that the perimeter is defined in. `*` is not allowed, the case 
                        of allowing all Google Cloud resources only is not supported.              
              - !ruby/object:Api::Type::NestedObject
                name: 'ingressTo'
                description: |
                  Defines the conditions on the `ApiOperation` and request destination that cause
                  this `IngressPolicy` to apply.
                properties:
                - !ruby/object:Api::Type::Array
                  name: 'resources'
                  item_type: Api::Type::String
                  description: |
                    A list of resources, currently only projects in the form 
                    `projects/<projectnumber>`, protected by this `ServicePerimeter`
                    that are allowed to be accessed by sources defined in the
                    corresponding `IngressFrom`. A request matches if it contains
                    a resource in this list. If `*` is specified for resources,
                    then this `IngressTo` rule will authorize access to all 
                    resources inside the perimeter, provided that the request
                    also matches the `operations` field.
                - !ruby/object:Api::Type::Array
                  name: 'operations'
                  description: |
                    A list of `ApiOperations` the sources specified in corresponding `IngressFrom` 
                    are allowed to perform in this `ServicePerimeter`.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::String
                      name: 'serviceName'
                      description: |
                        The name of the API whose methods or permissions the `IngressPolicy` or 
                        `EgressPolicy` want to allow. A single `ApiOperation` with `serviceName` 
                        field set to `*` will allow all methods AND permissions for all services.
                    - !ruby/object:Api::Type::Array
                      name: 'methodSelectors'
                      description: |
                        API methods or permissions to allow. Method or permission must belong to 
                        the service specified by serviceName field. A single `MethodSelector` entry 
                        with `*` specified for the method field will allow all methods AND 
                        permissions for the service specified in `serviceName`.
                      item_type: !ruby/object:Api::Type::NestedObject
                        properties:
                        - !ruby/object:Api::Type::String
                          name: 'method'
                          description: |
                            Value for method should be a valid method name for the corresponding 
                            serviceName in `ApiOperation`. If `*` used as value for `method`, then 
                            ALL methods and permissions are allowed. 
                        - !ruby/object:Api::Type::String
                          name: 'permission'
                          description: |
                            Value for permission should be a valid Cloud IAM permission for the 
                            corresponding `serviceName` in `ApiOperation`. 
          - !ruby/object:Api::Type::Array
            name: 'egressPolicies'
            description: |
              List of EgressPolicies to apply to the perimeter. A perimeter may 
              have multiple EgressPolicies, each of which is evaluated separately.
              Access is granted if any EgressPolicy grants it. Must be empty for 
              a perimeter bridge.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
              - !ruby/object:Api::Type::NestedObject                  
                name: 'egressFrom'
                description: |
                  Defines conditions on the source of a request causing this `EgressPolicy` to apply.
                properties:
                - !ruby/object:Api::Type::Enum
                  name: 'identityType'
                  description: |
                    Specifies the type of identities that are allowed access to outside the 
                    perimeter. If left unspecified, then members of `identities` field will 
                    be allowed access.
                  values:
                    - :IDENTITY_TYPE_UNSPECIFIED
                    - :ANY_IDENTITY
                    - :ANY_USER_ACCOUNT
                    - :ANY_SERVICE_ACCOUNT
                - !ruby/object:Api::Type::Array
                  name: 'identities'
                  description: |
                    A list of identities that are allowed access through this `EgressPolicy`. 
                    Should be in the format of email address. The email address should 
                    represent individual user or service account only.
                  item_type: Api::Type::String
              - !ruby/object:Api::Type::NestedObject                  
                name: 'egressTo'
                description: |
                  Defines the conditions on the `ApiOperation` and destination resources that 
                  cause this `EgressPolicy` to apply.
                properties:
                - !ruby/object:Api::Type::Array
                  name: 'resources'
                  item_type: Api::Type::String
                  description: |
                    A list of resources, currently only projects in the form 
                    `projects/<projectnumber>`, that match this to stanza. A request matches 
                    if it contains a resource in this list. If * is specified for resources, 
                    then this `EgressTo` rule will authorize access to all resources outside 
                    the perimeter.                  
                - !ruby/object:Api::Type::Array
                  name: 'operations'
                  description: |
                    A list of `ApiOperations` that this egress rule applies to. A request matches 
                    if it contains an operation/service in this list.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::String
                      name: 'serviceName'
                      description: |
                        The name of the API whose methods or permissions the `IngressPolicy` or 
                        `EgressPolicy` want to allow. A single `ApiOperation` with serviceName 
                        field set to `*` will allow all methods AND permissions for all services.
                    - !ruby/object:Api::Type::Array
                      name: 'methodSelectors'
                      description: |
                        API methods or permissions to allow. Method or permission must belong 
                        to the service specified by `serviceName` field. A single MethodSelector 
                        entry with `*` specified for the `method` field will allow all methods 
                        AND permissions for the service specified in `serviceName`.
                      item_type: !ruby/object:Api::Type::NestedObject
                        properties:
                        - !ruby/object:Api::Type::String
                          name: 'method'
                          description: |
                            Value for `method` should be a valid method name for the corresponding 
                            `serviceName` in `ApiOperation`. If `*` used as value for method, 
                            then ALL methods and permissions are allowed. 
                        - !ruby/object:Api::Type::String
                          name: 'permission'
                          description: |
                            Value for permission should be a valid Cloud IAM permission for the 
                            corresponding `serviceName` in `ApiOperation`. 
      - !ruby/object:Api::Type::NestedObject
        name: 'spec'
        description: |
          Proposed (or dry run) ServicePerimeter configuration.
          This configuration allows to specify and test ServicePerimeter configuration
          without enforcing actual access restrictions. Only allowed to be set when
          the `useExplicitDryRunSpec` flag is set.
        properties:
          - !ruby/object:Api::Type::Array
            name: 'resources'
            description: |
              A list of GCP resources that are inside of the service perimeter.
              Currently only projects are allowed.
              Format: projects/{project_number}
            at_least_one_of:
              - status.0.resources
              - status.0.access_levels
              - status.0.restricted_services
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'accessLevels'
            description: |
              A list of AccessLevel resource names that allow resources within
              the ServicePerimeter to be accessed from the internet.
              AccessLevels listed must be in the same policy as this
              ServicePerimeter. Referencing a nonexistent AccessLevel is a
              syntax error. If no AccessLevel names are listed, resources within
              the perimeter can only be accessed via GCP calls with request
              origins within the perimeter. For Service Perimeter Bridge, must
              be empty.

              Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
            at_least_one_of:
              - status.0.resources
              - status.0.access_levels
              - status.0.restricted_services
            item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'restrictedServices'
            description: |
              GCP services that are subject to the Service Perimeter
              restrictions. Must contain a list of services. For example, if
              `storage.googleapis.com` is specified, access to the storage
              buckets inside the perimeter must meet the perimeter's access
              restrictions.
            at_least_one_of:
              - status.0.resources
              - status.0.access_levels
              - status.0.restricted_services
            item_type: Api::Type::String
          - !ruby/object:Api::Type::NestedObject
            name: 'vpcAccessibleServices'
            description: |
              Specifies how APIs are allowed to communicate within the Service
              Perimeter.
            properties:
            - !ruby/object:Api::Type::Boolean
              name: 'enableRestriction'
              description: |
                Whether to restrict API calls within the Service Perimeter to the
                list of APIs specified in 'allowedServices'.
            - !ruby/object:Api::Type::Array
              name: 'allowedServices'
              description: |
                The list of APIs usable within the Service Perimeter.
                Must be empty unless `enableRestriction` is True.
              item_type: Api::Type::String
          - !ruby/object:Api::Type::Array
            name: 'ingressPolicies'
            description: |
              List of `IngressPolicies` to apply to the perimeter. A perimeter may
              have multiple `IngressPolicies`, each of which is evaluated
              separately. Access is granted if any `Ingress Policy` grants it.
              Must be empty for a perimeter bridge.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
              - !ruby/object:Api::Type::NestedObject                  
                name: 'ingressFrom'
                description: |
                  Defines the conditions on the source of a request causing this `IngressPolicy`
                  to apply.                      
                properties:
                - !ruby/object:Api::Type::Enum
                  name: 'identityType'
                  description: |
                    Specifies the type of identities that are allowed access from outside the 
                    perimeter. If left unspecified, then members of `identities` field will be 
                    allowed access.
                  values:
                    - :IDENTITY_TYPE_UNSPECIFIED
                    - :ANY_IDENTITY
                    - :ANY_USER_ACCOUNT
                    - :ANY_SERVICE_ACCOUNT
                - !ruby/object:Api::Type::Array
                  name: 'identities'
                  item_type: Api::Type::String
                  description: |
                    A list of identities that are allowed access through this ingress policy.
                    Should be in the format of email address. The email address should represent 
                    individual user or service account only.
                - !ruby/object:Api::Type::Array
                  name: 'sources'
                  description: |
                    Sources that this `IngressPolicy` authorizes access from.                       
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::String
                      name: 'accessLevel'
                      description: |
                        An `AccessLevel` resource name that allow resources within the 
                        `ServicePerimeters` to be accessed from the internet. `AccessLevels` listed 
                        must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent
                        `AccessLevel` will cause an error. If no `AccessLevel` names are listed, 
                        resources within the perimeter can only be accessed via Google Cloud calls 
                        with request origins within the perimeter. 
                        Example `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.` 
                        If * is specified, then all IngressSources will be allowed.
                    - !ruby/object:Api::Type::String
                      name: 'resource'
                      description: |
                        A Google Cloud resource that is allowed to ingress the perimeter. 
                        Requests from these resources will be allowed to access perimeter data. 
                        Currently only projects are allowed. Format `projects/{project_number}` 
                        The project may be in any Google Cloud organization, not just the 
                        organization that the perimeter is defined in. `*` is not allowed, the case 
                        of allowing all Google Cloud resources only is not supported.              
              - !ruby/object:Api::Type::NestedObject
                name: 'ingressTo'
                description: |
                  Defines the conditions on the `ApiOperation` and request destination that cause
                  this `IngressPolicy` to apply.
                properties:
                - !ruby/object:Api::Type::Array
                  name: 'resources'
                  item_type: Api::Type::String
                  description: |
                    A list of resources, currently only projects in the form 
                    `projects/<projectnumber>`, protected by this `ServicePerimeter`
                    that are allowed to be accessed by sources defined in the
                    corresponding `IngressFrom`. A request matches if it contains
                    a resource in this list. If `*` is specified for resources,
                    then this `IngressTo` rule will authorize access to all 
                    resources inside the perimeter, provided that the request
                    also matches the `operations` field.
                - !ruby/object:Api::Type::Array
                  name: 'operations'
                  description: |
                    A list of `ApiOperations` the sources specified in corresponding `IngressFrom` 
                    are allowed to perform in this `ServicePerimeter`.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::String
                      name: 'serviceName'
                      description: |
                        The name of the API whose methods or permissions the `IngressPolicy` or 
                        `EgressPolicy` want to allow. A single `ApiOperation` with `serviceName` 
                        field set to `*` will allow all methods AND permissions for all services.
                    - !ruby/object:Api::Type::Array
                      name: 'methodSelectors'
                      description: |
                        API methods or permissions to allow. Method or permission must belong to 
                        the service specified by serviceName field. A single `MethodSelector` entry 
                        with `*` specified for the method field will allow all methods AND 
                        permissions for the service specified in `serviceName`.
                      item_type: !ruby/object:Api::Type::NestedObject
                        properties:
                        - !ruby/object:Api::Type::String
                          name: 'method'
                          description: |
                            Value for method should be a valid method name for the corresponding 
                            serviceName in `ApiOperation`. If `*` used as value for `method`, then 
                            ALL methods and permissions are allowed. 
                        - !ruby/object:Api::Type::String
                          name: 'permission'
                          description: |
                            Value for permission should be a valid Cloud IAM permission for the 
                            corresponding `serviceName` in `ApiOperation`. 
          - !ruby/object:Api::Type::Array
            name: 'egressPolicies'
            description: |
              List of EgressPolicies to apply to the perimeter. A perimeter may 
              have multiple EgressPolicies, each of which is evaluated separately.
              Access is granted if any EgressPolicy grants it. Must be empty for 
              a perimeter bridge.
            item_type: !ruby/object:Api::Type::NestedObject
              properties:
              - !ruby/object:Api::Type::NestedObject                  
                name: 'egressFrom'
                description: |
                  Defines conditions on the source of a request causing this `EgressPolicy` to apply.
                properties:
                - !ruby/object:Api::Type::Enum
                  name: 'identityType'
                  description: |
                    Specifies the type of identities that are allowed access to outside the 
                    perimeter. If left unspecified, then members of `identities` field will 
                    be allowed access.
                  values:
                    - :IDENTITY_TYPE_UNSPECIFIED
                    - :ANY_IDENTITY
                    - :ANY_USER_ACCOUNT
                    - :ANY_SERVICE_ACCOUNT
                - !ruby/object:Api::Type::Array
                  name: 'identities'
                  description: |
                    A list of identities that are allowed access through this `EgressPolicy`. 
                    Should be in the format of email address. The email address should 
                    represent individual user or service account only.
                  item_type: Api::Type::String
              - !ruby/object:Api::Type::NestedObject                  
                name: 'egressTo'
                description: |
                  Defines the conditions on the `ApiOperation` and destination resources that 
                  cause this `EgressPolicy` to apply.
                properties:
                - !ruby/object:Api::Type::Array
                  name: 'resources'
                  item_type: Api::Type::String
                  description: |
                    A list of resources, currently only projects in the form 
                    `projects/<projectnumber>`, that match this to stanza. A request matches 
                    if it contains a resource in this list. If * is specified for resources, 
                    then this `EgressTo` rule will authorize access to all resources outside 
                    the perimeter.                  
                - !ruby/object:Api::Type::Array
                  name: 'operations'
                  description: |
                    A list of `ApiOperations` that this egress rule applies to. A request matches 
                    if it contains an operation/service in this list.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::String
                      name: 'serviceName'
                      description: |
                        The name of the API whose methods or permissions the `IngressPolicy` or 
                        `EgressPolicy` want to allow. A single `ApiOperation` with serviceName 
                        field set to `*` will allow all methods AND permissions for all services.
                    - !ruby/object:Api::Type::Array
                      name: 'methodSelectors'
                      description: |
                        API methods or permissions to allow. Method or permission must belong 
                        to the service specified by `serviceName` field. A single MethodSelector 
                        entry with `*` specified for the `method` field will allow all methods 
                        AND permissions for the service specified in `serviceName`.
                      item_type: !ruby/object:Api::Type::NestedObject
                        properties:
                        - !ruby/object:Api::Type::String
                          name: 'method'
                          description: |
                            Value for `method` should be a valid method name for the corresponding 
                            `serviceName` in `ApiOperation`. If `*` used as value for method, 
                            then ALL methods and permissions are allowed. 
                        - !ruby/object:Api::Type::String
                          name: 'permission'
                          description: |
                            Value for permission should be a valid Cloud IAM permission for the 
                            corresponding `serviceName` in `ApiOperation`.                         
      - !ruby/object:Api::Type::Boolean
        name: 'useExplicitDryRunSpec'
        description: |
          Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
          for all Service Perimeters, and that spec is identical to the status for those
          Service Perimeters. When this flag is set, it inhibits the generation of the
          implicit spec, thereby allowing the user to explicitly provide a
          configuration ("spec") to use in a dry-run version of the Service Perimeter.
          This allows the user to test changes to the enforced config ("status") without
          actually enforcing them. This testing is done through analyzing the differences
          between currently enforced and suggested restrictions. useExplicitDryRunSpec must
          bet set to True if any of the fields in the spec are set to non-default values.
  - !ruby/object:Api::Resource
    # This is the plural of `ServicePerimeter`, any changes here should be made to `ServicePerimeter` as well
    name: 'ServicePerimeters'
    base_url: "{{parent}}/servicePerimeters:replaceAll"
    update_url: "{{parent}}/servicePerimeters:replaceAll"
    self_link: "{{parent}}/servicePerimeters"
    update_verb: :POST
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Service Perimeter Quickstart': 'https://cloud.google.com/vpc-service-controls/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters'
    description: |
      Replace all existing Service Perimeters in an Access Policy with the Service Perimeters provided. This is done atomically.
      This is a bulk edit of all Service Perimeters and may override existing Service Perimeters created by `google_access_context_manager_service_perimeter`,
      thus causing a permadiff if used alongside `google_access_context_manager_service_perimeter` on the same parent.
    parameters:
      # Parent is a path parameter that _cannot_ be read or sent in the request at all.
      # This must be done at the provider level.
      - !ruby/object:Api::Type::String
        name: parent
        input: true
        required: true
        description: |
          The AccessPolicy this ServicePerimeter lives in.
          Format: accessPolicies/{policy_id}
    properties:
      - !ruby/object:Api::Type::Array
        name: 'servicePerimeters'
        description: |
          The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: name
              input: true
              required: true
              description: |
                Resource name for the ServicePerimeter. The short_name component must
                begin with a letter and only include alphanumeric and '_'.
                Format: accessPolicies/{policy_id}/servicePerimeters/{short_name}
            - !ruby/object:Api::Type::String
              name: title
              required: true
              description: |
                Human readable title. Must be unique within the Policy.
            - !ruby/object:Api::Type::String
              name: 'description'
              description: |
                Description of the ServicePerimeter and its use. Does not affect
                behavior.
            - !ruby/object:Api::Type::Time
              name: 'createTime'
              description: |
                Time the AccessPolicy was created in UTC.
              output: true
            - !ruby/object:Api::Type::Time
              name: 'updateTime'
              description: |
                Time the AccessPolicy was updated in UTC.
              output: true
            - !ruby/object:Api::Type::Enum
              name: 'perimeterType'
              description: |
                Specifies the type of the Perimeter. There are two types: regular and
                bridge. Regular Service Perimeter contains resources, access levels,
                and restricted services. Every resource can be in at most
                ONE regular Service Perimeter.

                In addition to being in a regular service perimeter, a resource can also
                be in zero or more perimeter bridges. A perimeter bridge only contains
                resources. Cross project operations are permitted if all effected
                resources share some perimeter (whether bridge or regular). Perimeter
                Bridge does not contain access levels or services: those are governed
                entirely by the regular perimeter that resource is in.

                Perimeter Bridges are typically useful when building more complex
                topologies with many independent perimeters that need to share some data
                with a common perimeter, but should not be able to share data among
                themselves.
              values:
                - :PERIMETER_TYPE_REGULAR
                - :PERIMETER_TYPE_BRIDGE
              default_value: :PERIMETER_TYPE_REGULAR
            - !ruby/object:Api::Type::NestedObject
              name: 'status'
              description: |
                ServicePerimeter configuration. Specifies sets of resources,
                restricted services and access levels that determine
                perimeter content and boundaries.
              properties:
                - !ruby/object:Api::Type::Array
                  name: 'resources'
                  description: |
                    A list of GCP resources that are inside of the service perimeter.
                    Currently only projects are allowed.
                    Format: projects/{project_number}
                  # TODO: (mbang) won't work for arrays yet, uncomment here once they are supported.
                  # (github.com/hashicorp/terraform-plugin-sdk/issues/470)
                  # at_least_one_of:
                  #   - status.0.resources
                  #   - status.0.access_levels
                  #   - status.0.restricted_services
                  item_type: Api::Type::String
                - !ruby/object:Api::Type::Array
                  name: 'accessLevels'
                  description: |
                    A list of AccessLevel resource names that allow resources within
                    the ServicePerimeter to be accessed from the internet.
                    AccessLevels listed must be in the same policy as this
                    ServicePerimeter. Referencing a nonexistent AccessLevel is a
                    syntax error. If no AccessLevel names are listed, resources within
                    the perimeter can only be accessed via GCP calls with request
                    origins within the perimeter. For Service Perimeter Bridge, must
                    be empty.

                    Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
                  # TODO: (mbang) won't work for arrays yet, uncomment here once they are supported.
                  # (github.com/hashicorp/terraform-plugin-sdk/issues/470)
                  # at_least_one_of:
                  #   - status.0.resources
                  #   - status.0.access_levels
                  #   - status.0.restricted_services
                  item_type: Api::Type::String
                - !ruby/object:Api::Type::Array
                  name: 'restrictedServices'
                  description: |
                    GCP services that are subject to the Service Perimeter
                    restrictions. Must contain a list of services. For example, if
                    `storage.googleapis.com` is specified, access to the storage
                    buckets inside the perimeter must meet the perimeter's access
                    restrictions.
                  # TODO: (mbang) won't work for arrays yet, uncomment here once they are supported.
                  # (github.com/hashicorp/terraform-plugin-sdk/issues/470)
                  # at_least_one_of:
                  #   - status.0.resources
                  #   - status.0.access_levels
                  #   - status.0.restricted_services
                  item_type: Api::Type::String
                - !ruby/object:Api::Type::NestedObject
                  name: 'vpcAccessibleServices'
                  description: |
                    Specifies how APIs are allowed to communicate within the Service
                    Perimeter.
                  properties:
                  - !ruby/object:Api::Type::Boolean
                    name: 'enableRestriction'
                    description: |
                      Whether to restrict API calls within the Service Perimeter to the
                      list of APIs specified in 'allowedServices'.
                  - !ruby/object:Api::Type::Array
                    name: 'allowedServices'
                    description: |
                      The list of APIs usable within the Service Perimeter.
                      Must be empty unless `enableRestriction` is True.
                    item_type: Api::Type::String
                - !ruby/object:Api::Type::Array
                  name: 'ingressPolicies'
                  description: |
                    List of `IngressPolicies` to apply to the perimeter. A perimeter may
                    have multiple `IngressPolicies`, each of which is evaluated
                    separately. Access is granted if any `Ingress Policy` grants it.
                    Must be empty for a perimeter bridge.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::NestedObject                  
                      name: 'ingressFrom'
                      description: |
                        Defines the conditions on the source of a request causing this `IngressPolicy`
                        to apply.                      
                      properties:
                      - !ruby/object:Api::Type::Enum
                        name: 'identityType'
                        description: |
                          Specifies the type of identities that are allowed access from outside the 
                          perimeter. If left unspecified, then members of `identities` field will be 
                          allowed access.
                        values:
                          - :IDENTITY_TYPE_UNSPECIFIED
                          - :ANY_IDENTITY
                          - :ANY_USER_ACCOUNT
                          - :ANY_SERVICE_ACCOUNT
                      - !ruby/object:Api::Type::Array
                        name: 'identities'
                        item_type: Api::Type::String
                        description: |
                          A list of identities that are allowed access through this ingress policy.
                          Should be in the format of email address. The email address should represent 
                          individual user or service account only.
                      - !ruby/object:Api::Type::Array
                        name: 'sources'
                        description: |
                          Sources that this `IngressPolicy` authorizes access from.                       
                        item_type: !ruby/object:Api::Type::NestedObject
                          properties:
                          - !ruby/object:Api::Type::String
                            name: 'accessLevel'
                            description: |
                              An `AccessLevel` resource name that allow resources within the 
                              `ServicePerimeters` to be accessed from the internet. `AccessLevels` listed 
                              must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent
                              `AccessLevel` will cause an error. If no `AccessLevel` names are listed, 
                              resources within the perimeter can only be accessed via Google Cloud calls 
                              with request origins within the perimeter. 
                              Example `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.` 
                              If * is specified, then all IngressSources will be allowed.
                          - !ruby/object:Api::Type::String
                            name: 'resource'
                            description: |
                              A Google Cloud resource that is allowed to ingress the perimeter. 
                              Requests from these resources will be allowed to access perimeter data. 
                              Currently only projects are allowed. Format `projects/{project_number}` 
                              The project may be in any Google Cloud organization, not just the 
                              organization that the perimeter is defined in. `*` is not allowed, the case 
                              of allowing all Google Cloud resources only is not supported.              
                    - !ruby/object:Api::Type::NestedObject
                      name: 'ingressTo'
                      description: |
                        Defines the conditions on the `ApiOperation` and request destination that cause
                        this `IngressPolicy` to apply.
                      properties:
                      - !ruby/object:Api::Type::Array
                        name: 'resources'
                        item_type: Api::Type::String
                        description: |
                          A list of resources, currently only projects in the form 
                          `projects/<projectnumber>`, protected by this `ServicePerimeter`
                          that are allowed to be accessed by sources defined in the
                          corresponding `IngressFrom`. A request matches if it contains
                          a resource in this list. If `*` is specified for resources,
                          then this `IngressTo` rule will authorize access to all 
                          resources inside the perimeter, provided that the request
                          also matches the `operations` field.
                      - !ruby/object:Api::Type::Array
                        name: 'operations'
                        description: |
                          A list of `ApiOperations` the sources specified in corresponding `IngressFrom` 
                          are allowed to perform in this `ServicePerimeter`.
                        item_type: !ruby/object:Api::Type::NestedObject
                          properties:
                          - !ruby/object:Api::Type::String
                            name: 'serviceName'
                            description: |
                              The name of the API whose methods or permissions the `IngressPolicy` or 
                              `EgressPolicy` want to allow. A single `ApiOperation` with `serviceName` 
                              field set to `*` will allow all methods AND permissions for all services.
                          - !ruby/object:Api::Type::Array
                            name: 'methodSelectors'
                            description: |
                              API methods or permissions to allow. Method or permission must belong to 
                              the service specified by serviceName field. A single `MethodSelector` entry 
                              with `*` specified for the method field will allow all methods AND 
                              permissions for the service specified in `serviceName`.
                            item_type: !ruby/object:Api::Type::NestedObject
                              properties:
                              - !ruby/object:Api::Type::String
                                name: 'method'
                                description: |
                                  Value for method should be a valid method name for the corresponding 
                                  serviceName in `ApiOperation`. If `*` used as value for `method`, then 
                                  ALL methods and permissions are allowed. 
                              - !ruby/object:Api::Type::String
                                name: 'permission'
                                description: |
                                  Value for permission should be a valid Cloud IAM permission for the 
                                  corresponding `serviceName` in `ApiOperation`. 
                - !ruby/object:Api::Type::Array
                  name: 'egressPolicies'
                  description: |
                    List of EgressPolicies to apply to the perimeter. A perimeter may 
                    have multiple EgressPolicies, each of which is evaluated separately.
                    Access is granted if any EgressPolicy grants it. Must be empty for 
                    a perimeter bridge.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::NestedObject                  
                      name: 'egressFrom'
                      description: |
                        Defines conditions on the source of a request causing this `EgressPolicy` to apply.
                      properties:
                      - !ruby/object:Api::Type::Enum
                        name: 'identityType'
                        description: |
                          Specifies the type of identities that are allowed access to outside the 
                          perimeter. If left unspecified, then members of `identities` field will 
                          be allowed access.
                        values:
                          - :IDENTITY_TYPE_UNSPECIFIED
                          - :ANY_IDENTITY
                          - :ANY_USER_ACCOUNT
                          - :ANY_SERVICE_ACCOUNT
                      - !ruby/object:Api::Type::Array
                        name: 'identities'
                        description: |
                          A list of identities that are allowed access through this `EgressPolicy`. 
                          Should be in the format of email address. The email address should 
                          represent individual user or service account only.
                        item_type: Api::Type::String
                    - !ruby/object:Api::Type::NestedObject                  
                      name: 'egressTo'
                      description: |
                        Defines the conditions on the `ApiOperation` and destination resources that 
                        cause this `EgressPolicy` to apply.
                      properties:
                      - !ruby/object:Api::Type::Array
                        name: 'resources'
                        item_type: Api::Type::String
                        description: |
                          A list of resources, currently only projects in the form 
                          `projects/<projectnumber>`, that match this to stanza. A request matches 
                          if it contains a resource in this list. If * is specified for resources, 
                          then this `EgressTo` rule will authorize access to all resources outside 
                          the perimeter.                  
                      - !ruby/object:Api::Type::Array
                        name: 'operations'
                        description: |
                          A list of `ApiOperations` that this egress rule applies to. A request matches 
                          if it contains an operation/service in this list.
                        item_type: !ruby/object:Api::Type::NestedObject
                          properties:
                          - !ruby/object:Api::Type::String
                            name: 'serviceName'
                            description: |
                              The name of the API whose methods or permissions the `IngressPolicy` or 
                              `EgressPolicy` want to allow. A single `ApiOperation` with serviceName 
                              field set to `*` will allow all methods AND permissions for all services.
                          - !ruby/object:Api::Type::Array
                            name: 'methodSelectors'
                            description: |
                              API methods or permissions to allow. Method or permission must belong 
                              to the service specified by `serviceName` field. A single MethodSelector 
                              entry with `*` specified for the `method` field will allow all methods 
                              AND permissions for the service specified in `serviceName`.
                            item_type: !ruby/object:Api::Type::NestedObject
                              properties:
                              - !ruby/object:Api::Type::String
                                name: 'method'
                                description: |
                                  Value for `method` should be a valid method name for the corresponding 
                                  `serviceName` in `ApiOperation`. If `*` used as value for method, 
                                  then ALL methods and permissions are allowed. 
                              - !ruby/object:Api::Type::String
                                name: 'permission'
                                description: |
                                  Value for permission should be a valid Cloud IAM permission for the 
                                  corresponding `serviceName` in `ApiOperation`.                                    
            - !ruby/object:Api::Type::NestedObject
              name: 'spec'
              description: |
                Proposed (or dry run) ServicePerimeter configuration.
                This configuration allows to specify and test ServicePerimeter configuration
                without enforcing actual access restrictions. Only allowed to be set when
                the `useExplicitDryRunSpec` flag is set.
              properties:
                - !ruby/object:Api::Type::Array
                  name: 'resources'
                  description: |
                    A list of GCP resources that are inside of the service perimeter.
                    Currently only projects are allowed.
                    Format: projects/{project_number}
                  # TODO: (mbang) won't work for arrays yet, uncomment here once they are supported.
                  # (github.com/hashicorp/terraform-plugin-sdk/issues/470)
                  # at_least_one_of:
                  #   - status.0.resources
                  #   - status.0.access_levels
                  #   - status.0.restricted_services
                  item_type: Api::Type::String
                - !ruby/object:Api::Type::Array
                  name: 'accessLevels'
                  description: |
                    A list of AccessLevel resource names that allow resources within
                    the ServicePerimeter to be accessed from the internet.
                    AccessLevels listed must be in the same policy as this
                    ServicePerimeter. Referencing a nonexistent AccessLevel is a
                    syntax error. If no AccessLevel names are listed, resources within
                    the perimeter can only be accessed via GCP calls with request
                    origins within the perimeter. For Service Perimeter Bridge, must
                    be empty.

                    Format: accessPolicies/{policy_id}/accessLevels/{access_level_name}
                  # TODO: (mbang) won't work for arrays yet, uncomment here once they are supported.
                  # (github.com/hashicorp/terraform-plugin-sdk/issues/470)
                  # at_least_one_of:
                  #   - status.0.resources
                  #   - status.0.access_levels
                  #   - status.0.restricted_services
                  item_type: Api::Type::String
                - !ruby/object:Api::Type::Array
                  name: 'restrictedServices'
                  description: |
                    GCP services that are subject to the Service Perimeter
                    restrictions. Must contain a list of services. For example, if
                    `storage.googleapis.com` is specified, access to the storage
                    buckets inside the perimeter must meet the perimeter's access
                    restrictions.
                  # TODO: (mbang) won't work for arrays yet, uncomment here once they are supported.
                  # (github.com/hashicorp/terraform-plugin-sdk/issues/470)
                  # at_least_one_of:
                  #   - status.0.resources
                  #   - status.0.access_levels
                  #   - status.0.restricted_services
                  item_type: Api::Type::String
                - !ruby/object:Api::Type::NestedObject
                  name: 'vpcAccessibleServices'
                  description: |
                    Specifies how APIs are allowed to communicate within the Service
                    Perimeter.
                  properties:
                  - !ruby/object:Api::Type::Boolean
                    name: 'enableRestriction'
                    description: |
                      Whether to restrict API calls within the Service Perimeter to the
                      list of APIs specified in 'allowedServices'.
                  - !ruby/object:Api::Type::Array
                    name: 'allowedServices'
                    description: |
                      The list of APIs usable within the Service Perimeter.
                      Must be empty unless `enableRestriction` is True.
                    item_type: Api::Type::String
                - !ruby/object:Api::Type::Array
                  name: 'ingressPolicies'
                  description: |
                    List of `IngressPolicies` to apply to the perimeter. A perimeter may
                    have multiple `IngressPolicies`, each of which is evaluated
                    separately. Access is granted if any `Ingress Policy` grants it.
                    Must be empty for a perimeter bridge.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::NestedObject                  
                      name: 'ingressFrom'
                      description: |
                        Defines the conditions on the source of a request causing this `IngressPolicy`
                        to apply.                      
                      properties:
                      - !ruby/object:Api::Type::Enum
                        name: 'identityType'
                        description: |
                          Specifies the type of identities that are allowed access from outside the 
                          perimeter. If left unspecified, then members of `identities` field will be 
                          allowed access.
                        values:
                          - :IDENTITY_TYPE_UNSPECIFIED
                          - :ANY_IDENTITY
                          - :ANY_USER_ACCOUNT
                          - :ANY_SERVICE_ACCOUNT
                      - !ruby/object:Api::Type::Array
                        name: 'identities'
                        item_type: Api::Type::String
                        description: |
                          A list of identities that are allowed access through this ingress policy.
                          Should be in the format of email address. The email address should represent 
                          individual user or service account only.
                      - !ruby/object:Api::Type::Array
                        name: 'sources'
                        description: |
                          Sources that this `IngressPolicy` authorizes access from.                       
                        item_type: !ruby/object:Api::Type::NestedObject
                          properties:
                          - !ruby/object:Api::Type::String
                            name: 'accessLevel'
                            description: |
                              An `AccessLevel` resource name that allow resources within the 
                              `ServicePerimeters` to be accessed from the internet. `AccessLevels` listed 
                              must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent
                              `AccessLevel` will cause an error. If no `AccessLevel` names are listed, 
                              resources within the perimeter can only be accessed via Google Cloud calls 
                              with request origins within the perimeter. 
                              Example `accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.` 
                              If * is specified, then all IngressSources will be allowed.
                          - !ruby/object:Api::Type::String
                            name: 'resource'
                            description: |
                              A Google Cloud resource that is allowed to ingress the perimeter. 
                              Requests from these resources will be allowed to access perimeter data. 
                              Currently only projects are allowed. Format `projects/{project_number}` 
                              The project may be in any Google Cloud organization, not just the 
                              organization that the perimeter is defined in. `*` is not allowed, the case 
                              of allowing all Google Cloud resources only is not supported.              
                    - !ruby/object:Api::Type::NestedObject
                      name: 'ingressTo'
                      description: |
                        Defines the conditions on the `ApiOperation` and request destination that cause
                        this `IngressPolicy` to apply.
                      properties:
                      - !ruby/object:Api::Type::Array
                        name: 'resources'
                        item_type: Api::Type::String
                        description: |
                          A list of resources, currently only projects in the form 
                          `projects/<projectnumber>`, protected by this `ServicePerimeter`
                          that are allowed to be accessed by sources defined in the
                          corresponding `IngressFrom`. A request matches if it contains
                          a resource in this list. If `*` is specified for resources,
                          then this `IngressTo` rule will authorize access to all 
                          resources inside the perimeter, provided that the request
                          also matches the `operations` field.
                      - !ruby/object:Api::Type::Array
                        name: 'operations'
                        description: |
                          A list of `ApiOperations` the sources specified in corresponding `IngressFrom` 
                          are allowed to perform in this `ServicePerimeter`.
                        item_type: !ruby/object:Api::Type::NestedObject
                          properties:
                          - !ruby/object:Api::Type::String
                            name: 'serviceName'
                            description: |
                              The name of the API whose methods or permissions the `IngressPolicy` or 
                              `EgressPolicy` want to allow. A single `ApiOperation` with `serviceName` 
                              field set to `*` will allow all methods AND permissions for all services.
                          - !ruby/object:Api::Type::Array
                            name: 'methodSelectors'
                            description: |
                              API methods or permissions to allow. Method or permission must belong to 
                              the service specified by serviceName field. A single `MethodSelector` entry 
                              with `*` specified for the method field will allow all methods AND 
                              permissions for the service specified in `serviceName`.
                            item_type: !ruby/object:Api::Type::NestedObject
                              properties:
                              - !ruby/object:Api::Type::String
                                name: 'method'
                                description: |
                                  Value for method should be a valid method name for the corresponding 
                                  serviceName in `ApiOperation`. If `*` used as value for `method`, then 
                                  ALL methods and permissions are allowed. 
                              - !ruby/object:Api::Type::String
                                name: 'permission'
                                description: |
                                  Value for permission should be a valid Cloud IAM permission for the 
                                  corresponding `serviceName` in `ApiOperation`. 
                - !ruby/object:Api::Type::Array
                  name: 'egressPolicies'
                  description: |
                    List of EgressPolicies to apply to the perimeter. A perimeter may 
                    have multiple EgressPolicies, each of which is evaluated separately.
                    Access is granted if any EgressPolicy grants it. Must be empty for 
                    a perimeter bridge.
                  item_type: !ruby/object:Api::Type::NestedObject
                    properties:
                    - !ruby/object:Api::Type::NestedObject                  
                      name: 'egressFrom'
                      description: |
                        Defines conditions on the source of a request causing this `EgressPolicy` to apply.
                      properties:
                      - !ruby/object:Api::Type::Enum
                        name: 'identityType'
                        description: |
                          Specifies the type of identities that are allowed access to outside the 
                          perimeter. If left unspecified, then members of `identities` field will 
                          be allowed access.
                        values:
                          - :IDENTITY_TYPE_UNSPECIFIED
                          - :ANY_IDENTITY
                          - :ANY_USER_ACCOUNT
                          - :ANY_SERVICE_ACCOUNT
                      - !ruby/object:Api::Type::Array
                        name: 'identities'
                        description: |
                          A list of identities that are allowed access through this `EgressPolicy`. 
                          Should be in the format of email address. The email address should 
                          represent individual user or service account only.
                        item_type: Api::Type::String
                    - !ruby/object:Api::Type::NestedObject                  
                      name: 'egressTo'
                      description: |
                        Defines the conditions on the `ApiOperation` and destination resources that 
                        cause this `EgressPolicy` to apply.
                      properties:
                      - !ruby/object:Api::Type::Array
                        name: 'resources'
                        item_type: Api::Type::String
                        description: |
                          A list of resources, currently only projects in the form 
                          `projects/<projectnumber>`, that match this to stanza. A request matches 
                          if it contains a resource in this list. If * is specified for resources, 
                          then this `EgressTo` rule will authorize access to all resources outside 
                          the perimeter.                  
                      - !ruby/object:Api::Type::Array
                        name: 'operations'
                        description: |
                          A list of `ApiOperations` that this egress rule applies to. A request matches 
                          if it contains an operation/service in this list.
                        item_type: !ruby/object:Api::Type::NestedObject
                          properties:
                          - !ruby/object:Api::Type::String
                            name: 'serviceName'
                            description: |
                              The name of the API whose methods or permissions the `IngressPolicy` or 
                              `EgressPolicy` want to allow. A single `ApiOperation` with serviceName 
                              field set to `*` will allow all methods AND permissions for all services.
                          - !ruby/object:Api::Type::Array
                            name: 'methodSelectors'
                            description: |
                              API methods or permissions to allow. Method or permission must belong 
                              to the service specified by `serviceName` field. A single MethodSelector 
                              entry with `*` specified for the `method` field will allow all methods 
                              AND permissions for the service specified in `serviceName`.
                            item_type: !ruby/object:Api::Type::NestedObject
                              properties:
                              - !ruby/object:Api::Type::String
                                name: 'method'
                                description: |
                                  Value for `method` should be a valid method name for the corresponding 
                                  `serviceName` in `ApiOperation`. If `*` used as value for method, 
                                  then ALL methods and permissions are allowed. 
                              - !ruby/object:Api::Type::String
                                name: 'permission'
                                description: |
                                  Value for permission should be a valid Cloud IAM permission for the 
                                  corresponding `serviceName` in `ApiOperation`. 
            - !ruby/object:Api::Type::Boolean
              name: 'useExplicitDryRunSpec'
              description: |
                Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly exists
                for all Service Perimeters, and that spec is identical to the status for those
                Service Perimeters. When this flag is set, it inhibits the generation of the
                implicit spec, thereby allowing the user to explicitly provide a
                configuration ("spec") to use in a dry-run version of the Service Perimeter.
                This allows the user to test changes to the enforced config ("status") without
                actually enforcing them. This testing is done through analyzing the differences
                between currently enforced and suggested restrictions. useExplicitDryRunSpec must
                bet set to True if any of the fields in the spec are set to non-default values.
  - !ruby/object:Api::Resource
    name: 'ServicePerimeterResource'
    create_url: "{{perimeter_name}}"
    base_url: ""
    self_link: "{{perimeter_name}}"
    create_verb: :PATCH
    delete_verb: :PATCH
    input: true
    update_mask: true
    identity:
      - resource
    nested_query: !ruby/object:Api::Resource::NestedQuery
      modify_by_patch: true
      is_list_of_ids: true
      keys:
        - status
        - resources
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Service Perimeter Quickstart': 'https://cloud.google.com/vpc-service-controls/docs/quickstart'
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/accessPolicies.servicePerimeters'
    description: |
      Allows configuring a single GCP resource that should be inside of a service perimeter.
      This resource is intended to be used in cases where it is not possible to compile a full list
      of projects to include in a `google_access_context_manager_service_perimeter` resource,
      to enable them to be added separately.

      ~> **Note:** If this resource is used alongside a `google_access_context_manager_service_perimeter` resource,
      the service perimeter resource must have a `lifecycle` block with `ignore_changes = [status[0].resources]` so
      they don't fight over which resources should be in the policy.
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'perimeterName'
        resource: 'ServicePerimeter'
        imports: 'name'
        description: |
          The name of the Service Perimeter to add this resource to.
        required: true
        input: true
        url_param_only: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'resource'
        description: |
              A GCP resource that is inside of the service perimeter.
              Currently only projects are allowed.
              Format: projects/{project_number}
        required: true
        input: true
  - !ruby/object:Api::Resource
    name: 'GcpUserAccessBinding'
    base_url: "organizations/{{organization_id}}/gcpUserAccessBindings"
    self_link: "{{name}}"
    update_verb: :PATCH
    update_mask: true
    description: |
      Restricts access to Cloud Console and Google Cloud APIs for a set of users using Context-Aware Access.
    references: !ruby/object:Api::Resource::ReferenceLinks
      api: 'https://cloud.google.com/access-context-manager/docs/reference/rest/v1/organizations.gcpUserAccessBindings'
    parameters:
      # Parent is a path parameter that _cannot_ be read or sent in the request at all.
      # This must be done at the provider level.
      - !ruby/object:Api::Type::String
        name: organizationId
        input: true
        required: true
        url_param_only: true
        description: |
          Required. ID of the parent organization.
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        output: true
        description: |
          Immutable. Assigned by the server during creation. The last segment has an arbitrary length and has only URI unreserved characters (as defined by RFC 3986 Section 2.3). Should not be specified by the client during creation. Example: "organizations/256/gcpUserAccessBindings/b3-BhcX_Ud5N"
      - !ruby/object:Api::Type::String
        name: 'groupKey'
        required: true
        input: true
        description: |
          Required. Immutable. Google Group id whose members are subject to this binding's restrictions. See "id" in the G Suite Directory API's Groups resource. If a group's email address/alias is changed, this resource will continue to point at the changed group. This field does not accept group email addresses or aliases. Example: "01d520gv4vjcrht"
      - !ruby/object:Api::Type::Array
        name: 'accessLevels'
        item_type: Api::Type::String
        required: true
        min_size: 1
        max_size: 1
        description: |
          Required. Access level that a user must have to be granted access. Only one access level is supported, not multiple. This repeated field must have exactly one element. Example: "accessPolicies/9522/accessLevels/device_trusted"
