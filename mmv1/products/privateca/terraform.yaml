# Copyright 2020 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Terraform::Config
overrides: !ruby/object:Overrides::ResourceOverrides
  CertificateAuthority: !ruby/object:Overrides::Terraform::ResourceOverride
    autogen_async: true
    import_format: ["projects/{{project}}/locations/{{location}}/caPools/{{pool}}/certificateAuthorities/{{certificate_authority_id}}"]
    custom_code: !ruby/object:Provider::Terraform::CustomCode
      test_check_destroy: templates/terraform/custom_check_destroy/privateca_certificate_authority.go.erb
    examples:
      - !ruby/object:Provider::Terraform::Examples
        name: "privateca_certificate_authority_basic"
        primary_resource_id: "default"
        vars:
          certificate_authority_id: "my-certificate-authority"
        test_vars_overrides:
          pool: "\"static-ca-pool\""
      - !ruby/object:Provider::Terraform::Examples
        name: "privateca_certificate_authority_cmek"
        primary_resource_id: "default"
        # Multiple IAM bindings on the same key cause non-determinism
        skip_vcr: true
        vars:
          kms_key_name: "projects/keys-project/locations/us-central1/keyRings/key-ring/cryptoKeys/crypto-key"
          certificate_authority_id: "my-certificate-authority"
        test_vars_overrides:
          kms_key_name: 'BootstrapKMSKeyWithPurposeInLocation(t, "ASYMMETRIC_SIGN", "us-central1").CryptoKey.Name'
          pool: "\"static-ca-pool\""
    properties:
      type: !ruby/object:Overrides::Terraform::PropertyOverride
        description: |
          {{description}}
          
          ~> **Note:** For `SUBORDINATE` Certificate Authorities, they need to
          be manually activated (via Cloud Console of `gcloud`) before they can
          issue certificates.
      config.x509Config: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_flatten: 'templates/terraform/custom_flatten/privateca_certificate_509_config.go.erb'
    custom_code: !ruby/object:Provider::Terraform::CustomCode
      decoder: templates/terraform/decoders/treat_deleted_state_as_gone.go.erb
      post_create: templates/terraform/post_create/privateca_authority_enable.go.erb
      pre_delete: templates/terraform/pre_delete/privateca_authority_disable.go.erb
      test_check_destroy: templates/terraform/custom_check_destroy/privateca_certificate_authority.go.erb
  Certificate: !ruby/object:Overrides::Terraform::ResourceOverride
    autogen_async: true
    # This resource is a child resource
    skip_sweeper: true
    description: |
      {{description}}

      ~> **Note:** The Certificate Authority that is referenced by this resource **must** be 
      `tier = "ENTERPRISE"`
    properties:
      config.x509Config: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_flatten: 'templates/terraform/custom_flatten/privateca_certificate_509_config.go.erb'
    examples:
      - !ruby/object:Provider::Terraform::Examples
        name: "privateca_certificate_config"
        primary_resource_id: "default"
        vars:
          certificate_authority_id: "my-certificate-authority" 
          certificate_name: "my-certificate"
        test_env_vars:
          project: :PROJECT_NAME
        test_vars_overrides:
          pool: "\"static-ca-pool\""
      - !ruby/object:Provider::Terraform::Examples
        name: "privateca_certificate_csr"
        primary_resource_id: "default"
        vars:
          certificate_name: "my-certificate"
          certificate_authority_id: "my-certificate-authority"
        test_env_vars:
          project: :PROJECT_NAME
        test_vars_overrides:
          pool: "\"static-ca-pool\""
      - !ruby/object:Provider::Terraform::Examples
        name: "privateca_certificate_no_authority"
        primary_resource_id: "default"
        vars:
          certificate_name: "my-certificate"
          certificate_authority_id: "my-authority"
        test_env_vars:
          project: :PROJECT_NAME
        test_vars_overrides:
          pool: "\"static-ca-pool\""
    custom_code: !ruby/object:Provider::Terraform::CustomCode
      pre_create: templates/terraform/pre_create/privateca_certificate.go.erb
      test_check_destroy: templates/terraform/custom_check_destroy/privateca_certificate.go.erb
  CaPool: !ruby/object:Overrides::Terraform::ResourceOverride
    properties:
      issuancePolicy.baselineValues: !ruby/object:Overrides::Terraform::PropertyOverride
        custom_flatten: 'templates/terraform/custom_flatten/privateca_certificate_509_config.go.erb'
    iam_policy: !ruby/object:Api::Resource::IamPolicy
      allowed_iam_role: 'roles/privateca.certificateManager'
      method_name_separator: ':'
      parent_resource_attribute: ca_pool
      example_config_body: 'templates/terraform/iam/example_config_body/privateca_ca_pool.tf.erb'
    autogen_async: true
    import_format: ["projects/{{project}}/locations/{{location}}/caPools/{{name}}"]
    examples:
      - !ruby/object:Provider::Terraform::Examples
        name: "privateca_capool_basic"
        primary_resource_name: "fmt.Sprintf(\"tf-test-my-pool%s\", context[\"random_suffix\"])"
        primary_resource_id: "default"
        vars:
          name: "my-pool"
      - !ruby/object:Provider::Terraform::Examples
        name: "privateca_capool_all_fields"
        primary_resource_id: "default"
        vars:
          name: "my-pool"

