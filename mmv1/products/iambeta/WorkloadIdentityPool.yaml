# Copyright 2024 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: 'WorkloadIdentityPool'
description: |
  Represents a collection of external workload identities. You can define IAM policies to
  grant these identities access to Google Cloud resources.
references:
  guides:
    'Managing workload identity pools': 'https://cloud.google.com/iam/docs/manage-workload-identity-pools-providers#pools'
    'Configure managed workload identity authentication for Compute Engine': 'https://cloud.google.com/iam/docs/create-managed-workload-identities'
    'Configure managed workload identity authentication for GKE': 'https://cloud.google.com/iam/docs/create-managed-workload-identities-gke'
  api: 'https://cloud.google.com/iam/docs/reference/rest/v1/projects.locations.workloadIdentityPools'
docs:
base_url: 'projects/{{project}}/locations/global/workloadIdentityPools'
self_link: 'projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}'
create_url: 'projects/{{project}}/locations/global/workloadIdentityPools?workloadIdentityPoolId={{workload_identity_pool_id}}'
update_verb: 'PATCH'
update_mask: true
import_format:
  - 'projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}'
timeouts:
  insert_minutes: 20
  update_minutes: 20
  delete_minutes: 20
autogen_async: true
async:
  actions: ['create', 'delete', 'update']
  type: 'OpAsync'
  operation:
    base_url: '{{op_id}}'
  result:
    resource_inside_response: false
iam_policy:
  parent_resource_attribute: 'workload_identity_pool_id'
  method_name_separator: ':'
  fetch_iam_policy_verb: 'POST'
  import_format:
    - 'projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}'
    - '{{workload_identity_pool_id}}'
  allowed_iam_role: 'roles/iam.workloadIdentityPoolViewer'
  iam_conditions_request_type: 'REQUEST_BODY'
  min_version: beta
custom_code:
  constants: 'templates/terraform/constants/iam_workload_identity_pool.go.tmpl'
  decoder: 'templates/terraform/decoders/treat_deleted_state_as_gone.go.tmpl'
  test_check_destroy: 'templates/terraform/custom_check_destroy/iam_workload_identity_pool.go.tmpl'
examples:
  - name: 'iam_workload_identity_pool_basic'
    primary_resource_id: 'example'
    primary_resource_name:
      'fmt.Sprintf("tf-test-example-pool%s", context["random_suffix"])'
    vars:
      workload_identity_pool_id: 'example-pool'
  - name: 'iam_workload_identity_pool_full_federation_only_mode'
    primary_resource_id: 'example'
    primary_resource_name:
      'fmt.Sprintf("tf-test-example-pool%s", context["random_suffix"])'
    vars:
      workload_identity_pool_id: 'example-pool'
    min_version: beta
    external_providers:
      - 'random'
  - name: 'iam_workload_identity_pool_full_trust_domain_mode'
    primary_resource_id: 'example'
    primary_resource_name:
      'fmt.Sprintf("tf-test-example-pool%s", context["random_suffix"])'
    vars:
      workload_identity_pool_id: 'example-pool'
    min_version: beta
parameters:
properties:
  - name: 'workloadIdentityPoolId'
    type: String
    description: |
      The ID to use for the pool, which becomes the final component of the resource name. This
      value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
      `gcp-` is reserved for use by Google, and may not be specified.
    url_param_only: true
    required: true
    immutable: true
    validation:
      function: 'ValidateWorkloadIdentityPoolId'
  - name: 'state'
    type: Enum
    description: |
      The state of the pool.
      * `STATE_UNSPECIFIED`: State unspecified.
      * `ACTIVE`: The pool is active, and may be used in Google Cloud policies.
      * `DELETED`: The pool is soft-deleted. Soft-deleted pools are permanently deleted after
        approximately 30 days. You can restore a soft-deleted pool using
        `UndeleteWorkloadIdentityPool`. You cannot reuse the ID of a soft-deleted pool until it is
        permanently deleted. While a pool is deleted, you cannot use it to exchange tokens, or
        use existing tokens to access resources. If the pool is undeleted, existing tokens grant
        access again.
    output: true
    enum_values:
      - 'STATE_UNSPECIFIED'
      - 'ACTIVE'
      - 'DELETED'
  - name: 'displayName'
    type: String
    description: A display name for the pool. Cannot exceed 32 characters.
  - name: 'description'
    type: String
    description: A description of the pool. Cannot exceed 256 characters.
  - name: 'name'
    type: String
    description: |
      The resource name of the pool as
      `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}`.
    output: true
  - name: 'disabled'
    type: Boolean
    description: |
      Whether the pool is disabled. You cannot use a disabled pool to exchange tokens, or use
      existing tokens to access resources. If the pool is re-enabled, existing tokens grant
      access again.
  - name: mode
    type: Enum
    description: |
      The mode for the pool is operating in. Pools with an unspecified mode will operate as if they
      are in `FEDERATION_ONLY` mode.


      ~> **Note** This field cannot be changed after the Workload Identity Pool is created. While
      `terraform plan` may show an update if you change this field's value, `terraform apply`
      **will fail with an API error** (such as `Error 400: Attempted to update an immutable field.`).
      To specify a different `mode`, please create a new Workload Identity Pool resource.

      * `FEDERATION_ONLY`: Pools can only be used for federating external workload identities into
      Google Cloud. Unless otherwise noted, no structure or format constraints are applied to
      workload identities in a `FEDERATION_ONLY` mode pool, and you may not create any resources
      within the pool besides providers.
      * `TRUST_DOMAIN`: Pools can be used to assign identities to Google Cloud workloads. All
      identities within a `TRUST_DOMAIN` mode pool must consist of a single namespace and individual
      workload identifier. The subject identifier for all identities must conform to the following
      format: `ns/<namespace>/sa/<workload_identifier>`.
      `google_iam_workload_identity_pool_provider`s cannot be created within `TRUST_DOMAIN`
      mode pools.
    min_version: beta
    enum_values:
      - 'FEDERATION_ONLY'
      - 'TRUST_DOMAIN'
  - name: 'inlineCertificateIssuanceConfig'
    type: NestedObject
    description: |
      Represents configuration for generating mutual TLS (mTLS) certificates for the identities
      within this pool. Defines the Certificate Authority (CA) pool resources and configurations
      required for issuance and rotation of mTLS workload certificates.
    min_version: beta
    properties:
      - name: 'caPools'
        type: KeyValuePairs
        description: |
          A required mapping of a cloud region to the CA pool resource located in that region used
          for certificate issuance, adhering to these constraints:

          * **Key format:** A supported cloud region name equivalent to the location identifier in
          the corresponding map entry's value.
          * **Value format:** A valid CA pool resource path format like:
          `projects/{project}/locations/{location}/caPools/{ca_pool}`
          * **Region Matching:** Workloads are ONLY issued certificates from CA pools within the
          same region. Also the CA pool region (in value) must match the workload's region (key).
        required: true
      - name: 'lifetime'
        type: String
        description: |
          Lifetime of the workload certificates issued by the CA pool in seconds. Must be between
          `86400s` (24 hours) to `2592000s` (30 days), ends in the suffix "`s`" (indicating seconds)
          and is preceded by the number of seconds. If unspecified, this will be defaulted to
          `86400s` (24 hours).
        default_from_api: true
      - name: 'rotationWindowPercentage'
        type: Integer
        description: |
          Rotation window percentage indicating when certificate rotation should be initiated based
          on remaining lifetime. Must be between `50` - `80`. If unspecified, this will be defaulted
          to `50`.
        default_from_api: true
      - name: 'keyAlgorithm'
        type: Enum
        description: |
          Key algorithm to use when generating the key pair. This key pair will be used to create
          the certificate. If unspecified, this will default to `ECDSA_P256`.

          * `RSA_2048`: Specifies RSA with a 2048-bit modulus.
          * `RSA_3072`: Specifies RSA with a 3072-bit modulus.
          * `RSA_4096`: Specifies RSA with a 4096-bit modulus.
          * `ECDSA_P256`: Specifies ECDSA with curve P256.
          * `ECDSA_P384`: Specifies ECDSA with curve P384.
        default_from_api: true
        enum_values:
          - 'RSA_2048'
          - 'RSA_3072'
          - 'RSA_4096'
          - 'ECDSA_P256'
          - 'ECDSA_P384'
  - name: 'inlineTrustConfig'
    type: NestedObject
    description: |
      Represents config to add additional trusted trust domains. Defines configuration for extending
      trust to additional trust domains. By establishing trust with another domain, the current
      domain will recognize and accept certificates issued by entities within the trusted domains.
      Note that a trust domain automatically trusts itself, eliminating the need for explicit
      configuration.
    min_version: beta
    properties:
      - name: 'additionalTrustBundles'
        type: Map
        description: |
          Maps specific trust domains (e.g., "example.com") to their corresponding `TrustStore`
          objects, which contain the trusted root certificates for that domain. There can be a
          maximum of `10` trust domain entries in this map.

          Note that a trust domain automatically trusts itself and don't need to be specified here.
          If however, this `WorkloadIdentityPool`'s trust domain contains any trust anchors in the
          `additional_trust_bundles` map, those trust anchors will be *appended to* the Trust Bundle
          automatically derived from your `InlineCertificateIssuanceConfig`'s `ca_pools`.
        key_name: trust_domain
        key_description: |
          The trusted trust domains (e.g., "example.com") to be extended trust to additional trust
          domains to.
        value_type:
          name: trustStore
          type: NestedObject
          description: |
            Trust store that contains trust anchors and optional intermediate CAs used in PKI to
            build trust chain and verify client's identity.
          properties:
            - name: 'trustAnchors'
              type: Array
              description: |
                List of Trust Anchors to be used while performing validation against a given
                `TrustStore`. The incoming end entity's certificate must be chained up to one of the
                trust anchors here.
              required: true
              item_type:
                type: NestedObject
                description: |
                  Represents a root of trust.
                properties:
                  - name: 'pemCertificate'
                    type: String
                    description: |
                      PEM certificate of the PKI used for validation. Must only contain one ca
                      certificate(either root or intermediate cert).
                    required: true
