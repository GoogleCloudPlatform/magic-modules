# Copyright 2024 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Warning: This is a temporary file, and should not be edited directly
---
name: 'WorkloadIdentityPoolProvider'
description: A configuration for an external identity provider.
references:
  guides:
    'Managing workload identity providers': 'https://cloud.google.com/iam/docs/manage-workload-identity-pools-providers#managing_workload_identity_providers'
  api: 'https://cloud.google.com/iam/docs/reference/rest/v1/projects.locations.workloadIdentityPools.providers'
docs:
base_url: 'projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers'
self_link: 'projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers/{{workload_identity_pool_provider_id}}'
create_url: 'projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers?workloadIdentityPoolProviderId={{workload_identity_pool_provider_id}}'
update_verb: 'PATCH'
update_mask: true
import_format:
  - 'projects/{{project}}/locations/global/workloadIdentityPools/{{workload_identity_pool_id}}/providers/{{workload_identity_pool_provider_id}}'
timeouts:
  insert_minutes: 20
  update_minutes: 20
  delete_minutes: 20
autogen_async: true
async:
  actions: ['create', 'delete', 'update']
  type: 'OpAsync'
  operation:
    base_url: '{{op_id}}'
    path: 'name'
    wait_ms: 1000
  result:
    path: 'targetLink'
    resource_inside_response: false
  error:
    path: 'error'
    message: 'message'
custom_code:
  constants: 'templates/terraform/constants/go/iam_workload_identity_pool_provider.go.tmpl'
  decoder: 'templates/terraform/decoders/go/treat_deleted_state_as_gone.go.tmpl'
  test_check_destroy: 'templates/terraform/custom_check_destroy/go/iam_workload_identity_pool_provider.go.tmpl'
examples:
  - name: 'iam_workload_identity_pool_provider_aws_basic'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_aws_full'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_oidc_basic'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_oidc_full'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_saml_basic'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_saml_full'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_oidc_upload_key'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_x509_basic'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
  - name: 'iam_workload_identity_pool_provider_x509_full'
    primary_resource_id: 'example'
    vars:
      workload_identity_pool_id: 'example-pool'
      workload_identity_pool_provider_id: 'example-prvdr'
parameters:
properties:
  - name: 'workloadIdentityPoolId'
    type: String
    description: |
      The ID used for the pool, which is the final component of the pool resource name. This
      value should be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
      `gcp-` is reserved for use by Google, and may not be specified.
    url_param_only: true
    required: true
    immutable: true
  - name: 'workloadIdentityPoolProviderId'
    type: String
    description: |
      The ID for the provider, which becomes the final component of the resource name. This
      value must be 4-32 characters, and may contain the characters [a-z0-9-]. The prefix
      `gcp-` is reserved for use by Google, and may not be specified.
    url_param_only: true
    required: true
    immutable: true
    validation:
      function: 'ValidateWorkloadIdentityPoolProviderId'
  - name: 'state'
    type: Enum
    description: |
      The state of the provider.
      * STATE_UNSPECIFIED: State unspecified.
      * ACTIVE: The provider is active, and may be used to validate authentication credentials.
      * DELETED: The provider is soft-deleted. Soft-deleted providers are permanently deleted
        after approximately 30 days. You can restore a soft-deleted provider using
        UndeleteWorkloadIdentityPoolProvider. You cannot reuse the ID of a soft-deleted provider
        until it is permanently deleted.
    output: true
    enum_values:
      - 'STATE_UNSPECIFIED'
      - 'ACTIVE'
      - 'DELETED'
  - name: 'displayName'
    type: String
    description: A display name for the provider. Cannot exceed 32 characters.
  - name: 'description'
    type: String
    description: A description for the provider. Cannot exceed 256 characters.
  - name: 'name'
    type: String
    description: |
      The resource name of the provider as
      `projects/{project_number}/locations/global/workloadIdentityPools/{workload_identity_pool_id}/providers/{workload_identity_pool_provider_id}`.
    output: true
  - name: 'disabled'
    type: Boolean
    description: |
      Whether the provider is disabled. You cannot use a disabled provider to exchange tokens.
      However, existing tokens still grant access.
  - name: 'attributeMapping'
    type: KeyValuePairs
    description: |
      Maps attributes from authentication credentials issued by an external identity provider
      to Google Cloud attributes, such as `subject` and `segment`.

      Each key must be a string specifying the Google Cloud IAM attribute to map to.

      The following keys are supported:
        * `google.subject`: The principal IAM is authenticating. You can reference this value
          in IAM bindings. This is also the subject that appears in Cloud Logging logs.
          Cannot exceed 127 characters.
        * `google.groups`: Groups the external identity belongs to. You can grant groups
          access to resources using an IAM `principalSet` binding; access applies to all
          members of the group.

      You can also provide custom attributes by specifying `attribute.{custom_attribute}`,
      where `{custom_attribute}` is the name of the custom attribute to be mapped. You can
      define a maximum of 50 custom attributes. The maximum length of a mapped attribute key
      is 100 characters, and the key may only contain the characters [a-z0-9_].

      You can reference these attributes in IAM policies to define fine-grained access for a
      workload to Google Cloud resources. For example:
        * `google.subject`:
          `principal://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/subject/{value}`
        * `google.groups`:
          `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/group/{value}`
        * `attribute.{custom_attribute}`:
          `principalSet://iam.googleapis.com/projects/{project}/locations/{location}/workloadIdentityPools/{pool}/attribute.{custom_attribute}/{value}`

      Each value must be a [Common Expression Language](https://opensource.google/projects/cel)
      function that maps an identity provider credential to the normalized attribute specified
      by the corresponding map key.

      You can use the `assertion` keyword in the expression to access a JSON representation of
      the authentication credential issued by the provider.

      The maximum length of an attribute mapping expression is 2048 characters. When evaluated,
      the total size of all mapped attributes must not exceed 8KB.

      For AWS providers, the following rules apply:
        - If no attribute mapping is defined, the following default mapping applies:
          ```
          {
            "google.subject":"assertion.arn",
            "attribute.aws_role":
              "assertion.arn.contains('assumed-role')"
              " ? assertion.arn.extract('{account_arn}assumed-role/')"
              "   + 'assumed-role/'"
              "   + assertion.arn.extract('assumed-role/{role_name}/')"
              " : assertion.arn",
          }
          ```
        - If any custom attribute mappings are defined, they must include a mapping to the
          `google.subject` attribute.

      For OIDC providers, the following rules apply:
        - Custom attribute mappings must be defined, and must include a mapping to the
          `google.subject` attribute. For example, the following maps the `sub` claim of the
          incoming credential to the `subject` attribute on a Google token.
          ```
          {"google.subject": "assertion.sub"}
          ```
  - name: 'attributeCondition'
    type: String
    description: |
      [A Common Expression Language](https://opensource.google/projects/cel) expression, in
      plain text, to restrict what otherwise valid authentication credentials issued by the
      provider should not be accepted.

      The expression must output a boolean representing whether to allow the federation.

      The following keywords may be referenced in the expressions:
        * `assertion`: JSON representing the authentication credential issued by the provider.
        * `google`: The Google attributes mapped from the assertion in the `attribute_mappings`.
        * `attribute`: The custom attributes mapped from the assertion in the `attribute_mappings`.

      The maximum length of the attribute condition expression is 4096 characters. If
      unspecified, all valid authentication credential are accepted.

      The following example shows how to only allow credentials with a mapped `google.groups`
      value of `admins`:
      ```
      "'admins' in google.groups"
      ```
  - name: 'aws'
    type: NestedObject
    description:
      An Amazon Web Services identity provider. Not compatible with the property
      oidc or saml.
    exactly_one_of:
      - 'aws'
      - 'oidc'
      - 'saml'
      - 'x509'
    properties:
      - name: 'accountId'
        type: String
        description: The AWS account ID.
        required: true
  - name: 'oidc'
    type: NestedObject
    description:
      An OpenId Connect 1.0 identity provider. Not compatible with the property
      aws or saml.
    update_mask_fields:
      - 'oidc.allowed_audiences'
      - 'oidc.issuer_uri'
      - 'oidc.jwks_json'
    exactly_one_of:
      - 'aws'
      - 'oidc'
      - 'saml'
      - 'x509'
    properties:
      - name: 'allowedAudiences'
        type: Array
        description: |
          Acceptable values for the `aud` field (audience) in the OIDC token. Token exchange
          requests are rejected if the token audience does not match one of the configured
          values. Each audience may be at most 256 characters. A maximum of 10 audiences may
          be configured.

          If this list is empty, the OIDC token audience must be equal to the full canonical
          resource name of the WorkloadIdentityPoolProvider, with or without the HTTPS prefix.
          For example:
          ```
          //iam.googleapis.com/projects/<project-number>/locations/<location>/workloadIdentityPools/<pool-id>/providers/<provider-id>
          https://iam.googleapis.com/projects/<project-number>/locations/<location>/workloadIdentityPools/<pool-id>/providers/<provider-id>
          ```
        item_type:
          type: String
      - name: 'issuerUri'
        type: String
        description: The OIDC issuer URL.
        required: true
      - name: 'jwksJson'
        type: String
        description: |
          OIDC JWKs in JSON String format. For details on definition of a
          JWK, see https:tools.ietf.org/html/rfc7517. If not set, then we
          use the `jwks_uri` from the discovery document fetched from the
          .well-known path for the `issuer_uri`. Currently, RSA and EC asymmetric
          keys are supported. The JWK must use following format and include only
          the following fields:
          ```
          {
            "keys": [
              {
                    "kty": "RSA/EC",
                    "alg": "<algorithm>",
                    "use": "sig",
                    "kid": "<key-id>",
                    "n": "",
                    "e": "",
                    "x": "",
                    "y": "",
                    "crv": ""
              }
            ]
          }
          ```
        required: false
  - name: 'saml'
    type: NestedObject
    description:
      An SAML 2.0 identity provider. Not compatible with the property
      oidc or aws.
    exactly_one_of:
      - 'aws'
      - 'oidc'
      - 'saml'
      - 'x509'
    properties:
      - name: 'idpMetadataXml'
        type: String
        description: SAML Identity provider configuration metadata xml doc.
        required: true
  - name: 'x509'
    type: NestedObject
    description: |
      An X.509-type identity provider represents a CA. It is trusted to assert a
      client identity if the client has a certificate that chains up to this CA.
    exactly_one_of:
      - 'aws'
      - 'oidc'
      - 'saml'
      - 'x509'
    properties:
      - name: 'trustStore'
        type: NestedObject
        description: |
          A Trust store, use this trust store as a wrapper to config the trust
          anchor and optional intermediate cas to help build the trust chain for
          the incoming end entity certificate. Follow the x509 guidelines to
          define those PEM encoded certs. Only 1 trust store is currently
          supported.
        required: true
        properties:
          - name: 'trustAnchors'
            type: Array
            description: |
              List of Trust Anchors to be used while performing validation
              against a given TrustStore. The incoming end entity's certificate
              must be chained up to one of the trust anchors here.
            required: true
            item_type:
              type: NestedObject
              properties:
                - name: 'pemCertificate'
                  type: String
                  description: |
                    PEM certificate of the PKI used for validation. Must only contain one
                    ca certificate(either root or intermediate cert).
          - name: 'intermediateCas'
            type: Array
            description: |
              Set of intermediate CA certificates used for building the trust chain to
              trust anchor.
              IMPORTANT: Intermediate CAs are only supported when configuring x509 federation.
            item_type:
              type: NestedObject
              properties:
                - name: 'pemCertificate'
                  type: String
                  description: |
                    PEM certificate of the PKI used for validation. Must only contain one
                    ca certificate(either root or intermediate cert).
