# Copyright 2023 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Resource
name: 'Subscription'
description: |
  A named resource representing the stream of messages from a single,
  specific topic, to be delivered to the subscribing application.
references: !ruby/object:Api::Resource::ReferenceLinks
  guides:
    'Managing Subscriptions': 'https://cloud.google.com/pubsub/docs/admin#managing_subscriptions'
  api: 'https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions'
base_url: projects/{{project}}/subscriptions
create_verb: :PUT
update_verb: :PATCH
update_mask: true
update_url: projects/{{project}}/subscriptions/{{name}}
async: !ruby/object:Provider::Terraform::PollAsync
  check_response_func_existence: transport_tpg.PollCheckForExistence
  actions: ['create']
  suppress_error: true
examples:
  - !ruby/object:Provider::Terraform::Examples
    name: 'pubsub_subscription_push'
    primary_resource_id: 'example'
    vars:
      topic_name: 'example-topic'
      subscription_name: 'example-subscription'
  - !ruby/object:Provider::Terraform::Examples
    name: 'pubsub_subscription_pull'
    primary_resource_id: 'example'
    vars:
      topic_name: 'example-topic'
      subscription_name: 'example-subscription'
  - !ruby/object:Provider::Terraform::Examples
    name: 'pubsub_subscription_dead_letter'
    primary_resource_id: 'example'
    vars:
      topic_name: 'example-topic'
      subscription_name: 'example-subscription'
  - !ruby/object:Provider::Terraform::Examples
    name: 'pubsub_subscription_push_bq'
    primary_resource_id: 'example'
    vars:
      topic_name: 'example-topic'
      subscription_name: 'example-subscription'
      dataset_id: 'example_dataset'
      table_id: 'example_table'
  - !ruby/object:Provider::Terraform::Examples
    name: 'pubsub_subscription_push_bq_table_schema'
    primary_resource_id: 'example'
    vars:
      topic_name: 'example-topic'
      subscription_name: 'example-subscription'
      dataset_id: 'example_dataset'
      table_id: 'example_table'
  - !ruby/object:Provider::Terraform::Examples
    name: 'pubsub_subscription_push_cloudstorage'
    primary_resource_id: 'example'
    vars:
      topic_name: 'example-topic'
      subscription_name: 'example-subscription'
      bucket_name: 'example-bucket'
  - !ruby/object:Provider::Terraform::Examples
    name: 'pubsub_subscription_push_cloudstorage_avro'
    primary_resource_id: 'example'
    vars:
      topic_name: 'example-topic'
      subscription_name: 'example-subscription'
      bucket_name: 'example-bucket'
docs: !ruby/object:Provider::Terraform::Docs
  note: |
    You can retrieve the email of the Google Managed Pub/Sub Service Account used for forwarding
    by using the `google_project_service_identity` resource.
custom_code: !ruby/object:Provider::Terraform::CustomCode
  constants: templates/terraform/constants/subscription.go.erb
  encoder: templates/terraform/encoders/no_send_name.go.erb
  update_encoder: templates/terraform/update_encoder/pubsub_subscription.erb
properties:
  - !ruby/object:Api::Type::String
    name: 'name'
    description: 'Name of the subscription.'
    required: true
    immutable: true
    custom_expand: templates/terraform/custom_expand/shortname_to_url.go.erb
    custom_flatten: templates/terraform/custom_flatten/name_from_self_link.erb
  - !ruby/object:Api::Type::ResourceRef
    name: 'topic'
    resource: 'Topic'
    imports: 'name'
    description: |
      A reference to a Topic resource, of the form projects/{project}/topics/{{name}}
      (as in the id property of a google_pubsub_topic), or just a topic name if
      the topic is in the same project as the subscription.
    required: true
    immutable: true
    diff_suppress_func: 'tpgresource.CompareSelfLinkOrResourceName'
    custom_expand: templates/terraform/custom_expand/computed_subscription_topic.erb
  - !ruby/object:Api::Type::KeyValueLabels
    name: 'labels'
    description: |
      A set of key/value label pairs to assign to this Subscription.
  - !ruby/object:Api::Type::NestedObject
    name: 'bigqueryConfig'
    conflicts:
      - push_config
      - cloud_storage_config
    description: |
      If delivery to BigQuery is used with this subscription, this field is used to configure it.
      Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
      If all three are empty, then the subscriber will pull and ack messages using API methods.
    properties:
      - !ruby/object:Api::Type::String
        name: 'table'
        description: |
          The name of the table to which to write data, of the form {projectId}:{datasetId}.{tableId}
        required: true
      - !ruby/object:Api::Type::Boolean
        name: 'useTopicSchema'
        conflicts:
          - use_table_schema
        description: |
          When true, use the topic's schema as the columns to write to in BigQuery, if it exists.
          Only one of use_topic_schema and use_table_schema can be set.
      - !ruby/object:Api::Type::Boolean
        name: 'useTableSchema'
        conflicts:
          - use_topic_schema
        description: |
          When true, use the BigQuery table's schema as the columns to write to in BigQuery. Messages
          must be published in JSON format. Only one of use_topic_schema and use_table_schema can be set.
      - !ruby/object:Api::Type::Boolean
        name: 'writeMetadata'
        description: |
          When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
          The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
      - !ruby/object:Api::Type::Boolean
        name: 'dropUnknownFields'
        description: |
          When true and use_topic_schema or use_table_schema is true, any fields that are a part of the topic schema or message schema that
          are not part of the BigQuery table schema are dropped when writing to BigQuery. Otherwise, the schemas must be kept in sync
          and any messages with extra fields are not written and remain in the subscription's backlog.
  - !ruby/object:Api::Type::NestedObject
    name: 'cloudStorageConfig'
    conflicts:
      - push_config
      - bigquery_config
    description: |
      If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
      Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
      If all three are empty, then the subscriber will pull and ack messages using API methods.
    properties:
      - !ruby/object:Api::Type::String
        name: 'bucket'
        description: |
          User-provided name for the Cloud Storage bucket. The bucket must be created by the user. The bucket name must be without any prefix like "gs://".
        required: true
      - !ruby/object:Api::Type::String
        name: 'filenamePrefix'
        description: |
          User-provided prefix for Cloud Storage filename.
      - !ruby/object:Api::Type::String
        name: 'filenameSuffix'
        description: |
          User-provided suffix for Cloud Storage filename. Must not end in "/".
      - !ruby/object:Api::Type::String
        name: 'filenameDatetimeFormat'
        description: |
          User-provided format string specifying how to represent datetimes in Cloud Storage filenames.
      - !ruby/object:Api::Type::String
        name: 'maxDuration'
        description: |
          The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
          May not exceed the subscription's acknowledgement deadline.
          A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
        default_value: '300s'
      - !ruby/object:Api::Type::Integer
        name: 'maxBytes'
        description: |
          The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
          The maxBytes limit may be exceeded in cases where messages are larger than the limit.
      - !ruby/object:Api::Type::Enum
        name: 'state'
        description: |
          An output-only field that indicates whether or not the subscription can receive messages.
        output: true
        values:
          - :ACTIVE
          - :PERMISSION_DENIED
          - :NOT_FOUND
      - !ruby/object:Api::Type::NestedObject
        name: 'avroConfig'
        description: |
          If set, message data will be written to Cloud Storage in Avro format.
        properties:
          - !ruby/object:Api::Type::Boolean
            name: 'writeMetadata'
            description: |
              When true, write the subscription name, messageId, publishTime, attributes, and orderingKey as additional fields in the output.
  - !ruby/object:Api::Type::NestedObject
    name: 'pushConfig'
    conflicts:
      - bigquery_config
      - cloud_storage_config
    description: |
      If push delivery is used with this subscription, this field is used to
      configure it. An empty pushConfig signifies that the subscriber will
      pull and ack messages using API methods.
    properties:
      - !ruby/object:Api::Type::NestedObject
        name: 'oidcToken'
        description: |
          If specified, Pub/Sub will generate and attach an OIDC JWT token as
          an Authorization header in the HTTP request for every pushed message.
        properties:
          - !ruby/object:Api::Type::String
            name: 'serviceAccountEmail'
            required: true
            description: |
              Service account email to be used for generating the OIDC token.
              The caller (for subscriptions.create, subscriptions.patch, and
              subscriptions.modifyPushConfig RPCs) must have the
              iam.serviceAccounts.actAs permission for the service account.
          - !ruby/object:Api::Type::String
            name: 'audience'
            description: |
              Audience to be used when generating OIDC token. The audience claim
              identifies the recipients that the JWT is intended for. The audience
              value is a single case-sensitive string. Having multiple values (array)
              for the audience field is not supported. More info about the OIDC JWT
              token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
              Note: if not specified, the Push endpoint URL will be used.
      - !ruby/object:Api::Type::String
        name: 'pushEndpoint'
        description: |
          A URL locating the endpoint to which messages should be pushed.
          For example, a Webhook endpoint might use
          "https://example.com/push".
        required: true
      - !ruby/object:Api::Type::KeyValuePairs
        name: 'attributes'
        description: |
          Endpoint configuration attributes.

          Every endpoint has a set of API supported attributes that can
          be used to control different aspects of the message delivery.

          The currently supported attribute is x-goog-version, which you
          can use to change the format of the pushed message. This
          attribute indicates the version of the data expected by
          the endpoint. This controls the shape of the pushed message
          (i.e., its fields and metadata). The endpoint version is
          based on the version of the Pub/Sub API.

          If not present during the subscriptions.create call,
          it will default to the version of the API used to make
          such call. If not present during a subscriptions.modifyPushConfig
          call, its value will not be changed. subscriptions.get
          calls will always return a valid version, even if the
          subscription was created without this attribute.

          The possible values for this attribute are:

          - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
          - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
        diff_suppress_func: 'tpgresource.IgnoreMissingKeyInMap("x-goog-version")'
      - !ruby/object:Api::Type::NestedObject
        name: 'noWrapper'
        custom_flatten: 'templates/terraform/custom_flatten/pubsub_no_wrapper_write_metadata_flatten.go.erb'
        description: |
          When set, the payload to the push endpoint is not wrapped.Sets the
          `data` field as the HTTP body for delivery.
        properties:
          - !ruby/object:Api::Type::Boolean
            name: 'writeMetadata'
            required: true
            send_empty_value: true
            description: |
              When true, writes the Pub/Sub message metadata to
              `x-goog-pubsub-<KEY>:<VAL>` headers of the HTTP request. Writes the
              Pub/Sub message attributes to `<KEY>:<VAL>` headers of the HTTP request.
  - !ruby/object:Api::Type::Integer
    name: 'ackDeadlineSeconds'
    description: |
      This value is the maximum time after a subscriber receives a message
      before the subscriber should acknowledge the message. After message
      delivery but before the ack deadline expires and before the message is
      acknowledged, it is an outstanding message and will not be delivered
      again during that time (on a best-effort basis).

      For pull subscriptions, this value is used as the initial value for
      the ack deadline. To override this value for a given message, call
      subscriptions.modifyAckDeadline with the corresponding ackId if using
      pull. The minimum custom deadline you can specify is 10 seconds. The
      maximum custom deadline you can specify is 600 seconds (10 minutes).
      If this parameter is 0, a default value of 10 seconds is used.

      For push delivery, this value is also used to set the request timeout
      for the call to the push endpoint.

      If the subscriber never acknowledges the message, the Pub/Sub system
      will eventually redeliver the message.
    default_from_api: true
  - !ruby/object:Api::Type::String
    name: 'messageRetentionDuration'
    default_value: '604800s'
    description: |
      How long to retain unacknowledged messages in the subscription's
      backlog, from the moment a message is published. If
      retain_acked_messages is true, then this also configures the retention
      of acknowledged messages, and thus configures how far back in time a
      subscriptions.seek can be done. Defaults to 7 days. Cannot be more
      than 7 days (`"604800s"`) or less than 10 minutes (`"600s"`).

      A duration in seconds with up to nine fractional digits, terminated
      by 's'. Example: `"600.5s"`.
  - !ruby/object:Api::Type::Boolean
    name: 'retainAckedMessages'
    description: |
      Indicates whether to retain acknowledged messages. If `true`, then
      messages are not expunged from the subscription's backlog, even if
      they are acknowledged, until they fall out of the
      messageRetentionDuration window.
  - !ruby/object:Api::Type::NestedObject
    name: 'expirationPolicy'
    allow_empty_object: true
    send_empty_value: true
    description: |
      A policy that specifies the conditions for this subscription's expiration.
      A subscription is considered active as long as any connected subscriber
      is successfully consuming messages from the subscription or is issuing
      operations on the subscription. If expirationPolicy is not set, a default
      policy with ttl of 31 days will be used.  If it is set but ttl is "", the
      resource never expires.  The minimum allowed value for expirationPolicy.ttl
      is 1 day.
    default_from_api: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'ttl'
        required: true
        description: |
          Specifies the "time-to-live" duration for an associated resource. The
          resource expires if it is not active for a period of ttl.
          If ttl is set to "", the associated resource never expires.
          A duration in seconds with up to nine fractional digits, terminated by 's'.
          Example - "3.5s".
        diff_suppress_func: 'comparePubsubSubscriptionExpirationPolicy'
  - !ruby/object:Api::Type::String
    name: 'filter'
    required: false
    description: |
      The subscription only delivers the messages that match the filter.
      Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
      by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
      you can't modify the filter.
    immutable: true
  - !ruby/object:Api::Type::NestedObject
    name: 'deadLetterPolicy'
    send_empty_value: true
    description: |
      A policy that specifies the conditions for dead lettering messages in
      this subscription. If dead_letter_policy is not set, dead lettering
      is disabled.

      The Cloud Pub/Sub service account associated with this subscription's
      parent project (i.e.,
      service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
      permission to Acknowledge() messages on this subscription.
    properties:
      - !ruby/object:Api::Type::String
        name: 'deadLetterTopic'
        description: |
          The name of the topic to which dead letter messages should be published.
          Format is `projects/{project}/topics/{topic}`.

          The Cloud Pub/Sub service account associated with the enclosing subscription's
          parent project (i.e.,
          service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
          permission to Publish() to this topic.

          The operation will fail if the topic does not exist.
          Users should ensure that there is a subscription attached to this topic
          since messages published to a topic with no subscriptions are lost.
      - !ruby/object:Api::Type::Integer
        name: 'maxDeliveryAttempts'
        description: |
          The maximum number of delivery attempts for any message. The value must be
          between 5 and 100.

          The number of delivery attempts is defined as 1 + (the sum of number of
          NACKs and number of times the acknowledgement deadline has been exceeded for the message).

          A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
          client libraries may automatically extend ack_deadlines.

          This field will be honored on a best effort basis.

          If this parameter is 0, a default value of 5 is used.
  - !ruby/object:Api::Type::NestedObject
    name: 'retryPolicy'
    description: |
      A policy that specifies how Pub/Sub retries message delivery for this subscription.

      If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
      RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message
    properties:
      - !ruby/object:Api::Type::String
        name: 'minimumBackoff'
        description: |
          The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
          A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        default_from_api: true
        diff_suppress_func: 'tpgresource.DurationDiffSuppress'
      - !ruby/object:Api::Type::String
        name: 'maximumBackoff'
        description: |
          The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
          A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
        default_from_api: true
        diff_suppress_func: 'tpgresource.DurationDiffSuppress'
  - !ruby/object:Api::Type::Boolean
    name: 'enableMessageOrdering'
    immutable: true
    description: |
      If `true`, messages published with the same orderingKey in PubsubMessage will be delivered to
      the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
      may be delivered in any order.
  - !ruby/object:Api::Type::Boolean
    name: 'enableExactlyOnceDelivery'
    description: |
      If `true`, Pub/Sub provides the following guarantees for the delivery
      of a message with a given value of messageId on this Subscriptions':

      - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.

      - An acknowledged message will not be resent to a subscriber.

      Note that subscribers may still receive multiple copies of a message when `enable_exactly_once_delivery`
      is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values
