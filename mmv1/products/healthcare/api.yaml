# Copyright 2019 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Api::Product
name: Healthcare
display_name: Cloud Healthcare
versions:
  - !ruby/object:Api::Product::Version
    name: ga
    base_url: https://healthcare.googleapis.com/v1/
  - !ruby/object:Api::Product::Version
    name: beta
    base_url: https://healthcare.googleapis.com/v1beta1/
scopes:
  - https://www.googleapis.com/auth/cloud-platform
apis_required:
  - !ruby/object:Api::Product::ApiReference
    name: Cloud Healthcare API
    url: https://console.cloud.google.com/apis/library/healthcare.googleapis.com/
objects:
  - !ruby/object:Api::Resource
    name: 'Dataset'
    kind: "healthcare#dataset"
    base_url: 'projects/{{project}}/locations/{{location}}/datasets?datasetId={{name}}'
    self_link: 'projects/{{project}}/locations/{{location}}/datasets/{{name}}'
    update_verb: :PATCH
    update_mask: true
    description: |
      A Healthcare `Dataset` is a toplevel logical grouping of `dicomStores`, `fhirStores` and `hl7V2Stores`.
    parameters:
      - !ruby/object:Api::Type::String
        name: 'location'
        description: |
          The location for the Dataset.
        required: true
        input: true
        url_param_only: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          The resource name for the Dataset.
        required: true
        input: true
      - !ruby/object:Api::Type::String
        name: "timeZone"
        description: |
          The default timezone used by this dataset. Must be a either a valid IANA time zone name such as
          "America/New_York" or empty, which defaults to UTC. This is used for parsing times in resources
          (e.g., HL7 messages) where no explicit timezone is specified.
        required: false
      - !ruby/object:Api::Type::Time
        name: 'creationTime'
        description: |
          The time that this resource was created on the server.
          This is in RFC3339 text format.
        required: false
        output: true
      - !ruby/object:Api::Type::String
        name: 'selfLink'
        description: |
          The fully qualified name of this dataset
        output: true
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Creating a dataset':
          'https://cloud.google.com/healthcare/docs/how-tos/datasets'
      api: 'https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets'
  - !ruby/object:Api::Resource
    name: 'DicomStore'
    kind: "healthcare#dicomStore"
    base_url: '{{dataset}}/dicomStores?dicomStoreId={{name}}'
    self_link: '{{dataset}}/dicomStores/{{name}}'
    update_verb: :PATCH
    update_mask: true
    description: |
      A DicomStore is a datastore inside a Healthcare dataset that conforms to the DICOM
      (https://www.dicomstandard.org/about/) standard for Healthcare information exchange
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'dataset'
        description: |
          Identifies the dataset addressed by this request. Must be in the format
          'projects/{project}/locations/{location}/datasets/{dataset}'
        required: true
        input: true
        resource: 'Dataset'
        imports: 'selfLink'
        url_param_only: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          The resource name for the DicomStore.

          ** Changing this property may recreate the Dicom store (removing all data) **
        required: true
        input: true
      - !ruby/object:Api::Type::KeyValuePairs
        name: labels
        required: false
        description: |
          User-supplied key-value pairs used to organize DICOM stores.

          Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
          conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}

          Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
          bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}

          No more than 64 labels can be associated with a given store.

          An object containing a list of "key": value pairs.
          Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

      - !ruby/object:Api::Type::NestedObject
        name: notificationConfig
        required: false
        properties:
          - !ruby/object:Api::Type::String
            name: pubsubTopic
            description: |
              The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
              PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
              It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
              was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
              project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
              Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
            required: true

      - !ruby/object:Api::Type::Time
        name: 'creationTime'
        description: |
          The time that this resource was created on the server.
          This is in RFC3339 text format.
        output: true
      - !ruby/object:Api::Type::String
        name: 'selfLink'
        description: |
          The fully qualified name of this dataset
        output: true
      - !ruby/object:Api::Type::Array
        name: streamConfigs
        required: false
        min_version: beta
        description: |
          To enable streaming to BigQuery, configure the streamConfigs object in your DICOM store.
          streamConfigs is an array, so you can specify multiple BigQuery destinations. You can stream metadata from a single DICOM store to up to five BigQuery tables in a BigQuery dataset.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::NestedObject
              name: bigqueryDestination
              required: true
              description: |
                BigQueryDestination to include a fully qualified BigQuery table URI where DICOM instance metadata will be streamed.
              properties:
                - !ruby/object:Api::Type::String
                  name: tableUri
                  required: true
                  description: |
                    a fully qualified BigQuery table URI where DICOM instance metadata will be streamed.

    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Creating a DICOM store':
          'https://cloud.google.com/healthcare/docs/how-tos/dicom'
      api: 'https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.dicomStores'
  - !ruby/object:Api::Resource
    name: 'FhirStore'
    kind: "healthcare#fhirStore"
    base_url: '{{dataset}}/fhirStores?fhirStoreId={{name}}'
    self_link: '{{dataset}}/fhirStores/{{name}}'
    update_verb: :PATCH
    update_mask: true
    description: |
      A FhirStore is a datastore inside a Healthcare dataset that conforms to the FHIR (https://www.hl7.org/fhir/STU3/)
      standard for Healthcare information exchange
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'dataset'
        description: |
          Identifies the dataset addressed by this request. Must be in the format
          'projects/{project}/locations/{location}/datasets/{dataset}'
        required: true
        input: true
        resource: 'Dataset'
        imports: 'selfLink'
        url_param_only: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          The resource name for the FhirStore.

          ** Changing this property may recreate the FHIR store (removing all data) **
        required: true
        input: true
      # Version is duplicated because it is optional in beta but required in GA.
      - !ruby/object:Api::Type::Enum
        name: version
        description: |
          The FHIR specification version.
        exact_version: beta
        required: false
        input: true
        default_value: :STU3
        values:
          - :DSTU2
          - :STU3
          - :R4
      - !ruby/object:Api::Type::Enum
        name: version
        description: |
          The FHIR specification version.
        exact_version: ga
        required: true
        input: true
        values:
          - :DSTU2
          - :STU3
          - :R4
      - !ruby/object:Api::Type::Boolean
        name: 'enableUpdateCreate'
        description: |
          Whether this FHIR store has the updateCreate capability. This determines if the client can use an Update
          operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through
          the Create operation and attempts to Update a non-existent resource will return errors. Please treat the audit
          logs with appropriate levels of care if client-specified resource IDs contain sensitive data such as patient
          identifiers, those IDs will be part of the FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub
          notifications.
        required: false
      - !ruby/object:Api::Type::Boolean
        name: 'disableReferentialIntegrity'
        description: |
          Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store
          creation. The default value is false, meaning that the API will enforce referential integrity and fail the
          requests that will result in inconsistent state in the FHIR store. When this field is set to true, the API
          will skip referential integrity check. Consequently, operations that rely on references, such as
          Patient.get$everything, will not return all the results if broken references exist.

          ** Changing this property may recreate the FHIR store (removing all data) **
        required: false
        input: true
      - !ruby/object:Api::Type::Boolean
        name: 'disableResourceVersioning'
        description: |
          Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation
          of FHIR store. If set to false, which is the default behavior, all write operations will cause historical
          versions to be recorded automatically. The historical versions can be fetched through the history APIs, but
          cannot be updated. If set to true, no historical versions will be kept. The server will send back errors for
          attempts to read the historical versions.

          ** Changing this property may recreate the FHIR store (removing all data) **
        required: false
        input: true
      - !ruby/object:Api::Type::Boolean
        name: 'enableHistoryImport'
        description: |
          Whether to allow the bulk import API to accept history bundles and directly insert historical resource
          versions into the FHIR store. Importing resource histories creates resource interactions that appear to have
          occurred in the past, which clients may not want to allow. If set to false, history bundles within an import
          will fail with an error.

          ** Changing this property may recreate the FHIR store (removing all data) **

          ** This property can be changed manually in the Google Cloud Healthcare admin console without recreating the FHIR store **
        required: false
        input: true
      - !ruby/object:Api::Type::KeyValuePairs
        name: labels
        required: false
        description: |
          User-supplied key-value pairs used to organize FHIR stores.

          Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
          conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}

          Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
          bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}

          No more than 64 labels can be associated with a given store.

          An object containing a list of "key": value pairs.
          Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

      - !ruby/object:Api::Type::NestedObject
        name: notificationConfig
        required: false
        properties:
          - !ruby/object:Api::Type::String
            name: pubsubTopic
            description: |
              The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
              PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
              It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
              was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
              project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
              Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
            required: true

      - !ruby/object:Api::Type::Time
        name: 'creationTime'
        description: |
          The time that this resource was created on the server.
          This is in RFC3339 text format.
        output: true
      - !ruby/object:Api::Type::String
        name: 'selfLink'
        description: |
          The fully qualified name of this dataset
        output: true
      - !ruby/object:Api::Type::Array
        name: streamConfigs
        description: |-
          A list of streaming configs that configure the destinations of streaming export for every resource mutation in
          this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next
          resource mutation is streamed to the new location in addition to the existing ones. When a location is removed
          from the list, the server stops streaming to that location. Before adding a new config, you must add the required
          bigquery.dataEditor role to your project's Cloud Healthcare Service Agent service account. Some lag (typically on
          the order of dozens of seconds) is expected before the results show up in the streaming destination.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::Array
              name: 'resourceTypes'
              description: |
                Supply a FHIR resource type (such as "Patient" or "Observation"). See
                https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats
                an empty list as an intent to stream all the supported resource types in this FHIR store.
              item_type: Api::Type::String
            - !ruby/object:Api::Type::NestedObject
              name: bigqueryDestination
              required: true
              description: |
                The destination BigQuery structure that contains both the dataset location and corresponding schema config.
                The output is organized in one table per resource type. The server reuses the existing tables (if any) that
                are named after the resource types, e.g. "Patient", "Observation". When there is no existing table for a given
                resource type, the server attempts to create one.
                See the [streaming config reference](https://cloud.google.com/healthcare/docs/reference/rest/v1beta1/projects.locations.datasets.fhirStores#streamconfig) for more details.
              properties:
                - !ruby/object:Api::Type::String
                  name: datasetUri
                  required: true
                  description: |
                    BigQuery URI to a dataset, up to 2000 characters long, in the format bq://projectId.bqDatasetId
                - !ruby/object:Api::Type::NestedObject
                  name: schemaConfig
                  required: true
                  description: |
                    The configuration for the exported BigQuery schema.
                  properties:
                    - !ruby/object:Api::Type::Enum
                      name: schemaType
                      description: |
                        Specifies the output schema type. Only ANALYTICS is supported at this time.
                         * ANALYTICS: Analytics schema defined by the FHIR community.
                          See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
                      default_value: :ANALYTICS
                      values:
                        - :ANALYTICS
                    - !ruby/object:Api::Type::Integer
                      name: recursiveStructureDepth
                      required: true
                      description: |
                        The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
                        resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
                        concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
                        value 2. The maximum depth allowed is 5.
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Creating a FHIR store':
          'https://cloud.google.com/healthcare/docs/how-tos/fhir'
      api: 'https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.fhirStores'
  - !ruby/object:Api::Resource
    name: 'Hl7V2Store'
    kind: "healthcare#hl7V2Store"
    base_url: '{{dataset}}/hl7V2Stores?hl7V2StoreId={{name}}'
    self_link: '{{dataset}}/hl7V2Stores/{{name}}'
    update_verb: :PATCH
    update_mask: true
    description: |
      A Hl7V2Store is a datastore inside a Healthcare dataset that conforms to the FHIR (https://www.hl7.org/hl7V2/STU3/)
      standard for Healthcare information exchange
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: 'dataset'
        description: |
          Identifies the dataset addressed by this request. Must be in the format
          'projects/{project}/locations/{location}/datasets/{dataset}'
        required: true
        input: true
        resource: 'Dataset'
        imports: 'selfLink'
        url_param_only: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          The resource name for the Hl7V2Store.

          ** Changing this property may recreate the Hl7v2 store (removing all data) **
        required: true
        input: true
      - !ruby/object:Api::Type::NestedObject
        name: parserConfig
        required: false
        properties:
          - !ruby/object:Api::Type::Boolean
            name: allowNullHeader
            at_least_one_of:
              - parser_config.0.allow_null_header
              - parser_config.0.segment_terminator
              - parser_config.0.schema
            description: |
              Determines whether messages with no header are allowed.
          - !ruby/object:Api::Type::String
            name: segmentTerminator
            at_least_one_of:
              - parser_config.0.allow_null_header
              - parser_config.0.segment_terminator
              - parser_config.0.schema
            description: |
              Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.

              A base64-encoded string.
          - !ruby/object:Api::Type::String
            name: schema
            at_least_one_of:
              - parser_config.0.allow_null_header
              - parser_config.0.segment_terminator
              - parser_config.0.schema
              - parser_config.0.version
            description: |
              JSON encoded string for schemas used to parse messages in this
              store if schematized parsing is desired.
          - !ruby/object:Api::Type::Enum
            name: version
            description: |
              The version of the unschematized parser to be used when a custom `schema` is not set.
            min_version: beta
            input: true
            default_value: :V1
            values:
              - :V1
              - :V2
      - !ruby/object:Api::Type::KeyValuePairs
        name: labels
        required: false
        description: |
          User-supplied key-value pairs used to organize HL7v2 stores.

          Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
          conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}

          Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
          bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}

          No more than 64 labels can be associated with a given store.

          An object containing a list of "key": value pairs.
          Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
      - !ruby/object:Api::Type::Array
        name: notificationConfigs
        description: |-
          A list of notification configs. Each configuration uses a filter to determine whether to publish a
          message (both Ingest & Create) on the corresponding notification destination. Only the message name
          is sent as part of the notification. Supplied by the client.
        item_type: !ruby/object:Api::Type::NestedObject
          properties:
            - !ruby/object:Api::Type::String
              name: pubsubTopic
              description: |
                The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
                PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
                It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
                was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
                project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
                Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.

                If a notification cannot be published to Cloud Pub/Sub, errors will be logged to Stackdriver
              required: true
            - !ruby/object:Api::Type::String
              name: filter
              description: |
                Restricts notifications sent for messages matching a filter. If this is empty, all messages
                are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings

                Fields/functions available for filtering are:

                * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
                * send_date or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, send_date < "2017-01-02".
                * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
                * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
                * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
                * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
      - !ruby/object:Api::Type::NestedObject
        name: notificationConfig
        removed_message: This field has been replaced by notificationConfigs
        exact_version: ga
        required: false
        properties:
          - !ruby/object:Api::Type::String
            name: pubsubTopic
            description: |
              The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
              PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
              It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
              was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
              project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
              Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
            required: true
      - !ruby/object:Api::Type::NestedObject
        name: notificationConfig
        # This field is duplicated because beta and ga have different behaviors.
        deprecation_message: This field has been replaced by notificationConfigs
        exact_version: beta
        required: false
        properties:
          - !ruby/object:Api::Type::String
            name: pubsubTopic
            description: |
              The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
              PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
              It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
              was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
              project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
              Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
            required: true
      - !ruby/object:Api::Type::Time
        name: 'creationTime'
        description: |
          The time that this resource was created on the server.
          This is in RFC3339 text format.
        output: true
      - !ruby/object:Api::Type::String
        name: 'selfLink'
        description: |
          The fully qualified name of this dataset
        output: true
    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Creating a HL7v2 Store':
          'https://cloud.google.com/healthcare/docs/how-tos/hl7v2'
      api: 'https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.hl7V2Stores'
  - !ruby/object:Api::Resource
    name: 'ConsentStore'
    kind: "healthcare#consentStore"
    base_url: "{{dataset}}/consentStores?consentStoreId={{name}}"
    self_link: "{{dataset}}/consentStores/{{name}}"
    update_verb: :PATCH
    update_mask: true
    description: |
      The Consent Management API is a tool for tracking user consents and the documentation associated with the consents.
    iam_policy: !ruby/object:Api::Resource::IamPolicy
      method_name_separator: ':'
      fetch_iam_policy_verb: :GET
      parent_resource_attribute: 'consent_store_id'
      import_format: ["{{%dataset}}/consentStores/{{name}}", "{{name}}"]
      base_url: "{{%dataset}}/consentStores/{{name}}"
      self_link: "{{%dataset}}/consentStores/{{name}}"
    parameters:
      - !ruby/object:Api::Type::ResourceRef
        name: "dataset"
        description: |
          Identifies the dataset addressed by this request. Must be in the format
          'projects/{project}/locations/{location}/datasets/{dataset}'
        required: true
        input: true
        resource: 'Dataset'
        imports: 'selfLink'
        url_param_only: true
    properties:
      - !ruby/object:Api::Type::String
        name: 'name'
        description: |
          The name of this ConsentStore, for example:
          "consent1"
        required: true
        input: true
        url_param_only: true
      - !ruby/object:Api::Type::String
        name: 'defaultConsentTtl'
        required: false
        description: |
          Default time to live for consents in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents.

          A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
      - !ruby/object:Api::Type::Boolean
        name: 'enableConsentCreateOnUpdate'
        required: false
        description: |
          If true, [consents.patch] [google.cloud.healthcare.v1.consent.UpdateConsent] creates the consent if it does not already exist.
      - !ruby/object:Api::Type::KeyValuePairs
        name: labels
        required: false
        description: |
          User-supplied key-value pairs used to organize Consent stores.

          Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
          conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`

          Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
          bytes, and must conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`

          No more than 64 labels can be associated with a given store.

          An object containing a list of "key": value pairs.
          Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.

    references: !ruby/object:Api::Resource::ReferenceLinks
      guides:
        'Creating a Consent store':
          'https://cloud.google.com/healthcare/docs/how-tos/consent'
      api: 'https://cloud.google.com/healthcare/docs/reference/rest/v1/projects.locations.datasets.consentStores'
