<%
autogen_exception
-%>
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: core.cnrm.cloud.google.com/v1alpha1
kind: ServiceMapping
metadata:
  name: <%= product.name.downcase %>.cnrm.cloud.google.com
  namespace: cnrm-system
spec:
  name: <%= product.name %>
  version: v1beta1
  serviceHostName: <%= product.name.downcase %>.googleapis.com
  resources:
<%
  product.objects.reject { |r| r.exclude || r.not_in_version?(product.version_obj_or_closest(version)) }.each do |object|
    if @config.legacy_name.nil?
     terraform_name = "google_" + (product.name + object.name).underscore
    else
     terraform_name = "google_" + @config.legacy_name + '_' + object.name.underscore
    end
-%>
    - name: <%= terraform_name %>
      kind: <%= "#{product.name}#{object.name}" %>
      autoGenerated: true
<%
      # idTemplate is an import id fed into the provider, which is (slightly)
      # distinct from a Terraform id.
      # Select the first format, which will generally be the long form.
      id_template = import_id_formats_from_resource(object)[0]
      name = guess_metadata_mapping_name(object)
      has_name = !name.nil?
      has_labels = object.all_user_properties.map(&:name).include?("labels")
      is_server_generated = server_generated_name?(name, object) if has_name
      resource_id_value_template = get_resource_id_value_template(id_template, is_server_generated, object)

      iam_policy = object&.iam_policy
      supports_conditions = supports_conditions(iam_policy) if !iam_policy.nil?
      # The type should be `id` when the name is the TF specific output-only id
      # field, or when the generated name field (matches a readonly API field)
      # contains the long form of the name. The former can be detected by the
      # field name, `id`; the latter can be interpreted as "if the idTemplate
      # doesn't contain any slashes(/), then use type 'id'".
      type = id_template.include?("/") ? 'name' : 'id'

      unless iam_policy.nil? || iam_policy.exclude || iam_policy.parent_resource_attribute.nil?
-%>
      iamConfig:
        policyName: <%= "#{terraform_name}_iam_policy" %>
        policyMemberName: <%= "#{terraform_name}_iam_member" %>
        referenceField:
          name: <%= iam_policy.parent_resource_attribute %>
          type: <%= type %>
        supportsConditions: <%= supports_conditions %>
<%-   end -%>
<%  if !id_template.nil? && id_template != "" -%>
      idTemplate: "<%= id_template %>"
<%  end -%>
      idTemplateCanBeUsedToMatchResourceName: false
      resourceAvailableInAssetInventory: false
<%  if has_name && !is_server_generated || has_labels -%>
      metadataMapping:
<%  if has_name && !is_server_generated -%>
        name: <%= name %>
<%  end -%>
<%  if has_labels -%>
        labels: labels
<%  end -%>
<%  end -%>
<%  if is_server_generated -%>
      serverGeneratedIDField: <%= name %>
<%  end -%>
<%  if has_name -%>
      resourceID:
        targetField: <%= name %>
<%  end -%>
<%  if resource_id_value_template != nil -%>
        valueTemplate: "<%= resource_id_value_template %>"
<%  end -%>
<%
    container = get_container(id_template, is_server_generated, object)
    hierarchical_reference = get_hierarchical_reference(container)
-%>
<%  if hierarchical_reference.length == 2 -%>
      hierarchicalReferences:
        - type: <%= hierarchical_reference[0] %>
          key: <%= hierarchical_reference[1] %>
      resourceReferences:
        - tfField: <%= container[1] %>
          key: <%= hierarchical_reference[1] %>
          description: |-
            The <%= hierarchical_reference[0] %> that this resource belongs to.
          gvk:
            kind: <%= hierarchical_reference[0].capitalize %>
            version: v1beta1
            group: resourcemanager.cnrm.cloud.google.com
<%  end -%>
<%-
    references_in_parameters = object.parameters.select { |p| p.is_a?(Api::Type::ResourceRef) }.reject { |p| p.name == 'region' || p.name == 'zone' }
    references = object.all_user_properties.select { |p| p.is_a?(Api::Type::ResourceRef) }.reject { |p| p.name == 'region' || p.name == 'zone' }
    unless references.empty?
-%>
<%  if hierarchical_reference.length != 2 -%>
      resourceReferences:
<%  end -%>
<%-   references.each do |reference| -%>
        - key: <%= reference.name.camelize(:lower) %>Ref
          tfField: <%= reference.name.underscore %>
          gvk:
            kind: <%= "#{product.name}#{reference.resource}" %>
            version: v1beta1
            group: <%= product.name.downcase %>.cnrm.cloud.google.com
          targetField: <%= reference.imports %>
<%  if references_in_parameters.any? {|r| r.name == reference.name } -%>
          parent: true
<%  end -%>
<%  end -%>
<%  end -%>
<%  end -%>
