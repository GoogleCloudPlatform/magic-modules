{{/* The license inside this block applies to this file
  Copyright 2025 Google LLC. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. */ -}}
{{$.CodeHeader TemplatePath}}

package {{ lower $.ProductMetadata.Name }}

import (
{{/* We list all the v2 imports here and unstable imports, because we run 'goimports' to guess the correct
     set of imports, which will never guess the major version correctly. */ -}}
  "github.com/apparentlymart/go-cidr/cidr"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
  "github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
  "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
  "google.golang.org/api/bigtableadmin/v2"
  "google.golang.org/api/googleapi"

  "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/caiasset"
  "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/cai2hcl/converters/utils"
  "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/tpgresource"
  transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/transport"
  "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/verify"
)

{{- $caiProductBaseUrl := $.CaiProductBaseUrl }}
{{- $productBackendName := $.CaiProductBackendName $caiProductBaseUrl }}
{{- $apiVersion := $.CaiApiVersion $productBackendName $caiProductBaseUrl}}

{{if $.CustomCode.Constants -}} 
    {{- $.CustomTemplate $.CustomCode.Constants true -}}
{{- end}}

const {{ $.ResourceName -}}AssetType string = "{{ $productBackendName }}.googleapis.com/{{ $.Name -}}"
const {{ $.ResourceName -}}SchemaName string = "{{ $.TerraformName }}"

type {{ $.ResourceName -}}Converter struct {
	name   string
	schema map[string]*schema.Schema
}

func New{{ $.ResourceName -}}Converter(provider *schema.Provider) models.Converter {
	schema := provider.ResourcesMap[{{ $.ResourceName -}}SchemaName].Schema

	return &{{ $.ResourceName -}}Converter{
		name:   {{ $.ResourceName -}}SchemaName,
		schema: schema,
	}
}

// Convert converts asset to HCL resource blocks.
func (c *{{ $.ResourceName -}}Converter) Convert(asset caiasset.Asset) ([]*models.TerraformResourceBlock, error) {
	var blocks []*models.TerraformResourceBlock
	block, err := c.convertResourceData(asset)
	if err != nil {
		return nil, err
	}
	blocks = append(blocks, block)
	return blocks, nil
}

func (c *{{ $.ResourceName -}}Converter) convertResourceData(asset caiasset.Asset) (*models.TerraformResourceBlock, error) {
	if asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	res := asset.Resource.Data
	config := utils.NewConfig()
	d := &schema.ResourceData{}

	hclData := make(map[string]interface{})

{{ range $prop := $.ReadPropertiesForTgc }}
{{   if $prop.FlattenObject -}}
{{/* TODO */}}
{{-    else -}}
    hclData["{{ underscore $prop.Name -}}"] = flatten{{ if $.NestedQuery -}}Nested{{end}}{{ $.ResourceName -}}{{ camelize $prop.Name "upper" -}}(res["{{ $prop.ApiName -}}"], d, config)
{{-    end}}
{{- end}}

	ctyVal, err := utils.MapToCtyValWithSchema(hclData, c.schema)
	if err != nil {
		return nil, err
	}
	return &models.TerraformResourceBlock{
		Labels: []string{c.name, res["name"].(string)},
		Value:  ctyVal,
	}, nil
}

{{- range $prop := $.ReadPropertiesForTgc }}
    {{ if $prop.IsA "KeyValueLabels" }}
func flatten{{$prop.GetPrefix}}{{$prop.TitlelizeProperty}}(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
  return utils.RemoveTerraformAttributionLabel(v)
}
    {{ else }}
        {{ template "flattenPropertyMethod" $prop -}}
    {{- end }}
{{- end }}