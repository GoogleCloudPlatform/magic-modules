{{/* The license inside this block applies to this file
  Copyright 2025 Google LLC. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. */ -}}
{{$.CodeHeader TemplatePath}}

package {{ lower $.ProductMetadata.Name }}

import (
{{/* We list all the v2 imports here and unstable imports, because we run 'goimports' to guess the correct
     set of imports, which will never guess the major version correctly. */ -}}
	"github.com/apparentlymart/go-cidr/cidr"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
	"google.golang.org/api/bigtableadmin/v2"
	"google.golang.org/api/googleapi"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/cai2hcl/converters/utils"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/cai2hcl/models"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/caiasset"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/tgcresource"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/transport"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v6/pkg/verify"
)

{{- $caiProductBaseUrl := $.CaiProductBaseUrl }}
{{- $productBackendName := $.CaiProductBackendName $caiProductBaseUrl }}

type {{ $.ResourceName -}}Cai2hclConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func New{{ $.ResourceName -}}Cai2hclConverter(provider *schema.Provider) models.Cai2hclConverter {
	schema := provider.ResourcesMap[{{ $.ResourceName -}}SchemaName].Schema

	return &{{ $.ResourceName -}}Cai2hclConverter{
		name:   {{ $.ResourceName -}}SchemaName,
		schema: schema,
	}
}

// Convert converts asset to HCL resource blocks.
func (c *{{ $.ResourceName -}}Cai2hclConverter) Convert(asset caiasset.Asset) ([]*models.TerraformResourceBlock, error) {
	var blocks []*models.TerraformResourceBlock
	block, err := c.convertResourceData(asset)
	if err != nil {
		return nil, err
	}
	blocks = append(blocks, block)
	return blocks, nil
}

func (c *{{ $.ResourceName -}}Cai2hclConverter) convertResourceData(asset caiasset.Asset) (*models.TerraformResourceBlock, error) {
	if asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	var err error
	res := asset.Resource.Data
	config := transport.NewConfig()
	d := &schema.ResourceData{}

	assetNameParts := strings.Split(asset.Name, "/")
	hclBlockName := assetNameParts[len(assetNameParts)-1]

	hclData := make(map[string]interface{})

{{ if $.CustomCode.TgcDecoder -}}
	res, err = resource{{ $.ResourceName -}}TgcDecoder(d, config, res)
	if err != nil {
		return nil, err
	}
{{ end}}

{{ if $.CustomCode.Decoder -}}
	res, err = resource{{ $.ResourceName -}}Decoder(d, config, res)
	if err != nil {
		return nil, err
	}

	if res == nil {
		// Decoding the object has resulted in it being gone. It may be marked deleted.
		return nil, nil
	}
{{ end}}

{{ range $prop := $.ReadPropertiesForTgc }}
	{{ if $prop.FlattenObject -}}
	// Terraform must set the top level schema field, but since this object contains collapsed properties
	// it's difficult to know what the top level should be. Instead we just loop over the map returned from flatten.
	if flattenedProp := flatten{{ if $.NestedQuery -}}Nested{{end}}{{ $.ResourceName -}}{{ camelize $prop.Name "upper"  -}}(res["{{ $prop.ApiName -}}"], d, config); flattenedProp != nil {
		flattenedPropSlice, ok := flattenedProp.([]interface{})
		if !ok || len(flattenedPropSlice) == 0 {
			return nil, fmt.Errorf("unexpected type returned from flattener: %T", flattenedProp)
		}
		flattedPropMap, ok := flattenedPropSlice[0].(map[string]interface{})
		if !ok || len(flattedPropMap) == 0 {
			return nil, fmt.Errorf("unexpected type returned from flattener: %T", flattenedPropSlice)
		}
		for k, v := range flattedPropMap {
			hclData[k] = v
		}
	}
	{{- else -}}
	hclData["{{ underscore $prop.Name -}}"] = flatten{{ if $.NestedQuery -}}Nested{{end}}{{ $.ResourceName -}}{{ camelize $prop.Name "upper" -}}(res["{{ $prop.ApiName -}}"], d, config)
	{{- end}}
{{- end}}

	ctyVal, err := utils.MapToCtyValWithSchema(hclData, c.schema)
	if err != nil {
		return nil, err
	}
	return &models.TerraformResourceBlock{
		Labels: []string{c.name, hclBlockName},
		Value:  ctyVal,
	}, nil
}

{{ range $prop := $.ReadPropertiesForTgc }}
{{- template "flattenTgcPropertyMethod" $prop -}}
{{- end }}

{{- if $.CustomCode.TgcDecoder }}
func resource{{ $.ResourceName -}}TgcDecoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
	{{ $.CustomTemplate $.CustomCode.TgcDecoder false -}}
}
{{- end }}

{{- if $.CustomCode.Decoder }}
func resource{{ $.ResourceName -}}Decoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
	{{ $.CustomTemplate $.CustomCode.Decoder false -}}
}
{{- end }}
