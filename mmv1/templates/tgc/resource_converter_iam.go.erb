<%- # the license inside this block applies to this file
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>

<%= lines(autogen_notice(:go, pwd)) -%>

<%
  resource_name = product_ns + object.name
  product_backend_name=@base_url.split('://')[1].split('.googleapis.com')[0]

  resource_uri = object.iam_policy.base_url || object.self_link_uri
  parent_resource_name = object.iam_policy.parent_resource_attribute || object.name.underscore
  resource_params = extract_identifiers(resource_uri.gsub('{{name}}', "{{#{parent_resource_name}}}"))
  resource_params.delete('project')

  import_format = object.iam_policy.import_format || object.import_format
  if import_format.nil? || import_format.empty?
    asset_name_template = '//' + product_backend_name.downcase + '.googleapis.com/' + (object.cai_base_url || object.self_link || object.base_url) + '/{{' + parent_resource_name + '}}'
  else
    asset_name_template = '//' + product_backend_name.downcase + '.googleapis.com/' + import_format[0].gsub('{{name}}', "{{#{parent_resource_name}}}").gsub('%', '')
  end
-%>

package <%= product_ns.downcase -%>

import (
  "fmt"

  "github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
  "github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
  transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const <%= resource_name -%>IAMAssetType string = "<%= product_backend_name.downcase -%>.googleapis.com/<%= object.name -%>"

func ResourceConverter<%= resource_name -%>IamPolicy() cai.ResourceConverter {
    return cai.ResourceConverter{
        AssetType: <%= resource_name -%>IAMAssetType,
        Convert: Get<%= resource_name -%>IamPolicyCaiObject,
        MergeCreateUpdate: Merge<%= resource_name -%>IamPolicy,
    }
}

func ResourceConverter<%= resource_name -%>IamBinding() cai.ResourceConverter {
    return cai.ResourceConverter{
        AssetType: <%= resource_name -%>IAMAssetType,
        Convert: Get<%= resource_name -%>IamBindingCaiObject,
        FetchFullResource: Fetch<%= resource_name -%>IamPolicy,
        MergeCreateUpdate: Merge<%= resource_name -%>IamBinding,
        MergeDelete: Merge<%= resource_name -%>IamBindingDelete,
    }
}

func ResourceConverter<%= resource_name -%>IamMember() cai.ResourceConverter {
    return cai.ResourceConverter{
        AssetType: <%= resource_name -%>IAMAssetType,
        Convert: Get<%= resource_name -%>IamMemberCaiObject,
        FetchFullResource: Fetch<%= resource_name -%>IamPolicy,
        MergeCreateUpdate: Merge<%= resource_name -%>IamMember,
        MergeDelete: Merge<%= resource_name -%>IamMemberDelete,
    }
}

func Get<%= resource_name -%>IamPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return new<%= resource_name -%>IamAsset(d, config, cai.ExpandIamPolicyBindings)
}

func Get<%= resource_name -%>IamBindingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return new<%= resource_name -%>IamAsset(d, config, cai.ExpandIamRoleBindings)
}

func Get<%= resource_name -%>IamMemberCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return new<%= resource_name -%>IamAsset(d, config, cai.ExpandIamMemberBindings)
}

func Merge<%= resource_name -%>IamPolicy(existing, incoming cai.Asset) cai.Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func Merge<%= resource_name -%>IamBinding(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAuthoritativeBindings)
}

func Merge<%= resource_name -%>IamBindingDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAuthoritativeBindings)
}

func Merge<%= resource_name -%>IamMember(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAdditiveBindings)
}

func Merge<%= resource_name -%>IamMemberDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAdditiveBindings)
}

func new<%= resource_name -%>IamAsset(
	d tpgresource.TerraformResourceData,
	config *transport_tpg.Config,
	expandBindings func(d tpgresource.TerraformResourceData) ([]cai.IAMBinding, error),
) ([]cai.Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []cai.Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := cai.AssetName(d, config, "<%= asset_name_template -%>")
	if err != nil {
		return []cai.Asset{}, err
	}

	return []cai.Asset{{
		Name: name,
		Type: <%= resource_name -%>IAMAssetType,
		IAMPolicy: &cai.IAMPolicy{
			Bindings: bindings,
		},
	}}, nil
}

func Fetch<%= resource_name -%>IamPolicy(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (cai.Asset, error) {
	// Check if the identity field returns a value
  <% resource_params.each do |param| -%>
  if _, ok := d.GetOk("<%= param.underscore -%>"); !ok {
    return cai.Asset{}, cai.ErrEmptyIdentityField
  }
  <% end # resource_params.each -%>


	return cai.FetchIamPolicy(
		<%= resource_name -%>IamUpdaterProducer,
		d,
		config,
		"<%= asset_name_template -%>",
		<%= resource_name -%>IAMAssetType,
	)
}
