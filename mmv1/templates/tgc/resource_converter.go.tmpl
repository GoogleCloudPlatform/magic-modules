{{/* The license inside this block applies to this file
  Copyright 2024 Google LLC. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. */ -}}
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package {{ lower $.ProductMetadata.Name }}

import (
{{/* We list all the v2 imports here and unstable imports, because we run 'goimports' to guess the correct
     set of imports, which will never guess the major version correctly. */ -}}
  "github.com/apparentlymart/go-cidr/cidr"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/id"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
  "github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
  "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
  "google.golang.org/api/bigtableadmin/v2"
  "google.golang.org/api/googleapi"

  "github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
  "github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
  transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
  "github.com/hashicorp/terraform-provider-google-beta/google-beta/verify"
)

{{- $caiProductBaseUrl := $.CaiProductBaseUrl }}
{{- $productBackendName := $.CaiProductBackendName $caiProductBaseUrl }}
{{- $apiVersion := $.CaiApiVersion $productBackendName $caiProductBaseUrl}}

{{if $.CustomCode.Constants -}} 
    {{- $.CustomTemplate $.CustomCode.Constants true -}}
{{- end}}

const {{ $.ResourceName -}}AssetType string = "{{ $productBackendName }}.googleapis.com/{{ $.Name -}}"

func ResourceConverter{{ $.ResourceName -}}() cai.ResourceConverter {
    return cai.ResourceConverter{
        AssetType: {{ $.ResourceName -}}AssetType,
        Convert: Get{{ $.ResourceName -}}CaiObject,
    }
}

func Get{{ $.ResourceName -}}CaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
    name, err := cai.AssetName(d, config, "{{ $.CaiAssetNameTemplate $productBackendName }}")
    if err != nil {
        return []cai.Asset{}, err
    }
    if obj, err := Get{{ $.ResourceName -}}ApiObject(d, config); err == nil {
        return []cai.Asset{{"{{"}}
            Name: name,
            Type: {{ $.ResourceName -}}AssetType,
            Resource: &cai.AssetResource{
                Version: "{{ $apiVersion }}",
                DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{ $productBackendName }}/{{ $apiVersion }}/rest",
                DiscoveryName: "{{ $.Name }}",
                Data: obj,
            },
        {{"}}"}}, nil
    } else {
        return []cai.Asset{}, err
    }
}

func Get{{ $.ResourceName -}}ApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
    obj := make(map[string]interface{})
{{- range $prop := $.SettableProperties }}
{{- if $prop.FlattenObject }}
    {{ $prop.ApiName -}}Prop, err := expand{{ $.ResourceName -}}{{$prop.TitlelizeProperty}}(nil, d, config)
{{- else }}
    {{ $prop.ApiName -}}Prop, err := expand{{ $.ResourceName -}}{{$prop.TitlelizeProperty}}(d.Get("{{underscore $prop.Name}}"), d, config)
{{- end}}
    if err != nil {
        return nil, err
{{- if not $prop.SendEmptyValue }}
    } else if v, ok := d.GetOkExists("{{underscore $prop.Name}}"); !tpgresource.IsEmptyValue(reflect.ValueOf({{ $prop.ApiName -}}Prop)) && (ok || !reflect.DeepEqual(v, {{ $prop.ApiName -}}Prop)) {
{{- else }}
    } else if v, ok := d.GetOkExists("{{underscore $prop.Name}}"); ok || !reflect.DeepEqual(v, {{ $prop.ApiName -}}Prop) {
{{- end }}
        obj["{{ $prop.ApiName -}}"] = {{ $prop.ApiName -}}Prop
    }
{{- end}}

{{ if $.CustomCode.Encoder -}}
    return resource{{ $.ResourceName -}}Encoder(d, config, obj)
{{- else }}
    return obj, nil
{{- end}}
}

{{if $.CustomCode.Encoder -}}
func resource{{ $.ResourceName -}}Encoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
{{ $.CustomTemplate $.CustomCode.Encoder false -}}
}
{{- end}}

{{ range $prop := $.SettableProperties }}
    {{- template "expandPropertyMethod" $prop -}}
{{- end}}