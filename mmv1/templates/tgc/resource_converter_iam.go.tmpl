{{/* The license inside this block applies to this file
  Copyright 2024 Google LLC. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. */ -}}
// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

{{- $productBackendName := $.CaiProductBackendName $.CaiProductBaseUrl }}
{{- $assetNameTemplate := $.CaiIamAssetNameTemplate $productBackendName }}

package {{ lower $.ProductMetadata.Name }}

import (
  "fmt"

  "github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
  "github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
  transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Provide a separate asset type constant so we don't have to worry about name conflicts between IAM and non-IAM converter files
const {{ $.ResourceName -}}IAMAssetType string = "{{ $productBackendName }}.googleapis.com/{{$.Name}}"

func ResourceConverter{{ $.ResourceName -}}IamPolicy() cai.ResourceConverter {
    return cai.ResourceConverter{
        AssetType: {{ $.ResourceName -}}IAMAssetType,
        Convert: Get{{ $.ResourceName -}}IamPolicyCaiObject,
        MergeCreateUpdate: Merge{{ $.ResourceName -}}IamPolicy,
    }
}

func ResourceConverter{{ $.ResourceName -}}IamBinding() cai.ResourceConverter {
    return cai.ResourceConverter{
        AssetType: {{ $.ResourceName -}}IAMAssetType,
        Convert: Get{{ $.ResourceName -}}IamBindingCaiObject,
        FetchFullResource: Fetch{{ $.ResourceName -}}IamPolicy,
        MergeCreateUpdate: Merge{{ $.ResourceName -}}IamBinding,
        MergeDelete: Merge{{ $.ResourceName -}}IamBindingDelete,
    }
}

func ResourceConverter{{ $.ResourceName -}}IamMember() cai.ResourceConverter {
    return cai.ResourceConverter{
        AssetType: {{ $.ResourceName -}}IAMAssetType,
        Convert: Get{{ $.ResourceName -}}IamMemberCaiObject,
        FetchFullResource: Fetch{{ $.ResourceName -}}IamPolicy,
        MergeCreateUpdate: Merge{{ $.ResourceName -}}IamMember,
        MergeDelete: Merge{{ $.ResourceName -}}IamMemberDelete,
    }
}

func Get{{ $.ResourceName -}}IamPolicyCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return new{{ $.ResourceName -}}IamAsset(d, config, cai.ExpandIamPolicyBindings)
}

func Get{{ $.ResourceName -}}IamBindingCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return new{{ $.ResourceName -}}IamAsset(d, config, cai.ExpandIamRoleBindings)
}

func Get{{ $.ResourceName -}}IamMemberCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	return new{{ $.ResourceName -}}IamAsset(d, config, cai.ExpandIamMemberBindings)
}

func Merge{{ $.ResourceName -}}IamPolicy(existing, incoming cai.Asset) cai.Asset {
	existing.IAMPolicy = incoming.IAMPolicy
	return existing
}

func Merge{{ $.ResourceName -}}IamBinding(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAuthoritativeBindings)
}

func Merge{{ $.ResourceName -}}IamBindingDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAuthoritativeBindings)
}

func Merge{{ $.ResourceName -}}IamMember(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeIamAssets(existing, incoming, cai.MergeAdditiveBindings)
}

func Merge{{ $.ResourceName -}}IamMemberDelete(existing, incoming cai.Asset) cai.Asset {
	return cai.MergeDeleteIamAssets(existing, incoming, cai.MergeDeleteAdditiveBindings)
}

func new{{ $.ResourceName -}}IamAsset(
	d tpgresource.TerraformResourceData,
	config *transport_tpg.Config,
	expandBindings func(d tpgresource.TerraformResourceData) ([]cai.IAMBinding, error),
) ([]cai.Asset, error) {
	bindings, err := expandBindings(d)
	if err != nil {
		return []cai.Asset{}, fmt.Errorf("expanding bindings: %v", err)
	}

	name, err := cai.AssetName(d, config, "{{ $assetNameTemplate }}")
	if err != nil {
		return []cai.Asset{}, err
	}

	return []cai.Asset{{"{{"}}
		Name: name,
		Type: {{ $.ResourceName -}}IAMAssetType,
		IAMPolicy: &cai.IAMPolicy{
			Bindings: bindings,
		},
	{{"}}"}}, nil
}

func Fetch{{ $.ResourceName -}}IamPolicy(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (cai.Asset, error) {
	// Check if the identity field returns a value
  {{- range $param := $.CaiIamResourceParams }}
  if _, ok := d.GetOk("{{ $param }}"); !ok {
    return cai.Asset{}, cai.ErrEmptyIdentityField
  }
  {{- end}}

	return cai.FetchIamPolicy(
		{{ $.ResourceName -}}IamUpdaterProducer,
		d,
		config,
		"{{ $assetNameTemplate }}",
		{{ $.ResourceName -}}IAMAssetType,
	)
}
