<%= lines(autogen_notice(:go, pwd)) -%>

package test

import (
  "io/ioutil"
  "log"
  "os"
  "path"
  "testing"
)
<%

resource_name = object.__product.name  + object.name
tf_product = (object.__product.legacy_name || object.__product.name ).underscore
tf_resource = object.name.underscore
terraform_name = object.legacy_name || "google_#{tf_product}_#{tf_resource}"
-%>
<%
# @api.version_obj_or_closest(version) is slightly wrong; we want the _object_ version or the generation version.
# Ultimately this will not matter though, since the API default should always be less than the object default.
object.examples
  .reject(&:skip_test)
  .reject { |e| @api.version_obj_or_closest(version) < @api.version_obj_or_closest(e.min_version) }
  .each do |example|

  # {Compute}{Address}_{addressBasic}
    test_slug = "#{object.resource_name}_#{example.name.camelize(:lower)}Example"

    ignore_read = object.all_user_properties
      .select{|p| p.url_param_only || p.ignore_read || p.is_a?(Api::Type::ResourceRef) }
      .map { |p| p.name.underscore }
      .concat(example.ignore_read_extra)

    # Use explicit version for the example if given.
    # Otherwise, use object version.
    example_version = example.min_version || object.min_version.name
    test_body = example.config_test(pwd)
    next if test_body =~ /data.*".*".*".*".*\{/
-%>

<%-
["offline", "online"]
    .each do |test_type|

    is_offline = test_type == "offline" ? "true" : "false"

-%>

func TestAcc<%= test_slug -%>_generated_<%= test_type -%>(t *testing.T) {
  testSlug := "<%= test_slug -%>_<%= test_type -%>"
  offline := <%= is_offline %>
  testAcc<%= test_slug -%>_shared(t, testSlug, offline)
}
<%- end %>

func testAcc<%= test_slug -%>_shared(t *testing.T, testSlug string, offline bool) {
  if testing.Short() {
    t.Skip("skipping integration test in short mode.")
    return
  }

  t.Parallel()
  context := map[string]interface{} {
<%= lines(indent(compile(pwd + '/templates/terraform/env_var_context.go.erb'), 4)) -%>
  <% unless example.test_vars_overrides.nil? -%>
  <% example.test_vars_overrides.each do |var_name, override| -%>
      "<%= var_name %>": <%= override %>,
  <% end -%>
  <% end -%>
      "random_suffix": "meepmerp", // true randomization isn't needed for validator
  }

  terraformConfig := getTestPrefix() + testAcc<%= test_slug -%>(context)
  dir, err := ioutil.TempDir(tmpDir, "terraform")
  if err != nil {
    log.Fatal(err)
  }
  defer os.RemoveAll(dir)

  dstFile := path.Join(dir, "main.tf")
  err = os.WriteFile(dstFile, []byte(terraformConfig), 0666)
  if err != nil {
    t.Fatalf("error while writing to file %s, error %v", dstFile, err)
  }

  terraformWorkflow(t, dir, testSlug)
  if offline && shouldOutputGeneratedFiles() {
    generateTFVconvertedAsset(t, dir, testSlug)
    return
  }

  // need to have comparison.. perhaps test vs checked in code
  // testConvertCommand(t, dir, c.name, offline, c.compareConvertOutput)

  testValidateCommandGeneric(t, dir, testSlug, offline, true)
}

func testAcc<%= test_slug -%>(context map[string]interface{}) string {
<%= test_body -%>
}
<%- end %>
