func flatten{{$.GetPrefix}}{{$.TitlelizeProperty}}(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}) {
	if v == nil {
		return v
	}
	indexConfig := v.(map[string]interface{})

	usesAncestorConfig := false
	if indexConfig["usesAncestorConfig"] != nil {
		usesAncestorConfig = indexConfig["usesAncestorConfig"].(bool)
	}

	if usesAncestorConfig {
		// The intent when uses_ancestor_config is no config.
		return []interface{}{}
	}

	if indexConfig["indexes"] == nil {
		// No indexes, return an existing, but empty index config.
		return [1]interface{}{nil}
	}

	// For Single field indexes, we put the field configuration on the index to avoid forced nesting.
	l := indexConfig["indexes"].([]interface{})
	transformed := make(map[string]interface{})
	transformedIndexes := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		fields := original["fields"].([]interface{})
		sfi := fields[0].(map[string]interface{})
		transformedIndexes = append(transformedIndexes, map[string]interface{}{
			"query_scope":  original["queryScope"],
			"order":        sfi["order"],
			"array_config": sfi["arrayConfig"],
		})
	}
	transformed["indexes"] = transformedIndexes
	return []interface{}{transformed}
}
