{{/*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}
func flatten{{$.GetPrefix}}{{$.TitlelizeProperty}}(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// helper: always return []interface{}{map} with the safest value
	safeTransformed := func(val interface{}) []interface{} {
		m := make(map[string]interface{})
		if val != nil {
			m["secret_data"] = val
		}
		return []interface{}{m}
	}

	// write-only: during read, resolve diff with empty object
	if _, ok := d.GetOkExists("secret_data_wo_version"); ok {
		return safeTransformed(nil)
	}

	// if "enabled" does not exist or is false, preserve what we already have in the state
	if v, ok := d.GetOk("enabled"); !ok {
		return safeTransformed(d.Get("secret_data"))
	} else if enabled, _ := v.(bool); !enabled {
		return safeTransformed(d.Get("secret_data"))
	}

	// build access URL; if it fails, preserve state
	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}SecretManagerBasePath{{"}}"}}{{"{{"}}name{{"}}"}}:access")
	if err != nil {
		return safeTransformed(d.Get("secret_data"))
	}

	// safely extract project
	nameStr, _ := d.Get("name").(string)
	parts := strings.Split(nameStr, "/")
	if len(parts) < 2 {
		return safeTransformed(d.Get("secret_data"))
	}
	project := parts[1]

	ua, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return safeTransformed(d.Get("secret_data"))
	}

	accessRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   project,
		RawURL:    url,
		UserAgent: ua,
	})
	if err != nil {
		return safeTransformed(d.Get("secret_data"))
	}

	// safely fetch payload.data
	var dataB64 string
	if payloadAny, ok := accessRes["payload"]; ok {
		if payloadMap, ok := payloadAny.(map[string]interface{}); ok {
			if s, ok := payloadMap["data"].(string); ok {
				dataB64 = s
			}
		}
	}
	if dataB64 == "" {
		return safeTransformed(d.Get("secret_data"))
	}

	// decide whether to keep pure base64 or decode it
	isB64, _ := d.Get("is_secret_data_base64").(bool)
	if isB64 {
		return safeTransformed(dataB64)
	}

	decoded, decErr := base64.StdEncoding.DecodeString(dataB64)
	if decErr != nil {
		return safeTransformed(d.Get("secret_data"))
	}
	return safeTransformed(string(decoded))
}
