func flattenDialogflowCXPlaybookHandlers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for index, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"event_handler":     flattenDialogflowCXPlaybookHandlersEventHandler(original["eventHandler"], d, config, index),
			"lifecycle_handler": flattenDialogflowCXPlaybookHandlersLifecycleHandler(original["lifecycleHandler"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandler(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["event"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerEvent(original["event"], d, config, index)
	transformed["condition"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerCondition(original["condition"], d, config, index)
	transformed["fulfillment"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillment(original["fulfillment"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerEvent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["messages"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessages(original["messages"], d, config, index)
	transformed["tag"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentTag(original["tag"], d, config, index)
	transformed["webhook"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentWebhook(original["webhook"], d, config, index)
	transformed["return_partial_responses"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentReturnPartialResponses(original["returnPartialResponses"], d, config, index)
	transformed["set_parameter_actions"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentSetParameterActions(original["setParameterActions"], d, config, index)
	transformed["conditional_cases"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCases(original["conditionalCases"], d, config, index)
	transformed["advanced_settings"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettings(original["advancedSettings"], d, config, index)
	transformed["enable_generative_fallback"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentEnableGenerativeFallback(original["enableGenerativeFallback"], d, config, index)
	transformed["generators"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGenerators(original["generators"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessages(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"response_type":           flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesResponseType(original["responseType"], d, config, index),
			"channel":                 flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesChannel(original["channel"], d, config, index),
			"play_audio":              flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPlayAudio(original["playAudio"], d, config, index),
			"mixed_audio":             flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudio(original["mixedAudio"], d, config, index),
			"telephony_transfer_call": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCall(original["telephonyTransferCall"], d, config, index),
			"knowledge_info_card":     flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesKnowledgeInfoCard(original["knowledgeInfoCard"], d, config, index),
			"tool_call":               flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCall(original["toolCall"], d, config, index),
			"text":                    flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesText(original["text"], d, config, index),
			"payload":                 flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPayload(original["payload"], d, config, index),
			"conversation_success":    flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesConversationSuccess(original["conversationSuccess"], d, config, index),
			"output_audio_text":       flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioText(original["outputAudioText"], d, config, index),
			"live_agent_handoff":      flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesLiveAgentHandoff(original["liveAgentHandoff"], d, config, index),
			"end_interaction":         flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesEndInteraction(original["endInteraction"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesResponseType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesChannel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPlayAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_uri"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPlayAudioAudioUri(original["audioUri"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["segments"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegments(original["segments"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"audio":                       flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegmentsAudio(original["audio"], d, config, index),
			"uri":                         flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegmentsUri(original["uri"], d, config, index),
			"allow_playback_interruption": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegmentsAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegmentsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["phone_number"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phoneNumber"], d, config, index)
	transformed["sip_uri"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCallSipUri(original["sipUri"], d, config, index)
	transformed["use_originating_trunk"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCallUseOriginatingTrunk(original["useOriginatingTrunk"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCallSipUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTelephonyTransferCallUseOriginatingTrunk(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesKnowledgeInfoCard(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["maximum_snippets"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesKnowledgeInfoCardMaximumSnippets(original["maximumSnippets"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesKnowledgeInfoCardMaximumSnippets(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["input_parameters"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCallInputParameters(original["inputParameters"], d, config, index)
	transformed["tool"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCallTool(original["tool"], d, config, index)
	transformed["action"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCallAction(original["action"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCallInputParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCallTool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesToolCallAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTextText(original["text"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesPayload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesConversationSuccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioTextText(original["text"], d, config, index)
	transformed["ssml"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesLiveAgentHandoff(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentMessagesEndInteraction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentWebhook(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentReturnPartialResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentSetParameterActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"parameter": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentSetParameterActionsParameter(original["parameter"], d, config, index),
			"value":     flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentSetParameterActionsValue(original["value"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentSetParameterActionsParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentSetParameterActionsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"cases": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCases(original["cases"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"case_content": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContent(original["caseContent"], d, config, index),
			"condition":    flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCondition(original["condition"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"message":          flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessage(original["message"], d, config, index),
			"additional_cases": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentAdditionalCases(original["additionalCases"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["conversation_success"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccess(original["conversationSuccess"], d, config, index)
	transformed["output_audio_text"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioText(original["outputAudioText"], d, config, index)
	transformed["live_agent_handoff"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoff(original["liveAgentHandoff"], d, config, index)
	transformed["end_interaction"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageEndInteraction(original["endInteraction"], d, config, index)
	transformed["play_audio"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudio(original["playAudio"], d, config, index)
	transformed["mixed_audio"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudio(original["mixedAudio"], d, config, index)
	transformed["telephony_transfer_call"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCall(original["telephonyTransferCall"], d, config, index)
	transformed["knowledge_info_card"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCard(original["knowledgeInfoCard"], d, config, index)
	transformed["tool_call"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCall(original["toolCall"], d, config, index)
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageText(original["text"], d, config, index)
	transformed["payload"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePayload(original["payload"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccessMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccessMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextText(original["text"], d, config, index)
	transformed["ssml"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextSsml(original["ssml"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextSsml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoff(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoffMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoffMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageEndInteraction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_uri"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAudioUri(original["audioUri"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["segments"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegments(original["segments"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"audio":                       flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAudio(original["audio"], d, config, index),
			"uri":                         flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsUri(original["uri"], d, config, index),
			"allow_playback_interruption": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["phone_number"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallPhoneNumber(original["phoneNumber"], d, config, index)
	transformed["sip_uri"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallSipUri(original["sipUri"], d, config, index)
	transformed["use_originating_trunk"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallUseOriginatingTrunk(original["useOriginatingTrunk"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallSipUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallUseOriginatingTrunk(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCard(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["maximum_snippets"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCardMaximumSnippets(original["maximumSnippets"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCardMaximumSnippets(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["tool"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallTool(original["tool"], d, config, index)
	transformed["action"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallAction(original["action"], d, config, index)
	transformed["input_parameters"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallInputParameters(original["inputParameters"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallTool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallInputParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextText(original["text"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentMessagePayload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCaseContentAdditionalCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentConditionalCasesCasesCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_export_gcs_destination"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsAudioExportGcsDestination(original["audioExportGcsDestination"], d, config, index)
	transformed["speech_settings"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettings(original["speechSettings"], d, config, index)
	transformed["dtmf_settings"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettings(original["dtmfSettings"], d, config, index)
	transformed["logging_settings"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsLoggingSettings(original["loggingSettings"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsAudioExportGcsDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return d.Get(fmt.Sprintf("%s%d%s", "handlers.", index, ".event_handler.0.fulfillment.0.advanced_settings.0.audio_export_gcs_destination"))
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsAudioExportGcsDestinationUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["endpointer_sensitivity"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(original["endpointerSensitivity"], d, config, index)
	transformed["no_speech_timeout"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(original["noSpeechTimeout"], d, config, index)
	transformed["use_timeout_based_endpointing"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(original["useTimeoutBasedEndpointing"], d, config, index)
	transformed["models"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsModels(original["models"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsSpeechSettingsModels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsEnabled(original["enabled"], d, config, index)
	transformed["max_digits"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(original["maxDigits"], d, config, index)
	transformed["finish_digit"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(original["finishDigit"], d, config, index)
	transformed["interdigit_timeout_duration"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(original["interdigitTimeoutDuration"], d, config, index)
	transformed["endpointing_timeout_duration"] =
		flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(original["endpointingTimeoutDuration"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsLoggingSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return d.Get(fmt.Sprintf("%s%d%s", "handlers.", index, ".event_handler.0.fulfillment.0.advanced_settings.0.logging_settings"))
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsLoggingSettingsEnableInteractionLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsLoggingSettingsDisableLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentAdvancedSettingsLoggingSettingsEnableStackdriverLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentEnableGenerativeFallback(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGenerators(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"generator":        flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGeneratorsGenerator(original["generator"], d, config, index),
			"input_parameters": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGeneratorsInputParameters(original["inputParameters"], d, config, index),
			"output_parameter": flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGeneratorsOutputParameter(original["outputParameter"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGeneratorsGenerator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGeneratorsInputParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersEventHandlerFulfillmentGeneratorsOutputParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandler(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["lifecycle_stage"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerLifecycleStage(original["lifecycleStage"], d, config, index)
	transformed["condition"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerCondition(original["condition"], d, config, index)
	transformed["fulfillment"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillment(original["fulfillment"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerLifecycleStage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["messages"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessages(original["messages"], d, config, index)
	transformed["tag"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentTag(original["tag"], d, config, index)
	transformed["webhook"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentWebhook(original["webhook"], d, config, index)
	transformed["return_partial_responses"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentReturnPartialResponses(original["returnPartialResponses"], d, config, index)
	transformed["set_parameter_actions"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentSetParameterActions(original["setParameterActions"], d, config, index)
	transformed["conditional_cases"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCases(original["conditionalCases"], d, config, index)
	transformed["advanced_settings"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettings(original["advancedSettings"], d, config, index)
	transformed["enable_generative_fallback"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentEnableGenerativeFallback(original["enableGenerativeFallback"], d, config, index)
	transformed["generators"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGenerators(original["generators"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessages(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"response_type":           flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesResponseType(original["responseType"], d, config, index),
			"channel":                 flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesChannel(original["channel"], d, config, index),
			"play_audio":              flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPlayAudio(original["playAudio"], d, config, index),
			"mixed_audio":             flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudio(original["mixedAudio"], d, config, index),
			"telephony_transfer_call": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCall(original["telephonyTransferCall"], d, config, index),
			"knowledge_info_card":     flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesKnowledgeInfoCard(original["knowledgeInfoCard"], d, config, index),
			"tool_call":               flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCall(original["toolCall"], d, config, index),
			"text":                    flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesText(original["text"], d, config, index),
			"payload":                 flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPayload(original["payload"], d, config, index),
			"conversation_success":    flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesConversationSuccess(original["conversationSuccess"], d, config, index),
			"output_audio_text":       flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioText(original["outputAudioText"], d, config, index),
			"live_agent_handoff":      flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesLiveAgentHandoff(original["liveAgentHandoff"], d, config, index),
			"end_interaction":         flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesEndInteraction(original["endInteraction"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesResponseType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesChannel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPlayAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_uri"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPlayAudioAudioUri(original["audioUri"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPlayAudioAudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPlayAudioAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["segments"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegments(original["segments"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"audio":                       flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegmentsAudio(original["audio"], d, config, index),
			"uri":                         flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegmentsUri(original["uri"], d, config, index),
			"allow_playback_interruption": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegmentsAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegmentsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesMixedAudioSegmentsAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["phone_number"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCallPhoneNumber(original["phoneNumber"], d, config, index)
	transformed["sip_uri"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCallSipUri(original["sipUri"], d, config, index)
	transformed["use_originating_trunk"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCallUseOriginatingTrunk(original["useOriginatingTrunk"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCallPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCallSipUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTelephonyTransferCallUseOriginatingTrunk(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesKnowledgeInfoCard(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["maximum_snippets"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesKnowledgeInfoCardMaximumSnippets(original["maximumSnippets"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesKnowledgeInfoCardMaximumSnippets(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["input_parameters"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCallInputParameters(original["inputParameters"], d, config, index)
	transformed["tool"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCallTool(original["tool"], d, config, index)
	transformed["action"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCallAction(original["action"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCallInputParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCallTool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesToolCallAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTextText(original["text"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesPayload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesConversationSuccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesConversationSuccessMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesConversationSuccessMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioTextText(original["text"], d, config, index)
	transformed["ssml"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioTextSsml(original["ssml"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioTextSsml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesOutputAudioTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesLiveAgentHandoff(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesLiveAgentHandoffMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesLiveAgentHandoffMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentMessagesEndInteraction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentWebhook(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentReturnPartialResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentSetParameterActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"parameter": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentSetParameterActionsParameter(original["parameter"], d, config, index),
			"value":     flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentSetParameterActionsValue(original["value"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentSetParameterActionsParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentSetParameterActionsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"cases": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCases(original["cases"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"case_content": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContent(original["caseContent"], d, config, index),
			"condition":    flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCondition(original["condition"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"message":          flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessage(original["message"], d, config, index),
			"additional_cases": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentAdditionalCases(original["additionalCases"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["conversation_success"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccess(original["conversationSuccess"], d, config, index)
	transformed["output_audio_text"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioText(original["outputAudioText"], d, config, index)
	transformed["live_agent_handoff"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoff(original["liveAgentHandoff"], d, config, index)
	transformed["end_interaction"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageEndInteraction(original["endInteraction"], d, config, index)
	transformed["play_audio"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudio(original["playAudio"], d, config, index)
	transformed["mixed_audio"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudio(original["mixedAudio"], d, config, index)
	transformed["telephony_transfer_call"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCall(original["telephonyTransferCall"], d, config, index)
	transformed["knowledge_info_card"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCard(original["knowledgeInfoCard"], d, config, index)
	transformed["tool_call"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCall(original["toolCall"], d, config, index)
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageText(original["text"], d, config, index)
	transformed["payload"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePayload(original["payload"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccessMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageConversationSuccessMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextText(original["text"], d, config, index)
	transformed["ssml"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextSsml(original["ssml"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextSsml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageOutputAudioTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoff(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoffMetadata(original["metadata"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageLiveAgentHandoffMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageEndInteraction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_uri"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAudioUri(original["audioUri"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAudioUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePlayAudioAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["segments"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegments(original["segments"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegments(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"audio":                       flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAudio(original["audio"], d, config, index),
			"uri":                         flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsUri(original["uri"], d, config, index),
			"allow_playback_interruption": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAudio(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageMixedAudioSegmentsAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["phone_number"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallPhoneNumber(original["phoneNumber"], d, config, index)
	transformed["sip_uri"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallSipUri(original["sipUri"], d, config, index)
	transformed["use_originating_trunk"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallUseOriginatingTrunk(original["useOriginatingTrunk"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallSipUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTelephonyTransferCallUseOriginatingTrunk(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCard(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["maximum_snippets"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCardMaximumSnippets(original["maximumSnippets"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageKnowledgeInfoCardMaximumSnippets(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCall(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["tool"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallTool(original["tool"], d, config, index)
	transformed["action"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallAction(original["action"], d, config, index)
	transformed["input_parameters"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallInputParameters(original["inputParameters"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallTool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageToolCallInputParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextText(original["text"], d, config, index)
	transformed["allow_playback_interruption"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextAllowPlaybackInterruption(original["allowPlaybackInterruption"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessageTextAllowPlaybackInterruption(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentMessagePayload(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCaseContentAdditionalCases(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentConditionalCasesCasesCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_export_gcs_destination"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsAudioExportGcsDestination(original["audioExportGcsDestination"], d, config, index)
	transformed["speech_settings"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettings(original["speechSettings"], d, config, index)
	transformed["dtmf_settings"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettings(original["dtmfSettings"], d, config, index)
	transformed["logging_settings"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsLoggingSettings(original["loggingSettings"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsAudioExportGcsDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return d.Get(fmt.Sprintf("%s%d%s", "handlers.", index, ".lifecycle_handler.0.fulfillment.0.advanced_settings.0.audio_export_gcs_destination"))
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsAudioExportGcsDestinationUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["endpointer_sensitivity"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(original["endpointerSensitivity"], d, config, index)
	transformed["no_speech_timeout"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(original["noSpeechTimeout"], d, config, index)
	transformed["use_timeout_based_endpointing"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(original["useTimeoutBasedEndpointing"], d, config, index)
	transformed["models"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsModels(original["models"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsEndpointerSensitivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsNoSpeechTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsUseTimeoutBasedEndpointing(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsSpeechSettingsModels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsEnabled(original["enabled"], d, config, index)
	transformed["max_digits"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(original["maxDigits"], d, config, index)
	transformed["finish_digit"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(original["finishDigit"], d, config, index)
	transformed["interdigit_timeout_duration"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(original["interdigitTimeoutDuration"], d, config, index)
	transformed["endpointing_timeout_duration"] =
		flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(original["endpointingTimeoutDuration"], d, config, index)
	return []interface{}{transformed}
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsMaxDigits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsFinishDigit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsInterdigitTimeoutDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsDtmfSettingsEndpointingTimeoutDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsLoggingSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return d.Get(fmt.Sprintf("%s%d%s", "handlers.", index, ".lifecycle_handler.0.fulfillment.0.advanced_settings.0.logging_settings"))
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsLoggingSettingsEnableInteractionLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsLoggingSettingsEnableConsentBasedRedaction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsLoggingSettingsDisableLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentAdvancedSettingsLoggingSettingsEnableStackdriverLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentEnableGenerativeFallback(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGenerators(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"generator":        flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGeneratorsGenerator(original["generator"], d, config, index),
			"input_parameters": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGeneratorsInputParameters(original["inputParameters"], d, config, index),
			"output_parameter": flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGeneratorsOutputParameter(original["outputParameter"], d, config, index),
		})
	}
	return transformed
}
func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGeneratorsGenerator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGeneratorsInputParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}

func flattenDialogflowCXPlaybookHandlersLifecycleHandlerFulfillmentGeneratorsOutputParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config, index int) interface{}  {
	return v
}
