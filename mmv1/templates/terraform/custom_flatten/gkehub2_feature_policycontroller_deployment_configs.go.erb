func flatten<%= prefix -%><%= titlelize_property(property) -%>(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
  if v == nil {
    return nil
  }

  deploymentConfigs := v.(map[string]interface{})
  transformedDeploymentConfigs := make([]map[string]interface{}, 0, len(deploymentConfigs))

  keys := []string{}
  for component := range deploymentConfigs {
    keys = append(keys, component)
  }
  sort.Strings(keys)

  for _, component := range keys {
    raw := deploymentConfigs[component]
    cfg := raw.(map[string]interface{})
    transformedCfg := make(map[string]interface{})
    transformedCfg["component"] = component

    if v, ok := cfg["containerResources"]; ok {
      cr, ok := v.(map[string]interface{})
      if ok {
        if l, ok := cr["limits"]; ok {
          cr["limits"] = []interface{}{l}
        }
        if r, ok := cr["requests"]; ok {
          cr["requests"] = []interface{}{r}
        }
      }
      transformedCfg["container_resources"] = []interface{}{cr}
      log.Printf("WTF %v\n", cr)
    }
    if v, ok := cfg["podTolerations"]; ok {
      transformedCfg["pod_toleration"] = v
    }
    if v, ok := cfg["replicaCount"]; ok {
      if str, ok := v.(string); ok {
        if count, err := strconv.Atoi(str); err == nil {
          transformedCfg["replica_count"] = count
        } else {
          log.Printf("err**** = %v", err)
        }
      } else {
        log.Printf("cannot****** convert %v to string", v)
      }
    }
    if v, ok := cfg["podAffinity"]; ok {
      transformedCfg["pod_affinity"] = v
    }

    transformedDeploymentConfigs = append(transformedDeploymentConfigs, transformedCfg)
    log.Printf("WTF?? %v", transformedCfg)
  }

  return transformedDeploymentConfigs
}
