// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     *** AUTO GENERATED CODE    *** Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package {{ $.Res.PackageName }}_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"

	"{{ $.ImportPath }}/acctest"
	"{{ $.ImportPath }}/envvar"
	"{{ $.ImportPath }}/tpgresource"
)

{{ if $.Res.TestSamples }}
{{ $sample := $.FirstTestSample }}
{{ $step := index $sample.TestSteps 0 }}
func TestAccDataSource{{ $.Res.ResourceName }}_basic(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
	{{- template "EnvVarContext" dict "TestEnvVars" $step.TestEnvVars "HasNewLine" false}}
	{{- range $varKey, $varVal := $step.TestVarsOverrides }}
		"{{$varKey}}": {{$varVal}},
	{{- end }}
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
	{{- if $.Res.VersionedProvider $sample.MinVersion }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
	{{- else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
	{{- end }}
	{{- if $sample.ExternalProviders }}
		ExternalProviders: map[string]resource.ExternalProvider{
		{{- range $provider := $sample.ExternalProviders }}
			"{{$provider}}": {},
		{{- end }}
		},
	{{- end }}
	{{- if not $.Res.ExcludeDelete }}
		CheckDestroy: testAccCheck{{ $.Res.ResourceName }}DestroyProducer(t),
{{- end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $step.TestStepSlug $.Res.ProductMetadata.Name $.Res.Name }}DataSource(context),
				Check: resource.ComposeTestCheckFunc(
					{{- if gt (len ($.Res.IgnoreReadPropertiesStep $st)) 0 }}
						acctest.CheckDataSourceStateMatchesResourceStateWithIgnores(
							"data.{{ $sample.ResourceType $.Res.TerraformName }}.default",
							"{{ $sample.ResourceType $.Res.TerraformName }}.{{ $sample.PrimaryResourceId }}",
							map[string]struct{}{
								{{- range $prop := $.Res.IgnoreReadPropertiesStep $st }}
								"{{ $prop }}": {},
								{{- end }}
							},
						),
					{{- else }}
										acctest.CheckDataSourceStateMatchesResourceState("data.{{ $sample.ResourceType $.Res.TerraformName }}.default", "{{ $sample.ResourceType $.Res.TerraformName }}.{{ $sample.PrimaryResourceId }}"),
					{{- end }}
					),
			},
		},
	})
}

func testAcc{{ $step.TestStepSlug $.Res.ProductMetadata.Name $.Res.Name }}DataSource(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $step.TestHCLText }}

data "{{ $.Res.TerraformName }}" "default" {
{{- range $fieldName := $.Res.DatasourceRequiredFields }}
  {{ $fieldName }} = {{ $sample.ResourceType $.Res.TerraformName }}.{{ $sample.PrimaryResourceId }}.{{ $fieldName }}
{{- end }}
}`,
		context,
	)
}
{{ end }}