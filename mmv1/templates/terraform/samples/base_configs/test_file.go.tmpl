// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package {{ $.Res.PackageName }}_test

import (
{{- if not $.Res.ExcludeDelete }}
	{{- if not $.Res.CustomCode.TestCheckDestroy }}
	"fmt"
	{{- end }}
	"strings"
{{- end }}
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
{{- if not $.Res.ExcludeDelete }}
	"github.com/hashicorp/terraform-plugin-testing/terraform"
{{- end }}

	"{{ $.ImportPath }}/acctest"
	"{{ $.ImportPath  }}/envvar"
	"{{ $.ImportPath  }}/tpgresource"
	transport_tpg "{{ $.ImportPath  }}/transport"
)

{{ range $e := $.Res.TestSamples }}
func TestAcc{{ $e.TestSampleSlug $.Res.ProductMetadata.Name $.Res.Name }}(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{

		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		CheckDestroy: testAccCheck{{ $.Res.ResourceName }}DestroyProducer(t),
		Steps: []resource.TestStep{
		{{ range $s := $e.Steps }}
			{
				Config: testAcc{{ $s.TestStepSlug $.Res.ProductMetadata.Name $.Res.Name }}(context),
			},
			{
				ResourceName:      "{{ $e.ResourceType $.Res.TerraformName }}.{{ $e.PrimaryResourceId }}",
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{},
			},
	  {{ end }}
		},
	})
}

{{ end }}

{{ range $e := $.Res.TestSteps }}

func testAcc{{ $e.TestStepSlug $.Res.ProductMetadata.Name $.Res.Name }}(context map[string]interface{}) string {
  return acctest.Nprintf(`
`, context)
}

{{ end }}

{{ if not $.Res.ExcludeDelete }}
func testAccCheck{{ $.Res.ResourceName }}DestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "{{ $.Res.TerraformName }}" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}
	{{ if $.Res.CustomCode.TestCheckDestroy }}
	{{ $.Res.CustomTemplate $.Res.CustomCode.TestCheckDestroy false -}}
	{{- else }}

		config := acctest.GoogleProviderConfig(t)

		url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{"{{"}}{{$.Res.ProductMetadata.Name}}{{"BasePath}}"}}{{$.Res.SelfLinkUri}}")
		if err != nil {
			return err
		}

		billingProject := ""

		if config.BillingProject != "" {
			billingProject = config.BillingProject
		}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config: config,
			Method: "{{ camelize $.Res.ReadVerb "upper" }}",
			Project: billingProject,
			RawURL: url,
			UserAgent: config.UserAgent,
		{{- if $.Res.ErrorRetryPredicates }}
			ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.Res.ErrorRetryPredicates "," -}} },
		{{- end }}
		{{- if $.Res.ErrorAbortPredicates }}
			ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.Res.ErrorAbortPredicates "," -}} },
		{{- end }}
		})
		if err == nil {
				return fmt.Errorf("{{ $.Res.ResourceName }} still exists at %s", url)
			}
	{{- end }}
		}

		return nil
	}
}
{{- end }}

{{if $.Res.TestCustomCode -}} 
    {{- $.Res.CustomTemplate $.Res.TestCustomCode true -}}
{{- end}}