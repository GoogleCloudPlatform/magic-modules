// Read the restore variables from obj and remove them, since they do not map to anything in the cluster
var backupSource interface{}
var continuousBackupSource interface{}
if val, ok := obj["restoreBackupSource"]; ok {
	backupSource = val
	delete(obj, "restoreBackupSource")
}
if val, ok := obj["restoreContinuousBackupSource"]; ok {
	continuousBackupSource = val
	delete(obj, "restoreContinuousBackupSource")
}

restoreClusterRequestBody := make(map[string]interface{})
if backupSource != nil {
	// If restoring from a backup, set the backupSource
	restoreClusterRequestBody["backup_source"] = backupSource
} else if continuousBackupSource != nil {
	// Otherwise if restoring via PITR, set the continuousBackupSource
	restoreClusterRequestBody["continuous_backup_source"] = continuousBackupSource
}

if backupSource != nil || continuousBackupSource != nil {
	// Use restore API if this is a restore instead of a create cluster call
	url = strings.Replace(url, "clusters?clusterId", "clusters:restore?clusterId", 1)

	// Copy obj which contains the cluster into a cluster map
	cluster := make(map[string]interface{})
	for k,v := range obj {
		cluster[k] = v
	}
	restoreClusterRequestBody["cluster"] = cluster
	obj = restoreClusterRequestBody
}


// Read the secondary cluster config to call the api for creating secondary cluster

var secondaryConfig interface{}
var clusterType interface{}

if val, ok := obj["secondaryConfig"]; ok {
	secondaryConfig = val
}

if val, ok := obj["clusterType"]; ok {
	clusterType = val
}

if clusterType == "SECONDARY" {
	if secondaryConfig != nil {
		// Use createsecondary API if this is a secondary cluster
		url = strings.Replace(url, "clusters?clusterId", "clusters:createsecondary?cluster_id", 1)

	// Validation error if secondary_config is not defined
	} else {
		return fmt.Errorf("Error creating cluster. Can not create secondary cluster without secondary_config field.")
	}
}

// Validation error if secondary_config is defined but, cluster type is not secondary
if secondaryConfig != nil {
	if clusterType != "SECONDARY" {
		return fmt.Errorf("Error creating cluster. Add {cluster_type: \"SECONDARY\"} if attempting to create a secondary cluster, otherwise remove the secondary_config.")
	}
}
