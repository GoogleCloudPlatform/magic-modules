if d.Get("create_ignore_already_exists").(bool) {
    log.Printf("[DEBUG] Calling get GroupMembership to check if membership already exists")
    preferredMemberKeyPropTyped := tpgresource.CheckStringMap(preferredMemberKeyProp)

    params := map[string]string{
        "memberKey.id": preferredMemberKeyPropTyped["id"],
    }
    if ns, ok := preferredMemberKeyPropTyped["namespace"]; ok && ns != "" {
        params["memberKey.namespace"] = ns
    }
    getUrl, err := transport_tpg.AddQueryParams(url+":lookup", params)
    if err != nil {
        return err
    }

    res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
        Config:    config,
        Method:    "GET",
        Project:   billingProject,
        RawURL:    getUrl,
        UserAgent: userAgent,
        Headers:   headers,
    })
    // Do normal create if membership does not exist
    if err == nil {
        // Set computed resource properties from create API response so that they're available on the subsequent Read call.
        err = resourceCloudIdentityGroupMembershipPostCreateSetComputedFields(d, meta, res)
        if err != nil {
            return fmt.Errorf("setting computed ID format fields: %w", err)
        }

        // Store the ID now
        id, err := tpgresource.ReplaceVars(d, config, "{{"{{name}}"}}")
        if err != nil {
            return fmt.Errorf("Error constructing id: %s", err)
        }
        d.SetId(id)

        // `name` is autogenerated from the api so needs to be set post-create
        name, ok := res["name"]
        if !ok {
            respBody, ok := res["response"]
            if !ok {
                return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
            }

            name, ok = respBody.(map[string]interface{})["name"]
            if !ok {
                return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
            }
        }
        if err := d.Set("name", name.(string)); err != nil {
            return fmt.Errorf("Error setting name: %s", err)
        }
        d.SetId(name.(string))

        log.Printf("[DEBUG] Finished creating GroupMembership %q: %#v", d.Id(), res)

        return resourceCloudIdentityGroupMembershipRead(d, meta)
    }
}
