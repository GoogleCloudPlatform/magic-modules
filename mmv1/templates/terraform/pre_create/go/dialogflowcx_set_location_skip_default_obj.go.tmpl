
// extract location from the parent
location := ""

if parts := regexp.MustCompile(`locations\/([^\/]*)\/`).FindStringSubmatch(d.Get("parent").(string)); parts != nil {
    location = parts[1]
} else {
    return fmt.Errorf(
        "Saw %s when the parent is expected to contains location %s",
        d.Get("parent"),
        "projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/...",
    )
}

url = strings.Replace(url,"-dialogflow",fmt.Sprintf("%s-dialogflow",location),1)

// if it's a default object Dialogflow creates for you, "Update" instead of "Create"
// Note: below we try to access fields that aren't present in the resource, because this custom code is reused across multiple Dialogflow resources that contain different fields. When the field isn't present, we deliberately ignore the error and the boolean is false.
isDefaultStartFlow, _ := d.Get("is_default_start_flow").(bool)
isDefaultWelcomeIntent, _ := d.Get("is_default_welcome_intent").(bool)
isDefaultNegativeIntent, _ := d.Get("is_default_negative_intent").(bool)
if isDefaultStartFlow || isDefaultWelcomeIntent || isDefaultNegativeIntent {
    // hardcode the default object ID:
    var defaultObjName string
    if isDefaultStartFlow || isDefaultWelcomeIntent {
        defaultObjName = "00000000-0000-0000-0000-000000000000"
    }
    if isDefaultNegativeIntent {
        defaultObjName = "00000000-0000-0000-0000-000000000001"
    }

    // Store the ID
    d.Set("name", defaultObjName)
    id, err := tpgresource.ReplaceVars(d, config, "{{$.GetIdFormat}}")
    if err != nil {
        return fmt.Errorf("Error constructing id: %s", err)
    }
    d.SetId(id)

    // and defer to the Update method:
    log.Printf("[DEBUG] Updating default {{$.ResourceName}}")
    return resource{{$.ResourceName}}Update(d, meta)
}