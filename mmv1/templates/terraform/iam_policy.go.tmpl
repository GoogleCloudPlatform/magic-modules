{{/* The license inside this block applies to this file
  Copyright 2024 Google LLC. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. */ -}}
{{/* <% if hc_downstream */}}
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package {{ lower $.ProductMetadata.Name }}

import (
	"fmt"

	"github.com/hashicorp/errwrap"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"google.golang.org/api/cloudresourcemanager/v1"

	"{{ $.ImportPath }}/tpgiamresource"
	"{{ $.ImportPath }}/tpgresource"
	transport_tpg "{{ $.ImportPath }}/transport"
)

var {{ $.ResourceName }}IamSchema = map[string]*schema.Schema{
{{- range $i, $param := $.IamResourceParams }}
	"{{ underscore $param }}": {
		Type:             schema.TypeString,
{{-   if or (eq $param "project") (eq $param "zone") (eq $param "region") (eq $param "location") }}
		Computed: true,
		Optional: true,
{{-   else }}
		Required: true,
{{-   end }}
		ForceNew: true,
{{- /* The last parameter can be used as a long name for IAM policies */ -}}
{{-   if eq $i (sub (len $.IamResourceParams) 1) }}
{{-     if and $.IamPolicy $.IamPolicy.CustomDiffSuppress }}
		DiffSuppressFunc: {{$.ResourceName}}DiffSuppress,
{{-     else }}
		DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
{{-     end }}
{{-   end }}
	},
{{- end }}
}

{{- if and $.IamPolicy $.IamPolicy.CustomDiffSuppress }}
  {{- $.CustomTemplate $.IamPolicy.CustomDiffSuppress true }}
{{- end }}

type {{ $.ResourceName }}IamUpdater struct {
{{- range $param := $.IamResourceParams }}
	{{ camelize $param "lower" }} string
{{- end }}
	d       tpgresource.TerraformResourceData
	Config  *transport_tpg.Config
}

func {{ $.ResourceName }}IamUpdaterProducer(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (tpgiamresource.ResourceIamUpdater, error) {
	values := make(map[string]string)

{{  range $param := $.IamResourceParams }}
{{-   if or (eq $param "project") (eq $param "zone") (eq $param "region") (eq $param "location") }}
	{{ $param }}, _ := tpgresource.Get{{ title $param }}(d, config)
	if {{ $param }} != "" {
		if err := d.Set("{{ $param }}", {{ $param }}); err != nil {
			return nil, fmt.Errorf("Error setting {{ $param }}: %s", err)
		}
	}
	values["{{ $param }}"] = {{ $param }}

{{- else }}
	if v, ok := d.GetOk("{{ underscore $param }}"); ok {
		values["{{ $param }}"] = v.(string)
	}

{{-   end }}
{{- end }}{{- /* range $param := $.IamResourceParams */}}

	// We may have gotten either a long or short name, so attempt to parse long name if possible
	m, err := tpgresource.GetImportIdQualifiers([]string{"{{ $.ImportIdRegexesFromIam }}"}, d, config, d.Get("{{ $.IamParentResourceName }}").(string))
	if err != nil {
		return nil, err
	}

	for k, v := range m {
		values[k] = v
	}

	u := &{{ $.ResourceName }}IamUpdater{
{{- range $param := $.IamResourceParams }}
		{{ camelize $param "lower" }}: values["{{ $param }}"],
{{- end }}
		d:       d,
		Config:  config,
	}

{{/* Set all URL qualifiers in state so that we have consistent storage of needed fields */ -}}
{{-  range $i, $param := $.IamResourceParams }}
{{-    if eq $i (sub (len $.IamResourceParams) 1) }}
{{-      if eq $param "project" }}
	if err := d.Set("project", u.project); err != nil {
		return nil, fmt.Errorf("Error setting project: %s", err)
	}
{{       else }}
{{/* Set the last parameter as the long name (unless it is project) */ -}}
	if err := d.Set("{{ $.IamParentResourceName }}", u.GetResourceId()); err != nil {
		return nil, fmt.Errorf("Error setting {{ $.IamParentResourceName }}: %s", err)
	}
{{-      end }}{{/* if eq param "project" */}}
{{    else }}
	if err := d.Set("{{ underscore $param }}", u.{{ camelize $param "lower" }}); err != nil {
		return nil, fmt.Errorf("Error setting {{ underscore $param }}: %s", err)
	}
{{-   end }}{{- /* if eq $i (sub (len $.IamResourceParams) 1) */ -}}
{{- end }}{{- /* range $i, $param := $.IamResourceParams */}}

	return u, nil
}

func {{ $.ResourceName }}IdParseFunc(d *schema.ResourceData, config *transport_tpg.Config) error {
	values := make(map[string]string)

{{  range $param := $.IamResourceParams }}
{{    if or (eq $param "project") (eq $param "zone") (eq $param "region") (eq $param "location") }}
	{{ $param }}, _ := tpgresource.Get{{ title $param }}(d, config)
	if {{ $param }} != "" {
		values["{{ $param }}"] = {{ $param }}
	}

{{-   end }}
{{- end }}{{/* range $param := $.IamResourceParams */}}

	m, err := tpgresource.GetImportIdQualifiers([]string{"{{ $.ImportIdRegexesFromIam }}"}, d, config, d.Id())
	if err != nil {
		return err
	}

	for k, v := range m {
    values[k] = v
	}

	u := &{{ $.ResourceName }}IamUpdater{
{{- range $param := $.IamResourceParams }}
		{{ camelize $param "lower" }}: values["{{ $param }}"],
{{- end }}{{/* range $param := $.IamResourceParams */}}
		d:       d,
		Config:  config,
	}
{{  if eq (index $.IamResourceParams (sub (len $.IamResourceParams) 1)) "project" }}
{{- /* Resource is only identified by project, so only set project */ -}}
	if err := d.Set("project", u.project); err != nil {
		return fmt.Errorf("Error setting project: %s", err)
	}
{{-  else }}
{{- /* Set resource long name in state, this has all the information that we need to identify it */ -}}
	if err := d.Set("{{  $.IamParentResourceName }}", u.GetResourceId()); err != nil {
		return fmt.Errorf("Error setting {{  $.IamParentResourceName }}: %s", err)
	}
{{- end }}
	d.SetId(u.GetResourceId())
	return nil
}

func (u *{{ $.ResourceName }}IamUpdater) GetResourceIamPolicy() (*cloudresourcemanager.Policy, error) {
	url, err := u.qualify{{ $.Name }}Url("{{ $.IamPolicy.FetchIamPolicyMethod }}")
	if err != nil {
		return nil, err
	}

{{ if $.IsInIamResourceParams "project" }}
	project, err := tpgresource.GetProject(u.d, u.Config)
	if err != nil {
		return nil, err
	}
{{- end }}
	var obj map[string]interface{}
{{- if eq $.IamPolicy.IamConditionsRequestType "QUERY_PARAM" }}
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"optionsRequestedPolicyVersion": fmt.Sprintf("%d", {{ if and $.IamPolicy $.IamPolicy.IamPolicyVersion }} {{ $.IamPolicy.IamPolicyVersion}} {{ else }} tpgiamresource.IamPolicyVersion {{ end }})})
	if err != nil {
		return nil, err
	}
{{- else if eq $.IamPolicy.IamConditionsRequestType "QUERY_PARAM_NESTED" }}
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"options.requestedPolicyVersion": fmt.Sprintf("%d", {{ if and $.IamPolicy $.IamPolicy.IamPolicyVersion }} {{ $.IamPolicy.IamPolicyVersion}} {{ else }} tpgiamresource.IamPolicyVersion {{ end }})})
	if err != nil {
		return nil, err
	}
{{- else if eq $.IamPolicy.IamConditionsRequestType "REQUEST_BODY" }}
	obj = map[string]interface{}{
		"options": map[string]interface{}{
			"requestedPolicyVersion": {{ if and $.IamPolicy $.IamPolicy.IamPolicyVersion }} {{ $.IamPolicy.IamPolicyVersion}} {{ else }} tpgiamresource.IamPolicyVersion {{ end }},
		},
	}
{{- end }}

	userAgent, err :=  tpgresource.GenerateUserAgentString(u.d, u.Config.UserAgent)
	if err != nil {
		return nil, err
	}

	policy, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: u.Config,
		Method: "{{ $.IamPolicy.FetchIamPolicyVerb }}",
{{- if $.IsInIamResourceParams "project" }}
		Project: project,
{{- end }}
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
{{- if $.ErrorRetryPredicates }}
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{ join $.ErrorRetryPredicates "," }} },
{{- end }}
{{- if $.ErrorAbortPredicates }}
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{ join $.ErrorAbortPredicates "," }} },
{{- end }}
	})
	if err != nil {
		return nil, errwrap.Wrapf(fmt.Sprintf("Error retrieving IAM policy for %s: {{"{{"}}err{{"}}"}}", u.DescribeResource()), err)
	}

	out := &cloudresourcemanager.Policy{}
	err = tpgresource.Convert(policy, out)
	if err != nil {
		return nil, errwrap.Wrapf("Cannot convert a policy to a resource manager policy: {{"{{"}}err{{"}}"}}", err)
	}

	return out, nil
}

func (u *{{ $.ResourceName }}IamUpdater) SetResourceIamPolicy(policy *cloudresourcemanager.Policy) error {
	json, err := tpgresource.ConvertToMap(policy)
	if err != nil {
		return err
	}

{{- if and $.IamPolicy $.IamPolicy.IamPolicyVersion }}
        // This is an override of the existing version that might have been set in the resource_iam_member|policy|binding code
        json["version"] = {{ $.IamPolicy.IamPolicyVersion}}
{{- end }}

{{ if and $.IamPolicy $.IamPolicy.WrappedPolicyObj }}
	obj := make(map[string]interface{})
	obj["policy"] = json
{{- else }}
	obj := json
{{- end }}

	url, err := u.qualify{{ $.Name }}Url("{{ $.IamPolicy.SetIamPolicyMethod }}")
	if err != nil {
		return err
	}
{{- if $.IsInIamResourceParams "project"}}
	project, err := tpgresource.GetProject(u.d, u.Config)
	if err != nil {
		return err
	}
{{- end }}

	userAgent, err :=  tpgresource.GenerateUserAgentString(u.d, u.Config.UserAgent)
	if err != nil {
		return err
	}

	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: u.Config,
		Method: "{{ $.IamPolicy.SetIamPolicyVerb }}",
{{- if $.IsInIamResourceParams "project"}}
		Project: project,
{{- end }}
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
		Timeout: u.d.Timeout(schema.TimeoutCreate),
{{- if $.ErrorRetryPredicates }}
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{ join $.ErrorRetryPredicates "," }} },
{{- end }}
{{- if $.ErrorAbortPredicates }}
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{ join $.ErrorAbortPredicates "," }} },
{{- end }}
	})
	if err != nil {
		return errwrap.Wrapf(fmt.Sprintf("Error setting IAM policy for %s: {{"{{"}}err{{"}}"}}", u.DescribeResource()), err)
	}

	return nil
}

func (u *{{ $.ResourceName }}IamUpdater) qualify{{ $.Name }}Url(methodIdentifier string) (string, error) {
	urlTemplate := fmt.Sprintf("{{"{{"}}{{ $.ProductMetadata.Name }}BasePath{{"}}"}}%s{{ $.IamPolicy.MethodNameSeparator }}%s", fmt.Sprintf("{{ $.IamImportUrl }}", {{ $.IamStringQualifiers }}), methodIdentifier)
  url, err := tpgresource.ReplaceVars(u.d, u.Config, urlTemplate)
  if err != nil {
      return "", err
  }
  return url, nil
}

func (u *{{ $.ResourceName }}IamUpdater) GetResourceId() string {
	return fmt.Sprintf("{{ $.IamImportUrl }}", {{ $.IamStringQualifiers }})
}

func (u *{{ $.ResourceName }}IamUpdater) GetMutexKey() string {
	return fmt.Sprintf("iam-{{ lower $.ProductMetadata.Name }}-{{ lower $.Name }}-%s", u.GetResourceId())
}

func (u *{{ $.ResourceName }}IamUpdater) DescribeResource() string {
	return fmt.Sprintf("{{ lower $.ProductMetadata.Name }} {{ lower $.Name }} %q", u.GetResourceId())
}