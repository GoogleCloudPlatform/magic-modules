<%- # the license inside this block applies to this file
	# Copyright 2020 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
// customizeDiff func for additional checks on google_spanner_database properties:
func resourceSpannerDBDdlCustomDiffFunc(diff TerraformResourceDiff) error {
	old, new := diff.GetChange("ddl")
	oldDdls := old.([]interface{})
	newDdls := new.([]interface{})
	var err error

	if len(newDdls) < len(oldDdls) {
		err = diff.ForceNew("ddl")
		if err != nil {
			return fmt.Errorf("ForceNew failed for ddl, old - %v and new - %v", oldDdls, newDdls)
		}
		return nil
	}

	for i := range oldDdls {
		if newDdls[i].(string) != oldDdls[i].(string) {
			err = diff.ForceNew("ddl")
			if err != nil {
				return fmt.Errorf("ForceNew failed for ddl, old - %v and new - %v", oldDdls, newDdls)
			}
			return nil
		}
	}
	return nil
}

func resourceSpannerDBDdlCustomDiff(_ context.Context, diff *schema.ResourceDiff, meta interface{}) error {
	// separate func to allow unit testing
	return resourceSpannerDBDdlCustomDiffFunc(diff)
}

func validateDatabaseRetentionPeriod(v interface{}, k string) (ws []string, errors []error) {
	value := v.(string)
	valueError := fmt.Errorf("version_retention_period should be in range [1h, 7d], in a format resembling 1d, 24h, 1440m, or 86400s")

	r := regexp.MustCompile("^(\\d{1}d|\\d{1,3}h|\\d{2,5}m|\\d{4,6}s)$")
	if !r.MatchString(value) {
		errors = append(errors, valueError)
		return
	}

	unit := value[len(value)-1:]
	multiple := value[:len(value)-1]
	num, err := strconv.Atoi(multiple)
	if err != nil {
		errors = append(errors, valueError)
		return
	}

	if unit == "d" && (num < 1 || num > 7) {
		errors = append(errors, valueError)
		return
	}
	if unit == "h" && (num < 1 || num > 7*24) {
		errors = append(errors, valueError)
		return
	}
	if unit == "m" && (num < 1*60 || num > 7*24*60) {
		errors = append(errors, valueError)
		return
	}
	if unit == "s" && (num < 1*60*60 || num > 7*24*60*60) {
		errors = append(errors, valueError)
		return
	}

	return
}

func resourceSpannerDBVirtualUpdate(d *schema.ResourceData, resourceSchema map[string]*schema.Schema) bool {
	// deletion_protection is the only virtual field
	if d.HasChange("deletion_protection") {
		for field := range resourceSchema {
			if field == "deletion_protection" {
				continue
			}
			if d.HasChange(field) {
				return false
			}
		}
		return true
	}
	return false
}