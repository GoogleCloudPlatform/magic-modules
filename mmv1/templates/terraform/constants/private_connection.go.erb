<% unless compiler == "terraformvalidator-codegen" -%>
// waitForPrivateConnectionReady waits for a private connection state to become
// CREATED, if the state is FAILED propegate the error to the user.
func waitForPrivateConnectionReady(d *schema.ResourceData, config *Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceDatastreamPrivateConnectionRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		state := d.Get("state").(string)
		if state == "CREATING" {
			return resource.RetryableError(fmt.Errorf("PrivateConnection %q has state %q.", name, state))
		} else if state == "CREATED" {
			log.Printf("[DEBUG] PrivateConnection %q has state %q.", name, state)
			return nil
		} else if state == "FAILED" {
      # 		  reason := d.Get("error").Get("reason").(string)
      # 		  return resource.NonRetryableError(fmt.Errorf("PrivateConnection %q has state %q. reason = %q", name, state, reason))
      return resource.NonRetryableError(fmt.Errorf("e2 - PrivateConnection %q has state %q.", name, state))
		} else {
			return resource.NonRetryableError(fmt.Errorf("PrivateConnection %q has state %q.", name, state))
		}
	})
}
<% end -%>
