// GetEntry supports up to 100 aspects. Therefore we set a threshold at 99.
const maxAspectNumber = 99

// NumberOfAspectsValidation checks if the number of aspects on an entry exceeds certain threshold.
func NumberOfAspectsValidation(i interface{}, k string) (warnings []string, errors []error) {
	s, isSlice := i.([]interface{})
	m, isMap := i.(map[string]interface{})

	if !isSlice && !isMap {
		errors = append(errors, fmt.Errorf("expected type of field %q to be array, but got %T", k, i))
		return warnings, errors
	}

	if len(s)+len(m) > maxAspectNumber {
		errors = append(errors, fmt.Errorf(
			"field %q has an invalid content: %q. The maximal number of aspects is 99.",
			k, i,
		))
	}

	return warnings, errors
}

// ProjectNumberValidation checks if the input string conforms to the pattern:
// "projects/<project-number>/<anything>"
func ProjectNumberValidation(i interface{}, k string) (warnings []string, errors []error) {
	v, ok := i.(string)

	if !ok {
		errors = append(errors, fmt.Errorf("expected type of field %q to be string, but got %T", k, i))
		return warnings, errors
	}

	var projectNumberRegex = regexp.MustCompile(`^projects\/[1-9]\d*\/.+$`)
	if !projectNumberRegex.MatchString(v) {
		errors = append(errors, fmt.Errorf(
			"field %q has an invalid format: %q. Expected format: 'projects/<project-number>/<anything>'. Please note that project IDs are not supported.",
			k, v,
		))
	}

	return warnings, errors
}

// ProjectNumberValidation checks if the input string conforms to the pattern:
// "projects/<project-number>/<anything>"
func AspectProjectNumberValidation(i interface{}, k string) (warnings []string, errors []error) {
	v, ok := i.(string)
	if !ok {
		errors = append(errors, fmt.Errorf("expected type of field %q to be string, but got %T", k, i))
		return warnings, errors
	}

	var numberDotAnythingRegex = regexp.MustCompile(`^[1-9]\d*\..+$`)

	if !numberDotAnythingRegex.MatchString(v) {
		errors = append(errors, fmt.Errorf(
			"field %q has an invalid format: %q. Expected format: '<project number>.anything'. Please note that project IDs are not supported.",
			k, v,
		))
	}

	return warnings, errors
}

func FilterAspects(aspectKeySet map[string]struct{}, res map[string]interface{}) {
	if res["aspects"] == nil {
		return
	}
	aspectsMap := res["aspects"].(map[string]interface{})
	for key := range aspectsMap {
		if _, keep := aspectKeySet[key]; !keep {
			delete(aspectsMap, key)
		}
	}
}

func AddAspectsToSet(aspectKeySet map[string]struct{}, aspects interface{}) {
	for _, aspectItemRaw := range aspects.([]interface{}) {
		aspectMap := aspectItemRaw.(map[string]interface{})
		keyString := aspectMap["aspect_key"].(string)
		aspectKeySet[keyString] = struct{}{}
	}
}

// InverseTransformAspects converts the "aspects" map back to a slice of maps,
// re-inserting the "aspectKey". Modifies obj in-place.
func InverseTransformAspects(res map[string]interface{}) {
	if res["aspects"] == nil {
		return
	}
	originalMap := res["aspects"].(map[string]interface{})
	newSlice := make([]interface{}, 0, len(originalMap))

	for key, value := range originalMap {
		innerMap := value.(map[string]interface{})
		box := make(map[string]interface{}, 2)
		box["aspectKey"] = key
		box["aspectValue"] = innerMap
		newSlice = append(newSlice, box)
	}
	res["aspects"] = newSlice
}

// TransformAspects concisely transforms the "aspects" slice within obj into a map.
// It assumes obj["aspects"] exists and is a []interface{} containing
// map[string]interface{} elements, each with a string "aspectKey".
// Modifies obj in-place.
func TransformAspects(obj map[string]interface{}) {
	if obj["aspects"] == nil {
		return
	}
	originalSlice := obj["aspects"].([]interface{})
	newMap := make(map[string]interface{}, len(originalSlice))
	for _, item := range originalSlice {
		aspectMap := item.(map[string]interface{})

		key := aspectMap["aspectKey"].(string)
		value := aspectMap["aspectValue"].(map[string]interface{})

		newMap[key] = value
	}
	obj["aspects"] = newMap
}
