
func FilterAspects(aspectKeySet map[string]struct{}, res map[string]interface{}) {
	if res["aspects"] == nil {
		return
	}
	aspectsMap := res["aspects"].(map[string]interface{})
	for key := range aspectsMap {
		if _, keep := aspectKeySet[key]; !keep {
			delete(aspectsMap, key)
		}
	}
}

func AddAspectsToSet(aspectKeySet map[string]struct{}, aspects interface{}) {
	for _, aspectItemRaw := range aspects.([]interface{}) {
		aspectMap := aspectItemRaw.(map[string]interface{})
		keyString := aspectMap["aspect_key"].(string)
		aspectKeySet[keyString] = struct{}{}
	}
}

// InverseTransformAspects converts the "aspects" map back to a slice of maps,
// re-inserting the "aspectKey". Modifies obj in-place.
func InverseTransformAspects(res map[string]interface{}) {
	if res["aspects"] == nil {
		return
	}
	originalMap := res["aspects"].(map[string]interface{})
	newSlice := make([]interface{}, 0, len(originalMap))

	for key, value := range originalMap {
		innerMap := value.(map[string]interface{})
		box := make(map[string]interface{}, 2)
		box["aspectKey"] = key
		box["aspectValue"] = innerMap
		newSlice = append(newSlice, box)
	}
	res["aspects"] = newSlice
}

// TransformAspects concisely transforms the "aspects" slice within obj into a map.
// It assumes obj["aspects"] exists and is a []interface{} containing
// map[string]interface{} elements, each with a string "aspectKey".
// Modifies obj in-place.
func TransformAspects(obj map[string]interface{}) {
	if obj["aspects"] == nil {
		return
	}
	originalSlice := obj["aspects"].([]interface{})
	newMap := make(map[string]interface{}, len(originalSlice))
	for _, item := range originalSlice {
		aspectMap := item.(map[string]interface{})
		key := aspectMap["aspectKey"].(string)
		valueCopy := make(map[string]interface{}, len(aspectMap)-1)
		for k, v := range aspectMap["aspectValue"].(map[string]interface{}) {
			valueCopy[k] = v
		}
		newMap[key] = valueCopy
	}
	obj["aspects"] = newMap
}

// Suppress diffs when the value read from api
// has the project number instead of the project name
func AspectTypeProjectNumberDiffSuppress(_, old, new string, _ *schema.ResourceData) bool {
	var a2, b2 string
	re := regexp.MustCompile("^\\d+\\.")
	reN := regexp.MustCompile("^[^\\.]+\\.")
	replacement := []byte("projects/equal")
	a2 = string(re.ReplaceAll([]byte(old), replacement))
	b2 = string(reN.ReplaceAll([]byte(new), replacement))
	return a2 == b2
}