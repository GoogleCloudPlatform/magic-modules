{{/*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}
func upstreamPoliciesDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	o, n := d.GetChange("virtual_repository_config.0.upstream_policies")
	oldPolicies, ok := o.([]any)
	if !ok {
		return false
	}
	newPolicies, ok := n.([]any)
	if !ok {
		return false
	}

	var oldHashes, newHashes []interface{}
	for _, policy := range oldPolicies {
		data, ok := policy.(map[string]any)
		if !ok {
			return false
		}
		hashStr := fmt.Sprintf("[id:%v priority:%v repository:%v]", data["id"], data["priority"], data["repository"])
		oldHashes = append(oldHashes, hashStr)
	}
	for _, policy := range newPolicies {
		data, ok := policy.(map[string]any)
		if !ok {
			return false
		}
		hashStr := fmt.Sprintf("[id:%v priority:%v repository:%v]", data["id"], data["priority"], data["repository"])
		newHashes = append(newHashes, hashStr)
	}

	oldSet := schema.NewSet(schema.HashString, oldHashes)
	newSet := schema.NewSet(schema.HashString, newHashes)
	return oldSet.Equal(newSet)
}

func parseDurationAsSeconds(v string) (int, bool) {
	if len(v) == 0 {
		return 0, false
	}
	n, err := strconv.Atoi(v[:len(v)-1])
	if err != nil {
		return 0, false
	}
	switch v[len(v)-1] {
	case 's':
		return n, true
	case 'm':
		return n * 60, true
	case 'h':
		return n * 3600, true
	case 'd':
		return n * 86400, true
	default:
		return 0, false
	}
}

// Like tpgresource.DurationDiffSuppress, but supports 'd'
func durationDiffSuppress(k, oldr, newr string, d *schema.ResourceData) bool {
	o, n := d.GetChange(k)
	old, ok := o.(string)
	if !ok {
		return false
	}
	new, ok := n.(string)
	if !ok {
		return false
	}
	if old == new {
		return true
	}
	oldSeconds, ok := parseDurationAsSeconds(old)
	if !ok {
		return false
	}
	newSeconds, ok := parseDurationAsSeconds(new)
	if !ok {
		return false
	}
	return oldSeconds == newSeconds
}

func mapHashID(v any) int {
	obj := v.(map[string]any)
	return schema.HashString(obj["id"])
}

func isDefaultEnum(val any) bool {
  s, ok := val.(string)
  if !ok {
    return false
  }
  return s == "" || strings.HasSuffix(s, "_UNSPECIFIED")
}

// emptyMavenConfigDiffSuppress generates a config from defaults if it or any
// properties are unset. Missing, empty and default configs are all equivalent.
func emptyMavenConfigDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
  oSnap, nSnap := d.GetChange("maven_config.0.allow_snapshot_overwrites")
  if oSnap.(bool) != nSnap.(bool) {
    return false
  }
  oPolicy, nPolicy := d.GetChange("maven_config.0.version_policy")
  return isDefaultEnum(oPolicy) && isDefaultEnum(nPolicy)
}
