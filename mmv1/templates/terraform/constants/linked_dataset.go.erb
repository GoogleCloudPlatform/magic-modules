<% unless compiler == "terraformvalidator-codegen" -%>

func creationError(d *schema.ResourceData) error {
	// Casts are not safe since the logic that populate it is type deterministic.
	error := d.Get("error").([]interface{})[0].(map[string]interface{})
	message := error["message"].(string)
	details := error["details"].(map[string]interface{})
	detailsJSON, _ := json.Marshal(details)
	return fmt.Errorf("Failed to create LinkedDataset. %s details = %s", message, string(detailsJSON))
}

// waitForLinkedDatasetReady waits for a linked dataset lifecycle_state to become
// ACTIVE, if the lifecycle_state is FAILED propegate the error to the user.
func waitForLinkedDatasetReady(d *schema.ResourceData, config *Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceLoggingProjectLinkedDatasetRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		lifecycle_state := d.Get("lifecycle_state").(string)
		if lifecycle_state == "CREATING" {
			return resource.RetryableError(fmt.Errorf("LinkedDataset %q has lifecycle_state %q.", name, lifecycle_state))
		} else if lifecycle_state == "ACTIVE" {
			log.Printf("[DEBUG] LinkedDataset %q has lifecycle_state %q.", name, lifecycle_state)
			return nil
		} else if lifecycle_state == "FAILED" {
			return resource.NonRetryableError(creationError(d))
		} else {
			return resource.NonRetryableError(fmt.Errorf("LinkedDataset %q has lifecycle_state %q.", name, lifecycle_state))
		}
	})
}

func waitForLinkedDatasetDelete(d *schema.ResourceData, config *Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceLoggingProjectLinkedDatasetRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		lifecycle_state := d.Get("lifecycle_state").(string)
		if lifecycle_state =="DELETE_REQUESTED" {
			return resource.RetryableError(fmt.Errorf("LinkedDataset %q has lifecycle_state %q.", name, lifecycle_state))
		}
		return nil
	})
}

<% end -%>
