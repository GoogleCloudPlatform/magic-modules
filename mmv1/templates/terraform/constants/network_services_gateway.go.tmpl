{{/*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}
// Checks if there is another gateway under the same location.
func gatewaysSameLocation(d *schema.ResourceData, config *transport_tpg.Config, billingProject, userAgent string) ([]interface{}, error) {
	log.Print("[DEBUG] Looking for gateways under the same location.")
	var gateways []interface{}

	gatewaysUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}NetworkServicesBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/gateways")
	if err != nil {
		return gateways, err
	}

	resp, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "GET",
		Project: billingProject,
		RawURL: gatewaysUrl,
		UserAgent: userAgent,
	})
	if err != nil {
		return gateways, err
	}

	data, ok := resp["gateways"]
	if !ok || data == nil {
		log.Print("[DEBUG] No gateways under the same location found.")
		return gateways, nil
	}

	gateways = data.([]interface{})

	log.Printf("[DEBUG] There are still gateways under the same location: %#v", gateways)

	return gateways, nil
}

// Checks if the given list of gateways contains a gateway of type SECURE_WEB_GATEWAY.
func isLastSWGGateway(gateways []interface{}, network string) bool {
	log.Print("[DEBUG] Checking if this is the last gateway of type SECURE_WEB_GATEWAY.")
	for _, itemRaw := range gateways {
		if itemRaw == nil {
			continue
		}
		item := itemRaw.(map[string]interface{})

		gType, ok := item["type"]
		if !ok || gType == nil {
			continue
		}

		gNetwork, ok := item["network"]
		if !ok || gNetwork == nil {
			continue
		}

		if gType.(string) == "SECURE_WEB_GATEWAY" && gNetwork.(string) == network {
			return false
		}
	}

	log.Print("[DEBUG] There is no other gateway of type SECURE_WEB_GATEWAY.")
	// no gateways of type SWG found.
	return true
}

//Deletes the swg-autogen-router if the current gateway being deleted is the type of swg so there is no other gateway using it.
func deleteSWGAutoGenRouter(d *schema.ResourceData, config *transport_tpg.Config, billingProject, userAgent string) error {
	log.Printf("[DEBUG] Searching the network id by name %q.", d.Get("network"))

	networkPath := fmt.Sprintf("{{"{{"}}ComputeBasePath{{"}}"}}%s", d.Get("network"))
	networkUrl, err := tpgresource.ReplaceVars(d, config, networkPath)
	if err != nil {
		return err
	}

	resp, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "GET",
		Project: billingProject,
		RawURL: networkUrl,
		UserAgent: userAgent,
	})
	if err != nil {
		return err
	}

	// The name of swg auto generated router is in the following format: swg-autogen-router-{NETWORK-ID}
	routerId := fmt.Sprintf("swg-autogen-router-%s", resp["id"])
	log.Printf("[DEBUG] Deleting the auto generated router %q.", routerId)

	routerPath := fmt.Sprintf("{{"{{"}}ComputeBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/regions/{{"{{"}}location{{"}}"}}/routers/%s", routerId)
	routerUrl, err := tpgresource.ReplaceVars(d, config, routerPath)
	if err != nil {
		return err
	}

	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "DELETE",
		Project: billingProject,
		RawURL: routerUrl,
		UserAgent: userAgent,
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.IsSwgAutogenRouterRetryable},
	})
	if err != nil {
		if transport_tpg.IsGoogleApiErrorWithCode(err, 404) {
			// The swg auto gen router may have already been deleted.
			// No further action needed.
			return nil
		}

		return err
	}

	return nil
}
