func resourceServiceNetworkingVPCServiceControlsSet(d *schema.ResourceData, meta interface{}, config *transport_tpg.Config) error {
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return err
	}
	projectNumber, err := getProjectNumber(d, config, project, userAgent)
	if err != nil {
		return err
	}

	network := d.Get("network").(string)
	enabled := d.Get("enabled").(bool)

	obj := make(map[string]interface{})
	obj["consumerNetwork"] = fmt.Sprintf("projects/%s/global/networks/%s", projectNumber, network)

	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}ServiceNetworkingBasePath{{"}}"}}services/{{"{{"}}service{{"}}"}}")
	if err != nil {
		return err
	}

	if enabled {
		url = url + ":enableVpcServiceControls"
	} else {
		url = url + ":disableVpcServiceControls"
	}

	log.Printf("[DEBUG] Setting service networking VPC service controls: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating VPCServiceControls: %s", err)
	}

	id, err := tpgresource.ReplaceVars(d, config, "services/{{"{{"}}service{{"}}"}}/projects/{{"{{"}}project{{"}}"}}/networks/{{"{{"}}network{{"}}"}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ServiceNetworkingOperationWaitTime(
		config, res, "Setting service networking VPC service controls", userAgent, project,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to set service networking VPC service controls: %s", err)
	}

	log.Printf("[DEBUG] Finished setting service networking VPC service controls %q: %#v", d.Id(), res)

	return resourceServiceNetworkingVPCServiceControlsRead(d, meta)
}
