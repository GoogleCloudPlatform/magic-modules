func vmwareenginePrivateCloudStandardTypeDiffSuppressFunc(_, old, new string, d *schema.ResourceData) bool {
	if (old == "STANDARD" && new == "") || (old == "" && new == "STANDARD") {
		return true
	}
    if (isMultiNodePrivateCloud(d) && old == "TIME_LIMITED" && new == "STANDARD") {
        log.Printf("[DEBUG] Multinode Private Cloud found, facilitating TYPE change to STANDARD")
        return true
    }
	return false
}

func isMultiNodePrivateCloud(d *schema.ResourceData) bool {
    nodeConfigMap := d.Get("management_cluster.0.node_type_configs").(*schema.Set).List()
    totalNodeCount := 0
    for _, nodeConfig := range nodeConfigMap {
        configMap, ok := nodeConfig.(map[string]interface{})
        if !ok {
            log.Printf("[DEBUG] Invalid node configuration format for private cloud.")
            continue 
        }
        nodeCount, ok := configMap["node_count"].(int)
        if !ok {
            log.Printf("[DEBUG] Invalid node_count format for private cloud.")
            continue 
        }
        totalNodeCount += nodeCount
    }
    log.Printf("[DEBUG] The node count of the private cloud is found to be %v nodes.", totalNodeCount)
    if totalNodeCount > 2 {
        return true
    }
    return false
}

func isPrivateCloudInDeletedState(config *transport_tpg.Config, d *schema.ResourceData, billingProject string, userAgent string) (bool, error) {
    baseurl, err := tpgresource.ReplaceVars(d, config, "{{<%=object.__product.name-%>BasePath}}<%=object.self_link_uri-%>")
    if err != nil {
        return false, err
    }
    res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
        Config: config,
        Method: "GET",
        Project: billingProject,
        RawURL: baseurl,
        UserAgent: userAgent,
    })
    if err != nil {
        if gerr, ok := err.(*googleapi.Error); ok && gerr.Code == 404 {
			log.Printf("[DEBUG] No existing private cloud found")
			return false, nil
		} 
        return false, err
    }
    // if resource exists but is marked for deletion
    v, ok := res["state"]
    if ok && v.(string) == "DELETED" {
        log.Printf("[DEBUG] The Private cloud exists and is marked for deletion.")
        return true, nil
    }
    return false, nil
}

// Check if private cloud is absent or if it exists in a deleted state.
func pollCheckForPrivateCloudAbsence(resp map[string]interface{}, respErr error) transport_tpg.PollResult {
    if respErr != nil {
        if transport_tpg.IsGoogleApiErrorWithCode(respErr, 404) {
            return transport_tpg.SuccessPollResult()
        }
        return transport_tpg.ErrorPollResult(respErr)
    }
    // if resource exists but is marked for deletion
    log.Printf("[DEBUG] Fetching state of the private cloud.")
    v, ok := resp["state"]
    if ok && v.(string) == "DELETED" {
        log.Printf("[DEBUG] The Private cloud has been successfully marked for delayed deletion.")
        return transport_tpg.SuccessPollResult()
    }
    return transport_tpg.PendingStatusPollResult("found")
}
