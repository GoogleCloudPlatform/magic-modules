// DiffSuppressFunc for the squash_mode attribute
func suppressSquashModeDiff(k, old, new string, d *schema.ResourceData) bool {
	// k: The key of the field, e.g., "export_policy.0.rules.1.squash_mode"
	// old: The value in the state (what the API returned on last read)
	// new: The value in the configuration (what the user set)
	// d: The ResourceData for the entire resource

	// Check if the field is present in the *new* configuration.
    // d.GetOkExists(k) returns true if the key exists and has a non-zero value.
    // We want to suppress if the field is *not* in the config.
    _, configExists := d.GetOkExists(k)

    // Define the expected server-side default value. This must match what the API returns.
    // Replace "YOUR_API_SERVER_DEFAULT_VALUE" with the actual default string, number, etc.
    serverDefault := "NO_ROOT_SQUASH"

    // Suppress the diff if:
    // 1. The field is NOT defined in the user's .tf configuration (configExists is false).
    // 2. The value currently in Terraform's state ('old') is equal to the server's default.
    //    'old' comes from the API's GET response during the refresh.
    if !configExists && old == serverDefault {
        // The user omitted the field, we sent null, and the API reverted to its default.
        // We suppress the diff because this state is acceptable.
        return true
    }

    // Otherwise, do not suppress the diff.
    return false
}
