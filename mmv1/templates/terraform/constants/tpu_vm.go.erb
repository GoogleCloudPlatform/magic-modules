
// Suppress unremovable default scope values from GCP.
func tpuServiceAccountAddedScopesSuppress(k, old, new string, d *schema.ResourceData) bool {
	if strings.Contains(k, "scope.#") && (new == "0" || new == "") && old != new {
		return false
	}

	// Get changes for service_account.xx.scope
	b := strings.Split(k, ".")
	o, n := d.GetChange(strings.TrimSuffix(k, "."+b[len(b)-1]))
	if o == nil || n == nil {
		return false
	}

	oList := normalizeScopes(tpgresource.ConvertStringArr(o.([]interface{})))
	nList := normalizeScopes(tpgresource.ConvertStringArr(n.([]interface{})))

	return reflect.DeepEqual(oList, nList)
}

// Normalize the scopes by filtering out the `https://www.googleapis.com/auth/pubsub` scope during
// comparison
func normalizeScopes(scopes []string) []string {
	var result []string
	for _, s := range scopes {
		if s != "https://www.googleapis.com/auth/pubsub" {
			result = append(result, s)
		}
	}
	return result
}

// For backwards compatibility, we need to maintain original behavior where `accelerator_type`
// defaults "v2-8" when nothing is set. However, if the newly introduced `accelerator_config` field
// is set, then use that value instead of the `accelerator_type` default.
func acceleratorTypeCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, v interface{}) error {
	_, isTypeSet := diff.GetOk("accelerator_type")
	_, isConfigSet := diff.GetOk("accelerator_config")
	if !isTypeSet && !isConfigSet {
		if err := diff.SetNew("accelerator_type", "v2-8"); err != nil {
			return err
		}
	}

	return nil	
}
