var vertexAIPipelineJobGoogleProvidedLabels = []string{
	"vertex-ai-pipelines-run-billing-id",
}

func VertexAIPipelineJobLabelDiffSuppress(k, old, new string, d *schema.ResourceData) bool {
	// Suppress diffs for the labels provided by Google
	for _, label := range vertexAIPipelineJobGoogleProvidedLabels {
		if strings.Contains(k, label) && new == "" {
			return true
		}
	}

	// Let diff be determined by labels (above)
	if strings.Contains(k, "labels.%") {
		return true
	}

	// For other keys, don't suppress diff.
	return false
}

func waitForVertexAIPipelineJobReady(d *schema.ResourceData, config *transport_tpg.Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceVertexAIPipelineJobRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		state := d.Get("state").(string)
		if state == "PIPELINE_STATE_QUEUED" || state == "PIPELINE_STATE_PENDING" || state == "PIPELINE_STATE_CANCELLING" {
			return resource.RetryableError(fmt.Errorf("VertexAIPipelineJob %q has state %q.", name, state))
		} else if state == "PIPELINE_STATE_SUCCEEDED" || state == "PIPELINE_STATE_RUNNING" {
			log.Printf("[DEBUG] VertexAIPipelineJob %q has state %q.", name, state)
			return nil
		} else {
			return resource.NonRetryableError(fmt.Errorf("VertexAIPipelineJob %q has state %q.", name, state))
		}
	})
}

func waitForVertexAIPipelineJobReadyForDeletion(d *schema.ResourceData, config *transport_tpg.Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceVertexAIPipelineJobRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		state := d.Get("state").(string)
		if state == "PIPELINE_STATE_RUNNING" || state == "PIPELINE_STATE_PENDING" || state == "PIPELINE_STATE_CANCELLING" {
			return resource.RetryableError(fmt.Errorf("VertexAIPipelineJob %q has state %q.", name, state))
		} else {
			log.Printf("[DEBUG] VertexAIPipelineJob %q has state %q.", name, state)
			return nil
		}
	})
}