{{/*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}
func resourceNameSetFromSelfLinkSet(v interface{}) *schema.Set {
	if v == nil {
		return schema.NewSet(schema.HashString, nil)
	}
	vSet := v.(*schema.Set)
	ls := make([]interface{}, 0, vSet.Len())
	for _, v := range vSet.List() {
		if v == nil {
			continue
		}
		ls = append(ls, tpgresource.GetResourceNameFromSelfLink(v.(string)))
	}
	return schema.NewSet(schema.HashString, ls)
}

// drain_nat_ips MUST be set from (just set) previous values of nat_ips
// so this customizeDiff func makes sure drainNatIps values:
//   - aren't set at creation time
//   - are in old value of nat_ips but not in new values
func resourceComputeRouterNatDrainNatIpsCustomDiff(_ context.Context, diff *schema.ResourceDiff, meta interface{}) error {
	o, n := diff.GetChange("drain_nat_ips")
	oSet := resourceNameSetFromSelfLinkSet(o)
	nSet := resourceNameSetFromSelfLinkSet(n)
	addDrainIps := nSet.Difference(oSet)

	// We don't care if there are no new drainNatIps
	if addDrainIps.Len() == 0 {
		return nil
	}

	// Resource hasn't been created yet - return error
	if diff.Id() == "" {
		return fmt.Errorf("New RouterNat cannot have drain_nat_ips, got values %+v", addDrainIps.List())
	}
	//
	o, n = diff.GetChange("nat_ips")
	oNatSet := resourceNameSetFromSelfLinkSet(o)
	nNatSet := resourceNameSetFromSelfLinkSet(n)

	// Resource is being updated - make sure new drainNatIps were in natIps prior d and no longer are in natIps.
	for _, v := range addDrainIps.List() {
		if !oNatSet.Contains(v) {
			return fmt.Errorf("drain_nat_ip %q was not previously set in nat_ips %+v", v.(string), oNatSet.List())
		}
		if nNatSet.Contains(v) {
			return fmt.Errorf("drain_nat_ip %q cannot be drained if still set in nat_ips %+v", v.(string), nNatSet.List())
		}
	}
	return nil
}

func computeRouterNatSubnetworkHash(v interface{}) int {
	obj := v.(map[string]interface{})
	name := obj["name"]
	sourceIpRanges := obj["source_ip_ranges_to_nat"]
	sourceIpRangesHash := 0
	if sourceIpRanges != nil {
		sourceIpSet := sourceIpRanges.(*schema.Set)

		for _, ipRange := range sourceIpSet.List() {
			sourceIpRangesHash += schema.HashString(ipRange.(string))
		}
	}

	secondaryIpRangeNames := obj["secondary_ip_range_names"]
	secondaryIpRangeHash := 0
	if secondaryIpRangeNames != nil {
		secondaryIpRangeSet := secondaryIpRangeNames.(*schema.Set)

		for _, secondaryIp := range secondaryIpRangeSet.List() {
			secondaryIpRangeHash += schema.HashString(secondaryIp.(string))
		}
	}
	
	return schema.HashString(tpgresource.GetResourceNameFromSelfLink(name.(string))) + sourceIpRangesHash + secondaryIpRangeHash
}

func resourceComputeRouterNatNatIpAllocateOptionCustomDiff(_ context.Context, diff *schema.ResourceDiff, meta interface{}) error {
	// -------- nat_ip_allocate_option x nat_ips --------
	optRaw, ok := diff.GetOk("nat_ip_allocate_option")
	if !ok {
		return fmt.Errorf("Missing required argument: nat_ip_allocate_option")
	}
	opt := optRaw.(string)

	natIPsCount := 0
	if v, ok := diff.GetOk("nat_ips"); ok && v != nil {
		if set, ok := v.(*schema.Set); ok && set != nil {
			natIPsCount = set.Len()
		}
	}

	switch opt {
	case "MANUAL_ONLY":
		if natIPsCount == 0 {
			return fmt.Errorf("when nat_ip_allocate_option is MANUAL_ONLY, at least one entry in nat_ips must be provided")
		}
	case "AUTO_ONLY":
		if natIPsCount > 0 {
			return fmt.Errorf("when nat_ip_allocate_option is AUTO_ONLY, nat_ips must be empty")
		}
	default:
		return fmt.Errorf("invalid nat_ip_allocate_option %q: expected AUTO_ONLY or MANUAL_ONLY", opt)
	}

	// -------- source_subnetwork_ip_ranges_to_nat rules --------
	ssrRaw, ok := diff.GetOk("source_subnetwork_ip_ranges_to_nat")
	if !ok {
		return fmt.Errorf("Missing required argument: source_subnetwork_ip_ranges_to_nat")
	}
	ssr := ssrRaw.(string)

	// Helper para pegar blocos "subnetwork" como slice
	getSubnetBlocks := func() []interface{} {
		if v, ok := diff.GetOk("subnetwork"); ok && v != nil {
			switch vv := v.(type) {
			case []interface{}:
				return vv
			case *schema.Set:
				return vv.List()
			}
		}
		return nil
	}
	subnets := getSubnetBlocks()

	switch ssr {
	case "LIST_OF_SUBNETWORKS":
		if len(subnets) == 0 {
			return fmt.Errorf("when source_subnetwork_ip_ranges_to_nat is LIST_OF_SUBNETWORKS, at least one subnetwork{} block must be provided")
		}
		// Validar cada bloco subnetwork
		for i, it := range subnets {
			m, ok := it.(map[string]interface{})
			if !ok || m == nil {
				return fmt.Errorf("invalid subnetwork[%d] block", i)
			}

			// name/subnetwork (aceita qualquer um dos dois, conforme schema)
			hasRef := false
			if s, ok := m["subnetwork"].(string); ok && s != "" {
				hasRef = true
			}
			if s, ok := m["name"].(string); ok && s != "" {
				hasRef = true
			}
			if !hasRef {
				return fmt.Errorf("subnetwork[%d]: either 'subnetwork' or 'name' must be set", i)
			}

			// source_ip_ranges_to_nat (list/set/string)
			rangesRaw, ok := m["source_ip_ranges_to_nat"]
			if !ok {
				return fmt.Errorf("subnetwork[%d]: source_ip_ranges_to_nat must be set (ALL_IP_RANGES, PRIMARY_IP_RANGE, or LIST_OF_SECONDARY_IP_RANGES)", i)
			}
			// normaliza para slice de strings
			var ranges []string
			switch rv := rangesRaw.(type) {
			case []interface{}:
				for _, x := range rv {
					if xs, ok := x.(string); ok && xs != "" {
						ranges = append(ranges, xs)
					}
				}
			case *schema.Set:
				for _, x := range rv.List() {
					if xs, ok := x.(string); ok && xs != "" {
						ranges = append(ranges, xs)
					}
				}
			case string:
				if rv != "" {
					ranges = append(ranges, rv)
				}
			}
			if len(ranges) == 0 {
				return fmt.Errorf("subnetwork[%d]: source_ip_ranges_to_nat must contain at least one of: ALL_IP_RANGES, PRIMARY_IP_RANGE, LIST_OF_SECONDARY_IP_RANGES", i)
			}
			valid := map[string]bool{
				"ALL_IP_RANGES":                 true,
				"PRIMARY_IP_RANGE":              true,
				"LIST_OF_SECONDARY_IP_RANGES":   true,
			}
			needsSecondary := false
			for _, r := range ranges {
				if !valid[r] {
					return fmt.Errorf("subnetwork[%d]: invalid source_ip_ranges_to_nat value %q", i, r)
				}
				if r == "LIST_OF_SECONDARY_IP_RANGES" {
					needsSecondary = true
				}
			}
			if needsSecondary {
				secRaw, ok := m["secondary_ip_range_names"]
				if !ok {
					return fmt.Errorf("subnetwork[%d]: secondary_ip_range_names must be provided when source_ip_ranges_to_nat contains LIST_OF_SECONDARY_IP_RANGES", i)
				}
				secLen := 0
				switch sv := secRaw.(type) {
				case []interface{}:
					secLen = len(sv)
				case *schema.Set:
					secLen = sv.Len()
				}
				if secLen == 0 {
					return fmt.Errorf("subnetwork[%d]: secondary_ip_range_names must not be empty when using LIST_OF_SECONDARY_IP_RANGES", i)
				}
			}
		}

	case "ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES":
		// NÃ£o pode haver blocos subnetwork
		if len(subnets) > 0 {
			return fmt.Errorf("when source_subnetwork_ip_ranges_to_nat is %s, subnetwork{} blocks must not be set", ssr)
		}

	default:
		return fmt.Errorf("invalid source_subnetwork_ip_ranges_to_nat %q: expected one of ALL_SUBNETWORKS_ALL_IP_RANGES, ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, LIST_OF_SUBNETWORKS", ssr)
	}

	return nil
}

func computeRouterNatIPsHash(v interface{}) int {
	val := (v.(string))
	newParts := strings.Split(val, "/")
	if len(newParts) == 1 {
		return schema.HashString(newParts[0])
	}
	return schema.HashString(tpgresource.GetResourceNameFromSelfLink(val))
}

func computeRouterNatRulesSubnetHash(v interface{}) int {
	return computeRouterNatIPsHash(v)
}

func computeRouterNatRulesHash(v interface{}) int {
	obj := v.(map[string]interface{})
	ruleNumber := obj["rule_number"].(int)

	description := obj["description"]
	descriptionHash := 0
	if description != nil {
		descriptionHash = schema.HashString(description.(string))
	}

	match := obj["match"].(string)

	sourceNatActiveIpHash := 0
	sourceNatDrainIpHash := 0
	sourceNatActiveRangeHash := 0
	sourceNatDrainRangeHash := 0
	routerNatRulesHash := 0

	if obj["action"] != nil {
		actions := obj["action"].([]interface{})
		if len(actions) != 0 && actions[0] != nil {
			action := actions[0].(map[string]interface{})

			sourceNatActiveIps := action["source_nat_active_ips"]
			if sourceNatActiveIps != nil {
				sourceNatActiveIpSet := sourceNatActiveIps.(*schema.Set)
				for _, sourceNatActiveIp := range sourceNatActiveIpSet.List() {
					sourceNatActiveIpStr := fmt.Sprintf("source_nat_active_ips-%d", computeRouterNatIPsHash(sourceNatActiveIp.(string)))
					sourceNatActiveIpHash += schema.HashString(sourceNatActiveIpStr)
				}
			}

			soureNatDrainIps := action["source_nat_drain_ips"]
			if soureNatDrainIps != nil {
				soureNatDrainIpSet := soureNatDrainIps.(*schema.Set)
				for _, soureNatDrainIp := range soureNatDrainIpSet.List() {
					sourceNatDrainIpStr := fmt.Sprintf("source_nat_drain_ips-%d", computeRouterNatIPsHash(soureNatDrainIp.(string)))
					sourceNatDrainIpHash += schema.HashString(sourceNatDrainIpStr)
				}
			}

			sourceNatActiveRanges := action["source_nat_active_ranges"]
			if sourceNatActiveRanges != nil {
				sourceNatActiveRangesSet := sourceNatActiveRanges.(*schema.Set)
				for _, sourceNatActiveRange := range sourceNatActiveRangesSet.List() {
					sourceNatActiveRangeStr := fmt.Sprintf("source_nat_active_ranges-%d", computeRouterNatRulesSubnetHash(sourceNatActiveRange.(string)))
					sourceNatActiveRangeHash += schema.HashString(sourceNatActiveRangeStr)
				}
			}

			sourceNatDrainRanges := action["source_nat_drain_ranges"]
			if sourceNatDrainRanges != nil {
				sourceNatDrainRangesSet := sourceNatDrainRanges.(*schema.Set)
				for _, sourceNatDrainRange := range sourceNatDrainRangesSet.List() {
					sourceNatDrainRangeStr := fmt.Sprintf("source_nat_drain_ranges-%d", computeRouterNatRulesSubnetHash(sourceNatDrainRange.(string)))
					sourceNatDrainRangeHash += schema.HashString(sourceNatDrainRangeStr)
				}
			}
		}
	}

	routerNatRulesHash = ruleNumber + descriptionHash + schema.HashString(match) + sourceNatActiveIpHash + sourceNatDrainIpHash + sourceNatActiveRangeHash + sourceNatDrainRangeHash
	return routerNatRulesHash
}
