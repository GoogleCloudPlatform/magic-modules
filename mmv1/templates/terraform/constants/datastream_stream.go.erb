<%- # the license inside this block applies to this file
  # Copyright 2022 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
-%>
func resourceDatastreamStreamCustomDiff(_ context.Context, diff *schema.ResourceDiff, meta interface{}) error {
	if diff.HasChange("desired_state") {
		oldState, newState := diff.GetChange("desired_state")

		if isNewResource(diff) {
			if newState.(string) != "NOT_STARTED" && newState.(string) != "RUNNING" {
				return fmt.Errorf("`desired_state` can only be set to `NOT_STARTED` or `RUNNING` when creating a new Stream")
			}
		} else {
			if newState.(string) == "NOT_STARTED" && oldState.(string) != newState.(string) {
				return fmt.Errorf("Field `desired_state` can only be set to `NOT_STARTED` when creating a new Stream")
			}

			if newState.(string) != "RUNNING" && newState.(string) != "PAUSED" {
				return fmt.Errorf("`desired_state` can only be set to `RUNNING` or `PAUSED` when updating a Stream")
			}
		}
	}
	return nil
}

<% unless compiler == "terraformvalidator-codegen" -%>
// waitForDatastreamStreamReady waits for an agent pool to reach a stable state to indicate that it's ready.
func waitForDatastreamStreamReady(d *schema.ResourceData, config *Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceDatastreamStreamRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		state := d.Get("state").(string)
		if state == "STARTING" || state == "DRAINING" {
			return resource.RetryableError(fmt.Errorf("Stream %q has state %q.", name, state))
		} else if state == "NOT_STARTED" || state == "RUNNING" || state == "PAUSED" {
			log.Printf("[DEBUG] Stream %q has state %q.", name, state)
			return nil
		} else {
			return resource.NonRetryableError(fmt.Errorf("Stream %q has state %q.", name, state))
		}
	})
}
<% end -%>
