{{- if ne $.Compiler "terraformgoogleconversion-codegen" }}

func extractError(d *schema.ResourceData) error {
	// Casts are not safe since the logic that populate it is type deterministic.
	error := d.Get("error").([]interface{})[0].(map[string]interface{})
	message := error["message"].(string)
	details := error["details"].(map[string]interface{})
	detailsJSON, _ := json.Marshal(details)
	return fmt.Errorf("Failed to create PrivateConnection. %s details = %s", message, string(detailsJSON))
}

// waitForPrivateConnectionReady waits for a private connection state to become
// CREATED, if the state is FAILED propegate the error to the user.
func waitForPrivateConnectionReady(d *schema.ResourceData, config *transport_tpg.Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceDatastreamPrivateConnectionRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		state := d.Get("state").(string)
		if state == "CREATING" {
			return resource.RetryableError(fmt.Errorf("PrivateConnection %q has state %q.", name, state))
		} else if state == "CREATED" {
			log.Printf("[DEBUG] PrivateConnection %q has state %q.", name, state)
			return nil
		} else if state == "FAILED" {
			return resource.NonRetryableError(extractError(d))
		} else {
			return resource.NonRetryableError(fmt.Errorf("PrivateConnection %q has state %q.", name, state))
		}
	})
}
{{- end }}
