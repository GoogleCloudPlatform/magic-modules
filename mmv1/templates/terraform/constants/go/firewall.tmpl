{{/* 
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/}}
func resourceComputeFirewallRuleHash(v interface{}) int {
	var buf bytes.Buffer
	m := v.(map[string]interface{})
	buf.WriteString(fmt.Sprintf("%s-", strings.ToLower(m["protocol"].(string))))

	// We need to make sure to sort the strings below so that we always
	// generate the same hash code no matter what is in the set.
	if v, ok := m["ports"]; ok && v != nil {
		s := tpgresource.ConvertStringArr(v.([]interface{}))
		sort.Strings(s)

		for _, v := range s {
			buf.WriteString(fmt.Sprintf("%s-", v))
		}
	}

	return tpgresource.Hashcode(buf.String())
}

func diffSuppressEnableLogging(k, old, new string, d *schema.ResourceData) bool {
	if k == "log_config.#" {
		if new == "0" && d.Get("enable_logging").(bool) {
			return true
		}
	}

	return false
}

func resourceComputeFirewallEnableLoggingCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, v interface{}) error {
	enableLogging, enableExists := diff.GetOkExists("enable_logging")
	if !enableExists {
		return nil
	}

	logConfigExists := diff.Get("log_config.#").(int) != 0
	if logConfigExists && enableLogging == false {
		return fmt.Errorf("log_config cannot be defined when enable_logging is false")
	}

	return nil
}

// Per https://github.com/hashicorp/terraform-provider-google/issues/2924
// Make one of the source_ parameters Required in ingress google_compute_firewall
func resourceComputeFirewallSourceFieldsCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, v interface{}) error {
	direction := diff.Get("direction").(string)

	if direction != "EGRESS" {
		_, tagsOk := diff.GetOk("source_tags")
		_, rangesOk := diff.GetOk("source_ranges")
		_, sasOk := diff.GetOk("source_service_accounts")

		_, tagsExist := diff.GetOkExists("source_tags")
		_, rangesExist := diff.GetOkExists("source_ranges")
		_, sasExist := diff.GetOkExists("source_service_accounts")

		if !tagsOk && !rangesOk && !sasOk && !tagsExist && !rangesExist && !sasExist {
			return fmt.Errorf("one of source_tags, source_ranges, or source_service_accounts must be defined")
		}
	}

	return nil
}

func diffSuppressSourceRanges(k, old, new string, d *schema.ResourceData) bool {
	if k == "source_ranges.#" {
		if old == "1" && new == "0" {
			// Allow diffing on the individual element if we are going from 1 -> 0
			// this allows for diff suppress on ["0.0.0.0/0"] -> []
			return true
		}
		// For any other source_ranges.# diff, don't suppress
		return false
	}
	kLength := "source_ranges.#"
	oldLength, newLength := d.GetChange(kLength)
	oldInt, ok := oldLength.(int)

	if !ok {
		return false
	}

	newInt, ok := newLength.(int)
	if !ok {
		return false
	}

	// Diff suppress only should suppress removing the default range
	// This should probably be newInt == 0, but due to Terraform core internals
	// (bug?) values found via GetChange may not have the correct new value
	// in some circumstances
	if oldInt == 1 && newInt == 1 {
		if old == "0.0.0.0/0" && new == "" {
			return true
		}
	}
	// For any other source_ranges value diff, don't suppress
	return false
}