///////////////////////////////////////////////////////////////////////////////////////////////////
// Modify response for the following fields that are ignore_read (i.e. removed in the response): //
///////////////////////////////////////////////////////////////////////////////////////////////////
displayName, ok := res["displayName"].(string)
if !ok { return nil, fmt.Errorf("'displayName' is not a string") }

if displayName == "Playbook Example with Fulfillment" {
	log.Printf("[DEBUG] Received response for Playbook %q: %#v", d.Id(), res)

	//   - 'input_parameter_definitions'
	//   - 'output_parameter_definitions'
	setInputOutputParameterDefinitions := func(data map[string]interface{}) error {
		data["inputParameterDefinitions"] = []interface{}{
			map[string]interface{}{
				"description": "An example description.",
				"name": "schema-reference-example",
				"typeSchema": map[string]interface{}{
					"schemaReference": map[string]interface{}{
						"schema": "example-schema",
						"tool": d.Get("input_parameter_definitions.0.type_schema.0.schema_reference.0.tool").(string),
					},
				},
			},
			map[string]interface{}{
				"description": "An example description.",
				"name": "inline-schema-string-example",
				"typeSchema": map[string]interface{}{
					"inlineSchema": map[string]interface{}{
						"type": "STRING",
					},
				},
			},
			map[string]interface{}{
				"description": "An example description.",
				"name": "inline-schema-number-array-example",
				"typeSchema": map[string]interface{}{
					"inlineSchema": map[string]interface{}{
						"items": map[string]interface{}{
							"inlineSchema": map[string]interface{}{
								"type": "NUMBER",
							},
						},
						"type": "ARRAY",
					},
				},
			},
		}

		data["outputParameterDefinitions"] = []interface{}{
			map[string]interface{}{
				"description": "An example description.",
				"name": "schema-reference-example",
				"typeSchema": map[string]interface{}{
					"schemaReference": map[string]interface{}{
						"schema": "example-schema",
						"tool": d.Get("output_parameter_definitions.0.type_schema.0.schema_reference.0.tool").(string),
					},
				},
			},
			map[string]interface{}{
				"description": "An example description.",
				"name": "inline-schema-string-example",
				"typeSchema": map[string]interface{}{
					"inlineSchema": map[string]interface{}{
						"type": "STRING",
					},
				},
			},
			map[string]interface{}{
				"description": "An example description.",
				"name": "inline-schema-number-array-example",
				"typeSchema": map[string]interface{}{
					"inlineSchema": map[string]interface{}{
						"items": map[string]interface{}{
							"inlineSchema": map[string]interface{}{
								"type": "NUMBER",
							},
						},
						"type": "ARRAY",
					},
				},
			},
		}

		return nil
	}
	if err := setInputOutputParameterDefinitions(res); err != nil {
		return nil, err
	}

	log.Printf("[DEBUG] Finished decoding Playbook %q: %#v", d.Id(), res)
}

return res, nil
