///////////////////////////////////////////////////////////////////////////////////////////////////
// Modify response for the following fields that are ignore_read (i.e. removed in the response): //
///////////////////////////////////////////////////////////////////////////////////////////////////
displayName, ok := res["displayName"].(string)
if !ok { return nil, fmt.Errorf("'displayName' is not a string") }

if displayName == "Playbook Example with Fulfillment" {
	log.Printf("[DEBUG] Received response for Playbook %q: %#v", d.Id(), res)

	//   - 'handlers.2.event_handler.0.fulfillment.0.advanced_settings.0.audio_export_gcs_destination'
	//   - 'handlers.2.event_handler.0.fulfillment.0.advanced_settings.0.logging_settings'
	setHandlers2EventHandlerFulfillmentAdvancedSettings := func(data map[string]interface{}) error {
		// --- Traverse to the parent map ---
		handlers, ok := data["handlers"].([]interface{})
		if !ok { return fmt.Errorf("'handlers' is not a slice") }

		if len(handlers) <= 2 { return fmt.Errorf("index 2 out of bounds for 'handlers'") }
		handler, ok := handlers[2].(map[string]interface{})
		if !ok { return fmt.Errorf("element at 'handlers[2]' is not a map") }

		eventHandler, ok := handler["eventHandler"].(map[string]interface{})
		if !ok { return fmt.Errorf("'eventHandler' is not a map") }

		fulfillment, ok := eventHandler["fulfillment"].(map[string]interface{})
		if !ok { return fmt.Errorf("'fulfillment' is not a map") }

		advancedSettings, ok := fulfillment["advancedSettings"].(map[string]interface{})
		if !ok { return fmt.Errorf("'advancedSettings' is not a map") }

		// --- Update the value to use the original ---
		advancedSettings["audioExportGcsDestination"] = d.Get("handlers.2.event_handler.0.fulfillment.0.advanced_settings.0.audio_export_gcs_destination.0").(map[string]interface{})
		advancedSettings["loggingSettings"] = map[string]interface{}{
			"enableConsentBasedRedaction": true,
			"enableInteractionLogging": true,
			"enableStackdriverLogging": true,
		}

		return nil
	}
	if err := setHandlers2EventHandlerFulfillmentAdvancedSettings(res); err != nil {
		return nil, err
	}

	//   - 'handlers.6.lifecycle_handler.0.fulfillment.0.advanced_settings.0.audio_export_gcs_destination'
	//   - 'handlers.6.lifecycle_handler.0.fulfillment.0.advanced_settings.0.logging_settings'
	setHandlers6LifecycleHandlerFulfillmentAdvancedSettings := func(data map[string]interface{}) error {
		// --- Traverse to the parent map ---
		handlers, ok := data["handlers"].([]interface{})
		if !ok { return fmt.Errorf("'handlers' is not a slice") }

		if len(handlers) <= 6 { return fmt.Errorf("index 6 out of bounds for 'handlers'") }
		handler, ok := handlers[6].(map[string]interface{})
		if !ok { return fmt.Errorf("element at 'handlers[6]' is not a map") }

		lifecycleHandler, ok := handler["lifecycleHandler"].(map[string]interface{})
		if !ok { return fmt.Errorf("'lifecycleHandler' is not a map") }

		fulfillment, ok := lifecycleHandler["fulfillment"].(map[string]interface{})
		if !ok { return fmt.Errorf("'fulfillment' is not a map") }

		advancedSettings, ok := fulfillment["advancedSettings"].(map[string]interface{})
		if !ok { return fmt.Errorf("'advancedSettings' is not a map") }

		// --- Update the value to use the original ---
		advancedSettings["audioExportGcsDestination"] = d.Get("handlers.6.lifecycle_handler.0.fulfillment.0.advanced_settings.0.audio_export_gcs_destination.0").(map[string]interface{})
		advancedSettings["loggingSettings"] = map[string]interface{}{
			"enableConsentBasedRedaction": true,
			"enableInteractionLogging": true,
			"enableStackdriverLogging": true,
		}

		return nil
	}
	if err := setHandlers6LifecycleHandlerFulfillmentAdvancedSettings(res); err != nil {
		return nil, err
	}

	//   - 'handlers.2.event_handler.0.fulfillment.0.messages.1.tool_call'
	setHandlers2EventHandlerFulfillmentMessages1ToolCall := func(data map[string]interface{}) error {
		// --- Traverse to the parent map ---
		handlers, ok := data["handlers"].([]interface{})
		if !ok { return fmt.Errorf("'handlers' is not a slice") }

		if len(handlers) <= 2 { return fmt.Errorf("index 2 out of bounds for 'handlers'") }
		handler, ok := handlers[2].(map[string]interface{})
		if !ok { return fmt.Errorf("element at 'handlers[2]' is not a map") }

		eventHandler, ok := handler["eventHandler"].(map[string]interface{})
		if !ok { return fmt.Errorf("'eventHandler' is not a map") }

		fulfillment, ok := eventHandler["fulfillment"].(map[string]interface{})
		if !ok { return fmt.Errorf("'fulfillment' is not a map") }

		messages, ok := fulfillment["messages"].([]interface{})
		if !ok { return fmt.Errorf("'messages' is not a slice") }

		if len(messages) <= 1 { return fmt.Errorf("index 1 out of bounds for 'messages'") }
		message, ok := messages[1].(map[string]interface{})
		if !ok { return fmt.Errorf("element at 'messages[1]' is not a map") }

		message["toolCall"] = d.Get("handlers.2.event_handler.0.fulfillment.0.messages.1.tool_call.0").(map[string]interface{})
		delete(message["toolCall"].(map[string]interface{}), "input_parameters")
		message["toolCall"].(map[string]interface{})["inputParameters"] = map[string]interface{}{"query": "example-value"}

		return nil
	}
	if err := setHandlers2EventHandlerFulfillmentMessages1ToolCall(res); err != nil {
		return nil, err
	}

	//   - 'handlers.6.lifecycle_handler.0.fulfillment.0.messages.1'
	setHandlers6LifecycleHandlerFulfillmentMessages1ToolCall := func(data map[string]interface{}) error {
		// --- Traverse to the parent map ---
		handlers, ok := data["handlers"].([]interface{})
		if !ok { return fmt.Errorf("'handlers' is not a slice") }

		if len(handlers) <= 6 { return fmt.Errorf("index 6 out of bounds for 'handlers'") }
		handler, ok := handlers[6].(map[string]interface{})
		if !ok { return fmt.Errorf("element at 'handlers[6]' is not a map") }

		lifecycleHandler, ok := handler["lifecycleHandler"].(map[string]interface{})
		if !ok { return fmt.Errorf("'lifecycleHandler' is not a map") }

		fulfillment, ok := lifecycleHandler["fulfillment"].(map[string]interface{})
		if !ok { return fmt.Errorf("'fulfillment' is not a map") }

		messages, ok := fulfillment["messages"].([]interface{})
		if !ok { return fmt.Errorf("'messages' is not a slice") }

		if len(messages) <= 1 { return fmt.Errorf("index 1 out of bounds for 'messages'") }
		message, ok := messages[1].(map[string]interface{})
		if !ok { return fmt.Errorf("element at 'messages[1]' is not a map") }

		message["toolCall"] = d.Get("handlers.6.lifecycle_handler.0.fulfillment.0.messages.1.tool_call.0").(map[string]interface{})
		delete(message["toolCall"].(map[string]interface{}), "input_parameters")
		message["toolCall"].(map[string]interface{})["inputParameters"] = map[string]interface{}{"query": "example-value"}

		return nil
	}
	if err := setHandlers6LifecycleHandlerFulfillmentMessages1ToolCall(res); err != nil {
		return nil, err
	}

	log.Printf("[DEBUG] Finished decoding Playbook %q: %#v", d.Id(), res)
}

return res, nil
