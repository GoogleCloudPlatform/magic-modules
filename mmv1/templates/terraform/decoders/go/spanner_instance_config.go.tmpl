config := meta.(*transport_tpg.Config)
d.SetId(res["name"].(string))
if err := tpgresource.ParseImportId([]string{"projects/(?P<project>[^/]+)/instanceConfigs/(?P<name>[^/]+)"}, d, config); err != nil {
  return nil, err
}
res["project"] = d.Get("project").(string)
res["name"] = d.Get("name").(string)
id, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}project{{"}}"}}/{{"{{"}}name{{"}}"}}")
if err != nil {
return nil, err
}
baseReplicas, err := getBaseInstanceConfigReplicas(d, config, res["baseConfig"], res["project"].(string), config.UserAgent)
if err != nil {
  return nil, err
}
customReplica := make(map[int]interface{})
for _, b := range baseReplicas {
  customReplica[replicasHash(b)] = b
}
var cR []interface{}
for _, r := range res["replicas"].([]interface{}) {
  if _, ok := customReplica[replicasHash(r)]; !ok {
    cR = append(cR, r)
  }
}
res["replicas"] = cR
d.SetId(id)
return res, nil