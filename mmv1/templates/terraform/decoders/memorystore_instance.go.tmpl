// Retrieve pscAutoConnections from API response
v, ok := res["pscAutoConnections"]
if !ok {
	if _, endpointsFound := res["endpoints"]; endpointsFound {
		return res, nil // For Cluster Disabled instances, we would have 'endpoints' instead of 'pscAutoConnections'
	}
	return res, nil
}

connections, ok := v.([]interface{})
if !ok {
	return nil, fmt.Errorf("pscAutoConnections is not an array")
}

transformed := make([]interface{}, 0, len(connections))
uniqueConnections := make(map[string]bool) // Track unique project+network combos

for _, raw := range connections {
	connectionData, ok := raw.(map[string]interface{})
	if !ok || len(connectionData) < 1 {
		return nil, fmt.Errorf("Invalid or empty psc connection data: %v", raw)
	}

	projectID, ok := connectionData["projectId"].(string)
	if !ok {
		return nil, fmt.Errorf("invalid project ID in psc connection: %v", connectionData)
	}

	networkID, ok := connectionData["network"].(string)
	if !ok {
		return nil, fmt.Errorf("invalid network ID in psc connection: %v", connectionData)
	}

	uniqueKey := projectID + networkID
	if !uniqueConnections[uniqueKey] { // Check for uniqueness
		uniqueConnections[uniqueKey] = true
		transformed = append(transformed, map[string]interface{}{
			"project_id": projectID,
			"network":    networkID,
		})
	}
}

d.Set("desired_psc_auto_connections", transformed)

// Retrieve endpoints.connections.pscAutoConnection from API response
endpoints, ok := res["endpoints"]
if ok {
	endpointsArray, ok := endpoints.([]interface{})
	if !ok || len(endpointsArray) == 0 {
		// No endpoints or empty array, nothing to process
	} else {
		transformed := make([]interface{}, 0)
		uniqueEndpoints := make(map[string]bool) // Track unique project+network combos
		
		for _, endpoint := range endpointsArray {
			endpointData, ok := endpoint.(map[string]interface{})
			if !ok {
				continue
			}
			
			connections, ok := endpointData["connections"].([]interface{})
			if !ok {
				continue
			}
			
			for _, connection := range connections {
				connectionData, ok := connection.(map[string]interface{})
				if !ok {
					continue
				}
				
				pscAutoConnection, ok := connectionData["pscAutoConnection"].(map[string]interface{})
				if !ok {
					continue
				}
				
				projectID, projectOk := pscAutoConnection["projectId"].(string)
				networkID, networkOk := pscAutoConnection["network"].(string)
				
				if projectOk && networkOk {
					uniqueKey := projectID + networkID
					if !uniqueEndpoints[uniqueKey] { // Check for uniqueness
						uniqueEndpoints[uniqueKey] = true
						transformed = append(transformed, map[string]interface{}{
							"project_id": projectID,
							"network":    networkID,
						})
					}
				}
			}
		}
		log.Printf("[DEBUG] FYou are in Decode and printing this for transformed %#v", transformed)
		if len(transformed) > 0 {
			d.Set("desired_auto_created_endpoints", transformed)
		}
	}
}
return res, nil
