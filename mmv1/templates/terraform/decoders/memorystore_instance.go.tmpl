    // Retrieve endpoints.connections.pscAutoConnection from API response
	v, ok := res["pscAutoConnections"]
	if ok {

		connections, ok := v.([]interface{})
		if !ok {
			return nil, fmt.Errorf("pscAutoConnections is not an array")
		}

		transformed := make([]interface{}, 0, len(connections))
		uniqueConnections := make(map[string]bool) // Track unique project+network combos

		for _, raw := range connections {
			connectionData, ok := raw.(map[string]interface{})
			if !ok || len(connectionData) < 1 {
				return nil, fmt.Errorf("Invalid or empty psc connection data: %v", raw)
			}

			projectID, ok := connectionData["projectId"].(string)
			if !ok {
				return nil, fmt.Errorf("invalid project ID in psc connection: %v", connectionData)
			}

			networkID, ok := connectionData["network"].(string)
			if !ok {
				return nil, fmt.Errorf("invalid network ID in psc connection: %v", connectionData)
			}

			uniqueKey := projectID + networkID
			if !uniqueConnections[uniqueKey] { // Check for uniqueness
				uniqueConnections[uniqueKey] = true
				transformed = append(transformed, map[string]interface{}{
					"project_id": projectID,
					"network":    networkID,
				})
			}
		}
		d.Set("desired_psc_auto_connections", transformed)
		log.Printf("[DEBUG] You are setting desired_psc_auto_connections in decoder %#v", transformed)

	// Retrieve pscAutoConnections from API response
	} else if v, ok := res["endpoints"]; ok {

		endpointsArray, ok := v.([]interface{})
		if !ok || len(endpointsArray) == 0 {
			// No endpoints or empty array, nothing to process
		} else {
			transformed := make([]interface{}, 0)
			uniqueEndpoints := make(map[string]bool) // Track unique project+network combos

			for _, endpoint := range endpointsArray {
				endpointData, ok := endpoint.(map[string]interface{})
				if !ok {
					continue
				}

				connections, ok := endpointData["connections"].([]interface{})
				if !ok {
					continue
				}

				for _, connection := range connections {
					connectionData, ok := connection.(map[string]interface{})
					if !ok {
						continue
					}

					pscAutoConnection, ok := connectionData["pscAutoConnection"].(map[string]interface{})
					if !ok {
						continue
					}

					projectID, projectOk := pscAutoConnection["projectId"].(string)
					networkID, networkOk := pscAutoConnection["network"].(string)

					if projectOk && networkOk {
						uniqueKey := projectID + networkID
						if !uniqueEndpoints[uniqueKey] { // Check for uniqueness
							uniqueEndpoints[uniqueKey] = true
							transformed = append(transformed, map[string]interface{}{
								"project_id": projectID,
								"network":    networkID,
							})
						}
					}
				}
			}
			if len(transformed) > 0 {
				d.Set("desired_auto_created_endpoints", transformed)
				log.Printf("[DEBUG] Setting desired_auto_created_endpoints in decoder for %#v", transformed)

			}
		}

	}

	return res, nil