config := meta.(*transport_tpg.Config)

userAgent, err :=  tpgresource.GenerateUserAgentString(d, config.UserAgent)
if err != nil {
  return nil, err
}

if v, ok := res["authEnabled"].(bool); ok {
	if v {
		url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}RedisBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}region{{"}}"}}/instances/{{"{{"}}name{{"}}"}}/authString")
		if err != nil {
			return nil, err
		}

		billingProject := ""

		project, err := tpgresource.GetProject(d, config)
		if err != nil {
			return nil, fmt.Errorf("Error fetching project for Instance: %s", err)
		}

		billingProject = project

		// err == nil indicates that the billing_project value was found
		if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
			billingProject = bp
		}

		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config: config,
			Method: "GET",
			Project: billingProject,
			RawURL: url,
			UserAgent: userAgent,
		})
		if err != nil {
			return nil, fmt.Errorf("Error reading AuthString: %s", err)
		}

		if err := d.Set("auth_string", res["authString"]); err != nil {
			return nil, fmt.Errorf("Error reading Instance: %s", err)
		}
	}
} else {
	if err := d.Set("auth_string", ""); err != nil {
		return nil, fmt.Errorf("Error reading Instance: %s", err)
	}
}

return res, nil