if v, ok := res["diskEncryptionKey"]; ok {
  original := v.(map[string]interface{})
  transformed := make(map[string]interface{})
  // The raw key won't be returned, so we need to use the original.
  transformed["rawKey"] = d.Get("disk_encryption_key.0.raw_key")
  transformed["rsaEncryptedKey"] = d.Get("disk_encryption_key.0.rsa_encrypted_key")
  transformed["sha256"] = original["sha256"]
  
  if rawKey, diags := d.GetRawConfigAt(cty.GetAttrPath("disk_encryption_key").IndexInt(0).GetAttr("raw_key_wo"));
   !diags.HasError() && rawKey.IsKnown() && !rawKey.IsNull() {
   transformed["rawKeyWo"] = rawKey.AsString()
  }

  if rsaKey, diags := d.GetRawConfigAt(cty.GetAttrPath("disk_encryption_key").IndexInt(0).GetAttr("rsa_encrypted_key_wo"));
   !diags.HasError() && rsaKey.IsKnown() && !rsaKey.IsNull() {
   transformed["rsaEncryptedKeyWo"] = rsaKey.AsString()
  }
  
  if val, diags := d.GetRawConfigAt(cty.GetAttrPath("disk_encryption_key").IndexInt(0).GetAttr("raw_key_wo_version"));
   !diags.HasError() && val.IsKnown() && !val.IsNull() {
    intVal, _ := val.AsBigFloat().Int64()
    transformed["rawKeyWoVersion"] = intVal
  }

  if val, diags := d.GetRawConfigAt(cty.GetAttrPath("disk_encryption_key").IndexInt(0).GetAttr("rsa_encrypted_key_wo_version"));
   !diags.HasError() && val.IsKnown() && !val.IsNull() {
    intVal1, _ := val.AsBigFloat().Int64()
    transformed["rsaEncryptedKeyWoVersion"] = intVal1
  }


  if kmsKeyName, ok := original["kmsKeyName"]; ok {
    // The response for crypto keys often includes the version of the key which needs to be removed
    // format: projects/<project>/locations/<region>/keyRings/<keyring>/cryptoKeys/<key>/cryptoKeyVersions/1
    transformed["kmsKeyName"] = strings.Split(kmsKeyName.(string), "/cryptoKeyVersions")[0]
  }

  if kmsKeyServiceAccount, ok := original["kmsKeyServiceAccount"]; ok {
    transformed["kmsKeyServiceAccount"] = kmsKeyServiceAccount
  }

  res["diskEncryptionKey"] = transformed
}

if v, ok := res["sourceImageEncryptionKey"]; ok {
  original := v.(map[string]interface{})
  transformed := make(map[string]interface{})
  // The raw key won't be returned, so we need to use the original.
  transformed["rawKey"] = d.Get("source_image_encryption_key.0.raw_key")
  transformed["sha256"] = original["sha256"]

  if kmsKeyName, ok := original["kmsKeyName"]; ok {
    // The response for crypto keys often includes the version of the key which needs to be removed
    // format: projects/<project>/locations/<region>/keyRings/<keyring>/cryptoKeys/<key>/cryptoKeyVersions/1
    transformed["kmsKeyName"] = strings.Split(kmsKeyName.(string), "/cryptoKeyVersions")[0]
  }

  if kmsKeyServiceAccount, ok := original["kmsKeyServiceAccount"]; ok {
    transformed["kmsKeyServiceAccount"] = kmsKeyServiceAccount
  }

  res["sourceImageEncryptionKey"] = transformed
}

if v, ok := res["sourceSnapshotEncryptionKey"]; ok {
  original := v.(map[string]interface{})
  transformed := make(map[string]interface{})
  // The raw key won't be returned, so we need to use the original.
  transformed["rawKey"] = d.Get("source_snapshot_encryption_key.0.raw_key")
  transformed["sha256"] = original["sha256"]

  if kmsKeyName, ok := original["kmsKeyName"]; ok {
    // The response for crypto keys often includes the version of the key which needs to be removed
    // format: projects/<project>/locations/<region>/keyRings/<keyring>/cryptoKeys/<key>/cryptoKeyVersions/1
    transformed["kmsKeyName"] = strings.Split(kmsKeyName.(string), "/cryptoKeyVersions")[0]
  }

  if kmsKeyServiceAccount, ok := original["kmsKeyServiceAccount"]; ok {
    transformed["kmsKeyServiceAccount"] = kmsKeyServiceAccount
  }

  res["sourceSnapshotEncryptionKey"] = transformed
}

return res, nil
