aspectKeysOfInterest := make(map[string]struct{})
if d.HasChange("aspects") {
	currentAspects, futureAspects := d.GetChange("aspects")
	AddAspectsToSet(aspectKeysOfInterest, currentAspects)
	AddAspectsToSet(aspectKeysOfInterest, futureAspects)
} else {
	AddAspectsToSet(aspectKeysOfInterest, d.Get("aspects"))
}

FilterAspects(aspectKeysOfInterest, res)
InverseTransformAspects(res)

return res, nil
