aspects := res["aspects"]
if aspects != nil {
	_, errors := NumberOfAspectsValidation(aspects, "aspects")
	if len(errors) > 0 {
		return nil, errors[0]
	}
}

aspectKeysOfInterest := make(map[string]struct{})
var err error

if d.HasChange("aspects") {
	currentAspects, futureAspects := d.GetChange("aspects")
	err = AddAspectsToSet(aspectKeysOfInterest, currentAspects)
	if err != nil {
		return nil, err
	}
	err = AddAspectsToSet(aspectKeysOfInterest, futureAspects)
	if err != nil {
		return nil, err
	}
} else {
	err = AddAspectsToSet(aspectKeysOfInterest, d.Get("aspects"))
	if err != nil {
		return nil, err
	}
}

err = FilterAspects(aspectKeysOfInterest, res)

if err != nil {
	return nil, err
}

err = InverseTransformAspects(res)

if err != nil {
	return nil, err
}

return res, nil
