{{/*
	The license inside this block applies to this file
	Copyright 2025 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}
if obj, ok := res["credentials"]; ok {
	if credList, ok := obj.([]interface{}); ok && len(credList) > 0 {
		if cred, ok := credList[0].(map[string]interface{}); ok {
			// Decode expiresAt
			res["keyExpiresIn"] = cred["expiresAt"]

			// Decode scopes
			res["scopes"] = cred["scopes"]

			// Decode api_products
			if apiProductsObj, productsOk := cred["apiProducts"]; productsOk {
				if apiProductList, listOk := apiProductsObj.([]interface{}); listOk {
					var flattenedProducts []interface{}
					for _, productObj := range apiProductList {
						if productMap, mapOk := productObj.(map[string]interface{}); mapOk {
							if productName, nameOk := productMap["apiproduct"].(string); nameOk {
								flattenedProducts = append(flattenedProducts, productName)
							}
						}
					}
					res["apiProducts"] = flattenedProducts
				}
			}
		} else {
			return nil, fmt.Errorf("Unable to decode the first element of the credentials array.")
		}
	} else {
		return nil, fmt.Errorf("Unable to decode credentials block from API response, expected a non-empty array.")
	}
}
return res, nil
