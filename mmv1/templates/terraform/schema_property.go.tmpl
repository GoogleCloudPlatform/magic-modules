{{/*# The license inside this block applies to this file.
  # Copyright 2024 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
*/}}
{{- define "SchemaFields"}}
{{- if .FlattenObject -}}
	{{- range $prop := orderProperties .Properties -}}
		{{- template "SchemaFields" $prop -}}
	{{- end -}}
{{- else -}}
"{{underscore .Name -}}": {
{{ if .IsSet -}}
  Type: schema.TypeSet,
  {{- else -}}
  Type: {{ $.TFType .Type }},
  {{- end }}
{{ if .DefaultFromApi -}}
	Computed: true,
	Optional: true,
	{{ if .SchemaConfigModeAttr -}}
	ConfigMode: schema.SchemaConfigModeAttr,
	{{ end -}}
{{ else if .Required -}}
  Required: true,
{{ else if .Output -}}
  Computed: true,
{{ else -}}
  Optional: true,
{{ end -}}
{{ if .DeprecationMessage -}}
  Deprecated: "{{ .DeprecationMessage }}",
{{ end -}}
{{ if .Immutable -}}
  ForceNew: true,
{{ end -}}
{{ if .Validation -}}
	{{ if .Validation.Regex -}}
  ValidateFunc: verify.ValidateRegexp(`{{ .Validation.Regex -}}`),
	{{ else if .Validation.Function -}}
  ValidateFunc: {{ .Validation.Function -}},
	{{ end  -}}
{{ end -}}
{{ if and (eq .Type "Enum") (not .Output) -}}
	ValidateFunc: verify.ValidateEnum([]string{ {{- .EnumValuesToString "\"" -}} }),
{{ end -}}
{{ if .DiffSuppressFunc -}}
  DiffSuppressFunc: {{ .DiffSuppressFunc }},
{{ else if eq .Type "ResourceRef" -}}
  DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
{{ end -}}
{{ if .StateFunc -}}
	StateFunc: {{ .StateFunc }},
{{ end -}}
  Description: `{{ replace .Description "`" "'" -1 -}}
{{ if and (eq .Type "Array") (eq .ItemType.Type "Enum") (not .Output) (not .ItemType.SkipDocsValues) -}}
{{ if .ItemType.DefaultValue -}}
Default value: {{ .ItemType.DefaultValue -}}
{{ end -}}
Possible values: [{{- .EnumValuesToString "\"" -}}]
{{ else if and (eq .Type "Enum") (not .Output) -}}
{{ if .DefaultValue -}}
Default value: {{.DefaultValue -}}
{{ end -}}
{{" "}}Possible values: [{{- .EnumValuesToString "\"" -}}]
{{- end -}}`,
{{ if eq .Type "NestedObject" -}}
  {{ if not .Output -}}
  MaxItems: 1,
  {{ end -}}
  Elem: &schema.Resource{
    Schema: map[string]*schema.Schema{
      {{- range $prop := orderProperties $.Properties }}
      {{template "SchemaFields" $prop}}
      {{- end }}
    },
  },
{{ else if eq .Type "Array" -}}
  {{ if .MinSize -}}
      MinItems: {{ .MinSize }},
  {{ end -}}
  {{ if .MaxSize -}}
      MaxItems: {{ .MaxSize }},
  {{ end -}}
  {{ if eq .ItemType.Type "NestedObject" -}}
    {{ if .IsSet -}}
      Elem: {{ .NamespaceProperty }}Schema(),
    {{ else -}}
      Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
            {{- range $prop := orderProperties $.ItemType.Properties }}
            {{template "SchemaFields" $prop}}
            {{- end }}
        },
      },
    {{ end -}}
  {{ else if eq .ItemType.Type "String" -}}
      Elem: &schema.Schema{
        Type: {{ .ItemTypeClass -}},
      },
  {{ else if eq .ItemType.Type "Enum" -}}
      Elem: &schema.Schema{
        Type: {{ .ItemTypeClass -}},
        ValidateFunc: verify.ValidateEnum([]string{ {{- .ItemType.EnumValuesToString "\"" -}} }),
      },
  {{ else -}}
      Elem: &schema.Schema{
        Type: {{ .ItemTypeClass -}},
    {{ if eq .ItemType.Type "ResourceRef" -}}
        DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
    {{ end -}}
      },
  {{ end -}}
  {{ if .IsSet -}}
    {{ if .SetHashFunc -}}
    Set: {{ .SetHashFunc -}},
    {{ else if or (eq .ItemType "String") (eq .ItemType.Type "Enum") -}}
    Set: schema.HashString,
    {{ else -}}
    // Default schema.HashSchema is used.
    {{ end -}}
  {{ end -}}
{{ else if hasPrefix .Type "KeyValue" -}}{{- /* KeyValueLabels, KeyValueTerraformLabels, KeyValueEffectiveLabels, KeyValueAnnotations are types similar to KeyValuePairs*/ -}}
  Elem: &schema.Schema{Type: schema.TypeString},
{{ else if eq .Type "Map" -}}
	Elem: &schema.Resource{
		Schema: map[string]*schema.Schema{
			"{{ .KeyName -}}": {
				Type:     schema.TypeString,
				Required: true,
				{{ if .KeyDiffSuppressFunc -}}
					DiffSuppressFunc: {{ .KeyDiffSuppressFunc }},
				{{ end -}}
				{{ if .Immutable -}}
				ForceNew: true,
				{{ end -}}
			},
      {{- range $prop := orderProperties $.ValueType.Properties }}
        {{template "SchemaFields" $prop}}
      {{- end }}
		},
	},
	{{ if .SetHashFunc -}}
	Set: {{ .SetHashFunc -}},
	{{ end -}}
{{ end -}}
{{ if .Sensitive -}}
    Sensitive: true,
{{ end -}}
{{ if .DefaultValue -}}
    Default: {{ .GoLiteral .DefaultValue -}},
{{ end -}}
{{ if .Conflicting -}}
    ConflictsWith: {{ .GoLiteral .Conflicting  -}},
{{ end -}}
{{ if .AtLeastOneOfList -}}
    AtLeastOneOf: {{ .GoLiteral .AtLeastOneOfList  -}},
{{ end -}}
{{ if .ExactlyOneOfList -}}
    ExactlyOneOf: {{ .GoLiteral .ExactlyOneOfList  -}},
{{ end -}}
{{ if .RequiredWithList -}}
    RequiredWith: {{ .GoLiteral .RequiredWithList  -}},
{{ end -}}
},
{{- end -}}
{{- end -}}
