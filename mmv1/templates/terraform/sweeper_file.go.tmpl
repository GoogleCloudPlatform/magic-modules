{{- if ne $.Compiler "terraformgoogleconversion-codegen" -}}
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
{{ end }}
{{$.CodeHeader TemplatePath}}

package {{ lower $.ProductMetadata.Name }}

import (
	"context"
	{{- if not (or $.Sweeper.IdentifierField (contains $.DeleteUrlTemplate "_id")) }}
	"fmt"
	{{- end }}
	"log"
	"strings"
	"testing"

	"{{ $.ImportPath }}/envvar"
	"{{ $.ImportPath }}/sweeper"
	"{{ $.ImportPath }}/tpgresource"
	transport_tpg "{{ $.ImportPath }}/transport"
)

func init() {
	sweeper.AddTestSweepers("{{ $.ResourceName }}", testSweep{{ $.ResourceName }})
}

func testSweep{{ $.ResourceName }}(_ string) error {
	var deletionerror error
	resourceName := "{{ $.ResourceName }}"
	log.Printf("[INFO][SWEEPER_LOG] Starting sweeper for %s", resourceName)

	{{- if $.Sweeper.URLSubstitutions }}
	// Using URL substitutions for region/zone pairs
	substitutions := []struct {
		region string
		zone   string
	}{
		{{- range $sub := $.Sweeper.URLSubstitutions }}
		{region: "{{ $sub.Region }}", zone: "{{ $sub.Zone }}"},
		{{- end }}
	}
	{{- else if $.Sweeper.Regions }}
	// Falling back to regions since no URL substitutions are defined
	regions := []string{
		{{- range $region := $.Sweeper.Regions }}
		"{{ $region }}",
		{{- end }}
	}
	substitutions := make([]struct {
		region string
		zone   string
	}, len(regions))
	for i, region := range regions {
		substitutions[i] = struct {
			region string
			zone   string
		}{
			region: region,
		}
	}
	{{- else }}
	// Using default region since neither URL substitutions nor regions are defined
	substitutions := []struct {
		region string
		zone   string
	}{
		{region: "us-central1"},
	}
	{{- end }}

	// Iterate through each substitution
	for _, sub := range substitutions {
		config, err := sweeper.SharedConfigForRegion(sub.region)
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] error getting shared config for region: %s", err)
			return err
		}

		err = config.LoadAndValidate(context.Background())
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] error loading: %s", err)
			return err
		}

		t := &testing.T{}
		billingId := envvar.GetTestBillingAccountFromEnv(t)

		// Set fallback values for empty region/zone
		if sub.region == "" {
			log.Printf("[INFO][SWEEPER_LOG] Empty region provided, falling back to us-central1")
			sub.region = "us-central1"
		}
		if sub.zone == "" {
			log.Printf("[INFO][SWEEPER_LOG] Empty zone provided, falling back to us-central1-a")
			sub.zone = "us-central1-a"
		}

		// Setup variables to replace in list template
		d := &tpgresource.ResourceDataMock{
			FieldsInSchema: map[string]interface{}{
				"project":         config.Project,
				"region":          sub.region,
				"location":        sub.region,
				"zone":            sub.zone,
				"billing_account": billingId,
			},
		}

		listTemplate := strings.Split("{{ $.ListUrlTemplate }}", "?")[0]
		listUrl, err := tpgresource.ReplaceVars(d, config, listTemplate)
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] error preparing sweeper list url: %s", err)
			return err
		}

		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "GET",
			Project:   config.Project,
			RawURL:    listUrl,
			UserAgent: config.UserAgent,
		})
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] Error in response from request %s: %s", listUrl, err)
			return err
		}

		resourceList, ok := res["{{ $.ResourceListKey }}"]
		if !ok {
			log.Printf("[INFO][SWEEPER_LOG] Nothing found in response.")
			continue
		}

		{{- if contains $.ListUrlTemplate "/aggregated/" }}
		var rl []interface{}
		zones := resourceList.(map[string]interface{})
		// Loop through every zone in the list response
		for _, zonesValue := range zones {
			zone := zonesValue.(map[string]interface{})
			for k, v := range zone {
				// Zone map either has resources or a warning stating there were no resources found in the zone
				if k != "warning" {
					resourcesInZone := v.([]interface{})
					rl = append(rl, resourcesInZone...)
				}
			}
		}
		{{- else }}
		rl := resourceList.([]interface{})
		{{- end }}

		log.Printf("[INFO][SWEEPER_LOG] Found %d items in %s list response.", len(rl), resourceName)
		// Keep count of items that aren't sweepable for logging.
		nonPrefixCount := 0
		for _, ri := range rl {
			obj := ri.(map[string]interface{})
			{{- if $.Sweeper.IdentifierField }}
			name := obj["{{ $.Sweeper.IdentifierField }}"].(string)
			{{- else if contains $.DeleteUrlTemplate "_id" }}
			var name string
			// Id detected in the delete URL, attempt to use id.
			if obj["id"] != nil {
				name = tpgresource.GetResourceNameFromSelfLink(obj["id"].(string))
			} else if obj["name"] != nil {
				name = tpgresource.GetResourceNameFromSelfLink(obj["name"].(string))
			} else {
				log.Printf("[INFO][SWEEPER_LOG] %s resource name and id were nil", resourceName)
				return err
			}
			{{- else }}
			if obj["name"] == nil {
				log.Printf("[INFO][SWEEPER_LOG] %s resource name was nil", resourceName)
				return fmt.Errorf("%s resource name was nil", resourceName)
			}

			name := tpgresource.GetResourceNameFromSelfLink(obj["name"].(string))
			{{- end }}

			// Skip resources that shouldn't be sweeped
			{{- if $.Sweeper.Prefixes }}
			prefixes := []string{
				{{- range $prefix := $.Sweeper.Prefixes }}
				"{{ $prefix }}",
				{{- end }}
			}
			if !sweeper.IsSweepableTestResource(name) && !hasAnyPrefix(name, prefixes) {
			{{- else }}
			if !sweeper.IsSweepableTestResource(name) {
			{{- end }}
				nonPrefixCount++
				continue
			}

			deleteTemplate := "{{ $.DeleteUrlTemplate }}"
			{{- if contains $.ListUrlTemplate "/aggregated/" }}
			if obj["zone"] == nil {
				log.Printf("[INFO][SWEEPER_LOG] %s resource zone was nil", resourceName)
				return err
			}
			zone := tpgresource.GetResourceNameFromSelfLink(obj["zone"].(string))
			deleteTemplate = strings.Replace(deleteTemplate, "{{"{{zone}}"}}", zone, -1)
			{{- end }}

			deleteUrl, err := tpgresource.ReplaceVars(d, config, deleteTemplate)
			if err != nil {
				log.Printf("[INFO][SWEEPER_LOG] error preparing delete url: %s", err)
				deletionerror = err
			}
			deleteUrl = deleteUrl + name

			// Don't wait on operations as we may have a lot to delete
			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "DELETE",
				Project:   config.Project,
				RawURL:    deleteUrl,
				UserAgent: config.UserAgent,
			})
			if err != nil {
				log.Printf("[INFO][SWEEPER_LOG] Error deleting for url %s : %s", deleteUrl, err)
				deletionerror = err
			} else {
				log.Printf("[INFO][SWEEPER_LOG] Sent delete request for %s resource: %s", resourceName, name)
			}
		}

		if nonPrefixCount > 0 {
			log.Printf("[INFO][SWEEPER_LOG] %d items were non-sweepable and skipped.", nonPrefixCount)
		}
	}

	return deletionerror
}
