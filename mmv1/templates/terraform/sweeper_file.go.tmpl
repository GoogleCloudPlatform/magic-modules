{{- if ne $.Compiler "terraformgoogleconversion-codegen" -}}
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
{{ end }}
{{$.CodeHeader TemplatePath}}

package {{ lower $.ProductMetadata.Name }}

import (
	"context"
	"fmt"
	"log"
	"strings"
	"testing"

	"{{ $.ImportPath }}/envvar"
	"{{ $.ImportPath }}/sweeper"
	"{{ $.ImportPath }}/tpgresource"
	transport_tpg "{{ $.ImportPath }}/transport"
)

func init() {
	// Initialize base sweeper object
	s := &sweeper.Sweeper{
		Name:           "{{ $.TerraformName }}",
		ListAndAction:  listAndAction{{ $.ResourceName }},
		DeleteFunction: testSweep{{ $.ResourceName }},
	}

	{{- if $.Sweeper.Parent }}
	// Add parent relationship
	s.Parents = []string{"{{ $.Sweeper.Parent.ResourceType }}"}
	{{- end }}

	{{- if $.Sweeper.Dependencies }}
	// Add dependencies
	s.Dependencies = []string{
		{{- range $dep := $.Sweeper.Dependencies }}
		"{{ $dep }}",
		{{- end }}
	}
	{{- end }}

	// Register the sweeper
	sweeper.AddTestSweepers(s)
}

func testSweep{{ $.ResourceName }}(_ string) error {
	return listAndAction{{ $.ResourceName }}(deleteResource{{ $.ResourceName }})
}

func listAndAction{{ $.ResourceName }}(action sweeper.ResourceAction) error {
	var lastError error
	resourceName := "{{ $.ResourceName }}"
	log.Printf("[INFO][SWEEPER_LOG] Starting sweeper for %s", resourceName)

	// Prepare configurations to iterate over
	var configs []*tpgresource.ResourceDataMock

	{{- if $.Sweeper.Parent }}
	// This resource has a parent dependency
	parentType := "{{ $.Sweeper.Parent.ResourceType }}"
	log.Printf("[INFO][SWEEPER_LOG] %s depends on parent resource %s", resourceName, parentType)

	// Get parent sweeper and collect parent references
	parentSweeper, ok := sweeper.GetSweeper(parentType)
	if !ok {
		return fmt.Errorf("parent sweeper for %s not found", parentType)
	}

	// Run parent's ListAndAction to collect parent references
	if err := parentSweeper.ListAndAction(collectParentConfig{{ $.ResourceName }}(&configs)); err != nil {
		log.Printf("[INFO][SWEEPER_LOG] Error collecting parent references: %s", err)
		return err
	}

	log.Printf("[INFO][SWEEPER_LOG] Found %d parent resources for %s", len(configs), resourceName)

	{{- else }}
	t := &testing.T{}
	billingId := envvar.GetTestBillingAccountFromEnv(t)

	{{- if $.Sweeper.URLSubstitutions }}
	// Build URL substitution maps individually to ensure proper formatting
	intermediateValues := make([]map[string]string, {{ len $.Sweeper.URLSubstitutions }})
	{{- range $index, $sub := $.Sweeper.URLSubstitutions }}
	intermediateValues[{{ $index }}] = map[string]string{}
	{{- range $key, $value := $sub }}
	intermediateValues[{{ $index }}]["{{ $key }}"] = "{{ $value }}"
	{{- end }}
	{{- end }}
	{{- else if $.Sweeper.Regions }}
	// Process regions
	intermediateValues := []map[string]string{
		{{- range $region := $.Sweeper.Regions }}
		{
			"region": "{{ $region }}",
		},
		{{- end }}
	}
	{{- else }}
	// Default single config
	intermediateValues := []map[string]string{
		{
			"region": "us-central1",
		},
	}
	{{- end }}

	// Create configs from intermediate values
	for _, values := range intermediateValues {
		mockConfig := &tpgresource.ResourceDataMock{
			FieldsInSchema: map[string]interface{}{
				"project":         envvar.GetTestProjectFromEnv(),
				"billing_account": billingId,
			},
		}

		// Apply all provided values
		for key, value := range values {
			mockConfig.FieldsInSchema[key] = value
		}

		// Set fallback values for common fields
		region, hasRegion := mockConfig.FieldsInSchema["region"].(string)
		if !hasRegion {
			region = "us-central1"
			mockConfig.FieldsInSchema["region"] = region
		}

		if _, hasLocation := mockConfig.FieldsInSchema["location"]; !hasLocation {
			mockConfig.FieldsInSchema["location"] = region
		}

		if _, hasZone := mockConfig.FieldsInSchema["zone"]; !hasZone {
			mockConfig.FieldsInSchema["zone"] = region + "-a"
		}

		configs = append(configs, mockConfig)
	}
	{{- end }}

	// Process all configurations (either from parent resources or direct substitutions)
	for _, mockConfig := range configs {
		// Get region from config
		region := sweeper.GetFieldOrDefault(mockConfig, "region", "us-central1")

		// Create shared config for this region
		config, err := sweeper.SharedConfigForRegion(region)
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] error getting shared config for region: %s", err)
			lastError = err
			continue
		}

		err = config.LoadAndValidate(context.Background())
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] error loading: %s", err)
			lastError = err
			continue
		}

		// Prepare list URL
		listTemplate := strings.Split("{{ $.ListUrlTemplate }}", "?")[0]
		listUrl, err := tpgresource.ReplaceVars(mockConfig, config, listTemplate)
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] error preparing sweeper list url: %s", err)
			lastError = err
			continue
		}

		// Log additional info for parent-based resources
		{{- if $.Sweeper.Parent }}
		parentValue := ""
		if v, ok := mockConfig.FieldsInSchema["{{ $.Sweeper.Parent.ChildField }}"]; ok {
			parentValue = v.(string)
		}
		log.Printf("[INFO][SWEEPER_LOG] Listing %s resources for parent %s at %s", resourceName, parentValue, listUrl)
		{{- else }}
		log.Printf("[INFO][SWEEPER_LOG] Listing %s resources at %s", resourceName, listUrl)
		{{- end }}

		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "GET",
			Project:   config.Project,
			RawURL:    listUrl,
			UserAgent: config.UserAgent,
		})
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] Error in response from request %s: %s", listUrl, err)
			lastError = err
			continue
		}

		// First try the expected resource key
		resourceList, ok := res["{{ $.ResourceListKey }}"]
		if ok {
			log.Printf("[INFO][SWEEPER_LOG] Found resources under expected key '{{ $.ResourceListKey }}'")
		} else {
			// Next, try the common "items" pattern
			resourceList, ok = res["items"]
			if ok {
				log.Printf("[INFO][SWEEPER_LOG] Found resources under standard 'items' key")
			} else {
				log.Printf("[INFO][SWEEPER_LOG] no resources found")
				continue
			}
		}

		{{- if contains $.ListUrlTemplate "/aggregated/" }}
		var rl []interface{}
		zones := resourceList.(map[string]interface{})
		// Loop through every zone in the list response
		for _, zonesValue := range zones {
			zone := zonesValue.(map[string]interface{})
			for k, v := range zone {
				// Zone map either has resources or a warning stating there were no resources found in the zone
				if k != "warning" {
					resourcesInZone := v.([]interface{})
					rl = append(rl, resourcesInZone...)
				}
			}
		}
		{{- else }}
		rl := resourceList.([]interface{})
		{{- end }}

		log.Printf("[INFO][SWEEPER_LOG] Found %d items in %s list response.", len(rl), resourceName)
		// Keep count of items that aren't sweepable for logging.
		nonPrefixCount := 0
		for _, ri := range rl {
			obj, ok := ri.(map[string]interface{})
			if !ok {
				log.Printf("[INFO][SWEEPER_LOG] Item was not a map: %T", ri)
				continue
			}

			if err := action(config, mockConfig, obj); err != nil {
				log.Printf("[INFO][SWEEPER_LOG] Error in action: %s", err)
				lastError = err
			} else {
				nonPrefixCount++
			}
		}
	}

	return lastError
}

func deleteResource{{ $.ResourceName }}(config *transport_tpg.Config, d *tpgresource.ResourceDataMock, obj map[string]interface{}) error {
	var deletionerror error
	resourceName := "{{ $.ResourceName }}"
	var name string
	{{- if $.Sweeper.IdentifierField }}
	if obj["{{ $.Sweeper.IdentifierField }}"] == nil {
		log.Printf("[INFO][SWEEPER_LOG] %s resource {{ $.Sweeper.IdentifierField }} was nil", resourceName)
		return fmt.Errorf("%s resource {{ $.Sweeper.IdentifierField }} was nil", resourceName)
	}
	name = obj["{{ $.Sweeper.IdentifierField }}"].(string)
	{{- else if contains $.DeleteUrlTemplate "_id" }}
	// Id detected in the delete URL, attempt to use id.
	if obj["id"] != nil {
		name = tpgresource.GetResourceNameFromSelfLink(obj["id"].(string))
	} else if obj["name"] != nil {
		name = tpgresource.GetResourceNameFromSelfLink(obj["name"].(string))
	} else {
		log.Printf("[INFO][SWEEPER_LOG] %s resource name and id were nil", resourceName)
		return fmt.Errorf("%s resource name was nil", resourceName)
	}
	{{- else }}
	if obj["name"] == nil {
		log.Printf("[INFO][SWEEPER_LOG] %s resource name was nil", resourceName)
		return fmt.Errorf("%s resource name was nil", resourceName)
	}

	name = tpgresource.GetResourceNameFromSelfLink(obj["name"].(string))
	{{- end }}

	// Skip resources that shouldn't be sweeped
	{{- if $.Sweeper.Prefixes }}
	prefixes := []string{
		{{- range $prefix := $.Sweeper.Prefixes }}
		"{{ $prefix }}",
		{{- end }}
	}
	if !sweeper.IsSweepableTestResource(name) && !sweeper.HasAnyPrefix(name, prefixes) {
	{{- else }}
	if !sweeper.IsSweepableTestResource(name) {
	{{- end }}
		return nil
	}

	deleteTemplate := "{{ $.DeleteUrlTemplate }}"
	{{- if contains $.ListUrlTemplate "/aggregated/" }}
	if obj["zone"] == nil {
		log.Printf("[INFO][SWEEPER_LOG] %s resource zone was nil", resourceName)
		return fmt.Errorf("%s resource zone was nil", resourceName)
	}
	zone := tpgresource.GetResourceNameFromSelfLink(obj["zone"].(string))
	deleteTemplate = strings.Replace(deleteTemplate, "{{"{{zone}}"}}", zone, -1)
	{{- end }}

	deleteUrl, err := tpgresource.ReplaceVars(d, config, deleteTemplate)
	if err != nil {
		log.Printf("[INFO][SWEEPER_LOG] error preparing delete url: %s", err)
		deletionerror = err
	}
	deleteUrl = deleteUrl + name

	// Don't wait on operations as we may have a lot to delete
	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   config.Project,
		RawURL:    deleteUrl,
		UserAgent: config.UserAgent,
	})
	if err != nil {
		log.Printf("[INFO][SWEEPER_LOG] Error deleting for url %s : %s", deleteUrl, err)
		deletionerror = err
	} else {
		log.Printf("[INFO][SWEEPER_LOG] Sent delete request for %s resource: %s", resourceName, name)
	}

	return deletionerror
}

{{- if $.Sweeper.Parent }}

// collectParentConfig{{ $.ResourceName }} returns a function that collects parent configurations
func collectParentConfig{{ $.ResourceName }}(configs *[]*tpgresource.ResourceDataMock) sweeper.ResourceAction {
	return func(config *transport_tpg.Config, d *tpgresource.ResourceDataMock, parentObj map[string]interface{}) error {
		// Get region/zone/location with fallbacks
		region := sweeper.GetFieldOrDefault(d, "region", "us-central1")
		zone := sweeper.GetFieldOrDefault(d, "zone", region+"-a")
		location := sweeper.GetFieldOrDefault(d, "location", region)

		// Create a new ResourceDataMock for the final child configuration
		childConfig := &tpgresource.ResourceDataMock{
			FieldsInSchema: map[string]interface{}{
				"project":  config.Project,
				"region":   region,
				"zone":     zone,
				"location": location,
			},
		}

		// Add billing account if testing environment requires it
		t := &testing.T{}
		billingId := envvar.GetTestBillingAccountFromEnv(t)
		if billingId != "" {
			childConfig.FieldsInSchema["billing_account"] = billingId
		}

		{{- if $.Sweeper.Parent.Template }}
		// Using template approach for parent reference

		// Create a temporary config just for template replacement
		replacementConfig := &tpgresource.ResourceDataMock{
			FieldsInSchema: make(map[string]interface{}),
		}

		// Copy toplevel fields from parent object to the replacement config
		for k, v := range parentObj {
			if v == nil {
				continue
			}

			if strVal, ok := v.(string); ok {
				replacementConfig.FieldsInSchema[k] = strVal
			}
		}

		// Add standard fields for replacement
		replacementConfig.FieldsInSchema["project"] = config.Project
		replacementConfig.FieldsInSchema["region"] = region
		replacementConfig.FieldsInSchema["zone"] = zone
		replacementConfig.FieldsInSchema["location"] = location

		// Extract parent field value if specified
		{{- if $.Sweeper.Parent.ParentField }}
		if parentObj["{{ $.Sweeper.Parent.ParentField }}"] == nil {
			log.Printf("[INFO][SWEEPER_LOG] Parent {{ $.Sweeper.Parent.ResourceType }} field {{ $.Sweeper.Parent.ParentField }} was nil, skipping")
			return nil
		}

		parentValue := parentObj["{{ $.Sweeper.Parent.ParentField }}"].(string)

		// Process the parent value based on configuration
		{{- if $.Sweeper.Parent.ParentFieldExtractName }}
		// Extract just the resource name from self link if needed
		if strings.Contains(parentValue, "/") {
			parentValue = tpgresource.GetResourceNameFromSelfLink(parentValue)
		}
		{{- else if $.Sweeper.Parent.ParentFieldRegex }}
		// Apply regex to extract specific portion if configured
		re := regexp.MustCompile("{{ $.Sweeper.Parent.ParentFieldRegex }}")
		matches := re.FindStringSubmatch(parentValue)
		if len(matches) > 1 {
			parentValue = matches[1] // Get first capture group
		} else {
			log.Printf("[INFO][SWEEPER_LOG] Regex on parent field did not match, using original value")
		}
		{{- end }}

		// Add the parent value to the replacement config
		replacementConfig.FieldsInSchema["value"] = parentValue
		{{- end }}

		// Use ReplaceVars to substitute template variables
		template := "{{ $.Sweeper.Parent.Template }}"
		formattedValue, err := tpgresource.ReplaceVars(replacementConfig, config, template)
		if err != nil {
			log.Printf("[INFO][SWEEPER_LOG] Error formatting parent template: %s", err)
			return nil
		}

		// Add the formatted value to the child config
		childConfig.FieldsInSchema["{{ $.Sweeper.Parent.ChildField }}"] = formattedValue

		{{- else if $.Sweeper.Parent.ParentField }}
		// Using direct field approach for parent reference

		// Extract the parent field value needed for child resources
		if parentObj["{{ $.Sweeper.Parent.ParentField }}"] == nil {
			log.Printf("[INFO][SWEEPER_LOG] Parent {{ $.Sweeper.Parent.ResourceType }} field {{ $.Sweeper.Parent.ParentField }} was nil, skipping")
			return nil
		}

		parentValue := parentObj["{{ $.Sweeper.Parent.ParentField }}"].(string)

		// Process the parent value based on configuration
		{{- if $.Sweeper.Parent.ParentFieldExtractName }}
		// Extract just the resource name from self link if needed
		if strings.Contains(parentValue, "/") {
			parentValue = tpgresource.GetResourceNameFromSelfLink(parentValue)
		}
		{{- else if $.Sweeper.Parent.ParentFieldRegex }}
		// Apply regex to extract specific portion if configured
		re := regexp.MustCompile("{{ $.Sweeper.Parent.ParentFieldRegex }}")
		matches := re.FindStringSubmatch(parentValue)
		if len(matches) > 1 {
			parentValue = matches[1] // Get first capture group
		} else {
			log.Printf("[INFO][SWEEPER_LOG] Regex on parent field did not match, using original value")
		}
		{{- end }}

		// Use parent value directly for the child resource
		childConfig.FieldsInSchema["{{ $.Sweeper.Parent.ChildField }}"] = parentValue
		{{- else }}
		// Neither template nor field specified - cannot determine parent reference
		log.Printf("[INFO][SWEEPER_LOG] No parent field or template specified for {{ $.ResourceName }}, skipping")
		return nil
		{{- end }}

		// Add to our list of configs to process
		*configs = append(*configs, childConfig)

		return nil
	}
}{{- end }}
