{{/*# The license inside this block applies to this file.
  # Copyright 2024 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
*/}}
{{- define "SchemaFieldsFW"}}
{{- if .FlattenObject -}}
  {{- range $prop := .ResourceMetadata.OrderProperties .UserProperties -}}
    {{ template "SchemaFieldsFW" $prop }}
  {{ end -}}
{{- else -}}
  {{- if eq .Type "NestedObject" -}}
"{{underscore .Name -}}": schema.SingleNestedAttribute{
  Attributes: map[string]schema.Attribute{
    {{- range $prop := .ResourceMetadata.OrderProperties $.UserProperties }}
    {{ template "SchemaFieldsFW" $prop -}}
    {{- end }}
  },
  {{- else if eq .Type "Array" -}}
    {{- if eq .ItemType.Type "NestedObject" -}}
      {{- if .IsSet -}}
"{{underscore .Name -}}": schema.SetNestedAttribute{
  NestedObject: schema.NestedAttributeObject{
    Attributes: map[string]schema.Attribute{
      {{- range $prop := .ResourceMetadata.OrderProperties $.ItemType.UserProperties }}
      {{ template "SchemaFieldsFW" $prop -}}
      {{- end }}
    },
  },
      {{- else -}}
"{{underscore .Name -}}": schema.ListNestedAttribute{
  NestedObject: schema.NestedAttributeObject{
    Attributes: map[string]schema.Attribute{
      {{- range $prop := .ResourceMetadata.OrderProperties $.ItemType.UserProperties }}
      {{ template "SchemaFieldsFW" $prop -}}
      {{- end }}
    },
  },
      {{- end -}}
    {{- else -}}
      {{- if .IsSet -}}
"{{underscore .Name -}}": schema.SetAttribute{
  ElementType: {{ if or (eq .ItemType.Type "Enum") (eq .ItemType.Type "ResourceRef") }}types.StringType{{ else }}types.{{ .ItemType.GetFWType }}Type{{ end }},
      {{- else -}}
"{{underscore .Name -}}": schema.ListAttribute{
  ElementType: {{ if or (eq .ItemType.Type "Enum") (eq .ItemType.Type "ResourceRef") }}types.StringType{{ else }}types.{{ .ItemType.GetFWType }}Type{{ end }},
      {{- end -}}
    {{- end -}}
  {{- else if hasPrefix .Type "KeyValue" -}}
"{{underscore .Name -}}": schema.MapAttribute{
  ElementType: types.StringType,
  {{- else if eq .Type "Map" -}}
    {{- if eq .ValueType.Type "NestedObject" -}}
"{{underscore .Name -}}": schema.MapNestedAttribute{
  NestedObject: schema.NestedAttributeObject{
    Attributes: map[string]schema.Attribute{
      {{- range $prop := .ResourceMetadata.OrderProperties $.ValueType.UserProperties }}
      {{ template "SchemaFieldsFW" $prop -}}
      {{- end }}
    },
  },
    {{- else -}}
"{{underscore .Name -}}": schema.MapAttribute{
  ElementType: {{ if or (eq .ValueType.Type "Enum") (eq .ValueType.Type "ResourceRef") }}types.StringType{{ else }}types.{{ .ValueType.GetFWType }}Type{{ end }},
    {{- end -}}
  {{- else -}}
"{{underscore .Name -}}": schema.{{.GetFWType}}Attribute{
    {{- if eq .GetFWType "List" -}}
  ElementType: {{ if or (eq .ItemType.Type "Enum") (eq .ItemType.Type "ResourceRef") }}types.StringType{{ else }}types.{{ .ItemType.GetFWType }}Type{{ end }},
    {{- else if eq .GetFWType "Set" -}}
  ElementType: {{ if or (eq .ItemType.Type "Enum") (eq .ItemType.Type "ResourceRef") }}types.StringType{{ else }}types.{{ .ItemType.GetFWType }}Type{{ end }},
    {{- end }}
  {{- end }}

  {{- if .DefaultFromApi }}
  Optional: true,
  Computed: true,
  {{- else if .Required }}
  Required: true,
  {{- else if .Output }}
  Computed: true,
  {{- else }}
  Optional: true,
  {{- end }}
  {{- if .DeprecationMessage }}
  DeprecationMessage: "{{ .DeprecationMessage }}",
  {{- end }}
  {{- if .Sensitive }}
  Sensitive: true,
  {{- end }}
  {{- if or .IsForceNew .DefaultFromApi }}
  PlanModifiers: []planmodifier.{{.GetFWType}}{
    {{- if .IsForceNew }}
    {{lower .GetFWType}}planmodifier.RequiresReplace(),
    {{- end }}
    {{- if .DefaultFromApi }}
    {{lower .GetFWType}}planmodifier.UseStateForUnknown(),
    {{- end }}
  },
  {{- end }}
},
{{- end -}}
{{- end -}}