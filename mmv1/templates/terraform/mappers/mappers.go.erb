<%- # the license inside this block applies to this file
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>

<%= lines(autogen_notice(:go, pwd)) -%>
package google

import (
	"sort"

)

type convertFunc func(d TerraformResourceData, config *Config) ([]Asset, error)

// fetchFunc allows initial data for a resource to be fetched from the API and merged
// with the planned changes. This is useful for resources that are only partially managed
// by Terraform, like IAM policies managed with member/binding resources.
type fetchFunc func(d TerraformResourceData, config *Config) (Asset, error)

// mergeFunc combines multiple terraform resources into a single CAI asset.
// The incoming asset will either be an asset that was created/updated or deleted.
type mergeFunc func(existing, incoming Asset) Asset

// mapper pairs related conversion/merging functions.
type mapper struct {
	convert           convertFunc // required
	fetch             fetchFunc   // optional
	mergeCreateUpdate mergeFunc   // optional
	mergeDelete       mergeFunc   // optional
}

// mappers maps terraform resource types (i.e. `google_project`) into
// a slice of mapperFuncs.
//
// Modelling of relationships:
// terraform resources to CAI assets as []mapperFuncs:
// 1:1 = [mapper{convert: convertAbc}]                  (len=1)
// 1:N = [mapper{convert: convertAbc}, ...]             (len=N)
// N:1 = [mapper{convert: convertAbc, merge: mergeAbc}] (len=1)
func mappers() map[string][]mapper {
	return map[string][]mapper{
        <% $instanceInfo["resources"].each do |resource| -%>
            "google_<%= resource["tfResource"] -%>": {
                {
                    convert: converter.Get<%= resource["CAIName"] -%>CaiObject
                }
            },
        <%end -%>


        <% $instanceInfo["IAM"].each do |product| -%>
            "google_<%= product["tfResource"] -%>_iam_policy": {
                {
                    convert:           converter.Get<%= product["CAIName"] -%>IamPolicyCaiObject,
                    mergeCreateUpdate: converter.Merge<%= product["CAIName"] -%>IamPolicy,
                },
            },
            "google_<%= product["tfResource"] -%>_iam_binding": {
                {
                    convert:           converter.Get<%= product["CAIName"] -%>IamBindingCaiObject,
                    mergeCreateUpdate: converter.Merge<%= product["CAIName"] -%>IamBinding,
                    mergeDelete:       converter.Merge<%= product["CAIName"] -%>IamBindingDelete,
                    fetch:             converter.Fetch<%= product["CAIName"] -%>IamPolicy,
                },
            },
            "google_<%= product["tfResource"] -%>_iam_member": {
                {
                    convert:           converter.Get<%= product["CAIName"] -%>IamMemberCaiObject,
                    mergeCreateUpdate: converter.Merge<%= product["CAIName"] -%>IamMember,
                    mergeDelete:       converter.Merge<%= product["CAIName"] -%>IamMemberDelete,
                    fetch:             converter.Fetch<%= product["CAIName"] -%>IamPolicy,
                },
            },
        <% end -%>
		"google_organization_iam_policy": {
			{
				convert:           converter.GetOrganizationIamPolicyCaiObject,
				mergeCreateUpdate: converter.MergeOrganizationIamPolicy,
			},
		},
		"google_project_organization_policy": {
			{
				convert:           converter.GetProjectOrgPolicyCaiObject,
				mergeCreateUpdate: converter.MergeProjectOrgPolicy,
			},
		},
		"google_organization_iam_binding": {
			{
				convert:           converter.GetOrganizationIamBindingCaiObject,
				mergeCreateUpdate: converter.MergeOrganizationIamBinding,
				mergeDelete:       converter.MergeOrganizationIamBindingDelete,
				fetch:             converter.FetchOrganizationIamPolicy,
			},
		},
		"google_organization_iam_member": {
			{
				convert:           converter.GetOrganizationIamMemberCaiObject,
				mergeCreateUpdate: converter.MergeOrganizationIamMember,
				mergeDelete:       converter.MergeOrganizationIamMemberDelete,
				fetch:             converter.FetchOrganizationIamPolicy,
			},
		},
		"google_folder_iam_policy": {
			{
				convert:           converter.GetFolderIamPolicyCaiObject,
				mergeCreateUpdate: converter.MergeFolderIamPolicy,
			},
		},
		"google_folder_iam_binding": {
			{
				convert:           converter.GetFolderIamBindingCaiObject,
				mergeCreateUpdate: converter.MergeFolderIamBinding,
				mergeDelete:       converter.MergeFolderIamBindingDelete,
				fetch:             converter.FetchFolderIamPolicy,
			},
		},
		"google_folder_iam_member": {
			{
				convert:           converter.GetFolderIamMemberCaiObject,
				mergeCreateUpdate: converter.MergeFolderIamMember,
				mergeDelete:       converter.MergeFolderIamMemberDelete,
				fetch:             converter.FetchFolderIamPolicy,
			},
		},
		"google_project_iam_policy": {
			{
				convert:           converter.GetProjectIamPolicyCaiObject,
				mergeCreateUpdate: converter.MergeProjectIamPolicy,
			},
		},
		"google_project_iam_binding": {
			{
				convert:           converter.GetProjectIamBindingCaiObject,
				mergeCreateUpdate: converter.MergeProjectIamBinding,
				mergeDelete:       converter.MergeProjectIamBindingDelete,
				fetch:             converter.FetchProjectIamPolicy,
			},
		},
		"google_project_iam_member": {
			{
				convert:           converter.GetProjectIamMemberCaiObject,
				mergeCreateUpdate: converter.MergeProjectIamMember,
				mergeDelete:       converter.MergeProjectIamMemberDelete,
				fetch:             converter.FetchProjectIamPolicy,
			},
		},
	}
}

// SupportedResources returns a sorted list of terraform resource names.
func SupportedTerraformResources() []string {
	fns := mappers()
	list := make([]string, 0, len(fns))
	for k := range fns {
		list = append(list, k)
	}
	sort.Strings(list)
	return list
}