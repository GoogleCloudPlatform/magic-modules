// detect manual zone switches for service level FLEX

if d.Get("service_level").(string) == "FLEX" {
	// Check if this is zonal or regional Flex. Only continue for regional pool
	_, hasZone := d.GetOk("zone")
	_, hasReplicaZone := d.GetOk("replica_zone")
	if hasZone && hasReplicaZone {
		// For a zone switch, user needs to swap zone and replica_zone. Other changes are not allowed
		if d.HasChange("zone") && d.HasChange("replica_zone") {
			oldZone, newZone := d.GetChange("zone")
			oldReplicaZone, newReplicaZone := d.GetChange("replica_zone")
			if newZone == oldReplicaZone && newReplicaZone == oldZone {
				rawurl, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/storagePools/{{name}}:switch")
				if err != nil {
					return err
				}

				reso, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
					Config:    config,
					Method:    "POST",
					Project:   billingProject,
					RawURL:    rawurl,
					UserAgent: userAgent,
					Timeout:   d.Timeout(schema.TimeoutUpdate),
				})
				if err != nil {
					return fmt.Errorf("Error switching active zone for pool: %s, %v", d.Id(), err)
				}

				err = NetappOperationWaitTime(
					config, reso, project, "Switching active pool zone", userAgent,
					d.Timeout(schema.TimeoutUpdate))
				if err != nil {
					return err
				}

				//remove zone and replicaZone from updateMask
				n := 0
				for _, v := range updateMask {
					if v != "zone" && v != "replicaZone" {
						updateMask[n] = v
						n++
					}
				}
				updateMask = updateMask[:n]

				// delete from payload too
				delete(obj, "zone")
				delete(obj, "replicaZone")

				// PATCH URL was already build prior to this code. We need to rebuild it to catch our changes
				url, err = tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/storagePools/{{name}}")
				if err != nil {
					return err
				}
				url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
				if err != nil {
					return err
				}
			} else {
				return fmt.Errorf("Incorrect zone change for pool: %s. Supported zone, replica_zone are : %s, %s", d.Id(), oldZone, oldReplicaZone)
			}
		}
	}
}
