// The generated code sets the wrong masks for the following fields.
newUpdateMask := []string{}
if d.HasChange("authorization") {
    newUpdateMask = append(newUpdateMask, "authorization.admin_users")
}
if d.HasChange("logging_config") {
    newUpdateMask = append(newUpdateMask, "logging_config.component_config.enable_components")
}
if d.HasChange("monitoring_config") {
    newUpdateMask = append(newUpdateMask, "monitoring_config.managed_prometheus_config.enabled")
}
if d.HasChange("networking") {
    newUpdateMask = append(newUpdateMask, "networking.per_node_pool_sg_rules_disabled")
}
if d.HasChange("control_plane") {
    fields := map[string]string{
        "control_plane.0.aws_services_authentication.0.role_arn": "control_plane.aws_services_authentication.role_arn",
        "control_plane.0.aws_services_authentication.0.role_session_name": "control_plane.aws_services_authentication.role_session_name",
        "control_plane.0.config_encryption": "control_plane.config_encryption.kms_key_arn",
        "control_plane.0.iam_instance_profile": "control_plane.iam_instance_profile",
        "control_plane.0.instance_placement.0.tenancy": "control_plane.instance_placement.tenancy",
        "control_plane.0.instance_type": "control_plane.instance_type",
        "control_plane.0.proxy_config": "control_plane.proxy_config",
        "control_plane.0.root_volume.0.size_gib": "control_plane.root_volume.size_gib",
        "control_plane.0.root_volume.0.volume_type": "control_plane.root_volume.volume_type",
        "control_plane.0.root_volume.0.iops": "control_plane.root_volume.iops",
        "control_plane.0.root_volume.0.throughput": "control_plane.root_volume.throughput",
        "control_plane.0.root_volume.0.kms_key_arn": "control_plane.root_volume.kms_key_arn",
        "control_plane.0.security_group_ids": "control_plane.security_group_ids",
        "control_plane.0.ssh_config": "control_plane.ssh_config",
        "control_plane.0.tags": "control_plane.tags",
        "control_plane.0.version": "control_plane.version",
    }
    for k, v := range fields {
        if d.HasChange(k) {
            newUpdateMask = append(newUpdateMask, v)
        }
    }
}
// Pull out any other set fields from the generated mask.
for _, mask := range updateMask {
    if mask == "authorization" || mask == "loggingConfig" || mask == "monitoringConfig" || mask == "networking" || mask == "controlPlane" {
        continue
    }
    newUpdateMask = append(newUpdateMask, mask)
}
// Overwrite the previously set mask.
url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(newUpdateMask, ",")})
if err != nil {
    return err
}
