log.Printf("[DEBUG] value of replication_state : %v", d.Get("replication_enabled"))
var obj map[string]interface{}
rawurl, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/volumes/{{volume_name}}/replications/{{name}}:")
if err != nil {
	return err
}

if d.Get("replication_enabled").(bool) == true {
	rawurl = rawurl + "resume"
} else {
	rawurl = rawurl + "stop"	
}
reso, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config:    config,
	Method:    "POST",
	Project:   billingProject,
	RawURL:    rawurl,
	UserAgent: userAgent,
	Body:      obj,
	Timeout:   d.Timeout(schema.TimeoutUpdate),
})
if err != nil {
	return fmt.Errorf("Error stopping/resuming replication %q: %s", d.Id(), err)
}

err = NetappOperationWaitTime(
	config, reso, project, "Deleting volumereplication", userAgent,
	d.Timeout(schema.TimeoutDelete))

if err != nil {
	return err
}
