updateMask := []string{}

if d.HasChange("include_newly_created_buckets") {
	updateMask = append(updateMask, "includeNewlyCreatedBuckets")
}

if d.HasChange("retention_period_days") {
	updateMask = append(updateMask, "retentionPeriodDays")
}

if d.HasChange("description") {
	updateMask = append(updateMask, "description")
}

if d.HasChange("include_cloud_storage_locations") {
	_, new_storage_locations := d.GetChange("include_cloud_storage_locations")
	if new_locations, ok := new_storage_locations.([]interface{}); ok && len(new_locations) > 0 {
		updateMask = append(updateMask, "includeCloudStorageLocations")
	}
}

if d.HasChange("exclude_cloud_storage_locations") {
	_, new_storage_locations := d.GetChange("exclude_cloud_storage_locations")
	if new_locations, ok := new_storage_locations.([]interface{}); ok && len(new_locations) > 0 {
		updateMask = append(updateMask, "excludeCloudStorageLocations")
	}
}

if d.HasChange("include_cloud_storage_buckets") {
	_, new_storage_buckets := d.GetChange("include_cloud_storage_buckets")
	if new_buckets, ok := new_storage_buckets.([]interface{}); ok && len(new_buckets) > 0 {
		updateMask = append(updateMask, "includeCloudStorageBuckets")
	}
}

if d.HasChange("exclude_cloud_storage_buckets") {
	_, new_storage_buckets := d.GetChange("exclude_cloud_storage_buckets")
	if new_buckets, ok := new_storage_buckets.([]interface{}); ok && len(new_buckets) > 0 {
		updateMask = append(updateMask, "excludeCloudStorageBuckets")
	}
}

if d.HasChange("source_projects") {
	_, new_source_projects := d.GetChange("source_projects")
	if new_project_numbers, ok := new_source_projects.([]interface{}); ok && len(new_project_numbers) > 0 {
		updateMask = append(updateMask, "sourceProjects")
	}
}

if d.HasChange("source_folders") {
	_, new_source_folders := d.GetChange("source_folders")
	if new_folder_numbers, ok := new_source_folders.([]interface{}); ok && len(new_folder_numbers) > 0 {
		updateMask = append(updateMask, "sourceFolders")
	}
}

if d.HasChange("organization_scope") {
	_, new_organization_scope := d.GetChange("organization_scope")
	if new_organization_scope == true {
		updateMask = append(updateMask, "organizationScope")
	}
}


// Link or Unlink a dataset if required
if d.HasChange("link_dataset") {
	_, new_link_dataset := d.GetChange("link_dataset")
	linkAPIEndPoint := "linkDataset"
	if new_link_dataset == false {
		linkAPIEndPoint = "unlinkDataset"
	}

	linkUrl := fmt.Sprintf("%s:%s", url, linkAPIEndPoint)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    linkUrl,
		UserAgent: userAgent,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})

	if err != nil {
		return fmt.Errorf("Error %v DatasetConfig %q: %s", linkAPIEndPoint, d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished %s DatasetConfig %q: %#v", linkAPIEndPoint, d.Id(), res)
	}

	err = StorageInsightsOperationWaitTime(
		config, res, project, "Linking/Unlinking DatasetConfig", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}
}


// if updateMask is empty we are not updating anything so skip the post
if len(updateMask) == 0 {
	return resourceStorageInsightsDatasetConfigRead(d, meta)
}

// updateMask is a URL parameter but not present in the schema, so ReplaceVars
// won't set it
url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
if err != nil {
	return err
}
