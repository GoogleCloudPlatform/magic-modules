if d.HasChange("subordinate_config") {
	if d.Get("type").(string) != "SUBORDINATE" {
		return fmt.Errorf("`subordinate_config` can only be configured on subordinate CA")
	}

	// Activate subordinate CA in `AWAITING_USER_ACTIVATION` state.
	if d.Get("state") == "AWAITING_USER_ACTIVATION" {
		if _, ok := d.GetOk("pem_ca_certificate"); ok {
			// Third party issuer
			log.Printf("[DEBUG] Activating CertificateAuthority with third party issuer")
			if err := activateSubCAWithThirdPartyIssuer(config, d, project, billingProject, userAgent); err != nil {
				return fmt.Errorf("Error activating subordinate CA with third party issuer: %v", err)
			}
		} else {
			// First party issuer
			log.Printf("[DEBUG] Activating CertificateAuthority with first party issuer")
			if err := activateSubCAWithFirstPartyIssuer(config, d, project, billingProject, userAgent); err != nil {
				return fmt.Errorf("Error activating subordinate CA with first party issuer: %v", err)
			}
		}
		log.Printf("[DEBUG] CertificateAuthority activated")
	}
}

log.Printf("[DEBUG] checking desired_state")
if d.HasChange("desired_state") {
	// Currently, most CA state update operations are not idempotent.
	// Try to change state only if the current `state` does not match the `desired_state`.
	if p, ok := d.GetOk("desired_state"); ok && p.(string) != d.Get("state").(string) {
		switch p.(string) {
		case "ENABLED":
			if err := enableCA(config, d, project, billingProject, userAgent); err != nil {
				return fmt.Errorf("Error enabling CertificateAuthority: %v", err)
			}
		case "DISABLED":
			if err := disableCA(config, d, project, billingProject, userAgent); err != nil {
				return fmt.Errorf("Error disabling CertificateAuthority: %v", err)
			}
		default:
			return fmt.Errorf("Unsupported value in field `desired_state`")
		}
	}
}


// `subordinateConfig.certificateAuthority` is not directly passed 
// to the backend when activating a sub-CA. Instead, it is used to sign CA cert
// and activate the sub-CA at client side. See b/332548736 for details.
// Drop this field to avoid both `subordinateConfig.certificateAuthority` 
// and `subordinateConfig.pemIssuerChain` to be passed to the backend.
if _, ok := obj["subordinateConfig"]; ok {
	subConfig := obj["subordinateConfig"].(map[string]interface{})
	// There could be case which a sub-CA was activated via `subordinateConfig.certificateAuthority`
	// directly by older version of providers.
	// For backward compatibility, delete `certificateAuthority` only if `pemIssuerChain` is presented.
	if _, ok := subConfig["pemIssuerChain"]; ok {
		delete(subConfig, "certificateAuthority")
	}
}
