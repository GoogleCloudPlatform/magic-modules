// remove sizeGib and identifier from the update request for block_devices

if v, ok := d.GetOk("block_devices"); ok {

    l := v.([]interface{})
    newBlockDevices := make([]interface{}, 0, len(l))

    for _, item := range v.([]interface{}) {
        if item == nil { continue }
        blockDevice := item.(map[string]interface{})
        newblockDevice := make(map[string]interface{})

        if val, exists := blockDevice["name"]; exists { newblockDevice["name"] = val }
        if val, exists := blockDevice["host_groups"]; exists { newblockDevice["host_groups"] = val }
        if val, exists := blockDevice["os_type"]; exists { newblockDevice["os_type"] = val }

        newBlockDevices = append(newBlockDevices, newblockDevice)
    }

    if len(newBlockDevices) > 0 {
        obj["blockDevices"] = newBlockDevices
    }
}

// detect export_policy presence in TF config of volume

if v, ok := d.GetOk("export_policy"); ok {

    l := v.([]interface{})
    newExportPolicy := make([]interface{}, 0, len(l))

    for _, item := range v.([]interface{}) {
        if item == nil { continue }
        ruleSet := item.(map[string]interface{})

        if ruleMap, ruleMapExists := ruleSet["rules"]; ruleMapExists {

            l := ruleMap.([]interface{})
            newRuleMap := make([]interface{}, 0, len(l))
            for _, ruleMapItem := range ruleMap.([]interface{}) {
                if ruleMapItem == nil {continue}
                ruleMapItemSet := ruleMapItem.(map[string]interface{})
                newRuleMapItemSet := make(map[string]interface{})

                if val, exists := ruleMapItemSet["access_type"]; exists { newRuleMapItemSet["accessType"] = val }
                if val, exists := ruleMapItemSet["allowed_clients"]; exists { newRuleMapItemSet["allowedClients"] = val }
                if val, exists := ruleMapItemSet["has_root_access"]; exists { newRuleMapItemSet["hasRootAccess"] = val }
                if val, exists := ruleMapItemSet["nfsv3"]; exists { newRuleMapItemSet["nfsv3"] = val }
                if val, exists := ruleMapItemSet["kerberos5_read_only"]; exists { newRuleMapItemSet["kerberos5ReadOnly"] = val }
                if val, exists := ruleMapItemSet["kerberos5_read_write"]; exists { newRuleMapItemSet["kerberos5ReadWrite"] = val }
                if val, exists := ruleMapItemSet["kerberos5i_read_only"]; exists { newRuleMapItemSet["kerberos5iReadOnly"] = val }
                if val, exists := ruleMapItemSet["kerberos5i_read_write"]; exists { newRuleMapItemSet["kerberos5iReadWrite"] = val }
                if val, exists := ruleMapItemSet["kerberos5p_read_only"]; exists { newRuleMapItemSet["kerberos5pReadOnly"] = val }
                if val, exists := ruleMapItemSet["kerberos5p_read_write"]; exists { newRuleMapItemSet["kerberos5pReadWrite"] = val }

                // Handle "squash_mode":
                squashModeVal, squashModeExists := ruleMapItemSet["squash_mode"]

                // Only send if the user explicitly added it.
                // If not added, send as null.
                if squashModeExists && squashModeVal == "ALL_SQUASH" {
                    // User provided the field, send their value
                    newRuleMapItemSet["squashMode"] = squashModeVal
                } else {
                    // User did NOT provide the field, or provided an empty value.
                    // Explicitly send null to the API.
                    newRuleMapItemSet["squashMode"] = nil
                }

                // Handle "anon_uid"
                anonUidVal, anonUidExists := ruleMapItemSet["anon_uid"]

                // Only send if the user explicitly added it.
                // If not added, send as null.
                if anonUidExists && anonUidVal != nil && anonUidVal != 0 {
                    // User provided the field, send their value
                    newRuleMapItemSet["anonUid"] = anonUidVal
                } else {
                    // User did NOT provide the field, or provided an empty value.
                    // Explicitly send null to the API.
                    newRuleMapItemSet["anonUid"] = nil
                }

                newRuleMap = append(newRuleMap, newRuleMapItemSet)
                
            }
            ruleSet["rules"] = newRuleMap
            newExportPolicy = append(newExportPolicy, ruleSet)
        }
    }
    if len(newExportPolicy) > 0 {
        obj["exportPolicy"] = newExportPolicy[0]
    }
}