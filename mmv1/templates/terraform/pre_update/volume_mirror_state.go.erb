if d.Get("volume_replication_state").(string) != "" {
	log.Printf("[DEBUG] value of replication_state : %v", d.Get("volume_replication_state"))
	var obj map[string]interface{}
	rawurl, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/volumes/{{volume_id}}/replications/{{name}}:")
	if err != nil {
		return err
	}
	rawurl = rawurl+d.Get("volume_replication_state").(string)
	reso, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    rawurl,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})
	if err != nil {
		return fmt.Errorf("Error Changing replication state %q: %s", d.Id(), err)
	}

	err = NetappOperationWaitTime(
		config, reso, project, "Deleting volumereplication", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}
}