{{/*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}

if d.HasChange("desired_state") {
  updateMask = append(updateMask, "state")
}

// Override the previous setting of updateMask to include state.
// updateMask is a URL parameter but not present in the schema, so ReplaceVars
// won't set it
url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
if err != nil {
  return err
}

// lables and terraform_labels fields are overriden with the labels before updating inside the function waitForDatastreamStreamReady
labels := d.Get("labels")
terraformLabels := d.Get("terraform_labels")

if err := waitForDatastreamStreamReady(d, config, d.Timeout(schema.TimeoutCreate) - time.Minute); err != nil {
  return fmt.Errorf("Error waiting for Stream %q to be NOT_STARTED, RUNNING, or PAUSED before updating: %q", d.Get("name").(string), err)
}

if err := d.Set("labels", labels); err != nil {
  return fmt.Errorf("Error setting back labels field: %s", err)
}
if err := d.Set("terraform_labels", terraformLabels); err != nil {
  return fmt.Errorf("Error setting back terraform_labels field: %s", err)
}