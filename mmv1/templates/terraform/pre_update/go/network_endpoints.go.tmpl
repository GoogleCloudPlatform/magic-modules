detachUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}ComputeBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/zones/{{"{{"}}zone{{"}}"}}/networkEndpointGroups/{{"{{"}}network_endpoint_group{{"}}"}}/detachNetworkEndpoints")
o, n := d.GetChange("network_endpoints")

oldEndpoints := make(map[NetworkEndpointsNetworkEndpoint]struct{})
newEndpoints := make(map[NetworkEndpointsNetworkEndpoint]struct{})

for _, e := range o.(*schema.Set).List() {
    oldEndpoints[NetworkEndpointsNetworkEndpointConvertToStruct(e)] = struct{}{}
}

for _, e := range n.(*schema.Set).List() {
    newEndpoints[NetworkEndpointsNetworkEndpointConvertToStruct(e)] = struct{}{}
}

// We want to ignore any endpoints that are shared between the two.
endpointsToKeep := make(map[NetworkEndpointsNetworkEndpoint]struct{})
for e := range oldEndpoints {
    if _, ok := newEndpoints[e]; ok {
        endpointsToKeep[e] = struct{}{}
    }
}
log.Printf("number of old endpoints: %v\n", len(oldEndpoints))
log.Printf("number of new endpoints: %v\n", len(newEndpoints))
log.Printf("number of shared endpoints: %v\n", len(endpointsToKeep))

for e := range endpointsToKeep {
    // Removing all shared endpoints from the old endpoints yields the list of endpoints to detach.
    delete(oldEndpoints, e)
    // Removing all shared endpoints from the new endpoints yields the list of endpoints to attch.
    delete(newEndpoints, e)
}

var endpointsToDetach []interface{}
for e := range oldEndpoints {
    endpointsToDetach = append(endpointsToDetach, NetworkEndpointsNetworkEndpointConvertToAny(e))
}
var endpointsToAttach []interface{}
for e := range newEndpoints {
    endpointsToAttach = append(endpointsToAttach, NetworkEndpointsNetworkEndpointConvertToAny(e))
}

log.Printf("number of endpoints to detach: %v\n", len(endpointsToDetach))
log.Printf("number of endpoints to attach: %v\n", len(endpointsToAttach))


chunkSize := 500 // API only accepts 500 endpoints at a time

_, err = networkEndpointsPaginatedMutate(d, endpointsToDetach, config, userAgent, detachUrl, project, billingProject, chunkSize, false)
if err != nil {
    // networkEndpointsPaginatedMutate already adds error description
    return err
}

lastPage, err := networkEndpointsPaginatedMutate(d, endpointsToAttach, config, userAgent, url, project, billingProject, chunkSize, true)
if err != nil {
    // networkEndpointsPaginatedMutate already adds error description
    return err
}

obj = map[string]interface{}{
    "networkEndpoints": lastPage,
}