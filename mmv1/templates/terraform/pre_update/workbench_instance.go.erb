name := d.Get("name").(string)
if d.HasChange("gce_setup.0.machine_type") || d.HasChange("gce_setup.0.accelerator_configs")  || d.HasChange("gce_setup.0.shielded_instance_config"){
  state := d.Get("state").(string)

  if state != "STOPPED" {
    dRes, err := modifyWorkbenchInstanceState(config, d, project, billingProject, userAgent, "stop")
    if err != nil {
      return err
    }

    if err := waitForWorkbenchOperation(config, d, project, billingProject, userAgent, dRes); err != nil {
      return fmt.Errorf("Error stopping Workbench Instance: %s", err)
    }

  } else {
    log.Printf("[DEBUG] Workbench Instance %q has state %q.", name, state)
  }

} else {
  log.Printf("[DEBUG] Workbench Instance %q need not be stopped for the update.", name)
}

// Build custom mask since the notebooks API does not support gce_setup as a valid mask
newUpdateMask := []string{}
if d.HasChange("gce_setup.0.machine_type") {
    newUpdateMask = append(newUpdateMask, "gce_setup.machine_type")
}
if d.HasChange("gce_setup.0.accelerator_configs") {
    newUpdateMask = append(newUpdateMask, "gce_setup.accelerator_configs")
}
if d.HasChange("gce_setup.0.shielded_instance_config") {
    newUpdateMask = append(newUpdateMask, "gce_setup.shielded_instance_config")
}
if d.HasChange("gce_setup.0.metadata") {
    newUpdateMask = append(newUpdateMask, "gceSetup.metadata")
}
if d.HasChange("effective_labels") {
    newUpdateMask = append(newUpdateMask, "labels")
}

// Overwrite the previously set mask.
url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(newUpdateMask, ",")})
if err != nil {
    return err
}
