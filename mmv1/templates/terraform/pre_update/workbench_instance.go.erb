name := d.Get("name").(string)
if d.HasChange("gce_setup.0.machine_type") || d.HasChange("gce_setup.0.accelerator_configs") {
  state := d.Get("state").(string)
  if state != "STOPPED" {
    stopURL, err := tpgresource.ReplaceVars(d, config, "{{WorkbenchBasePath}}projects/{{project}}/locations/{{location}}/instances/{{name}}:stop")
	  if err != nil {
		  return err
	  }

    log.Printf("[DEBUG] Stopping Workbench Instance: %q", name)

    emptyReqBody := make(map[string]interface{})

    dRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
                                            Config: config,
                                            Method: "POST",
                                            Project: billingProject,
                                            RawURL: stopURL,
                                            UserAgent: userAgent,
                                            Body: emptyReqBody,
                                          })
    if err != nil {
      return fmt.Errorf("Error Stopping Workbench Instance: %s", err)
    }

    var opRes map[string]interface{}
    err = WorkbenchOperationWaitTimeWithResponse(
      config, dRes, &opRes, project, "Stopping Workbench Instance", userAgent,
      d.Timeout(schema.TimeoutUpdate))
    if err != nil {
      return fmt.Errorf("Error waiting to stop Workbench Instance: %s", err)
    }

  } else {
    log.Printf("[DEBUG] Workbench Instance %q has state %q.", name, state)
  }

} else {
  log.Printf("[DEBUG] Workbench Instance %q need not be stopped for the update.", name)
}

// Build custom mask since the notebooks API does not support gce_setup as a valid mask
newUpdateMask := []string{}
if d.HasChange("gce_setup.0.machine_type") {
    newUpdateMask = append(newUpdateMask, "gce_setup.machine_type")
}
if d.HasChange("gce_setup.0.accelerator_configs") {
    newUpdateMask = append(newUpdateMask, "gce_setup.accelerator_configs")
}
if d.HasChange("gce_setup.0.metadata") {
    newUpdateMask = append(newUpdateMask, "gceSetup.metadata")
}
if d.HasChange("effective_labels") {
    newUpdateMask = append(newUpdateMask, "labels")
}

// Overwrite the previously set mask.
url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(newUpdateMask, ",")})
if err != nil {
    return err
}
