// Restrict modification of cluster_type from PRIMARY to SECONDARY as it is an invalid operation
if d.HasChange("cluster_type") && d.Get("cluster_type") == "SECONDARY" {
    return fmt.Errorf("Can not convert a primary cluster to a secondary cluster.")
}

// Restrict setting secondary_config if cluster_type is PRIMARY
if d.Get("cluster_type") == "PRIMARY" && !tpgresource.IsEmptyValue(reflect.ValueOf(d.Get("secondary_config"))) {
    return fmt.Errorf("Can not set secondary config for primary cluster.")
}

// Implementation for cluster promotion
if d.HasChange("cluster_type") && d.Get("cluster_type") == "PRIMARY" {

    if !d.HasChange("secondary_config") || !tpgresource.IsEmptyValue(reflect.ValueOf(d.Get("secondary_config"))) {
        return fmt.Errorf("Remove the secondary_config field to promote the cluster to primary cluster.")
    }

    // If necassary precondition checks for cluster promotion is fine ONLY then
    // Promote cluster as a separate implementation within the update logic

    promoteUrl := strings.Split(url, "?updateMask=")[0] + ":promote"
    emptyObj := make(map[string]interface{})

    // Remove promote changes from obj and updateMask
    delete(obj, "clusterType")
    delete(obj, "secondaryConfig")

    index := 0
    for _, label := range updateMask {
        if label != "clusterType" && label != "secondaryConfig" {
            updateMask[index] = label
            index++
        }
    }
    updateMask = updateMask[:index]

    // Update url with the new updateMask
    url := strings.Split(url, "?updateMask=")[0]
    url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
    if err != nil {
        return err
    }

    // err == nil indicates that the billing_project value was found
    if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
        billingProject = bp
    }

    res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
        Config:    config,
        Method:    "POST",
        Project:   billingProject,
        RawURL:    promoteUrl,
        UserAgent: userAgent,
        Body:      emptyObj,
        Timeout:   d.Timeout(schema.TimeoutCreate),
    })
    if err != nil {
        return fmt.Errorf("Error promoting Cluster: %s", err)
    }

    err = AlloydbOperationWaitTime(
        config, res, project, "Promoting Cluster", userAgent,
        d.Timeout(schema.TimeoutCreate))

    if err != nil {
        return fmt.Errorf("Error waiting to promote Cluster: %s", err)
    }

    log.Printf("[DEBUG] Finished promoting Cluster %q: %#v", d.Id(), res)

}