func resourceSecretManagerSecretResourceV0() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"replication": {
				Type:     schema.TypeList,
				Required: true,
				ForceNew: true,
				Description: `The replication policy of the secret data attached to the Secret. It cannot be changed
after the Secret has been created.`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"automatic": {
							Type:         schema.TypeBool,
							Optional:     true,
							ForceNew:     true,
							Description:  `The Secret will automatically be replicated without any restrictions.`,
							ExactlyOneOf: []string{"replication.0.automatic", "replication.0.user_managed"},
						},
					},
				},
			},
		},
	}
}

func ResourceSecretManagerSecretUpgradeV0(ctx context.Context, rawState map[string]any, meta any) (map[string]any, error) {
	replicationOld := rawState["replication"]
	// To handle the case where replication is not present in the state file.
	// As the replication field is required, replication must be present in the
	// rawState but kept this check just in case such scenario occurs.
	if replicationOld == nil || len(replicationOld.([]interface{})) == 0 {
		log.Print("[DEBUG] Error while migrating the state because replication is nil in the state file")
		return rawState, fmt.Errorf("cannot migrate state as replication is nil in state file")
	}

	replicationInternalMap := replicationOld.([]interface{})[0].(map[string]interface{})

	replicationNew := make([]interface{}, 1)

	interMap := make(map[string]interface{})
	interMap["automatic"] = []interface{}{}
	interMap["user_managed"] = replicationInternalMap["user_managed"]
	replicationNew[0] = interMap

	rawState["replication"] = replicationNew

	return rawState, nil
}
