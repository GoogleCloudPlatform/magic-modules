func resourceSecretManagerSecretVersionResourceV0() *schema.Resource {
	return &schema.Resource{
		Create: resourceSecretManagerSecretVersionCreate,
		Read:   resourceSecretManagerSecretVersionRead,
		Update: resourceSecretManagerSecretVersionUpdate,
		Delete: resourceSecretManagerSecretVersionDelete,

		Importer: &schema.ResourceImporter{
			State: resourceSecretManagerSecretVersionImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"secret_data_wo_version": {
				Type:        schema.TypeInt,
				Optional:    true,
				ForceNew:    true,
				Description: `Triggers update of secret data write-only. For more info see [updating write-only attributes](/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)`,
				Default:     0,
			},
			"secret_data": {
				Type:          schema.TypeString,
				Optional:      true,
				ForceNew:      true,
				Description:   `The secret data. Must be no larger than 64KiB.`,
				Sensitive:     true,
				ConflictsWith: []string{},
			},
			"secret_data_wo": {
				Type:          schema.TypeString,
				Optional:      true,
				Description:   `The secret data. Must be no larger than 64KiB. For more info see [updating write-only attributes](/docs/providers/google/guides/using_write_only_attributes.html#updating-write-only-attributes)`,
				WriteOnly:     true,
				ConflictsWith: []string{"secret_data"},
				RequiredWith:  []string{},
			},

			"secret": {
				Type:             schema.TypeString,
				Required:         true,
				ForceNew:         true,
				DiffSuppressFunc: tpgresource.CompareSelfLinkOrResourceName,
				Description:      `Secret Manager secret resource`,
			},
			"enabled": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `The current state of the SecretVersion.`,
				Default:     true,
			},
			"create_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The time at which the Secret was created.`,
			},
			"destroy_time": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The time at which the Secret was destroyed. Only present if state is DESTROYED.`,
			},
			"name": {
				Type:     schema.TypeString,
				Computed: true,
				Description: `The resource name of the SecretVersion. Format:
'projects/{{project}}/secrets/{{secret_id}}/versions/{{version}}'`,
			},
			"version": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The version of the Secret.`,
			},
			"deletion_policy": {
				Type:     schema.TypeString,
				Optional: true,
				Description: `The deletion policy for the secret version. Setting 'ABANDON' allows the resource
to be abandoned rather than deleted. Setting 'DISABLE' allows the resource to be
disabled rather than deleted. Default is 'DELETE'. Possible values are:
  * DELETE
  * DISABLE
  * ABANDON`,
				Default: "DELETE",
			},
			"is_secret_data_base64": {
				Type:        schema.TypeBool,
				Optional:    true,
				ForceNew:    true,
				Default:     false,
				Description: `If set to 'true', the secret data is expected to be base64-encoded string and would be sent as is.`,
			},
		},
		UseJSONNumber: true,
	}
}

func ResourceSecretManagerSecretVersionUpgradeV0(_ context.Context, rawState map[string]interface{}, meta interface{}) (map[string]interface{}, error) {
    log.Printf("[DEBUG] Attributes before migration: %#v", rawState)

    // not entirely sure what makes sense here, `secret_data_wo_version` in the "existing" state
    // can either be set to 0 because of the default value OR because someone set it explicitly to 0
    // for the first case you want to set it to the new default value `nil`, however, for the second case
    // you want to keep it as it is, because the user explicitly set the key
    // however, based on just the state this distinction cannot be made
    if value, ok := rawState["secret_data_wo_version"]; ok {
        if intValue, isInt := value.(int); isInt && intValue == 0 {
            rawState["secret_data_wo_version"] = nil
        }
    }

    log.Printf("[DEBUG] Attributes after migration: %#v", rawState)
    return rawState, nil 
}
