	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for InstanceDesiredUserCreatedConnections: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
    // not setting desiredUserCreatedEndpoints in obj


	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}MemorystoreBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}region{{"}}"}}/instances/{{"{{"}}name{{"}}"}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating InstanceDesiredUserCreatedConnections %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	updateMask := []string{}
	updateMask = append(updateMask, "endpoints")
	// endpoints maps to desiredUserCreatedEndpoints on the resource
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	obj["async_instance_endpoints_deletion_enabled"] = true
	
	// if updateMask is empty we are not updating anything so skip the post
	if len(updateMask) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "PATCH",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      obj,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})

		if err != nil {
			return fmt.Errorf("Error updating InstanceDesiredUserCreatedConnections %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished updating InstanceDesiredUserCreatedConnections %q: %#v", d.Id(), res)
		}

		err = MemorystoreOperationWaitTime(
			config, res, project, "Updating InstanceDesiredUserCreatedConnections", userAgent,
			d.Timeout(schema.TimeoutUpdate))

		if err != nil {
			return err
		}
	}
	return resourceMemorystoreInstanceDesiredUserCreatedEndpointsRead(d, meta)