project, err := tpgresource.GetProject(d, config)
if err != nil {
    return fmt.Errorf("Error fetching project for Jobs: %s", err)
}
billingProject = project

if d.Get("delete_protection").(bool) {
    log.Printf("[DEBUG] delete_protection set to true, existing resource on cloud will not be deleted, new resource will be created")
    return nil
}

url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}StorageBatchOperationsBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/jobs/{{"{{"}}job_id{{"}}"}}")
if err != nil {
    return err
}

var obj map[string]interface{}

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
    billingProject = bp
}

headers := make(http.Header)

log.Printf("[DEBUG] Deleting Jobs %q", d.Id())
res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
    Config:    config,
    Method:    "DELETE",
    Project:   billingProject,
    RawURL:    url,
    UserAgent: userAgent,
    Body:      obj,
    Timeout:   d.Timeout(schema.TimeoutDelete),
    Headers:   headers,
})
if err != nil {
    return transport_tpg.HandleNotFoundError(err, d, "Jobs")
}

log.Printf("[DEBUG] Finished deleting Jobs %q: %#v", d.Id(), res)
return nil