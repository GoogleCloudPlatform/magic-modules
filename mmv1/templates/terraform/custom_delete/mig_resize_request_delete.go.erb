// Get project id
project, err := tpgresource.GetProject(d, config)
if err != nil {
	return fmt.Errorf("Error fetching project for resize request: %s", err)
}

// Get cancel url
cancelUrl, err = tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{instanceGroupManager}}/resizeRequests/{{resizeRequest}}/cancel")
if err != nil {
	return err
}

// Get delete url
deleteUrl, err = tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{instanceGroupManager}}/resizeRequests/{{resizeRequest}}")
if err != nil {
	return err
}

// Get current state (accepted or not) and delete
if d.Get("state") == "ACCEPTED" {
	// cancel resize request
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "POST",
		Project: project,
		RawURL: cancelUrl,
		UserAgent: userAgent,
		Body: obj,
		Timeout: d.Timeout(schema.TimeoutDelete),
	})

	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "ResizeRequest")
	}

	err = ComputeOperationWaitTime(
		config, res, project, "Cancelling the resize request", userAgent,
		d.Timeout(schema.TimeoutDelete))
	
	if err != nil {
		return err
	}
}

// delete resize request
res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config: config,
	Method: "DELETE",
	Project: project,
	RawURL: deleteUrl,
	UserAgent: userAgent,
	Body: obj,
	Timeout: d.Timeout(schema.TimeoutDelete),
})

if err != nil {
	return fmt.Errorf("Error deleting resize request %q: %s", d.Id(), err)
}


