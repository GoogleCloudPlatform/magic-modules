if d.Get("deletion_protection").(bool) {
    return fmt.Errorf("cannot destroy domain without setting deletion_protection=false and running `terraform apply`")
}

billingProject := ""

project, err := tpgresource.GetProject(d, config)
if err != nil {
    return fmt.Errorf("Error fetching project for Domain: %s", err)
}
billingProject = project

url, err := tpgresource.ReplaceVars(d, config, "{{ActiveDirectoryBasePath}}projects/{{project}}/locations/global/domains/{{domain_name}}")
if err != nil {
    return err
}

var obj map[string]interface{}

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
    billingProject = bp
}

headers := make(http.Header)

log.Printf("[DEBUG] Deleting Domain %q", d.Id())
res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
    Config:               config,
    Method:               "DELETE",
    Project:              billingProject,
    RawURL:               url,
    UserAgent:            userAgent,
    Body:                 obj,
    Timeout:              d.Timeout(schema.TimeoutDelete),
    Headers:              headers,
    ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.Is429QuotaError},
})
if err != nil {
    return transport_tpg.HandleNotFoundError(err, d, "Domain")
}

err = ActiveDirectoryOperationWaitTime(
    config, res, project, "Deleting Domain", userAgent,
    d.Timeout(schema.TimeoutDelete))

if err != nil {
    return err
}

log.Printf("[DEBUG] Finished deleting Domain %q: %#v", d.Id(), res)
return nil
