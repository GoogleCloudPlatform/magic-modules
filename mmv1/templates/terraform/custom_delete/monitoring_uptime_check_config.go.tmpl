billingProject := ""

project, err := tpgresource.GetProject(d, config)
if err != nil {
    return fmt.Errorf("Error fetching project for UptimeCheckConfig: %s", err)
}
billingProject = project

lockName, err := tpgresource.ReplaceVars(d, config, "stackdriver/groups/{{"{{"}}project{{"}}"}}")
if err != nil {
    return err
}
transport_tpg.MutexStore.Lock(lockName)
defer transport_tpg.MutexStore.Unlock(lockName)

url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}MonitoringBasePath{{"}}"}}v3/{{"{{"}}name{{"}}"}}")
if err != nil {
    return err
}

var obj map[string]interface{}
log.Printf("[DEBUG] Deleting UptimeCheckConfig %q", d.Id())

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
    billingProject = bp
}

res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
    Config:               config,
    Method:               "DELETE",
    Project:              billingProject,
    RawURL:               url,
    UserAgent:            userAgent,
    Body:                 obj,
    Timeout:              d.Timeout(schema.TimeoutDelete),
    ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.IsMonitoringConcurrentEditError},
})


{{/*     The generated DELETE method returns a generic error for 400. 
    Need to include a help message about deleting associated Alert Policies. */ -}}

if err != nil {
    if transport_tpg.IsGoogleApiErrorWithCode(err, 400) {
        err := fmt.Errorf("%w - please ensure all associated Alert Policies are deleted.", err)
        return errwrap.Wrapf("Error when reading or editing UptimeCheckConfig: {{"{{"}}err{{"}}"}}", err)
    }
    return transport_tpg.HandleNotFoundError(err, d, "UptimeCheckConfig")
}

log.Printf("[DEBUG] Finished deleting UptimeCheckConfig %q: %#v", d.Id(), res)
return nil