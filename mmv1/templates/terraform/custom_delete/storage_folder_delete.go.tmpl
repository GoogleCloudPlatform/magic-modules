bucket := d.Get("bucket").(string)
name := d.Get("name").(string)

var listError, deleteObjectError error
for deleteObjectError == nil {
    res, err := config.NewStorageClient(userAgent).Objects.List(bucket).Prefix(name).Do()
    if err != nil {
        log.Printf("Error listing contents of folder %s: %v", bucket, err)
        listError = err
        break
    }

    if len(res.Items) == 0 {
        break // 0 items, folder empty
    }

    if !d.Get("force_destroy").(bool) {
        deleteErr := fmt.Errorf("Error trying to delete folder %s containing objects without force_destroy set to true", bucket)
        log.Printf("Error! %s : %s\n\n", bucket, deleteErr)
        return deleteErr
    }
    // GCS requires that a folder be empty (have no objects or object
    // versions) before it can be deleted.
    log.Printf("[DEBUG] GCS Folder attempting to forceDestroy\n\n")

    // Create a workerpool for parallel deletion of resources. In the
    // future, it would be great to expose Terraform's global parallelism
    // flag here, but that's currently reserved for core use. Testing
    // shows that NumCPUs-1 is the most performant on average networks.
    //
    // The challenge with making this user-configurable is that the
    // configuration would reside in the Terraform configuration file,
    // decreasing its portability. Ideally we'd want this to connect to
    // Terraform's top-level -parallelism flag, but that's not plumbed nor
    // is it scheduled to be plumbed to individual providers.
    wp := workerpool.New(runtime.NumCPU() - 1)

    for _, object := range res.Items {
        log.Printf("[DEBUG] Found %s", object.Name)
        object := object

        wp.Submit(func() {
            log.Printf("[TRACE] Attempting to delete %s", object.Name)
            if err := config.NewStorageClient(userAgent).Objects.Delete(bucket, object.Name).Generation(object.Generation).Do(); err != nil {
                deleteObjectError = err
                log.Printf("[ERR] Failed to delete storage object %s: %s", object.Name, err)
            } else {
                log.Printf("[TRACE] Successfully deleted %s", object.Name)
            }
        })
    }

    // Wait for everything to finish.
    wp.StopWait()
}

err = retry.Retry(1*time.Minute, func() *retry.RetryError {
    err := config.NewStorageClient(userAgent).Folders.Delete(bucket, name).Do()
    if err == nil {
        return nil
    }
    if gerr, ok := err.(*googleapi.Error); ok && gerr.Code == 429 {
        return retry.RetryableError(gerr)
    }
    return retry.NonRetryableError(err)
})

if gerr, ok := err.(*googleapi.Error); ok && gerr.Code == 409 && strings.Contains(gerr.Message, "not empty") && listError != nil {
    return fmt.Errorf("could not delete non-empty folder due to error when listing contents: %v", listError)
}
if gerr, ok := err.(*googleapi.Error); ok && gerr.Code == 409 && strings.Contains(gerr.Message, "not empty") && deleteObjectError != nil {
    return fmt.Errorf("could not delete non-empty folder due to error when deleting contents: %v", deleteObjectError)
}
if gerr, ok := err.(*googleapi.Error); ok && gerr.Code == 409 && strings.Contains(gerr.Message, "not empty") && !d.Get("force_destroy").(bool) {
    return fmt.Errorf("Sub folders or items may exist within folder, use force_destroy to true to delete all subfolders: %v", err)
}

if err == nil {
    log.Printf("[DEBUG] Deleted empty folder %v\n\n", name)
    return nil
} else {
    log.Printf("[ERROR] Error deleting folder %v, %v\n\n", name, err)
}

// attempts to delete any sub folders within the folder
foldersList, err := config.NewStorageClient(userAgent).Folders.List(bucket).Prefix(name).Do()
if err != nil {
    return err
}
if d.Get("force_destroy").(bool) {
    log.Printf("[DEBUG] folder names to delete: %#v", name)
    items := foldersList.Items
    for i := len(items) - 1; i >= 0; i-- {
        err = transport_tpg.Retry(transport_tpg.RetryOptions{
            RetryFunc: func() error {
                err = config.NewStorageClient(userAgent).Folders.Delete(bucket, items[i].Name).Do()
                return err
            },
            Timeout:              d.Timeout(schema.TimeoutDelete),
            ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.Is429RetryableQuotaError},
        })
        if err != nil {
            return err
        }
    }

    log.Printf("[DEBUG] Finished deleting Folder %q: %#v", d.Id(), name)
} else {
    deleteErr := fmt.Errorf("Sub folders exist within folder, use force_destroy to true to delete all subfolders")
    log.Printf("Error! %s : %s\n\n", name, deleteErr)
    return deleteErr
}
return nil