url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}ComputeBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/zones/{{"{{"}}zone{{"}}"}}/instanceSettings")
if err != nil {
        return err
}

project, err := tpgresource.GetProject(d, config)
if err != nil {
        return fmt.Errorf("Error fetching project for InstanceSettings: %s", err)
}

res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config:    config,
	Method:    "GET",
	Project:   project,
	RawURL:    url,
	UserAgent: userAgent,
})

if err != nil {
		return err
}

obj := map[string]interface {}{"fingerprint":res["fingerprint"], "metadata":map[string]interface {}{"items":map[string]string{}}}
log.Printf("[DEBUG] Emptying InstanceSettings %#v", obj)

url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": "*"})
if err != nil {
	return err
}

res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config: config,
	Method: "PATCH",
    Project: project,
	RawURL: url,
	UserAgent: userAgent,
	Body: obj,
	Timeout: d.Timeout(schema.TimeoutUpdate),
})

if err != nil {
	return fmt.Errorf("Error emptying InstanceSettings %s", err)
} else {
	log.Printf("[DEBUG] Finished emptying InstanceSettings %#v", res)
}

time.Sleep(1 * time.Minute)

return nil
