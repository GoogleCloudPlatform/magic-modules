
if d.Get("noop_on_destroy") == true {
	log.Printf("[DEBUG] Keeping the AppVersion %q", d.Id())
	return nil
}

project, err := tpgresource.GetProject(d, config)
if err != nil {
	return err
}

lockName, err := tpgresource.ReplaceVars(d, config, "apps/{{"{{"}}project{{"}}"}}/services/{{"{{"}}service{{"}}"}}")
if err != nil {
	return err
}
transport_tpg.MutexStore.Lock(lockName)
defer transport_tpg.MutexStore.Unlock(lockName)

if d.Get("delete_service_on_destroy") == true {
	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}AppEngineBasePath{{"}}"}}apps/{{"{{"}}project{{"}}"}}/services/{{"{{"}}service{{"}}"}}")
	if err != nil {
		return err
	}
	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting Service %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "DELETE",
		Project: project,
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
		Timeout: d.Timeout(schema.TimeoutDelete),
{{- if $.ErrorRetryPredicates }}
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorRetryPredicates "," -}} },
{{- end }}
{{- if $.ErrorAbortPredicates }}
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorAbortPredicates "," -}} },
{{- end }}
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Service")
	}
	err = AppEngineOperationWaitTime(
		config, res, project, "Deleting Service", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}
	log.Printf("[DEBUG] Finished deleting Service %q: %#v", d.Id(), res)
	return nil
} else {
	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}AppEngineBasePath{{"}}"}}apps/{{"{{"}}project{{"}}"}}/services/{{"{{"}}service{{"}}"}}/versions/{{"{{"}}version_id{{"}}"}}")
	if err != nil {
		return err
	}
	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting AppVersion %q", d.Id())
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "DELETE",
		Project: project,
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
		Timeout: d.Timeout(schema.TimeoutDelete),
{{- if $.ErrorRetryPredicates }}
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorRetryPredicates "," -}} },
{{- end }}
{{- if $.ErrorAbortPredicates }}
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorAbortPredicates "," -}} },
{{- end }}
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "AppVersion")
	}
	err = AppEngineOperationWaitTime(
		config, res, project, "Deleting AppVersion", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}
	log.Printf("[DEBUG] Finished deleting AppVersion %q: %#v", d.Id(), res)
	return nil


}
