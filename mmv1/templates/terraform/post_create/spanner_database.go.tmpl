// Note: Databases that are created with POSTGRESQL dialect do not support extra DDL
// statements at the time of database creation. To avoid users needing to run 
// `terraform apply` twice to get their desired outcome, the provider does not set
// `extraStatements` in the call to the `create` endpoint and all DDL (other than
//  <CREATE DATABASE>) is run post-create, by calling the `updateDdl` endpoint 

_, ok := opRes["name"]
if !ok {
	return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
}

retention, retentionPeriodOk := d.GetOk("version_retention_period")
retentionPeriod := retention.(string)
ddl, ddlOk := d.GetOk("ddl")
ddlStatements := ddl.([]interface{})

if retentionPeriodOk || ddlOk {

	obj := make(map[string]interface{})
	updateDdls := []string{}

	if ddlOk {
		for i := 0; i < len(ddlStatements); i++ {
			if ddlStatements[i] != nil {
				updateDdls = append(updateDdls, ddlStatements[i].(string))
			}
		}
	}

	if retentionPeriodOk {
		dbName := d.Get("name")
		retentionDdl := fmt.Sprintf("ALTER DATABASE `%s` SET OPTIONS (version_retention_period=\"%s\")", dbName, retentionPeriod)
		if dialect, ok := d.GetOk("database_dialect"); ok && dialect == "POSTGRESQL" {
			retentionDdl = fmt.Sprintf("ALTER DATABASE \"%s\" SET spanner.version_retention_period TO \"%s\"", dbName, retentionPeriod)
		}
		updateDdls = append(updateDdls, retentionDdl)
	}

	// Skip API call if there are no new ddl entries (due to ignoring nil values)
	if len(updateDdls) > 0 {
		log.Printf("[DEBUG] Applying extra DDL statements to the new Database: %#v", updateDdls)

		obj["statements"] = updateDdls

		url, err = tpgresource.ReplaceVars(d, config, "{{"{{"}}SpannerBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/instances/{{"{{"}}instance{{"}}"}}/databases/{{"{{"}}name{{"}}"}}/ddl")
		if err != nil {
			return err
		}

		res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config: config,
			Method: "PATCH",
			Project: billingProject,
			RawURL: url,
			UserAgent: userAgent,
			Body: obj,
			Timeout: d.Timeout(schema.TimeoutUpdate),
		})
		if err != nil {
			return fmt.Errorf("Error executing DDL statements on Database: %s", err)
		}

		// Use the resource in the operation response to populate
		// identity fields and d.Id() before read
		var opRes map[string]interface{}
		err = SpannerOperationWaitTimeWithResponse(
			config, res, &opRes, project, "Creating Database", userAgent,
			d.Timeout(schema.TimeoutCreate))
		if err != nil {
			// The resource didn't actually create
			d.SetId("")
			return fmt.Errorf("Error waiting to run DDL against newly-created Database: %s", err)
		}
	}
}

enableDropProtection, enableDropProtectionOk := d.GetOk("enable_drop_protection")
dropProtection := enableDropProtection.(bool)
if enableDropProtectionOk && dropProtection {
	updateMask := []string{"enableDropProtection"}
	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}SpannerBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/instances/{{"{{"}}instance{{"}}"}}/databases/{{"{{"}}name{{"}}"}}")
	if err != nil {
		return err
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}
	obj := map[string]interface{}{"enableDropProtection": dropProtection}
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})
	if err != nil {
		return fmt.Errorf("Error updating enableDropDatabaseProtection on Database: %s", err)
	} else {
		log.Printf("[DEBUG] Finished updating enableDropDatabaseProtection %q: %#v", d.Id(), res)
	}
}

