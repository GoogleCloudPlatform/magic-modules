endpointObj := make(map[string]interface{})
if v, ok := d.GetOkExists("fqdn"); !tpgresource.IsEmptyValue(reflect.ValueOf(fqdnProp)) && (ok || !reflect.DeepEqual(v, fqdnProp)) {
	endpointObj["fqdn"] = fqdnProp
}
if v, ok := d.GetOkExists("port"); !tpgresource.IsEmptyValue(reflect.ValueOf(portProp)) && (ok || !reflect.DeepEqual(v, portProp)) {
	endpointObj["port"] = portProp
}
if v, ok := d.GetOkExists("ip_address"); !tpgresource.IsEmptyValue(reflect.ValueOf(ipAddressProp)) && (ok || !reflect.DeepEqual(v, ipAddressProp)) {
	endpointObj["ipAddress"] = ipAddressProp
}

wrappedReq := map[string]interface{}{
	"networkEndpoints": []interface{}{endpointObj},
}

attachUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}ComputeBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/global/networkEndpointGroups/{{"{{"}}name{{"}}"}}/attachNetworkEndpoints")
if err != nil {
	return err
}

log.Printf("[DEBUG] Creating new GlobalNetworkEndpoint: %#v", wrappedReq)
_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config: config,
	Method: "POST",
	Project: project,
	RawURL: attachUrl,
	UserAgent: userAgent,
	Body: wrappedReq,
	Timeout: d.Timeout(schema.TimeoutCreate),
})
if err != nil {
	return fmt.Errorf("Error creating GlobalNetworkEndpoint: %s", err)
}