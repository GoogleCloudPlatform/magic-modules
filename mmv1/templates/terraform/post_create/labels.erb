<% if object.properties.any?{ |p| p.name == "labels" } -%>
if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
	labels := d.Get("labels")
	terraformLables := d.Get("terraform_labels")

	// Labels cannot be set in a create.  We'll have to set them here.
	err = resource<%= object.resource_name -%>Read(d, meta)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	// d.Get("effective_labels") will have been overridden by the Read call.
	labelsProp, err := expand<%= object.resource_name -%>EffectiveLabels(v, d, config)
	if err != nil {
		return err
	}
	obj["labels"] = labelsProp
	labelFingerprintProp := d.Get("label_fingerprint")
	obj["labelFingerprint"] = labelFingerprintProp

	url, err = tpgresource.ReplaceVars(d, config, "{{<%=object.__product.name-%>BasePath}}<%=object.self_link_uri-%>/setLabels")
	if err != nil {
		return err
	}
	res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "POST",
		Project: project,
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
		<% if object.error_retry_predicates -%>
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{<%= object.error_retry_predicates.join(',') -%>},
		<% end -%>
		<% if object.error_abort_predicates -%>
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{<%= object.error_abort_predicates.join(',') -%>},
		<% end -%>
	})
	if err != nil {
		return fmt.Errorf("Error adding labels to <%= object.resource_name -%> %q: %s", d.Id(), err)
	}

	err = ComputeOperationWaitTime(
		config, res, project, "Updating <%= object.resource_name -%> Labels", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	// Set back the labels field, as it is needed to decide the value of "labels" in the state in the read function.
	if err := d.Set("labels", labels); err != nil {
		return fmt.Errorf("Error setting back labels: %s", err)
	}

	// Set back the terraform_labels field, as it is needed to decide the value of "terraform_labels" in the state in the read function.
	if err := d.Set("terraform_labels", terraformLables); err != nil {
		return fmt.Errorf("Error setting back terraform_labels: %s", err)
	}

	// Set back the effective_labels field, as it is needed to decide the value of "effective_labels" in the state in the read function.
	if err := d.Set("effective_labels", v); err != nil {
		return fmt.Errorf("Error setting back effective_labels: %s", err)
	}
}
<% end -%>
