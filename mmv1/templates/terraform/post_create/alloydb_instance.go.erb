<% unless version == 'ga' -%>
networkConfigProp, err = expandAlloydbInstanceNetworkConfig(d.Get("network_config"), d, config)
if err != nil {
	return err
} else if v, ok := d.GetOkExists("network_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkConfigProp)) && (ok || !reflect.DeepEqual(v, networkConfigProp)) {
	// an instance cannot be created with public IP addresses, so we need to PATCH the instance 
        // after its created
	url, err := tpgresource.ReplaceVars(d, config, "{{AlloydbBasePath}}{{cluster}}/instances/{{instance_id}}")
	if err != nil {
		return err 
	}
	log.Printf("[DEBUG] Updating network configuration for alloyDB instance %q", d.Id())
	obj = make(map[string]interface{})
	obj["networkConfig"] = networkConfigProp

	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": "networkConfig"})
	if err != nil {
		return err
	}

	patchRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "PATCH",
		Project: billingProject,
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
		Timeout: d.Timeout(schema.TimeoutUpdate),
	})

	if err != nil {
		return fmt.Errorf("Error updating network configuration for alloydb instance %q: %s", d.Id(), err)
	}

	err = AlloydbOperationWaitTime(
		config, patchRes, project, "Creating Instance", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return fmt.Errorf("Error updating network configuration for alloydb instance %q: %s", d.Id(), err)
	}
}
<% end -%>