// If enablePublicIp is set to true, then we must create the instance first with
// it disabled then update to enable it. 
networkConfigProp, err = expandAlloydbInstanceNetworkConfig(d.Get("network_config"), d, config)
if err != nil {
  return err
} else if v, ok := d.GetOkExists("network_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkConfigProp)) && (ok || !reflect.DeepEqual(v, networkConfigProp)) {
  nc := networkConfigProp.(map[string]interface{})
  if nc["enablePublicIp"] == true {  
    obj["networkConfig"] = networkConfigProp
    
    updateMask := []string{}
    updateMask = append(updateMask, "networkConfig")
    url, err := tpgresource.ReplaceVars(d, config, "{{AlloydbBasePath}}{{cluster}}/instances/{{instance_id}}")
    if err != nil {
      return err
    }
    url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
    if err != nil {
      return err
    }
    
    updateRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
        Config: config,
        Method: "PATCH",
        Project: billingProject,
        RawURL: url,
        UserAgent: userAgent,
        Body: obj,
        Timeout: d.Timeout(schema.TimeoutUpdate),
    })
    if err != nil {
      return fmt.Errorf("Error updating the Instance to enable public ip: %s", err)
    } else {
      log.Printf("[DEBUG] Finished updating Instance to enable public ip %q: %#v", d.Id(), updateRes)
    }
    err = AlloydbOperationWaitTime(
      config, updateRes, project, "Updating Instance", userAgent,
      d.Timeout(schema.TimeoutUpdate))

    if err != nil {
      return err
    }
  }
}
