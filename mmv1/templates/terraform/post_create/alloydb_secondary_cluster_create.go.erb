if d.Get("secondary_cluster") != nil {

    url, err := tpgresource.ReplaceVars(d, config, "{{AlloydbBasePath}}projects/{{project}}/locations/{{secondary_cluster['location'}}/clusters:createsecondary?clusterId={{secondary_cluster['cluster_id'}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Secondary Cluster: %#v", obj)

    // Set primary cluster name from previously created cluster
    secondary_config := make(map[string]interface{})
    secondary_config["primaryClusterName"] = id
    obj["secondaryConfig"] = secondary_config

    // Secondary clusters do not support backup policies or an initial user
    delete(obj, "automatedBackupPolicy")
    delete(obj, "initialUser")

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating Secondary Cluster: %s", err)
	}

	err = AlloydbOperationWaitTime(
		config, res, project, "Creating Secondary Cluster", userAgent,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		return fmt.Errorf("Error waiting to create Secondary Cluster: %s", err)
	}

	log.Printf("[DEBUG] Finished creating Secondary Cluster.", res)

}
