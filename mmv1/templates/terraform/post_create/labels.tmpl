{{- if $.HasLabelsField }}
if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
	labels := d.Get("labels")
	terraformLables := d.Get("terraform_labels")

	// Labels cannot be set in a create.  We'll have to set them here.
	err = resource{{$.ResourceName}}Read(d, meta)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	// d.Get("effective_labels") will have been overridden by the Read call.
	labelsProp, err := expand{{$.ResourceName}}EffectiveLabels(v, d, config)
	if err != nil {
		return err
	}
	obj["labels"] = labelsProp
	labelFingerprintProp := d.Get("label_fingerprint")
	obj["labelFingerprint"] = labelFingerprintProp

	url, err = tpgresource.ReplaceVars(d, config, "{{"{{"}}{{$.ProductMetadata.Name}}BasePath{{"}}"}}{{$.SelfLinkUri}}/setLabels")
	if err != nil {
		return err
	}
	res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "POST",
		Project: project,
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
		{{- if $.ErrorRetryPredicates }}
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorRetryPredicates "," -}} },
		{{- end }}
		{{- if $.ErrorAbortPredicates }}
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorAbortPredicates "," -}} },
		{{- end }}
	})
	if err != nil {
		return fmt.Errorf("Error adding labels to {{$.ResourceName}} %q: %s", d.Id(), err)
	}

	err = ComputeOperationWaitTime(
		config, res, project, "Updating {{$.ResourceName}} Labels", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	// Set back the labels field, as it is needed to decide the value of "labels" in the state in the read function.
	if err := d.Set("labels", labels); err != nil {
		return fmt.Errorf("Error setting back labels: %s", err)
	}

	// Set back the terraform_labels field, as it is needed to decide the value of "terraform_labels" in the state in the read function.
	if err := d.Set("terraform_labels", terraformLables); err != nil {
		return fmt.Errorf("Error setting back terraform_labels: %s", err)
	}

	// Set back the effective_labels field, as it is needed to decide the value of "effective_labels" in the state in the read function.
	if err := d.Set("effective_labels", v); err != nil {
		return fmt.Errorf("Error setting back effective_labels: %s", err)
	}
}
{{- end }}
