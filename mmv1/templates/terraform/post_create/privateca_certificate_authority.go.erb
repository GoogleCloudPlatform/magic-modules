staged := d.Get("type").(string) == "SELF_SIGNED"

if d.Get("type").(string) == "SUBORDINATE" {
	if _, ok := d.GetOk("subordinate_config"); ok {
		// First party issuer
		log.Printf("[DEBUG] Activating CertificateAuthority with first party issuer")
		if err := activateSubCAWithFirstPartyIssuer(config, d, project, billingProject, userAgent); err != nil {
			return fmt.Errorf("Error activating subordinate CA with first party issuer: %v", err)
		}
		staged = true
		log.Printf("[DEBUG] CertificateAuthority activated")
	}
}


// Enable the CA if `desired_state` is unspecified or specified as `ENABLED`.
if p, ok := d.GetOk("desired_state"); !ok || p.(string) == "ENABLED" {
	// Skip enablement on SUBORDINATE CA for backward compatible.
	if staged {
		if err := enableCA(config, d, project, billingProject, userAgent); err != nil {
			return fmt.Errorf("Error enabling CertificateAuthority: %v", err)
		}
	}
}
