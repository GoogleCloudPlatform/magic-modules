{{- if ne $.TargetVersionName "ga" }}
// security_policy isn't set by Create
if v, ok := d.GetOkExists("security_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, securityPolicyProp)) {
  obj := make(map[string]interface{})
  securityPolicyProp, err := expandComputeTargetInstanceSecurityPolicy(v, d, config)
  if err != nil {
    return err
  }
  obj["security_policy"] = securityPolicyProp

  url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}ComputeBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/zones/{{"{{"}}zone{{"}}"}}/targetInstances/{{"{{"}}name{{"}}"}}/setSecurityPolicy")
  if err != nil {
    return err
  }

  res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
    Config:    config,
    Method:    "POST",
    Project:   project,
    RawURL:    url,
    UserAgent: userAgent,
    Body:      obj,
  })

  if err != nil {
    return fmt.Errorf("Error adding SecurityPolicy to TargetInstance %q: %s", d.Id(), err)
  }

  err = ComputeOperationWaitTime(config, res, project, "Updating TargetInstance SecurityPolicy", userAgent, d.Timeout(schema.TimeoutUpdate))
  if err != nil {
    return err
  }
}
{{- end }}