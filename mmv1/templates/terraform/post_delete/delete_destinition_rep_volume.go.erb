time.Sleep(20 * time.Second)
log.Printf("[DEBUG] value of destvol %q: %v", reflect.TypeOf(d.Get("destination_volume")), d.Get("destination_volume"))
if d.Get("delete_destination_volume").(string) == "Yes" {
        str1 := d.Get("destination_volume").(string)
        res1 := str1+"?force=true"
        de_url, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}")
        if err != nil {
                return err
        }
        var obj1 map[string]interface{}
        res2, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
                Config:    config,
                Method:    "DELETE",
                Project:   billingProject,
                RawURL:    de_url+res1,
                UserAgent: userAgent,
                Body:      obj1,
                Timeout:   d.Timeout(schema.TimeoutDelete),
        })
        if err != nil {
                return transport_tpg.HandleNotFoundError(err, d, "volume")
        }
        err = NetappOperationWaitTime(
                config, res2, project, "Deleting volume", userAgent,
                d.Timeout(schema.TimeoutDelete))
        if err != nil {
                return err
        }
        log.Printf("[DEBUG] Finished deleting volume %q: %#v", d.Id(), res2)
    }