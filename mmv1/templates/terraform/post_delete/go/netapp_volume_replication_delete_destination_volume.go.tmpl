// A replication CREATE also created a destination volume
// A user can chooses to delete the destination volume after deleting the replication
if d.Get("delete_destination_volume").(bool) == true {
	log.Printf("[DEBUG] delete_destination_volume is true. Deleting destination volume %v", d.Get("destination_volume"))
	destination_volume := d.Get("destination_volume").(string)
	del_url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}NetappBasePath{{"}}"}}"+destination_volume+"?force=true")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	res_del, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    del_url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "Volume")
	}

	err = NetappOperationWaitTime(
		config, res_del, project, "Deleting destination volume", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting destination Volume %q: %#v", destination_volume, res_del)
}