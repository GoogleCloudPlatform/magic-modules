resource "google_project" "project" {
  project_id      = "tf-test%{random_suffix}"
  name            = "tf-test%{random_suffix}"
  org_id          = "{{index $.TestEnvVars "org_id"}}"
  billing_account = "{{index $.TestEnvVars "billing_account"}}"
  deletion_policy = "DELETE"

  provider = google-beta
}

resource "time_sleep" "wait_60_seconds" {
  create_duration = "60s"
  depends_on = [google_project.project]
}

resource "google_project_service" "compute" {
  project = google_project.project.project_id
  service = "compute.googleapis.com"
  depends_on = [time_sleep.wait_60_seconds]

  provider = google-beta
}

resource "google_project_service" "managedkafka" {
  project = google_project.project.project_id
  service = "managedkafka.googleapis.com"
  depends_on = [google_project_service.compute]

  provider = google-beta
}

resource "time_sleep" "wait_120_seconds" {
  create_duration = "120s"
  depends_on = [google_project_service.managedkafka]
}

resource "google_compute_subnetwork" "mkc_secondary_subnet" {
  project       = google_project.project.project_id
  name          = "{{index $.Vars "secondary_subnet_id"}}"
  ip_cidr_range = "10.5.0.0/16"
  region        = "us-central1"
  network       = "default"
  depends_on = [time_sleep.wait_120_seconds]

  provider = google-beta
}

resource "google_pubsub_topic" "cps_topic" {
  project = google_project.project.project_id
  name = "{{index $.Vars "cps_topic_name"}}"
  message_retention_duration = "86600s"

  provider = google-beta
}

resource "google_managed_kafka_cluster" "gmk_cluster" {
  project = google_project.project.project_id
  cluster_id = "{{index $.Vars "cluster_id"}}"
  location = "us-central1"
  capacity_config {
    vcpu_count = 3
    memory_bytes = 3221225472
  }
  gcp_config {
    access_config {
      network_configs {
        subnet = "projects/${google_project.project.project_id}/regions/us-central1/subnetworks/default"
      }
    }
  }
  depends_on = [google_project_service.managedkafka]

  provider = google-beta
}

resource "google_managed_kafka_topic" "gmk_topic" {
  project = google_project.project.project_id
  topic_id = "{{index $.Vars "topic_id"}}"
  cluster = google_managed_kafka_cluster.gmk_cluster.cluster_id
  location = "us-central1"
  partition_count = 2
  replication_factor = 3
  depends_on = [google_project_service.managedkafka]

  provider = google-beta
}

resource "google_managed_kafka_connect_cluster" "mkc_cluster" {
  project = google_project.project.project_id
  connect_cluster_id = "{{index $.Vars "connect_cluster_id"}}"
  kafka_cluster = "projects/${google_project.project.project_id}/locations/us-central1/clusters/${google_managed_kafka_cluster.gmk_cluster.cluster_id}"
  location = "us-central1"
  capacity_config {
    vcpu_count = 12
    memory_bytes = 21474836480
  }
  gcp_config {
    access_config {
      network_configs {
        primary_subnet = "projects/${google_project.project.project_id}/regions/us-central1/subnetworks/default"
        additional_subnets = ["${google_compute_subnetwork.mkc_secondary_subnet.id}"]
        dns_domain_names = ["${google_managed_kafka_cluster.gmk_cluster.cluster_id}.us-central1.managedkafka.${google_project.project.project_id}.cloud.goog"]
      }
    }
  }
  labels = {
    key = "value"
  }
  depends_on = [google_project_service.managedkafka]

  provider = google-beta
}

resource "google_managed_kafka_connector" "{{$.PrimaryResourceId}}" {
  project = google_project.project.project_id
  connector_id = "{{index $.Vars "connector_id"}}"
  connect_cluster = google_managed_kafka_connect_cluster.mkc_cluster.connect_cluster_id
  location = "us-central1"
  configs = {
    "connector.class" = "com.google.pubsub.kafka.sink.CloudPubSubSinkConnector"
    "name" = "{{index $.Vars "connector_id"}}"
    "tasks.max" = "1"
    "topics" = "${google_managed_kafka_topic.gmk_topic.topic_id}"
    "cps.topic" = "${google_pubsub_topic.cps_topic.name}"
    "cps.project" = "${google_project.project.project_id}"
    "value.converter" = "org.apache.kafka.connect.storage.StringConverter"
    "key.converter" = "org.apache.kafka.connect.storage.StringConverter"
  }
  task_restart_policy {
    minimum_backoff = "60s"
    maximum_backoff = "1800s"
  }
  depends_on = [google_project_service.managedkafka]

  provider = google-beta
}
