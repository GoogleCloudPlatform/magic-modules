resource "google_dialogflow_cx_agent" "agent" {
  display_name          = "{{index $.Vars "agent_name"}}"
  location              = "global"
  default_language_code = "en"
  time_zone             = "America/New_York"
  description           = "Example description."
}

resource "google_storage_bucket" "bucket" {
  name                        = "{{index $.Vars "bucket_name"}}"
  location                    = "US"
  uniform_bucket_level_access = true
}

resource "google_dialogflow_cx_webhook" "my_webhook" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "MyWebhook"
  generic_web_service {
    uri = "https://example.com"
  }
}

resource "google_dialogflow_cx_tool" "my_tool" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Example Tool"
  description  = "Example Description"
}

resource "google_dialogflow_cx_generator" "my_generator" {
  parent = google_dialogflow_cx_agent.agent.id
  display_name = "TF Prompt generator"
  llm_model_settings {
    model = "gemini-2.0-flash-001"
    prompt_text = "Return me some great results"
  }
  prompt_text {
    text = "Send me great results in french"
  }
  model_parameter {
    temperature = 0.55
  }
}

resource "google_dialogflow_cx_playbook" "{{$.PrimaryResourceId}}" {
  parent       = google_dialogflow_cx_agent.agent.id
  display_name = "Playbook Example with Fulfillment"
  goal         = "Example Goal"
  instruction {
    guidelines = "Example Guidelines"
    steps {
      text = "step 1"
      steps = jsonencode([
        {
          "text": "step 1 1"
        },
        {
          "text": "step 1 2",
          "steps": [
            {
              "text": "step 1 2 1"
            },
            {
              "text": "step 1 2 2"
            }
          ]
        },
        {
          "text": "step 1 3"
        }
      ])
    }
    steps {
      text = "step 2"
    }
    steps {
      text = "step 3"
    }
  }
  llm_model_settings {
    model = "gemini-2.0-flash-001"
    prompt_text = "Return me some great results"
  }
  handlers {
    event_handler {
      event = "custom-event"
      fulfillment {
        return_partial_responses = false
        messages {
          text {
            text = ["I didn't get that. Can you say it again?"]
          }
        }
      }
    }
  }

  handlers {
    event_handler {
      event = "sys.no-match-default"
      fulfillment {
        return_partial_responses = false
        messages {
          text {
            text = ["Sorry, could you say that again?"]
          }
        }
      }
    }
  }

  handlers {
    event_handler {
      event = "sys.no-input-default"
      fulfillment {
        return_partial_responses = false
        messages {
          text {
            text = ["One more time?"]
          }
        }
        messages {
          response_type = "ENTRY_PROMPT"
          tool_call {
            action           = google_dialogflow_cx_tool.my_tool.display_name
            input_parameters = "{\"query\": \"example-value\"}"
            tool             = google_dialogflow_cx_tool.my_tool.id
          }
        }
        messages {
          knowledge_info_card {
            maximum_snippets = 1
          }
        }
        generators {
          generator        = google_dialogflow_cx_generator.my_generator.id
          input_parameters = {
              name : "wrench"
              mass : "1.3kg"
              count : "3"
            }
          output_parameter = "name"
        }
        advanced_settings {
          audio_export_gcs_destination {
            uri = "${google_storage_bucket.bucket.url}/prefix-"
          }
          speech_settings {
            endpointer_sensitivity        = 30
            no_speech_timeout             = "3.500s"
            use_timeout_based_endpointing = true
            models = {
              name : "wrench"
              mass : "1.3kg"
              count : "3"
            }
          }
          dtmf_settings {
            enabled                      = true
            max_digits                   = 1
            finish_digit                 = "#"
            endpointing_timeout_duration = "5s"
            interdigit_timeout_duration  = "5s"
          }
          logging_settings {
            disable_logging                = false
            enable_stackdriver_logging     = true
            enable_interaction_logging     = true
            enable_consent_based_redaction = true
          }
        }
      }
    }
  }

  handlers {
    event_handler {
      event = "another-event"
      condition = "$session.params = 1"
      fulfillment {
        return_partial_responses = true
        messages {
          channel = "some-channel"
          text {
            text = ["Some text"]
          }
        }
        messages {
          payload = <<EOF
            {"some-key": "some-value", "other-key": ["other-value"]}
          EOF
        }
        messages {
          conversation_success {
            metadata = <<EOF
              {"some-metadata-key": "some-value", "other-metadata-key": 1234}
            EOF
          }
        }
        messages {
          output_audio_text {
            text = "some output text"
          }
        }
        messages {
          output_audio_text {
            ssml = <<EOF
              <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
            EOF
          }
        }
        messages {
          live_agent_handoff {
            metadata = <<EOF
              {"some-metadata-key": "some-value", "other-metadata-key": 1234}
            EOF
          }
        }
        messages {
          play_audio {
            audio_uri = "http://example.com/some-audio-file.mp3"
          }
        }
        messages {
          telephony_transfer_call {
            phone_number = "1-234-567-8901"
          }
        }

        set_parameter_actions {
          parameter = "some-param"
          value     = "123.45"
        }
        set_parameter_actions {
          parameter = "another-param"
          value     = jsonencode("abc")
        }
        set_parameter_actions {
          parameter = "other-param"
          value     = jsonencode(["foo"])
        }

        conditional_cases {
          cases {
            condition = "$sys.func.RAND() < 0.5"
            case_content {
              message {
                text {
                  text = ["First case"]
                }
              }
            }
            case_content {
              additional_cases = jsonencode({
                "cases": [
                  {
                    "condition": "$sys.func.RAND() < 0.2",
                    "caseContent": [
                      {
                        "message": {
                          "text": {
                            "text": ["Nested case"]
                          }
                        }
                      }
                    ]
                  }
                ]
              })
            }
          }
          cases {
            case_content {
              message {
                text {
                  text = ["Final case"]
                }
              }
            }
          }
        }

        webhook = google_dialogflow_cx_webhook.my_webhook.id
        tag = "ExampleTag"
        enable_generative_fallback = true
      }
    }
  }

  handlers {
    lifecycle_handler {
      lifecycle_stage = "playbook-start"
      fulfillment {
        return_partial_responses = false
        messages {
          text {
            text = ["I didn't get that. Can you say it again?"]
          }
        }
      }
    }
  }

  handlers {
    lifecycle_handler {
      lifecycle_stage = "playbook-start"
      fulfillment {
        return_partial_responses = false
        messages {
          text {
            text = ["Sorry, could you say that again?"]
          }
        }
      }
    }
  }

  handlers {
    lifecycle_handler {
      lifecycle_stage = "playbook-start"
      fulfillment {
        return_partial_responses = false
        messages {
          text {
            text = ["One more time?"]
          }
        }
        messages {
          response_type = "ENTRY_PROMPT"
          tool_call {
            action           = google_dialogflow_cx_tool.my_tool.display_name
            input_parameters = "{\"query\": \"example-value\"}"
            tool             = google_dialogflow_cx_tool.my_tool.id
          }
        }
        messages {
          knowledge_info_card {
            maximum_snippets = 1
          }
        }
        generators {
          generator        = google_dialogflow_cx_generator.my_generator.id
          input_parameters = {
              name : "wrench"
              mass : "1.3kg"
              count : "3"
            }
          output_parameter = "name"
        }
        advanced_settings {
          audio_export_gcs_destination {
            uri = "${google_storage_bucket.bucket.url}/prefix-"
          }
          speech_settings {
            endpointer_sensitivity        = 30
            no_speech_timeout             = "3.500s"
            use_timeout_based_endpointing = true
            models = {
              name : "wrench"
              mass : "1.3kg"
              count : "3"
            }
          }
          dtmf_settings {
            enabled                      = true
            max_digits                   = 1
            finish_digit                 = "#"
            endpointing_timeout_duration = "5s"
            interdigit_timeout_duration  = "5s"
          }
          logging_settings {
            disable_logging                = false
            enable_stackdriver_logging     = true
            enable_interaction_logging     = true
            enable_consent_based_redaction = true
          }
        }
      }
    }
  }

  handlers {
    lifecycle_handler {
      lifecycle_stage = "playbook-start"
      condition = "$session.params = 1"
      fulfillment {
        return_partial_responses = true
        messages {
          channel = "some-channel"
          text {
            text = ["Some text"]
          }
        }
        messages {
          payload = <<EOF
            {"some-key": "some-value", "other-key": ["other-value"]}
          EOF
        }
        messages {
          conversation_success {
            metadata = <<EOF
              {"some-metadata-key": "some-value", "other-metadata-key": 1234}
            EOF
          }
        }
        messages {
          output_audio_text {
            text = "some output text"
          }
        }
        messages {
          output_audio_text {
            ssml = <<EOF
              <speak>Some example <say-as interpret-as="characters">SSML XML</say-as></speak>
            EOF
          }
        }
        messages {
          live_agent_handoff {
            metadata = <<EOF
              {"some-metadata-key": "some-value", "other-metadata-key": 1234}
            EOF
          }
        }
        messages {
          play_audio {
            audio_uri = "http://example.com/some-audio-file.mp3"
          }
        }
        messages {
          telephony_transfer_call {
            phone_number = "1-234-567-8901"
          }
        }

        set_parameter_actions {
          parameter = "some-param"
          value     = "123.45"
        }
        set_parameter_actions {
          parameter = "another-param"
          value     = jsonencode("abc")
        }
        set_parameter_actions {
          parameter = "other-param"
          value     = jsonencode(["foo"])
        }

        conditional_cases {
          cases {
            condition = "$sys.func.RAND() < 0.5"
            case_content {
              message {
                text {
                  text = ["First case"]
                }
              }
            }
            case_content {
              additional_cases = jsonencode({
                "cases": [
                  {
                    "condition": "$sys.func.RAND() < 0.2",
                    "caseContent": [
                      {
                        "message": {
                          "text": {
                            "text": ["Nested case"]
                          }
                        }
                      }
                    ]
                  }
                ]
              })
            }
          }
          cases {
            case_content {
              message {
                text {
                  text = ["Final case"]
                }
              }
            }
          }
        }

        webhook = google_dialogflow_cx_webhook.my_webhook.id
        tag = "ExampleTag"
        enable_generative_fallback = true
      }
    }
  }

  referenced_tools = [google_dialogflow_cx_tool.my_tool.id]
}
