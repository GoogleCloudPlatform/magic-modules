# Create Folder in GCP Organization
resource "google_folder" "autokms_folder" {
  provider     = google-beta
  display_name = "{{index $.Vars "folder_name"}}"
  parent       = "organizations/{{index $.TestEnvVars "org_id"}}"
}

# Create the key project
resource "google_project" "key_project" {
  provider        = google-beta
  project_id      = "{{index $.Vars "key_project_name"}}"
  name            = "{{index $.Vars "key_project_name"}}"
  folder_id       = google_folder.autokms_folder.folder_id
  billing_account = "{{index $.TestEnvVars "billing_account"}}"
  depends_on      = [google_folder.autokms_folder]
}

# Enable the Cloud KMS API
resource "google_project_service" "kms_api_service" {
  provider                   = google-beta
  service                    = "cloudkms.googleapis.com"
  project                    = google_project.key_project.project_id
  disable_on_destroy         = false
  disable_dependent_services = true
  depends_on                 = [google_project.key_project]
}

# Wait delay after enabling APIs
resource "time_sleep" "wait_enable_service_api" {
  depends_on       = [google_project_service.kms_api_service]
  create_duration  = "30s"
}

#Create KMS Service Agent
resource "google_project_service_identity" "kms_service_agent" {
  provider   = google-beta
  service    = "cloudkms.googleapis.com"
  project    = google_project.key_project.number
  depends_on = [time_sleep.wait_enable_service_api]
}

# Wait delay after creating service agent.
resource "time_sleep" "wait_service_agent" {
  depends_on       = [google_project_service_identity.kms_service_agent]
  create_duration  = "10s"
}

#Grant the KMS Service Agent the Cloud KMS Admin role
resource "google_project_iam_member" "autokey_project_admin" {
  provider   = google-beta
  project    = google_project.key_project.project_id
  role       = "roles/cloudkms.admin"
  member     = "serviceAccount:service-${google_project.key_project.number}@gcp-sa-cloudkms.iam.gserviceaccount.com"
  depends_on = [time_sleep.wait_service_agent]
}

# Wait delay after granting IAM permissions
resource "time_sleep" "wait_srv_acc_permissions" {
  create_duration = "10s"
  depends_on      = [google_project_iam_member.autokey_project_admin]
}

resource "google_kms_autokey_config" "{{$.PrimaryResourceId}}" {
  provider    = google-beta
  folder      = google_folder.autokms_folder.folder_id
  key_project = "projects/${google_project.key_project.project_id}"
  depends_on  = [time_sleep.wait_srv_acc_permissions]
}
