resource "google_privateca_ca_pool" "default" {
  provider = google-beta
  name     = "{{index $.Vars "privateca_ca_pool_name"}}"
  location = "us-central1"
  tier     = "DEVOPS"

  publishing_options {
    publish_ca_cert = false
    publish_crl = false
  }

  issuance_policy {
    maximum_lifetime = "1209600s"
    baseline_values {
      ca_options {
        is_ca = false
      }
      key_usage {
        base_key_usage {}
        extended_key_usage {
          server_auth = true
        }
      }
    }
  }
}

resource "google_privateca_certificate_authority" "default" {
  provider = google-beta
  pool     = google_privateca_ca_pool.default.name

  certificate_authority_id = "{{index $.Vars "privateca_certificate_authority_id"}}"
  location                 = "us-central1"
  lifetime                 = "86400s"
  type                     = "SELF_SIGNED"
  deletion_protection      = false
  skip_grace_period        = true

  ignore_active_certificates_on_deletion = true

  config {
    subject_config {
      subject {
        organization = "Test LLC"
        common_name  = "my-ca"
      }
    }
    x509_config {
      ca_options {
        is_ca = true
      }
      key_usage {
        base_key_usage {
          cert_sign = true
          crl_sign  = true
        }
        extended_key_usage {
          server_auth = false
        }
      }
    }
  }

  key_spec {
    algorithm = "RSA_PKCS1_4096_SHA256"
  }
}

resource "google_project_service_identity" "ns_sa" {
  provider = google-beta
  service  = "networksecurity.googleapis.com"
}

resource "google_privateca_ca_pool_iam_member" "default" {
  provider = google-beta
  ca_pool  = google_privateca_ca_pool.default.id
  role     = "roles/privateca.certificateManager"
  member   = "serviceAccount:${google_project_service_identity.ns_sa.email}"
}

resource "google_certificate_manager_trust_config" "default" {
  provider    = google-beta
  name        = "{{index $.Vars "trust_config_name"}}"
  description = "sample trust config description"
  location    = "us-central1"

  trust_stores {
    trust_anchors {
      pem_certificate = file("test-fixtures/ca_cert.pem")
    }
    intermediate_cas {
      pem_certificate = file("test-fixtures/ca_cert.pem")
    }
  }
}

resource "google_network_security_tls_inspection_policy" "{{$.PrimaryResourceId}}" {
  provider = google-beta
  name     = "{{index $.Vars "resource_name"}}"
  location = "us-central1"
  ca_pool  = google_privateca_ca_pool.default.id

  exclude_public_ca_set = false
  min_tls_version       = "TLS_1_0"
  trust_config          = google_certificate_manager_trust_config.default.id
  tls_feature_profile   = "PROFILE_CUSTOM"

  custom_tls_features = [
    "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
    "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
    "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
    "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
    "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
    "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
    "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
    "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
    "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
    "TLS_RSA_WITH_AES_128_CBC_SHA",
    "TLS_RSA_WITH_AES_128_GCM_SHA256",
    "TLS_RSA_WITH_AES_256_CBC_SHA",
    "TLS_RSA_WITH_AES_256_GCM_SHA384",
  ]

  depends_on = [
    google_privateca_certificate_authority.default,
    google_privateca_ca_pool_iam_member.default,
  ]
}
