// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package {{ $.Res.PackageName }}_test

import (
{{- if not $.Res.SkipDelete }}
	{{- if not $.Res.CustomCode.TestCheckDestroy }}
	"fmt"
	{{- end }}
	"strings"
{{- end }}
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
{{- if not $.Res.SkipDelete }}
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
{{- end }}

	"{{ $.ImportPath }}/acctest"
	"{{ $.ImportPath  }}/envvar"
	"{{ $.ImportPath  }}/tpgresource"
	transport_tpg "{{ $.ImportPath  }}/transport"
)
{{ range $e := $.Res.Examples }}
func TestAcc{{ $e.TestSlug $.Res.ProductMetadata.Name $.Res.Name }}(t *testing.T) {
	{{- if $e.SkipVcr }}
	acctest.SkipIfVcr(t)
	{{- end }}
	t.Parallel()

	context := map[string]interface{} {
	{{- range $varKey, $varVal := $e.TestEnvVars }}
		{{- if eq $varVal $.ORGID }}
		"{{$varKey}}": envvar.GetTestOrgFromEnv(t),
		{{- else if eq $varVal $.ORG_DOMAIN }}
		"{{$varKey}}": envvar.GetTestOrgDomainFromEnv(t),
		{{- else if eq $varVal $.CREDENTIALS }}
		"{{$varKey}}": envvar.GetTestCredsFromEnv(t),
		{{- else if eq $varVal $.REGION }}
		"{{$varKey}}": envvar.GetTestRegionFromEnv(),
		{{- else if eq $varVal $.ORG_TARGET }}
		"{{$varKey}}": envvar.GetTestOrgTargetFromEnv(t),
		{{- else if eq $varVal $.BILLING_ACCT }}
		"{{$varKey}}": envvar.GetTestBillingAccountFromEnv(t),
		{{- else if eq $varVal $.MASTER_BILLING_ACCT }}
		"{{$varKey}}": envvar.GetTestMasterBillingAccountFromEnv(t),
		{{- else if eq $varVal $.SERVICE_ACCT }}
		"{{$varKey}}": envvar.GetTestServiceAccountFromEnv(t),
		{{- else if eq $varVal $.PROJECT_NAME }}
		"{{$varKey}}": envvar.GetTestProjectFromEnv(),
		{{- else if eq $varVal $.PROJECT_NUMBER }}
		"{{$varKey}}": envvar.GetTestProjectNumberFromEnv(),
		{{- else if eq $varVal $.FIRESTORE_PROJECT_NAME }}
		"{{$varKey}}": envvar.GetTestFirestoreProjectFromEnv(t),
		{{- else if eq $varVal $.CUST_ID }}
		"{{$varKey}}": envvar.GetTestCustIdFromEnv(t),
		{{- else if eq $varVal $.IDENTITY_USER }}
		"{{$varKey}}": envvar.GetTestIdentityUserFromEnv(t),
		{{- else if eq $varVal $.PAP_DESCRIPTION }}
		"{{$varKey}}": envvar.GetTestPublicAdvertisedPrefixDescriptionFromEnv(t),
		{{- else if eq $varVal $.ZONE }}
		"{{$varKey}}": envvar.GetTestZoneFromEnv(),
		{{- end }}
	{{- end }}
	{{- range $varKey, $varVal := $e.TestVarsOverrides }}
		"{{$varKey}}": {{$varVal}},
	{{- end }}
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
	{{- if not (and $e.MinVersion (not (eq $e.MinVersion "ga"))) }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
	{{- else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
	{{- end }}
	{{- if $e.PullExternal }}
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
	{{- end }}
	{{- if not $.Res.SkipDelete }}
		CheckDestroy: testAccCheck{{ $.Res.ResourceName }}DestroyProducer(t),
	{{- end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $e.TestSlug $.Res.ProductMetadata.Name $.Res.Name }}(context),
			},
	{{- if not $e.SkipImportTest }}
			{
				ResourceName:      "{{ $e.ResourceType $.Res.TerraformName }}.{{ $e.PrimaryResourceId }}",
				ImportState:       true,
				ImportStateVerify: true,
		{{- if $.Res.IgnoreReadPropertiesToString $e }}
				ImportStateVerifyIgnore: {{ $.Res.IgnoreReadPropertiesToString $e }},
		{{- end }}
			},
	{{- end }}
		},
	})
}

func testAcc{{ $e.TestSlug $.Res.ProductMetadata.Name $.Res.Name }}(context map[string]interface{}) string {
  return acctest.Nprintf(`
{{ $e.HCLText }}
`, context)
}

{{- end }}

{{/*TODO Q2: Destroy Producer */}}