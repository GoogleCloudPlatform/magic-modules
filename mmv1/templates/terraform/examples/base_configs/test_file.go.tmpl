// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package {{ $.Res.PackageName }}_test

import (
	{{- if not $.Res.ExcludeDelete }}
	{{- if not $.Res.CustomCode.TestCheckDestroy }}
	"fmt"
	{{- end }}
	"strings"
	{{- end }}
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
{{- if not $.Res.ExcludeDelete }}
	"github.com/hashicorp/terraform-plugin-testing/terraform"
{{- end }}
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-plugin-testing/tfversion"

	"{{ $.ImportPath }}/acctest"
	"{{ $.ImportPath  }}/envvar"
	"{{ $.ImportPath  }}/tpgresource"
	transport_tpg "{{ $.ImportPath  }}/transport"
)
{{ range $i, $e := $.Res.TestExamples }}
func TestAcc{{ $e.TestSlug $.Res.ProductMetadata.Name $.Res.Name }}(t *testing.T) {
	{{- if $e.SkipTest }}
	t.Skip("{{$e.SkipTest}}")
	{{- end }}

	{{- if $e.SkipVcr }}
	acctest.SkipIfVcr(t)
	{{- end }}
	t.Parallel()

	{{- if $e.BootstrapIam }}
	acctest.BootstrapIamMembers(t, []acctest.IamMember{
	{{- range $iam := $e.BootstrapIam }}
		{
			Member: "{{$iam.Member}}",
			Role:   "{{$iam.Role}}",
		},
	{{- end}}
	})
	{{- end }}

	randomSuffix := acctest.RandString(t, 10)
	context := make(map[string]interface{})
	context["random_suffix"] = randomSuffix

	envVars := map[string]interface{}{
		{{- template "EnvVarContext" dict "TestEnvVars" $e.TestEnvVars "HasNewLine" false}}
	}
	for k, v := range envVars {
		context[k] = v
	}

	overrides := map[string]interface{}{
		{{- range $varKey, $varVal := $e.TestVarsOverrides }}
		"{{$varKey}}": {{$varVal}},
		{{- end }}
	}
	for k, v := range overrides {
		context[k] = v
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
	{{- if $.Res.VersionedProvider $e.MinVersion }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
	{{- else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
	{{- end }}
	{{- if $e.ExternalProviders }}
		ExternalProviders: map[string]resource.ExternalProvider{
		{{- range $provider := $e.ExternalProviders }}
			"{{$provider}}": {},
		{{- end }}
		},
	{{- end }}
	{{- if not $.Res.ExcludeDelete }}
		CheckDestroy: testAccCheck{{ $.Res.ResourceName }}DestroyProducer(t),
	{{- end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $e.TestSlug $.Res.ProductMetadata.Name $.Res.Name }}(context),
			},
	{{- if not $e.ExcludeImportTest }}
			{
				ResourceName:      "{{ $e.ResourceType $.Res.TerraformName }}.{{ $e.PrimaryResourceId }}",
				ImportState:       true,
				ImportStateVerify: true,
		{{- if $.Res.IgnoreReadPropertiesToString $e }}
				ImportStateVerifyIgnore: {{ $.Res.IgnoreReadPropertiesToString $e }},
		{{- end }}
			},
	{{- end }}
	{{- if eq $i 0 }}
	{{- $firstChar := index $.Res.ProductMetadata.ApiName 0 -}}
	{{- if or (and (ge $firstChar 'e') (le $firstChar 'f')) (eq $firstChar 'g') (eq $firstChar 'h') }}
			{
				ResourceName:       "{{ $.Res.TerraformName }}.{{ $e.PrimaryResourceId }}",
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
				ImportStateKind:    resource.ImportBlockWithResourceIdentity,
			},
	{{- end }}
	{{- end }}
		},
	})
}

func testAcc{{ $e.TestSlug $.Res.ProductMetadata.Name $.Res.Name }}(context map[string]interface{}) string {
  return acctest.Nprintf(`
{{ $e.TestHCLText -}}
`, context)
}

{{ end }}

{{ if not $.Res.ExcludeDelete }}
func testAccCheck{{ $.Res.ResourceName }}DestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "{{ $.Res.TerraformName }}" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}
	{{ if $.Res.CustomCode.TestCheckDestroy }}
	{{ $.Res.CustomTemplate $.Res.CustomCode.TestCheckDestroy false -}}
	{{- else }}

		config := acctest.GoogleProviderConfig(t)

		url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{"{{"}}{{$.Res.ProductMetadata.Name}}{{"BasePath}}"}}{{$.Res.SelfLinkUri}}")
		if err != nil {
			return err
		}

		billingProject := ""

		if config.BillingProject != "" {
			billingProject = config.BillingProject
		}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config: config,
			Method: "{{ camelize $.Res.ReadVerb "upper" }}",
			Project: billingProject,
			RawURL: url,
			UserAgent: config.UserAgent,
		{{- if $.Res.ErrorRetryPredicates }}
			ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.Res.ErrorRetryPredicates "," -}} },
		{{- end }}
		{{- if $.Res.ErrorAbortPredicates }}
			ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.Res.ErrorAbortPredicates "," -}} },
		{{- end }}
		})
		if err == nil {
				return fmt.Errorf("{{ $.Res.ResourceName }} still exists at %s", url)
			}
	{{- end }}
		}

		return nil
	}
}
{{- end }}
