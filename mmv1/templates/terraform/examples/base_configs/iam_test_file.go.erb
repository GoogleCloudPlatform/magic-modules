<% if hc_downstream -%>
<%= lines(hashicorp_copyright_header(:go, pwd)) -%>
<% end -%>

<%= lines(autogen_notice(:go, pwd)) -%>

package <%= object.__product.name .downcase -%>_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"

	"<%= import_path() -%>/acctest"
	"<%= import_path() -%>/envvar"
	"<%= import_path() -%>/tpgresource"
)

<%# Since most resources define a "basic" config as their first example, we can reuse that config to create a resource to test IAM resources with. -%>
<% example = object.examples.reject(&:skip_test)
         .reject { |e| @api.version_obj_or_closest(version) < @api.version_obj_or_closest(e.min_version) }
         .first -%>
<% resource_name = object.__product.name  + object.name -%>
<%
individual_url = object.iam_policy.self_link || object.self_link_url
-%>
<%
  tf_product = (object.__product.legacy_name || object.__product.name ).underscore
  resource_ns = object.legacy_name || "google_#{tf_product}_#{object.name.underscore}"
  resource_ns_iam = resource_ns + '_iam'
-%>
<%
if object.iam_policy.import_format
	import_format = object.iam_policy.import_format.first
else
	import_format = individual_url
end
params = extract_identifiers(import_format.gsub('{{name}}', "{{#{object.name.underscore}}}"))
import_url = import_format.gsub(/({{)%?(\w+)(}})/, '%s').gsub(object.__product.base_url, '')
-%>
<% import_qualifiers = [] -%>
<% params.each_with_index do |param, i| -%>
	<% if param == 'project' -%>
		<% if i != params.size - 1 -%>
			<%# If the last parameter is project then we want to create a new project to use for the test, so don't default from the environment -%>
			<% if object.iam_policy.test_project_name.nil? -%>
				<% import_qualifiers.push('envvar.GetTestProjectFromEnv()') -%>
			<% else -%>
				<% import_qualifiers.push('context["project_id"]') -%>
			<% end -%>
		<% end -%>
	<% elsif param == 'zone' and object.iam_policy.substitute_zone_value -%>
		<% import_qualifiers.push('envvar.GetTestZoneFromEnv()') -%>
	<% elsif param == 'region' || param == 'location' -%>
		<% if example.region_override.nil? -%>
			<% import_qualifiers.push('envvar.GetTestRegionFromEnv()') -%>
		<% else -%>
			<% import_qualifiers.push("\"#{example.region_override}\"") -%>
		<% end -%>
	<% elsif param == 'universe_domain' -%>
		<% import_qualifiers.push('envvar.GetTestUniverseDomainFromEnv()') -%>
	<% else -%>
		<%# The parameter was not added to import_qualifiers, so break out of the loop to avoid subsequent parameters being in the wrong position -%>
		<% break -%>
	<% end -%>
<% end -%>
func TestAcc<%= resource_name -%>IamBindingGenerated(t *testing.T) {
	t.Parallel()

<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:     func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamBinding_basicGenerated(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_binding.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%>"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
			{
				// Test Iam Binding update
				Config: testAcc<%= resource_name -%>IamBinding_updateGenerated(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_binding.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%>"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}

func TestAcc<%= resource_name -%>IamMemberGenerated(t *testing.T) {
	t.Parallel()

<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
<% end -%>
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAcc<%= resource_name -%>IamMember_basicGenerated(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_member.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> user:admin@hashicorptest.com"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}

func TestAcc<%= resource_name -%>IamPolicyGenerated(t *testing.T) {
	t.Parallel()

<% unless object.iam_policy.admin_iam_role.nil? -%>
	// This may skip test, so do it first
	sa := envvar.GetTestServiceAccountFromEnv(t)
<% end -%>
<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>
<% unless object.iam_policy.admin_iam_role.nil? -%>
	context["service_account"] = sa
<% end -%>

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
<% end -%>
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamPolicy_basicGenerated(context),
				Check:  resource.TestCheckResourceAttrSet("data.<%= resource_ns_iam -%>_policy.foo", "policy_data"),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_policy.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%>"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
			{
				Config: testAcc<%= resource_name -%>IamPolicy_emptyBinding(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_policy.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%>"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}

<% unless object.iam_policy.iam_conditions_request_type.nil? -%>
func TestAcc<%= resource_name -%>IamBindingGenerated_withCondition(t *testing.T) {
	t.Parallel()

<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
<% end -%>
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamBinding_withConditionGenerated(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_binding.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> %s"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}

func TestAcc<%= resource_name -%>IamBindingGenerated_withAndWithoutCondition(t *testing.T) {
	// Multiple fine-grained resources
	acctest.SkipIfVcr(t)
	t.Parallel()

<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
<% end -%>
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamBinding_withAndWithoutConditionGenerated(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_binding.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%>"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "<%= resource_ns_iam -%>_binding.foo2",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> %s"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "<%= resource_ns_iam -%>_binding.foo3",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> %s"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>, context["condition_title_no_desc"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}

func TestAcc<%= resource_name -%>IamMemberGenerated_withCondition(t *testing.T) {
	t.Parallel()

<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
	ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
<% end -%>
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamMember_withConditionGenerated(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_member.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> user:admin@hashicorptest.com %s"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}

func TestAcc<%= resource_name -%>IamMemberGenerated_withAndWithoutCondition(t *testing.T) {
	// Multiple fine-grained resources
	acctest.SkipIfVcr(t)
	t.Parallel()

<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
<% end -%>
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamMember_withAndWithoutConditionGenerated(context),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_member.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> user:admin@hashicorptest.com"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "<%= resource_ns_iam -%>_member.foo2",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> user:admin@hashicorptest.com %s"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "<%= resource_ns_iam -%>_member.foo3",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> <%= object.iam_policy.allowed_iam_role -%> user:admin@hashicorptest.com %s"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>, context["condition_title_no_desc"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}

func TestAcc<%= resource_name -%>IamPolicyGenerated_withCondition(t *testing.T) {
	t.Parallel()

<% unless object.iam_policy.admin_iam_role.nil? -%>
	// This may skip test, so do it first
	sa := envvar.GetTestServiceAccountFromEnv(t)
<% end -%>
<%= lines(compile(pwd + '/templates/terraform/iam/iam_context.go.erb')) -%>
<% unless object.iam_policy.admin_iam_role.nil? -%>
	context["service_account"] = sa
<% end -%>

<% if object.iam_policy.admin_iam_role.nil? -%>
	// Test should have 2 bindings: one with a description and one without. Any < chars are converted to a unicode character by the API.
	expectedPolicyData := acctest.Nprintf(`{"bindings":[{"condition":{"description":"%{condition_desc}","expression":"%{condition_expr}","title":"%{condition_title}"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"},{"condition":{"expression":"%{condition_expr}","title":"%{condition_title}-no-description"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"}]}`, context)
<% else -%>
	// Test should have 3 bindings: one with a description and one without, and a third for an admin role. Any < chars are converted to a unicode character by the API.
	expectedPolicyData := acctest.Nprintf(`{"bindings":[{"members":["serviceAccount:%{service_account}"],"role":"%{admin_role}"},{"condition":{"description":"%{condition_desc}","expression":"%{condition_expr}","title":"%{condition_title}"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"},{"condition":{"expression":"%{condition_expr}","title":"%{condition_title}-no-description"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"}]}`, context)
<% end -%>
	expectedPolicyData = strings.Replace(expectedPolicyData, "<", "\\u003c", -1)

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
<% unless object.min_version.name == "ga" -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
<% else -%>
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
<% end -%>
		<% if example.pull_external -%>
		ExternalProviders: map[string]resource.ExternalProvider{
			"random": {},
			"time": {},
		},
		<% end -%>
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamPolicy_withConditionGenerated(context),
				Check: resource.ComposeAggregateTestCheckFunc(
					// TODO(SarahFrench) - uncomment once https://github.com/GoogleCloudPlatform/magic-modules/pull/6466 merged
					// resource.TestCheckResourceAttr("data.google_iam_policy.foo", "policy_data", expectedPolicyData),
					resource.TestCheckResourceAttr("<%= resource_ns_iam -%>_policy.foo", "policy_data", expectedPolicyData),
					resource.TestCheckResourceAttrWith("data.google_iam_policy.foo", "policy_data", tpgresource.CheckGoogleIamPolicy),
				),
			},
<% unless object.iam_policy.skip_import_test -%>
			{
				ResourceName:      "<%= resource_ns_iam -%>_policy.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%>"<% unless import_qualifiers.empty? -%>, <% end -%><%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
<% end -%>
		},
	})
}
<% end -%>

func testAcc<%= resource_name -%>IamMember_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

resource "<%= resource_ns_iam -%>_member" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAcc<%= resource_name -%>IamPolicy_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

data "google_iam_policy" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
<% unless object.iam_policy.admin_iam_role.nil? -%>
  binding {
    role = "%{admin_role}"
    members = ["serviceAccount:%{service_account}"]
  }
<% end -%>
}

resource "<%= resource_ns_iam -%>_policy" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  policy_data = data.google_iam_policy.foo.policy_data
}

data "<%= resource_ns_iam -%>_policy" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  depends_on = [
    <%= resource_ns_iam -%>_policy.foo
  ]
}
`, context)
}

func testAcc<%= resource_name -%>IamPolicy_emptyBinding(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

data "google_iam_policy" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
}

resource "<%= resource_ns_iam -%>_policy" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAcc<%= resource_name -%>IamBinding_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

resource "<%= resource_ns_iam -%>_binding" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAcc<%= resource_name -%>IamBinding_updateGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

resource "<%= resource_ns_iam -%>_binding" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}

<% unless object.iam_policy.iam_conditions_request_type.nil? -%>
func testAcc<%= resource_name -%>IamBinding_withConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

resource "<%= resource_ns_iam -%>_binding" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAcc<%= resource_name -%>IamBinding_withAndWithoutConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

resource "<%= resource_ns_iam -%>_binding" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}

resource "<%= resource_ns_iam -%>_binding" "foo2" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}

resource "<%= resource_ns_iam -%>_binding" "foo3" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    # Check that lack of description doesn't cause any issues
    # Relates to issue : https://github.com/hashicorp/terraform-provider-google/issues/8701
    title       = "%{condition_title_no_desc}"
    expression  = "%{condition_expr_no_desc}"
  }
}
`, context)
}

func testAcc<%= resource_name -%>IamMember_withConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

resource "<%= resource_ns_iam -%>_member" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAcc<%= resource_name -%>IamMember_withAndWithoutConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

resource "<%= resource_ns_iam -%>_member" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}

resource "<%= resource_ns_iam -%>_member" "foo2" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}

resource "<%= resource_ns_iam -%>_member" "foo3" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    # Check that lack of description doesn't cause any issues
    # Relates to issue : https://github.com/hashicorp/terraform-provider-google/issues/8701
    title       = "%{condition_title_no_desc}"
    expression  = "%{condition_expr_no_desc}"
  }
}
`, context)
}

func testAcc<%= resource_name -%>IamPolicy_withConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
<%= example.config_test_body(pwd) -%>

data "google_iam_policy" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
    condition {
      # Check that lack of description doesn't cause any issues
      # Relates to issue : https://github.com/hashicorp/terraform-provider-google/issues/8701
      title       = "%{condition_title_no_desc}"
      expression  = "%{condition_expr_no_desc}"
    }
  }
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
    condition {
      title       = "%{condition_title}"
      description = "%{condition_desc}"
      expression  = "%{condition_expr}"
    }
  }
<% unless object.iam_policy.admin_iam_role.nil? -%>
  binding {
    role = "%{admin_role}"
    members = ["serviceAccount:%{service_account}"]
  }
<% end -%>
}

resource "<%= resource_ns_iam -%>_policy" "foo" {
<% unless object.min_version.name == "ga" -%>
  provider = google-beta
<% end -%>
<%= lines(compile(pwd + '/' + object.iam_policy.example_config_body)) -%>
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}
<% end -%>
