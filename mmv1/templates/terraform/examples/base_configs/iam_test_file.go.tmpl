// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package {{ lower $.ProductMetadata.Name }}_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"

	"{{ $.ImportPath }}/acctest"
	"{{ $.ImportPath }}/envvar"
	{{- if $.IamPolicy.IamConditionsRequestType }}
	"{{ $.ImportPath }}/tpgresource"
	{{- end }}
)
{{ $example := $.FirstTestExample }}
func TestAcc{{ $.ResourceName }}IamBindingGenerated(t *testing.T) {
	t.Parallel()
{{ template "IamContext" $ }}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
	{{- if $example.ExternalProviders }}
		ExternalProviders: map[string]resource.ExternalProvider{
		{{- range $provider := $example.ExternalProviders }}
			"{{$provider}}": {},
		{{- end }}
		},
	{{-  end }}
{{-  end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $.ResourceName }}IamBinding_basicGenerated(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_binding.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }}", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
			{
				// Test Iam Binding update
				Config: testAcc{{ $.ResourceName }}IamBinding_updateGenerated(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_binding.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }}", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}

func TestAcc{{ $.ResourceName }}IamMemberGenerated(t *testing.T) {
	t.Parallel()
{{ template "IamContext" $ }}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
{{-  end }}
{{- if $example.ExternalProviders }}
	    ExternalProviders: map[string]resource.ExternalProvider{
	{{- range $provider := $example.ExternalProviders }}
		    "{{$provider}}": {},
	{{- end }}
	    },
{{-  end }}
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAcc{{ $.ResourceName }}IamMember_basicGenerated(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_member.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} user:admin@hashicorptest.com", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}

func TestAcc{{ $.ResourceName }}IamPolicyGenerated(t *testing.T) {
	t.Parallel()

{{- if $.IamPolicy.AdminIamRole }}
	// This may skip test, so do it first
	sa := envvar.GetTestServiceAccountFromEnv(t)
{{-  end }}
{{ template "IamContext" $ }}
{{- if $.IamPolicy.AdminIamRole }}
	context["service_account"] = sa
{{-  end }}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
{{-  end }}
{{- if $example.ExternalProviders }}
	    ExternalProviders: map[string]resource.ExternalProvider{
	{{- range $provider := $example.ExternalProviders }}
		    "{{$provider}}": {},
	{{- end }}
	    },
{{-  end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $.ResourceName }}IamPolicy_basicGenerated(context),
				Check:  resource.TestCheckResourceAttrSet("data.{{ $.IamTerraformName }}_policy.foo", "policy_data"),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_policy.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }}", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
			{
				Config: testAcc{{ $.ResourceName }}IamPolicy_emptyBinding(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_policy.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }}", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}
{{ if $.IamPolicy.IamConditionsRequestType }}
func TestAcc{{ $.ResourceName }}IamBindingGenerated_withCondition(t *testing.T) {
	t.Parallel()
{{ template "IamContext" $ }}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
{{-  end }}
{{- if $example.ExternalProviders }}
	    ExternalProviders: map[string]resource.ExternalProvider{
	{{- range $provider := $example.ExternalProviders }}
		    "{{$provider}}": {},
	{{- end }}
	    },
{{-  end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $.ResourceName }}IamBinding_withConditionGenerated(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_binding.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} %s", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}

func TestAcc{{ $.ResourceName }}IamBindingGenerated_withAndWithoutCondition(t *testing.T) {
	// Multiple fine-grained resources
	acctest.SkipIfVcr(t)
	t.Parallel()
{{ template "IamContext" $ }}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
{{-  end }}
{{- if $example.ExternalProviders }}
	    ExternalProviders: map[string]resource.ExternalProvider{
	{{- range $provider := $example.ExternalProviders }}
		    "{{$provider}}": {},
	{{- end }}
	    },
{{-  end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $.ResourceName }}IamBinding_withAndWithoutConditionGenerated(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_binding.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }}", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "{{ $.IamTerraformName }}_binding.foo2",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} %s", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "{{ $.IamTerraformName }}_binding.foo3",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} %s", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}, context["condition_title_no_desc"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}

func TestAcc{{ $.ResourceName }}IamMemberGenerated_withCondition(t *testing.T) {
	t.Parallel()

{{ template "IamContext" $ }}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
	ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
{{-  end }}
{{- if $example.ExternalProviders }}
	    ExternalProviders: map[string]resource.ExternalProvider{
	{{- range $provider := $example.ExternalProviders }}
		    "{{$provider}}": {},
	{{- end }}
	    },
{{-  end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $.ResourceName }}IamMember_withConditionGenerated(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_member.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} user:admin@hashicorptest.com %s", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}

func TestAcc{{ $.ResourceName }}IamMemberGenerated_withAndWithoutCondition(t *testing.T) {
	// Multiple fine-grained resources
	acctest.SkipIfVcr(t)
	t.Parallel()
{{ template "IamContext" $ }}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
{{-  end }}
{{- if $example.ExternalProviders }}
	    ExternalProviders: map[string]resource.ExternalProvider{
	{{- range $provider := $example.ExternalProviders }}
		    "{{$provider}}": {},
	{{- end }}
	    },
{{-  end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $.ResourceName }}IamMember_withAndWithoutConditionGenerated(context),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_member.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} user:admin@hashicorptest.com", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "{{ $.IamTerraformName }}_member.foo2",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} user:admin@hashicorptest.com %s", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}, context["condition_title"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ResourceName:      "{{ $.IamTerraformName }}_member.foo3",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }} {{ $.IamPolicy.AllowedIamRole }} user:admin@hashicorptest.com %s", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}, context["condition_title_no_desc"]),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}

func TestAcc{{ $.ResourceName }}IamPolicyGenerated_withCondition(t *testing.T) {
	t.Parallel()
{{ if $.IamPolicy.AdminIamRole }}
	// This may skip test, so do it first
	sa := envvar.GetTestServiceAccountFromEnv(t)
{{-  end }}
{{- template "IamContext" $ }}
{{- if $.IamPolicy.AdminIamRole }}
	context["service_account"] = sa
{{-  end }}
{{ if not $.IamPolicy.AdminIamRole }}
	// Test should have 2 bindings: one with a description and one without. Any < chars are converted to a unicode character by the API.
	expectedPolicyData := acctest.Nprintf(`{"bindings":[{"condition":{"description":"%{condition_desc}","expression":"%{condition_expr}","title":"%{condition_title}"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"},{"condition":{"expression":"%{condition_expr}","title":"%{condition_title}-no-description"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"}]}`, context)
{{-  else }}
	// Test should have 3 bindings: one with a description and one without, and a third for an admin role. Any < chars are converted to a unicode character by the API.
	expectedPolicyData := acctest.Nprintf(`{"bindings":[{"members":["serviceAccount:%{service_account}"],"role":"%{admin_role}"},{"condition":{"description":"%{condition_desc}","expression":"%{condition_expr}","title":"%{condition_title}"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"},{"condition":{"expression":"%{condition_expr}","title":"%{condition_title}-no-description"},"members":["user:admin@hashicorptest.com"],"role":"%{role}"}]}`, context)
{{-  end }}
	expectedPolicyData = strings.Replace(expectedPolicyData, "<", "\\u003c", -1)

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
{{- if eq $.MinVersionObj.Name "beta" }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
{{-  else }}
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
{{-  end }}
{{- if $example.ExternalProviders }}
	    ExternalProviders: map[string]resource.ExternalProvider{
	{{- range $provider := $example.ExternalProviders }}
		    "{{$provider}}": {},
	{{- end }}
	    },
{{-  end }}
		Steps: []resource.TestStep{
			{
				Config: testAcc{{ $.ResourceName }}IamPolicy_withConditionGenerated(context),
				Check: resource.ComposeAggregateTestCheckFunc(
					// TODO(SarahFrench) - uncomment once https://github.com/GoogleCloudPlatform/magic-modules/pull/6466 merged
					// resource.TestCheckResourceAttr("data.google_iam_policy.foo", "policy_data", expectedPolicyData),
					resource.TestCheckResourceAttr("{{ $.IamTerraformName }}_policy.foo", "policy_data", expectedPolicyData),
					resource.TestCheckResourceAttrWith("data.google_iam_policy.foo", "policy_data", tpgresource.CheckGoogleIamPolicy),
				),
			},
{{- if not $.IamPolicy.SkipImportTest }}
			{
				ResourceName:      "{{ $.IamTerraformName }}_policy.foo",
				ImportStateId:     fmt.Sprintf("{{ $.IamResourceUriFormat }}", {{ $.IamImportQualifiersForTest }}, {{ $example.PrimaryResourceName }}),
				ImportState:       true,
				ImportStateVerify: true,
			},
{{-  end }}
		},
	})
}
{{-  end }}

func testAcc{{ $.ResourceName }}IamMember_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
resource "{{ $.IamTerraformName }}_member" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}
`, context)
}

func testAcc{{ $.ResourceName }}IamPolicy_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
data "google_iam_policy" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
  }
{{- if $.IamPolicy.AdminIamRole }}
  binding {
    role = "%{admin_role}"
    members = ["serviceAccount:%{service_account}"]
  }
{{-  end }}
}

resource "{{ $.IamTerraformName }}_policy" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  policy_data = data.google_iam_policy.foo.policy_data
}

data "{{ $.IamTerraformName }}_policy" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  depends_on = [
    {{ $.IamTerraformName }}_policy.foo
  ]
}
`, context)
}

func testAcc{{ $.ResourceName }}IamPolicy_emptyBinding(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
data "google_iam_policy" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
}

resource "{{ $.IamTerraformName }}_policy" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}

func testAcc{{ $.ResourceName }}IamBinding_basicGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
resource "{{ $.IamTerraformName }}_binding" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAcc{{ $.ResourceName }}IamBinding_updateGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
resource "{{ $.IamTerraformName }}_binding" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  members = ["user:admin@hashicorptest.com", "user:gterraformtest1@gmail.com"]
}
`, context)
}
{{ if $.IamPolicy.IamConditionsRequestType }}
func testAcc{{ $.ResourceName }}IamBinding_withConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
resource "{{ $.IamTerraformName }}_binding" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAcc{{ $.ResourceName }}IamBinding_withAndWithoutConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
resource "{{ $.IamTerraformName }}_binding" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
}

resource "{{ $.IamTerraformName }}_binding" "foo2" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}

resource "{{ $.IamTerraformName }}_binding" "foo3" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  members = ["user:admin@hashicorptest.com"]
  condition {
    # Check that lack of description doesn't cause any issues
    # Relates to issue : https://github.com/hashicorp/terraform-provider-google/issues/8701
    title       = "%{condition_title_no_desc}"
    expression  = "%{condition_expr_no_desc}"
  }
}
`, context)
}

func testAcc{{ $.ResourceName }}IamMember_withConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
resource "{{ $.IamTerraformName }}_member" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}
`, context)
}

func testAcc{{ $.ResourceName }}IamMember_withAndWithoutConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
resource "{{ $.IamTerraformName }}_member" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
}

resource "{{ $.IamTerraformName }}_member" "foo2" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    title       = "%{condition_title}"
    description = "%{condition_desc}"
    expression  = "%{condition_expr}"
  }
}

resource "{{ $.IamTerraformName }}_member" "foo3" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  role = "%{role}"
  member = "user:admin@hashicorptest.com"
  condition {
    # Check that lack of description doesn't cause any issues
    # Relates to issue : https://github.com/hashicorp/terraform-provider-google/issues/8701
    title       = "%{condition_title_no_desc}"
    expression  = "%{condition_expr_no_desc}"
  }
}
`, context)
}

func testAcc{{ $.ResourceName }}IamPolicy_withConditionGenerated(context map[string]interface{}) string {
	return acctest.Nprintf(`
{{ $example.TestHCLText }}
data "google_iam_policy" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
    condition {
      # Check that lack of description doesn't cause any issues
      # Relates to issue : https://github.com/hashicorp/terraform-provider-google/issues/8701
      title       = "%{condition_title_no_desc}"
      expression  = "%{condition_expr_no_desc}"
    }
  }
  binding {
    role = "%{role}"
    members = ["user:admin@hashicorptest.com"]
    condition {
      title       = "%{condition_title}"
      description = "%{condition_desc}"
      expression  = "%{condition_expr}"
    }
  }
{{- if $.IamPolicy.AdminIamRole }}
  binding {
    role = "%{admin_role}"
    members = ["serviceAccount:%{service_account}"]
  }
{{-  end }}
}

resource "{{ $.IamTerraformName }}_policy" "foo" {
{{- if eq $.MinVersionObj.Name "beta" }}
  provider = google-beta
{{-  end }}
{{- $.CustomTemplate $.IamPolicy.ExampleConfigBody false }}
  policy_data = data.google_iam_policy.foo.policy_data
}
`, context)
}
{{- end }}{{/* if $.IamPolicy.IamConditionsRequestType */}}
