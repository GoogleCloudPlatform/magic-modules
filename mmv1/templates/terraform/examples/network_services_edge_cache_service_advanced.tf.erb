resource "google_storage_bucket" "dest" {
  provider      = google-beta
  name          = "<%= ctx[:vars]['bucket_name'] %>"
  force_destroy = true
}

resource "google_network_services_edge_cache_origin" "google" {
  provider             = google-beta
  name                 = "<%= ctx[:vars]['origin_google'] %>"
  origin_address       = "google.com"
  description          = "The default bucket for media edge test"
  max_attempts         = 2
  timeout {
    connect_timeout = "10s"
  }
}

resource "google_network_services_edge_cache_origin" "instance" {
  provider             = google-beta
  name                 = "<%= ctx[:vars]['origin_name'] %>"
  origin_address       = google_storage_bucket.dest.url
  description          = "The default bucket for media edge test"
  max_attempts         = 2
  timeout {
    connect_timeout = "10s"
  }
}

resource "google_network_services_edge_cache_service" "<%= ctx[:primary_resource_id] %>" {
  provider             = google-beta
  name                 = "<%= ctx[:vars]['service_name'] %>"
  description          = "some description"
  disable_quic         = true
  labels = {
    a = "b"
  }

  routing {
    host_rule {
      description = "host rule description"
      hosts = ["sslcert.tf-test.club"]
      path_matcher = "routes"
    }
    host_rule {
      description = "host rule2"
      hosts = ["sslcert.tf-test2.club"]
      path_matcher = "routes"
    }

    host_rule {
      description = "host rule3"
      hosts = ["sslcert.tf-test3.club"]
      path_matcher = "routesAdvanced"
    }

    path_matcher {
      name = "routes"
      route_rule {
        description = "a route rule to match against"
        priority = 1
        match_rule {
          prefix_match = "/"
        }
        origin = google_network_services_edge_cache_origin.instance.name
        route_action {
          cdn_policy {
              cache_mode = "CACHE_ALL_STATIC"
              default_ttl = "3600s"
          }
        }
        header_action {
          response_header_to_add {
            header_name = "x-cache-status"
            header_value = "{cdn_cache_status}"
          }
        }
      }
    }

    path_matcher {
      name = "routesAdvanced"
      description = "an advanced ruleset"
      route_rule {
        description = "an advanced route rule to match against"
        priority = 1
        match_rule {
          ignore_case = true
          prefix_match = "/potato/"
          header_match {
            header_name = "banana"
            prefix_match = "ya"
            suffix_match = "s"
          }
          header_match {
            header_name = "not-banana"
            prefix_match = "ya"
            suffix_match = "s"
            invert_match =  true
          }
          header_match {
            header_name = "exact"
            exact_match = "exactly"
            invert_match =  true
          }
          query_parameter_match {
            name = "debug"
            present_match = true
          }
          query_parameter_match {
            name = "state"
            exact_match = "debug"
          }
        }
        match_rule {
          ignore_case = true
          full_path_match = "/apple"
          header_match {
            header_name = "seed"
            present_match = true
          }
        }
        header_action {
          request_header_to_add {
            header_name = "debug"
            header_value = "true"
            replace = true
          }
          request_header_to_add {
            header_name = "potato"
            header_value = "plant"
          }
          response_header_to_add {
            header_name = "potato"
            header_value = "plant"
            replace = true
          }
          request_header_to_remove {
            header_name = "prod"
          }
          response_header_to_remove {
            header_name = "prod"
          }
        }

        origin = google_network_services_edge_cache_origin.instance.name
        route_action {
          cdn_policy {
              cache_mode = "CACHE_ALL_STATIC"
              default_ttl = "3800s"
              client_ttl = "3600s"
              max_ttl = "9000s"
              cache_key_policy {
                include_protocol = true
                include_query_string = true
                exclude_host = true
                included_query_parameters = ["apple", "dev", "santa", "claus"]
                included_header_names = ["banana"]
              }
              negative_caching = true
              signed_request_mode = "DISABLED"
              negative_caching_policy = {
                "500" = "3000s"
              }
          }
          url_rewrite {
            path_prefix_rewrite = "/dev"
            host_rewrite = "dev.club"
          }
          cors_policy {
            max_age = "2500s"
            allow_credentials = true
            allow_origins = [google_network_services_edge_cache_origin.google.name]
            allow_methods = ["GET"]
            allow_headers = ["dev"]
            expose_headers = ["prod"]
          }
        }
      }
      route_rule {
        description = "a second route rule to match against"
        priority = 2
        match_rule {
          ignore_case = true
          full_path_match = "/yay"
          header_match {
            header_name = "yay"
            present_match = true
          }
        }
        origin = google_network_services_edge_cache_origin.instance.name
        route_action {
          cdn_policy {
            cache_mode = "CACHE_ALL_STATIC"
            default_ttl = "3600s"
            cache_key_policy {
              excluded_query_parameters = ["dev"]
            }
          }
          cors_policy {
            max_age = "3000s"
            allow_headers = ["dev"]
            disabled = true
          }
        }
      }
    }
  }

  log_config {
    enable = true
    sample_rate = 0.01
  }
}