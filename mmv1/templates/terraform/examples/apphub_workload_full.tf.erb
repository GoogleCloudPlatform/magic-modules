resource "google_apphub_application" "application" {
  location = "us-central1"
  application_id = "<%= ctx[:vars]['application_id'] %>"
  scope {
    type = "REGIONAL"
  }
}

resource "google_project" "service_project" {
  project_id ="<%= ctx[:vars]['service_project_attachment_id'] %>"
  name = "Service Project"
  org_id = "<%= ctx[:test_env_vars]['org_id'] %>"
  billing_account = "<%= ctx[:test_env_vars]['billing_account'] %>"
}

# Enable Compute API
resource "google_project_service" "compute_service_project" {
  project = google_project.service_project.project_id
  service = "compute.googleapis.com"
}

resource "time_sleep" "wait_120s" {
  depends_on = [google_project_service.compute_service_project]

  create_duration = "120s"
}

resource "google_apphub_service_project_attachment" "service_project_attachment" {
  service_project_attachment_id = google_project.service_project.project_id
  depends_on = [time_sleep.wait_120s]
}

# Discovered workload 
data "google_apphub_discovered_workload" "catalog-workload" {
  location = "us-central1"
  workload_uri = "${replace(google_compute_region_instance_group_manager.mig.instance_group, "https://www.googleapis.com/compute/v1", "//compute.googleapis.com")}"
  depends_on = [time_sleep.wait_120s_for_resource_ingestion]
}

resource "time_sleep" "wait_120s_for_resource_ingestion" {
  depends_on = [google_compute_region_instance_group_manager.mig]
  create_duration = "120s"
}

resource "google_apphub_workload" "<%= ctx[:primary_resource_id] %>" {
  location = "us-central1"
  application_id = google_apphub_application.application.application_id
  workload_id = google_compute_region_instance_group_manager.mig.name
  discovered_workload = data.google_apphub_discovered_workload.catalog-workload.name
  display_name = "<%= ctx[:vars]['display_name'] %>"
  description = "<%= ctx[:vars]['description'] %>"
  attributes {
    environment {
      type = "STAGING"
    }
    criticality {  
      type = "MISSION_CRITICAL"
    }
    business_owners {
      display_name =  "<%= ctx[:vars]['business_name'] %>"
      email        =  "<%= ctx[:vars]['business_email'] %>"
    }
    developer_owners {
      display_name =  "<%= ctx[:vars]['developer_name'] %>"
      email        =  "<%= ctx[:vars]['developer_email'] %>"
    }
    operator_owners {
      display_name =  "<%= ctx[:vars]['operator_name'] %>"
      email        =  "<%= ctx[:vars]['operator_email'] %>"
    }
  }
}

#Workload creation


# VPC network
resource "google_compute_network" "ilb_network" {
  name                    = "<%= ctx[:vars]['ilb_network'] %>"
  project                 = google_project.service_project.project_id
  auto_create_subnetworks = false
  depends_on = [time_sleep.wait_120s]
}

# backend subnet
resource "google_compute_subnetwork" "ilb_subnet" {
  name          = "<%= ctx[:vars]['ilb_subnet'] %>"
  project       = google_project.service_project.project_id
  ip_cidr_range = "10.0.1.0/24"
  region        = "us-central1"
  network       = google_compute_network.ilb_network.id
}

# instance template
resource "google_compute_instance_template" "instance_template" {
  name         = "<%= ctx[:vars]['instance_template'] %>"
  project      = google_project.service_project.project_id
  machine_type = "e2-small"
  tags         = ["http-server"]
  network_interface {
    network    = google_compute_network.ilb_network.id
    subnetwork = google_compute_subnetwork.ilb_subnet.id
    access_config {
      # add external ip to fetch packages
    }
  }
  disk {
    source_image = "debian-cloud/debian-10"
    auto_delete  = true
    boot         = true
  }
  # install nginx and serve a simple web page
  metadata = {
    startup-script = <<-EOF1
      #! /bin/bash
      set -euo pipefail
      export DEBIAN_FRONTEND=noninteractive
      apt-get update
      apt-get install -y nginx-light jq
      NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
      IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
      METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
      cat <<EOF > /var/www/html/index.html
      <pre>
      Name: $NAME
      IP: $IP
      Metadata: $METADATA
      </pre>
      EOF
    EOF1
  }
  lifecycle {
    create_before_destroy = true
  }
}

resource "google_compute_region_instance_group_manager" "mig" {
  name     = "<%= ctx[:vars]['mig'] %>"
  project  = google_project.service_project.project_id
  region   = "us-central1"
  version {
    instance_template = google_compute_instance_template.instance_template.id
    name              = "primary"
  }
  base_instance_name = "vm"
  target_size        = 2
}