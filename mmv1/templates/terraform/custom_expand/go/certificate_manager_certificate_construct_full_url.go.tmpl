{{- /*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/}}
func expand{{$.GetPrefix}}{{$.TitlelizeProperty}}(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
  if v == nil {
    return nil, nil
  }
  l := v.([]interface{})
  req := make([]interface{}, 0, len(l))
  for _, raw := range l {
    if raw == nil {
      return nil, fmt.Errorf("Invalid value for {{underscore $.Name}}: nil")
    }
    if strings.HasPrefix(raw.(string), "//") || strings.HasPrefix(raw.(string), "https://") {
      // Any full URL will be passed to the API request (regardless of the resource type). This is to allow self_links of CertificateManagerCeritificate resources. 
      // If the full URL is an invalid reference, that should be handled by the API. 
      req = append(req, raw.(string))
    } else if  reg,_ := regexp.Compile("projects/(.*)/locations/(.*)/certificates/(.*)") ; reg.MatchString(raw.(string)) {
      // If the input is the id pattern of CertificateManagerCertificate resource, a prefix will be added to construct the full URL before constructing the API request.
      self_link := "https://certificatemanager.googleapis.com/v1/" + raw.(string)
      req = append(req, self_link)
    } else {
      return nil, fmt.Errorf("Invalid value for {{underscore $.Name}}: %v is an invalid format for a certificateManagerCertificate resource", raw.(string))
    }
  }
  return req, nil
}