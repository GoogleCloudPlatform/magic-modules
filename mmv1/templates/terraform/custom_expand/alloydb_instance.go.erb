<%# # the license inside this if block pertains to this file
        # Copyright 2020 Google Inc.
        # Licensed under the Apache License, Version 2.0 (the "License");
        # you may not use this file except in compliance with the License.
        # You may obtain a copy of the License at
        #
        #     http://www.apache.org/licenses/LICENSE-2.0
        #
        # Unless required by applicable law or agreed to in writing, software
        # distributed under the License is distributed on an "AS IS" BASIS,
        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        # See the License for the specific language governing permissions and
        # limitations under the License.
#%>
func expand<%= prefix -%><%= titlelize_property(property) -%>(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
    l := v.([]interface{})
    if len(l) == 0 || l[0] == nil {
            return nil, nil
    }
    raw := l[0]
    original := raw.(map[string]interface{})
    transformed := make(map[string]interface{})

    <%# setDefaultSSLMode := false
    transformedClientConnectionConfig := original["clientConnectionConfig"]

    if val := reflect.ValueOf(transformedClientConnectionConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
        transformedSSLConfig := transformedClientConnectionConfig["sslConfig"]
        if val := reflect.ValueOf(transformedSSLConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
          transformedSSLMode := transformedSSLConfig["sslMode"]
          if val := reflect.ValueOf(transformedSSLConfig); val.IsValid() && tpgresource.IsEmptyValue(val) {
            setDefaultSSLMode = true
          }
        } else if val := reflect.ValueOf(transformedSSLConfig); tpgresource.IsEmptyValue(val) {
            setDefaultSSLMode = true
        }
    } else if  val := reflect.ValueOf(transformedClientConnectionConfig); !tpgresource.IsEmptyValue(val) {
        setDefaultSSLMode = true
    }

    if setDefaultSSLMode {
      transformedClientConnectionConfig["sslConfig"]["sslMode"] = "ENCRYPTED_ONLY" // OR whatever defaults you want
      transformed["clientConnectionConfig"] = transformedClientConnectionConfig
    } %>

<%# ---------- %>


    <%# setDefaultSSLMode := true %>
    transformedClientConnectionConfig := original["clientConnectionConfig"]

    <%# if val := reflect.ValueOf(transformedClientConnectionConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
        transformedSSLConfig := transformedClientConnectionConfig["sslConfig"]
        if val := reflect.ValueOf(transformedSSLConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
          transformedSSLMode := transformedSSLConfig["sslMode"]
          if val := reflect.ValueOf(transformedSSLMode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
            setDefaultSSLMode = false
          }
        }
    } %>

    <%# if setDefaultSSLMode { %>
      transformedClientConnectionConfig["sslConfig"]["sslMode"] = "ENCRYPTED_ONLY"
      transformed["clientConnectionConfig"] = transformedClientConnectionConfig
    <%# } %>

    return transformed, nil
}
