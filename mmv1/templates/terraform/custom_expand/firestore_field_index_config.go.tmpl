func expand{{$.GetPrefix}}{{$.TitlelizeProperty}}(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	// We drop all output only fields as they are unnecessary.
	if v == nil {
		return nil, nil
	}

	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	transformedIndexConfig := make(map[string]interface{})
	
	// A configured, but empty, index_config block should be sent. This is how a user would remove all indexes.
	if l[0] == nil {
		return transformedIndexConfig, nil
	}

	indexConfig := l[0].(map[string]interface{})

	// For Single field indexes, we put the field configuration on the index to avoid forced nesting.
	// Push all order/arrayConfig down into a single element fields list.
	l = indexConfig["indexes"].(*schema.Set).List()
	transformedIndexes := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})
		transformedField := make(map[string]interface{})

		if val := reflect.ValueOf(original["query_scope"]); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["queryScope"] = original["query_scope"]
		}

		if val := reflect.ValueOf(original["order"]); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformedField["order"] = original["order"]
		}

		if val := reflect.ValueOf(original["array_config"]); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformedField["arrayConfig"] = original["array_config"]
		}
		transformed["fields"] = [1]interface{}{
			transformedField,
		}

		transformedIndexes = append(transformedIndexes, transformed)
	}
	transformedIndexConfig["indexes"] = transformedIndexes
	return transformedIndexConfig, nil
}