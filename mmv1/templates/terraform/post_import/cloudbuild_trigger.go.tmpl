{{/*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}
	// Force legacy id format for global triggers.
	id = strings.ReplaceAll(id, "/locations//", "/")
	id = strings.ReplaceAll(id, "/locations/global/", "/")
	d.SetId(id)
	if d.Get("location") == "" {
		// Happens when imported with legacy import format.
		d.Set("location", "global")
	}

	
	if gitFileSource, ok := obj["gitFileSource"].(map[string]interface{}); ok && len(gitFileSource) > 0 {

		// Manually flatten the nested object.
		// API response is camelCase, Terraform state is snake_case.
		gfsMap := make(map[string]interface{})

		if v, ok := gitFileSource["path"].(string); ok {
			gfsMap["path"] = v
		}
		if v, ok := gitFileSource["uri"].(string); ok {
			gfsMap["uri"] = v
		}
		if v, ok := gitFileSource["repository"].(string); ok {
			gfsMap["repository"] = v
		}
		if v, ok := gitFileSource["repoType"].(string); ok {
			gfsMap["repo_type"] = v
		}
		if v, ok := gitFileSource["revision"].(string); ok {
			gfsMap["revision"] = v
		}
		if v, ok := gitFileSource["githubEnterpriseConfig"].(string); ok {
			gfsMap["github_enterprise_config"] = v
		}
		if v, ok := gitFileSource["bitbucketServerConfig"].(string); ok {
			gfsMap["bitbucket_server_config"] = v
		}

		// Create the list-of-one-map structure Terraform expects.
		flattenedGfs := []interface{}{gfsMap}

		// Set the 'git_file_source' field in the state.
		if err := d.Set("git_file_source", flattenedGfs); err != nil {
			return fmt.Errorf("Error setting git_file_source: %s", err)
		}

		// Explicitly clear the other 'exactly_one_of' fields from the state,
		// just in case the buggy auto-reader set them incorrectly.
		if err := d.Set("filename", ""); err != nil {
			return fmt.Errorf("Error clearing filename: %s", err)
		}
		if err := d.Set("build", nil); err != nil {
			return fmt.Errorf("Error clearing build: %s", err)
		}
	}