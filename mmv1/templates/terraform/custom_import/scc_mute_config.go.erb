config := meta.(*transport_tpg.Config)

if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
	return nil, err
}

// current import_formats can't import fields with forward slashes in their value
name := d.Get("name").(string)

matched, err := regexp.MatchString("(organizations|folders|projects)/.+/muteConfigs/.+", name)
if err != nil {
	return nil, fmt.Errorf("error validating import name: %s", err)
}

if !matched {
	return nil, fmt.Errorf("error validating import name: %s does not fit naming for muteConfigs. Expected %s",
	name, "organizations/{organization}/muteConfigs/{configId}, folders/{folder}/muteConfigs/{configId} or projects/{project}/muteConfigs/{configId}")
}

if err := d.Set("name", name); err != nil {
	return nil, fmt.Errorf("Error setting name: %s", err)
}

// mute_config_id and parent are not returned by the API and therefore need to be set manually
stringParts := strings.Split(d.Get("name").(string), "/")
if err := d.Set("mute_config_id", stringParts[3]); err != nil {
	return nil, fmt.Errorf("Error setting mute_config_id: %s", err)
}

if err := d.Set("parent", fmt.Sprintf("%s/%s", stringParts[0], stringParts[1])); err != nil {
	return nil, fmt.Errorf("Error setting mute_config_id: %s", err)
}

return []*schema.ResourceData{d}, nil
