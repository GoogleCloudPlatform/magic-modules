config := meta.(*transport_tpg.Config)
// current import_formats can't import fields with forward slashes in their value
if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
	return nil, err
}
re := regexp.MustCompile("^projects/([^/]+)/locations/([^/]+)/collections/default_collection/dataStores/([^/]+)/siteSearchEngine/sitemaps/([^/]+)$")
match := re.FindStringSubmatch(d.Get("name").(string))
if len(match) > 0 {
	if err := d.Set("project", match[1]); err != nil {
		return nil, fmt.Errorf("Error setting project: %s", err)
	}
	if err := d.Set("location", match[2]); err != nil {
		return nil, fmt.Errorf("Error setting location: %s", err)
	}
	if err := d.Set("data_store_id", match[3]); err != nil {
		return nil, fmt.Errorf("Error setting data_store_id: %s", err)
	}
} else {
	return nil, fmt.Errorf("import did not match the regex ^projects/([^/]+)/locations/([^/]+)/collections/default_collection/dataStores/([^/]+)/siteSearchEngine/sitemaps/([^/]+)$")
}
// Replace import id for the resource id
id := d.Get("name").(string)
d.SetId(id)
return []*schema.ResourceData{d}, nil