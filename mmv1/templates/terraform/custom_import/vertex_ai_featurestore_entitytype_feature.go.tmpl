config := meta.(*transport_tpg.Config)
if err :=  tpgresource.ParseImportId([]string{
	"(?P<entitytype>.+)/features/(?P<name>[^/]+)",
}, d, config); err != nil {
	return nil, err
}

// Replace import id for the resource id
id, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}entitytype{{"}}"}}/features/{{"{{"}}name{{"}}"}}")
if err != nil {
	return nil, fmt.Errorf("Error constructing id: %s", err)
}
d.SetId(id)

entitytype := d.Get("entitytype").(string)

re := regexp.MustCompile("^projects/(.+)/locations/(.+)/featurestores/(.+)/entityTypes/(.+)$")
if parts := re.FindStringSubmatch(entitytype); parts != nil {
	d.Set("region", parts[2])
}

return []*schema.ResourceData{d}, nil
