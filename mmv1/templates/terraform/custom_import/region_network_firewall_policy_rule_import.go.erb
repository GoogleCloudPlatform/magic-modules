<%# The license inside this block applies to this file.
	# Copyright 2024 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/regions/(?P<region>[^/]+)/firewallPolicies/(?P<firewall_policy>[^/]+)/rules/(?P<priority>[^/]+)$",
		"^projects/(?P<project>[^/]+)/regions/(?P<region>[^/]+)/firewallPolicies/(?P<firewall_policy>[^/]+)/(?P<priority>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<region>[^/]+)/(?P<firewall_policy>[^/]+)/(?P<priority>[^/]+)$",
		"^(?P<region>[^/]+)/(?P<firewall_policy>[^/]+)/(?P<priority>[^/]+)$",
		"^(?P<firewall_policy>[^/]+)/(?P<priority>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

    project, err := tpgresource.GetProject(d, config)
    if err != nil {
    	return nil, fmt.Errorf("Error fetching project for RegionNetworkFirewallPolicyRule: %s", err)
    }

	region, err := tpgresource.GetRegion(d, config)
	if err != nil {
		return nil, fmt.Errorf("Error fetching region for RegionNetworkFirewallPolicyRule: %s", err)
	}
    
    // Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/regions/{{region}}/firewallPolicies/{{firewall_policy}}/{{priority}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Current import uses only the Firewall Policy Id
    stringParts := strings.Split(d.Get("firewall_policy").(string), "/")
	if len(stringParts) == 1 {
		if err := d.Set("firewall_policy", fmt.Sprintf("projects/%s/regions/%s/firewallPolicies/%s", project, region, d.Get("firewall_policy").(string))); err != nil {
		    return nil, fmt.Errorf("Error setting firewall_policy, %s", err)
	    }
	}

	return []*schema.ResourceData{d}, nil