	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"^projects/(?P<project>[^/]+)/global/firewallPolicies/(?P<firewall_policy>[^/]+)/associations/(?P<name>[^/]+)$",
		"^(?P<project>[^/]+)/(?P<firewall_policy>[^/]+)/(?P<name>[^/]+)$",
		"^(?P<firewall_policy>[^/]+)/(?P<name>[^/]+)$",
	}, d, config); err != nil {
		return nil, err
	}

    project, err := tpgresource.GetProject(d, config)
    if err != nil {
    	return nil, fmt.Errorf("Error fetching project for NetworkFirewallPolicyRule: %s", err)
    }

    // Replace import id for the resource id
    id, err := tpgresource.ReplaceVars(d, config, "projects/{{"{{"}}project{{"}}"}}/global/firewallPolicies/{{"{{"}}firewall_policy{{"}}"}}/associations/{{"{{"}}name{{"}}"}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Current import uses only the Firewall Policy Id
    // Replace the field to format "locations/global/firewallPolicies/{{"{{"}}firewallPolicyId{{"}}"}}"
    stringParts := strings.Split(d.Get("firewall_policy").(string), "/")
	if len(stringParts) == 1 {
		if err := d.Set("firewall_policy", fmt.Sprintf("projects/%s/global/firewallPolicies/%s", project, d.Get("firewall_policy").(string))); err != nil {
		    return nil, fmt.Errorf("Error setting firewall_policy, %s", err)
	    }
	}

	return []*schema.ResourceData{d}, nil