
config := meta.(*transport_tpg.Config)

// current import_formats can't import fields with forward slashes in their value
if err := tpgresource.ParseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
	return nil, err
}

// Re-populate split fields from the name.
re := regexp.MustCompile("^projects/([^/]+)/databases/([^/]+)/collectionGroups/([^/]+)/fields/(.+)$")
match := re.FindStringSubmatch(d.Get("name").(string))
if len(match) > 0 {
	if err := d.Set("project", match[1]); err != nil {
		return nil, fmt.Errorf("Error setting project: %s", err)
	}
	if err := d.Set("database", match[2]); err != nil {
		return nil, fmt.Errorf("Error setting database: %s", err)
	}
	if err := d.Set("collection", match[3]); err != nil {
		return nil, fmt.Errorf("Error setting collection: %s", err)
	}
	if err := d.Set("field", match[4]); err != nil {
		return nil, fmt.Errorf("Error setting field: %s", err)
	}
} else {
	return nil, fmt.Errorf("import did not match the regex ^projects/([^/]+)/databases/([^/]+)/collectionGroups/([^/]+)/fields/(.+)$")
}

return []*schema.ResourceData{d}, nil
