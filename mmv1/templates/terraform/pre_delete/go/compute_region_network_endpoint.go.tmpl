toDelete := make(map[string]interface{})

// Port
portProp, err := expandNestedComputeRegionNetworkEndpointPort(d.Get("port"), d, config)
if err != nil {
	return err
}
if portProp != 0 {
	toDelete["port"] = portProp
}

// IP address
ipAddressProp, err := expandNestedComputeRegionNetworkEndpointIpAddress(d.Get("ip_address"), d, config)
if err != nil {
	return err
}
if ipAddressProp != "" {
  toDelete["ipAddress"] = ipAddressProp
}

// FQDN
fqdnProp, err := expandNestedComputeRegionNetworkEndpointFqdn(d.Get("fqdn"), d, config)
if err != nil {
	return err
}
if fqdnProp != "" {
  toDelete["fqdn"] = fqdnProp
}

{{ if ne $.TargetVersionName `ga` -}}
// Instance
instanceProp, err := expandNestedComputeRegionNetworkEndpointInstance(d.Get("instance"), d, config)
if err != nil {
	return err
}
if instanceProp != "" {
  toDelete["instance"] = instanceProp
}

// Client Destination Port
clientDestinationPortProp, err := expandNestedComputeRegionNetworkEndpointClientDestinationPort(d.Get("client_destination_port"), d, config)
if err != nil {
	return err
}
if clientDestinationPortProp != "" && d.Get("client_destination_port").(int) > 0 {
  toDelete["clientDestinationPort"] = clientDestinationPortProp
}
{{- end }}

obj = map[string]interface{}{
	"networkEndpoints": []map[string]interface{}{toDelete},
}
