// if networks are attached, they need to be detached before the policy can be deleted
if d.Get("networks.#").(int) > 0 {
	patched := make(map[string]interface{})
	patched["networks"] = nil

	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}DNSBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/policies/{{"{{"}}name{{"}}"}}")
	if err != nil {
		return err
	}

	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "PATCH",
		Project: project,
		RawURL: url,
		UserAgent: userAgent,
		Body: patched,
		Timeout: d.Timeout(schema.TimeoutUpdate),
{{- if $.ErrorRetryPredicates }}
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorRetryPredicates "," -}} },
{{- end }}
{{- if $.ErrorAbortPredicates }}
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{ {{- join $.ErrorAbortPredicates "," -}} },
{{- end }}
	})
	if err != nil {
		return fmt.Errorf("Error updating Policy %q: %s", d.Id(), err)
	}
}
