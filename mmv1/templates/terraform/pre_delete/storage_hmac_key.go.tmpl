getUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}StorageBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/hmacKeys/{{"{{"}}access_id{{"}}"}}")
if err != nil {
	return err
}

getRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config: config,
	Method: "GET",
	Project: project,
	RawURL: getUrl,
	UserAgent: userAgent,
})
if err != nil {
	return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("StorageHmacKey %q", d.Id()))
}

// HmacKeys need to be INACTIVE to be deleted and the API doesn't accept noop
// updates
if v := getRes["state"]; v == "ACTIVE" {
	getRes["state"] = "INACTIVE"
	updateUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}StorageBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/hmacKeys/{{"{{"}}access_id{{"}}"}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Deactivating HmacKey %q: %#v", d.Id(), getRes)
	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "PUT",
		Project: project,
		RawURL: updateUrl,
		UserAgent: userAgent,
		Body: getRes,
		Timeout: d.Timeout(schema.TimeoutUpdate),
	})
	if err != nil {
			return fmt.Errorf("Error deactivating HmacKey %q: %s", d.Id(), err)
	}
}

