if d.Get("deletion_protection").(bool) {
	return fmt.Errorf("cannot destroy CertificateAuthority without setting deletion_protection=false and running `terraform apply`")
}

if d.Get("state").(string) == "ENABLED" {
	disableUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}PrivatecaBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/caPools/{{"{{"}}pool{{"}}"}}/certificateAuthorities/{{"{{"}}certificate_authority_id{{"}}"}}:disable")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Disabling CertificateAuthority: %#v", obj)

	dRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "POST",
		Project: billingProject,
		RawURL: disableUrl,
		UserAgent: userAgent,
	})
	if err != nil {
		return fmt.Errorf("Error disabling CertificateAuthority: %s", err)
	}

	var opRes map[string]interface{}
	err = PrivatecaOperationWaitTimeWithResponse(
		config, dRes, &opRes, project, "Disabling CertificateAuthority", userAgent,
		d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return fmt.Errorf("Error waiting to disable CertificateAuthority: %s", err)
	}
}
