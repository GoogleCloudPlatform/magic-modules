// Special handling for the mandatory 'rbacrolebindingactuation' feature.
// Instead of deleting it, we reset it to a default state by sending a PATCH request.
if d.Get("name").(string) == "rbacrolebindingactuation" {
	log.Printf("[DEBUG] Mandatory feature 'rbacrolebindingactuation' detected. Resetting instead of deleting.")

	patchUrl, err := tpgresource.ReplaceVarsForId(d, config, "{{"{{"}}GKEHub2BasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/features/{{"{{"}}name{{"}}"}}")
	if err != nil {
		return err
	}

	// Construct the request body to clear the desired field.
	obj := map[string]interface{}{
		"spec": map[string]interface{}{
			"rbacrolebindingactuation": map[string]interface{}{
				"allowedCustomRoles": []string{},
			},
		},
	}

	// A specific updateMask is required for a PATCH request.
	updateMask := "spec.rbacrolebindingactuation.allowedCustomRoles"
	url, err := transport_tpg.AddQueryParams(patchUrl, map[string]string{"updateMask": updateMask})
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Sending PATCH to reset Feature %q: %#v", d.Id(), obj)

	// Send the raw PATCH request.
	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete), // Use the delete timeout for this reset operation.
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("error resetting Feature %q: %s", d.Id(), err)
	}

	// Wait for the long-running operation to complete.
	err = GKEHub2OperationWaitTime(
		config, res, tpgresource.GetResourceNameFromSelfLink(project), "Resetting Feature", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return fmt.Errorf("error waiting to reset Feature %q: %s", d.Id(), err)
	}

	log.Printf("[DEBUG] Finished resetting Feature %q", d.Id())
	return nil
}
