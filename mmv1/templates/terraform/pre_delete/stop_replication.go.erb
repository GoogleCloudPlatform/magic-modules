rawurl, err := tpgresource.ReplaceVars(d, config, "{{NetappBasePath}}projects/{{project}}/locations/{{location}}/volumes/{{volume_id}}/replications/{{name}}:stop")
if err != nil {
		return err
	}
reso, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config: config,
	Method: "POST",
	Project: billingProject,
	RawURL: rawurl,
	UserAgent: userAgent,
	Body: obj,
	Timeout: d.Timeout(schema.TimeoutUpdate),
<% if object.error_retry_predicates -%>
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{<%= object.error_retry_predicates.join(',') -%>},
<% end -%>
<% if object.error_abort_predicates -%>
		ErrorAbortPredicates: []transport_tpg.RetryErrorPredicateFunc{<%= object.error_abort_predicates.join(',') -%>},
<% end -%>
})
if err != nil {
	return fmt.Errorf("Error stopping replication %q: %s", d.Id(), err)
}

err = NetappOperationWaitTime(
                config, reso, project, "Deleting volumereplication", userAgent,
                d.Timeout(schema.TimeoutDelete))
        if err != nil {
                return err
        }
        