if d.HasChange("pause_replication") {
		obj := make(map[string]interface{})
		endpoint := ""

		pauseReplicationProp, err := expandFilestoreInstancePauseReplication(d.Get("pause_replication"), d, config)
		if err != nil {
			return err
		} else if v, ok := d.GetOkExists("pause_replication"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, pauseReplicationProp)) {
			obj["pauseReplication"] = pauseReplicationProp
		}

		if d.Get("pause_replication") == true {
			endpoint = "pauseReplica"

		} else if d.Get("pause_replication") == false {
			endpoint = "resumeReplica"
		}

		url, err := tpgresource.ReplaceVars(d, config, fmt.Sprintf("{{FilestoreBasePath}}projects/{{project}}/locations/{{location}}/instances/{{name}}:%s", endpoint))
		if err != nil {
			return err
		}

		headers := make(http.Header)

		// err == nil indicates that the billing_project value was found
		if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
			billingProject = bp
		}
		emptyReqBody := make(map[string]interface{})

		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "POST",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      emptyReqBody,
			Timeout:   d.Timeout(schema.TimeoutUpdate),
			Headers:   headers,
		})
		if err != nil {
			return fmt.Errorf("Error Pausing/Resuming Instance %q: %s", d.Id(), err)
		} else {
			log.Printf("[DEBUG] Finished Pausing/Resuming Instance %q: %#v", d.Id(), res)
		}

		err = FilestoreOperationWaitTime(
			config, res, project, "Creating Instance", userAgent,
			d.Timeout(schema.TimeoutCreate))
		if err != nil {
			return err
		}

	}