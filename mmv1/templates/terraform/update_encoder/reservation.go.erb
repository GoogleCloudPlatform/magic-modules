<%# The license inside this block applies to this file.
	# Copyright 2020 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
# 	newObj := make(map[string]interface{})
#   newObj["shareType"] = "SPECIFIC_PROJECTS"
#   newObj["projectMap"] = obj["shareSettings"].(map[string]interface{})["projectMap"]
#
#   return newObj, nil

-%>
	newObj := make(map[string]interface{})
	config := meta.(*Config)
	nameProp, err := expandComputeReservationName(d.Get("name"), d, config)
	if err != nil {
		return newObj, nil
	} else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		newObj["name"] = nameProp
	}
  zoneProp, err := expandComputeReservationZone(d.Get("zone"), d, config)
  if err != nil {
    return newObj, nil
  } else if v, ok := d.GetOkExists("zone"); !isEmptyValue(reflect.ValueOf(zoneProp)) && (ok || !reflect.DeepEqual(v, zoneProp)) {
    newObj["zone"] = zoneProp
  }
	transformed := make(map[string]interface{})
# 	 Set shareType.
	transformed["shareType"] = "SPECIFIC_PROJECTS"
# 	Set project_map.
	projectMap := make(map[string]interface{})
	old, new := d.GetChange("share_settings")
	oldMap := old.([]interface{})[0].(map[string]interface{})["project_map"]
	newMap := new.([]interface{})[0].(map[string]interface{})["project_map"]
	before := oldMap.(*schema.Set)
	after := newMap.(*schema.Set)
	for _, raw := range after.Difference(before).List() {
		original := raw.(map[string]interface{})
		singleProject := make(map[string]interface{})
		transformedProjectId := original["project_id"]
		if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !isEmptyValue(val) {
			singleProject["projectId"] = transformedProjectId
		}
		transformedId, err := expandString(original["id"], d, config)
		if err != nil {
			return nil, err
		}
		projectMap[transformedId] = singleProject
	}
	transformed["projectMap"] = projectMap
	newObj["shareSettings"] = transformed
# 	 Resize.
	if obj["specificReservation"] != nil {
		count := obj["specificReservation"].(map[string]interface{})["count"]
		if count != nil {
			newObj["specificSkuCount"] = obj["specificReservation"].(map[string]interface{})["count"]
		}
	}

	return newObj, nil
