<%# The license inside this block applies to this file.
	# Copyright 2019 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
	// Return object for modifyMembershipRoles (we build request object from scratch, without using `obj`)
	b, a := d.GetChange("roles")
	before := b.(*schema.Set)
	after := a.(*schema.Set)

	ignoreUpdateR := make(map[string]struct{})
	addRoleList := after.Difference(before).List()
	removeRoleList := before.Difference(after).List()

	var updateRolesParams []map[string]interface{}
	for _, addR := range addRoleList {
		ar := addR.(map[string]interface{})["name"].(string)
		ae := addR.(map[string]interface{})["expiry_detail"].([]map[string]string)
		if len(ae) > 1 {
			return nil, fmt.Errorf("only expect one or zero expiry_detail per role")
		}
		for _, removeR := range removeRoleList {
			if ar == removeR.(map[string]interface{})["name"].(string) {
				ignoreUpdateR[ar] = struct{}{}
				var updateR map[string]interface{}
				if len(ae) == 0 {
					updateR = map[string]interface{}{"name": ar}
				} else {
					updateR = map[string]interface{}{"name": ar, "expiry_detail": ae[0]}
				}
				updateP := map[string]interface{}{"field_mask": "expiryDetail.expire_time", "membership_role": updateR}
				updateRolesParams = append(updateRolesParams, updateP)
			}
		}
	}

	var addRoles []map[string]interface{}
	for _, r := range addRoleList {
		name := r.(map[string]interface{})["name"].(string)
		if _, ignore := ignoreUpdateR[name]; ignore {
			continue
		}
		expiryDetail := r.(map[string]interface{})["expiry_detail"].([]map[string]string)
		if len(expiryDetail) == 0 {
			addRoles = append(addRoles, map[string]interface{}{"name": name})
		} else {
			addRoles = append(addRoles, map[string]interface{}{"name": name, "expiry_detail": expiryDetail[0]})
		}
	}
	var removeRoles []string
	for _, r := range removeRoleList {
		name := r.(map[string]interface{})["name"].(string)
		if _, ignore := ignoreUpdateR[name]; ignore {
			continue
		}
		removeRoles = append(removeRoles, name)
	}
	// ref: https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/modifyMembershipRoles#request-body
	req := map[string]interface{}{"addRoles": addRoles, "removeRoles": removeRoles, "updateRolesParams": updateRolesParams}
	return req, nil
