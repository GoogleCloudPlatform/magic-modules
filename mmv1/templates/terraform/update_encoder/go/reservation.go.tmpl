{{- /*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/}}
	newObj := make(map[string]interface{})
	config := meta.(*transport_tpg.Config)
	maskId := ""
	firstProject := true
	urlUpdateMask := ""

	if d.HasChange("share_settings") {
		// Get name.
		nameProp, err := expandComputeReservationName(d.Get("name"), d, config)
		if err != nil {
			return nil, fmt.Errorf("Invalid value for name: %s", err)
		} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
			newObj["name"] = nameProp
		}
		// 	Get zone.
		zoneProp, err := expandComputeReservationZone(d.Get("zone"), d, config)
		if err != nil {
			return nil, fmt.Errorf("Invalid value for zone: %s", err)
		} else if v, ok := d.GetOkExists("zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(zoneProp)) && (ok || !reflect.DeepEqual(v, zoneProp)) {
			newObj["zone"] = zoneProp
		}
		transformed := make(map[string]interface{})
		// Set shareType.
		transformed["shareType"] = "SPECIFIC_PROJECTS"
		// Set project_map.
		projectMap := make(map[string]interface{})
		old, new := d.GetChange("share_settings")
		oldMap := old.([]interface{})[0].(map[string]interface{})["project_map"]
		newMap := new.([]interface{})[0].(map[string]interface{})["project_map"]
		before := oldMap.(*schema.Set)
		after := newMap.(*schema.Set)

		for _, raw := range after.Difference(before).List() {
			original := raw.(map[string]interface{})
			singleProject := make(map[string]interface{})
			// set up project_map.
			transformedProjectId := original["project_id"]
			if val := reflect.ValueOf(transformedProjectId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
				singleProject["projectId"] = transformedProjectId
			}
			transformedId, err := tpgresource.ExpandString(original["id"], d, config)
			if err != nil {
				return nil, fmt.Errorf("Invalid value for id: %s", err)
			}
			projectMap[transformedId] = singleProject
			// add added projects to updateMask
			if firstProject != true {
				maskId = fmt.Sprintf("%s%s", "&paths=shareSettings.projectMap.", original["project_id"])
			} else {
				maskId = fmt.Sprintf("%s%s", "?paths=shareSettings.projectMap.", original["project_id"])
				firstProject = false
			}
			decodedPath, _ := url.QueryUnescape(maskId)
			urlUpdateMask = urlUpdateMask + decodedPath
		}
		transformed["projectMap"] = projectMap
		newObj["shareSettings"] = transformed

		// add removed projects to updateMask
		firstProject = true
		for _, raw := range before.Difference(after).List() {
			original := raw.(map[string]interface{})
			// To remove a project we need project number.
			projectId := fmt.Sprintf("%s", original["project_id"])
			projectIdOrNum := projectId
			_, err := strconv.Atoi(projectId)
			// convert id to number.
			if err != nil {
				config := meta.(*transport_tpg.Config)
				project, err := config.NewResourceManagerClient(config.UserAgent).Projects.Get(projectId).Do()
				if err != nil {
					return nil, fmt.Errorf("Invalid value for projectId: %s", err)
				}
				projectNum := project.ProjectNumber
				projectIdOrNum = fmt.Sprintf("%d", projectNum)
			}
			if firstProject != true {
				maskId = fmt.Sprintf("%s%s", "&paths=shareSettings.projectMap.", projectIdOrNum)
			} else {
				maskId = fmt.Sprintf("%s%s", "?paths=shareSettings.projectMap.", projectIdOrNum)
				firstProject = false
			}
			decodedPath, _ := url.QueryUnescape(maskId)
			urlUpdateMask = urlUpdateMask + decodedPath
		}
		newObj["urlUpdateMask"] = urlUpdateMask
	}

	// Resize.
	if obj["specificReservation"] != nil {
		count := obj["specificReservation"].(map[string]interface{})["count"]
		if count != nil {
			newObj["specificSkuCount"] = obj["specificReservation"].(map[string]interface{})["count"]
		}
	}

	return newObj, nil
