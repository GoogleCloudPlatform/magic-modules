project, err := tpgresource.GetProject(d, meta.(*transport_tpg.Config))
if err != nil {
	return nil, err
}
obj["name"] = fmt.Sprintf("projects/%s/instances/%s", project, obj["name"])
newObj := make(map[string]interface{})
newObj["instance"] = obj
updateMask := make([]string, 0)
if d.HasChange("num_nodes") {
	updateMask = append(updateMask, "nodeCount")
}
if d.HasChange("display_name") {
	updateMask = append(updateMask, "displayName")
}
if d.HasChange("labels") {
	updateMask = append(updateMask, "labels")
}
if d.HasChange("processing_units") {
	updateMask = append(updateMask, "processingUnits")
}
if d.HasChange("autoscaling_config") {
	old, new := d.GetChange("autoscaling_config")
	oldSlice := old.([]interface{})
	newSlice := new.([]interface{})
	if len(oldSlice) == 0 || len(newSlice) == 0 {
		updateMask = append(updateMask, "autoscalingConfig")
	} else {
		if d.HasChange("autoscaling_config.0.autoscaling_limits.0.max_processing_units") {
			updateMask = append(updateMask, "autoscalingConfig.autoscalingLimits.maxProcessingUnits")
		}
		if d.HasChange("autoscaling_config.0.autoscaling_limits.0.min_processing_units") {
			updateMask = append(updateMask, "autoscalingConfig.autoscalingLimits.minProcessingUnits")
		}
		if d.HasChange("autoscaling_config.0.autoscaling_limits.0.max_nodes") {
			updateMask = append(updateMask, "autoscalingConfig.autoscalingLimits.maxNodes")
		}
		if d.HasChange("autoscaling_config.0.autoscaling_limits.0.min_nodes") {
			updateMask = append(updateMask, "autoscalingConfig.autoscalingLimits.minNodes")
		}
		if d.HasChange("autoscaling_config.0.autoscaling_targets.0.high_priority_cpu_utilization_percent") {
			updateMask = append(updateMask, "autoscalingConfig.autoscalingTargets.highPriorityCpuUtilizationPercent")
		}
		if d.HasChange("autoscaling_config.0.autoscaling_targets.0.storage_utilization_percent") {
			updateMask = append(updateMask, "autoscalingConfig.autoscalingTargets.storageUtilizationPercent")
		}
	}
}
newObj["fieldMask"] = strings.Join(updateMask, ",")
return newObj, nil
