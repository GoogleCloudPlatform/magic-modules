{{- /*
	The license inside this block applies to this file
	Copyright 2024 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/}}
// The RegionBackendService API's Update / PUT API is badly formed and behaves like
// a PATCH field for at least IAP. When sent a `null` `iap` field, the API
// doesn't disable an existing field. To work around this, we need to emulate
// the old Terraform behaviour of always sending the block (at both update and
// create), and force sending each subfield as empty when the block isn't
// present in config.

iapVal := obj["iap"]
if iapVal == nil {
	data := map[string]interface{}{}
	data["enabled"] = false
	obj["iap"] = data
} else {
	iap := iapVal.(map[string]interface{})
	iap["enabled"] = true
	obj["iap"] = iap
}

if d.Get("load_balancing_scheme").(string) == "EXTERNAL_MANAGED" || d.Get("load_balancing_scheme").(string) == "INTERNAL_MANAGED" {
	return obj, nil
}

{{- if ne $.TargetVersionName "ga" }}
// To remove subsetting on an ILB, "NONE" must be specified. If subsetting
// isn't specified, we set the value to NONE to make this use case work.
_, ok := obj["subsetting"]
if !ok {
	loadBalancingScheme, ok := obj["loadBalancingScheme"]
	// External load balancing scheme does not support subsetting
	if !ok || loadBalancingScheme.(string) != "EXTERNAL" {
		data := map[string]interface{}{}
		data["policy"] = "NONE"
		obj["subsetting"] = data
	}
}
{{- end }}

backendServiceOnlyManagedApiFieldNames := []string{
	"capacityScaler",
	"maxConnections",
	"maxConnectionsPerInstance",
	"maxConnectionsPerEndpoint",
	"maxRate",
	"maxRatePerInstance",
	"maxRatePerEndpoint",
	"maxUtilization",
}

var backends []interface{}
if lsV := obj["backends"]; lsV != nil {
	backends = lsV.([]interface{})
}
for idx, v := range backends {
	if v == nil {
		continue
	}
	backend := v.(map[string]interface{})
	// Remove fields from backends that cannot be sent for non-managed
	// backend services
	for _, k := range backendServiceOnlyManagedApiFieldNames {
		log.Printf("[DEBUG] Removing field %q for request for non-managed backend service %s", k, d.Get("name"))
		delete(backend, k)
	}
	backends[idx] = backend
}

obj["backends"] = backends
return obj, nil
