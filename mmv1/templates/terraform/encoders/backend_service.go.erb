<%# The license inside this block applies to this file.
	# Copyright 2017 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
// The BackendService API's Update / PUT API is badly formed and behaves like
// a PATCH field for at least IAP. When sent a `null` `iap` field, the API
// doesn't disable an existing field. To work around this, we need to emulate
// the old Terraform behaviour of always sending the block (at both update and
// create), and force sending each subfield as empty when the block isn't
// present in config.

iapVal := obj["iap"]
if iapVal == nil {
	data := map[string]interface{}{}
	data["enabled"] = false
	obj["iap"] = data
} else {
	iap := iapVal.(map[string]interface{})
	iap["enabled"] = true
	obj["iap"] = iap
}

backendsRaw, ok := obj["backends"]
if !ok {
	return obj, nil
}
backends := backendsRaw.([]interface{})
for _, backendRaw := range backends {
	backend := backendRaw.(map[string]interface{})

	if isNegBackend(backend) {
		// Remove `max_utilization` from any backend that belongs to an NEG. This field
		// has a default value and causes API validation errors
		backend["maxUtilization"] = nil
	}
}

// This custom encoding helps prevent sending 0 for clientTtl, defaultTtl and
// maxTtl in API calls to update these values  when unset in the provider
// (doing so results in an API level error)
c, cdnPolicyOk := d.GetOk("cdn_policy")

// Only apply during updates
if !cdnPolicyOk || obj["cdnPolicy"] == nil {
	return obj, nil
}

currentCdnPolicies := c.([]interface{})

// state does not contain cdnPolicy, so we can return early here as well
if len(currentCdnPolicies) == 0 {
	return obj, nil
}

futureCdnPolicy := obj["cdnPolicy"].(map[string]interface{})
currentCdnPolicy := currentCdnPolicies[0].(map[string]interface{})

cacheMode, ok := futureCdnPolicy["cache_mode"].(string)
// Fallback to state if doesn't exist in object
if !ok {
	cacheMode = currentCdnPolicy["cache_mode"].(string)
}

switch cacheMode {
case "USE_ORIGIN_HEADERS":
	if _, ok := futureCdnPolicy["clientTtl"]; ok {
		delete(futureCdnPolicy, "clientTtl")
	}
	if _, ok := futureCdnPolicy["defaultTtl"]; ok {
		delete(futureCdnPolicy, "defaultTtl")
	}
	if _, ok := futureCdnPolicy["maxTtl"]; ok {
		delete(futureCdnPolicy, "maxTtl")
	}
}

return obj, nil
