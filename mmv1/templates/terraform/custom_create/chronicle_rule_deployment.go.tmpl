userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
if err != nil {
    return err
}

url, err := tpgresource.ReplaceVars(d, config, "{{"{{ChronicleBasePath}}projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/deployment"}}")
if err != nil {
    return err
}

billingProject := ""

project, err := tpgresource.GetProject(d, config)
if err != nil {
    return fmt.Errorf("Error fetching project for RuleDeployment: %s", err)
}
billingProject = project

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
    billingProject = bp
}

headers := make(http.Header)
res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
    Config:    config,
    Method:    "GET",
    Project:   billingProject,
    RawURL:    url,
    UserAgent: userAgent,
    Headers:   headers,
})
if err != nil {
	return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ChronicleRuleDeployment %q", d.Id()))
}

obj := make(map[string]interface{})
updateMask := []string{}

enabledProp, err := expandChronicleRuleDeploymentEnabled(d.Get("enabled"), d, config)
if err != nil {
    return err
}
alertingProp, err := expandChronicleRuleDeploymentAlerting(d.Get("alerting"), d, config)
if err != nil {
    return err
}
archivedProp, err := expandChronicleRuleDeploymentArchived(d.Get("archived"), d, config)
if err != nil {
    return err
}
runFrequencyProp, err := expandChronicleRuleDeploymentRunFrequency(d.Get("run_frequency"), d, config)
if err != nil {
    return err
}

if res != nil {
    enabledValue, enabledExists:= res["enabled"]
    if enabledExists {
        enabled:= flattenChronicleRuleDeploymentEnabled(enabledValue, d, config)
        if!reflect.DeepEqual(enabledProp, enabled) {
            obj["enabled"] = enabledProp
            updateMask = append(updateMask, "enabled")
        }
    } else {
        // Handle the case where "enabled" is missing from the API response
        if v, ok:= d.GetOkExists("enabled"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
            obj["enabled"] = enabledProp
            updateMask = append(updateMask, "enabled")
        }
    }

    alertingValue, alertingExists:= res["alerting"]
    if alertingExists {
        alerting:= flattenChronicleRuleDeploymentAlerting(alertingValue, d, config)
        if!reflect.DeepEqual(alertingProp, alerting) {
            obj["alerting"] = alertingProp
            updateMask = append(updateMask, "alerting")
        }
    } else {
        // Handle the case where "alerting" is missing from the API response
        if v, ok:= d.GetOkExists("alerting"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
            obj["alerting"] = alertingProp
            updateMask = append(updateMask, "alerting")
        }
    }

    archivedValue, archivedExists:= res["archived"]
    if archivedExists {
        archived:= flattenChronicleRuleDeploymentArchived(archivedValue, d, config)
        if!reflect.DeepEqual(archivedProp, archived) {
            obj["archived"] = archivedProp
            updateMask = append(updateMask, "archived")
        }
    } else {
        // Handle the case where "archived" is missing from the API response
        if v, ok:= d.GetOkExists("archived"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
            obj["archived"] = archivedProp
            updateMask = append(updateMask, "archived")
        }
    }

    runFrequencyValue, runFrequencyExists:= res["runFrequency"]
    if runFrequencyExists {
        runFrequency:= flattenChronicleRuleDeploymentRunFrequency(runFrequencyValue, d, config)
        if!reflect.DeepEqual(runFrequencyProp, runFrequency) {
            obj["runFrequency"] = runFrequencyProp
            updateMask = append(updateMask, "runFrequency")
        }
    } else {
        // Handle the case where "run_frequency" is missing from the API response
        if v, ok:= d.GetOkExists("run_frequency"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
            obj["runFrequency"] = runFrequencyProp
            updateMask = append(updateMask, "runFrequency")
        }
    }
} else {
    if v, ok:= d.GetOkExists("enabled"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
        obj["enabled"] = enabledProp
        updateMask = append(updateMask, "enabled")
    }
    if v, ok:= d.GetOkExists("alerting"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
        obj["alerting"] = alertingProp
        updateMask = append(updateMask, "alerting")
    }
    if v, ok:= d.GetOkExists("archived"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
        obj["archived"] = archivedProp
        updateMask = append(updateMask, "archived")
    }
    if v, ok:= d.GetOkExists("run_frequency"); ok && !tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
        obj["runFrequency"] = runFrequencyProp
        updateMask = append(updateMask, "runFrequency")
    }
}

url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
if err != nil {
    return err
}

log.Printf("[DEBUG] Updating RuleDeployment %q: %#v", d.Id(), obj)

res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
    Config:    config,
    Method:    "PATCH",
    Project:   billingProject,
    RawURL:    url,
    UserAgent: userAgent,
    Body:      obj,
    Timeout:   d.Timeout(schema.TimeoutUpdate),
    Headers:   headers,
})

if err != nil {
    return fmt.Errorf("Error updating RuleDeployment %q: %s", d.Id(), err)
} else {
    log.Printf("[DEBUG] Finished updating RuleDeployment %q: %#v", d.Id(), res)
}

if err := d.Set("name", flattenChronicleRuleDeploymentName(res["name"], d, config)); err != nil {
    return fmt.Errorf(`Error setting computed identity field "name": %s`, err)
}

// Store the ID now
id, err := tpgresource.ReplaceVars(d, config, "{{"projects/{{project}}/locations/{{location}}/instances/{{instance}}/rules/{{rule}}/deployment"}}")
if err != nil {
    return fmt.Errorf("Error constructing id: %s", err)
}
d.SetId(id)

log.Printf("[DEBUG] Finished creating RuleDeployment %q: %#v", d.Id(), res)

return resourceChronicleRuleDeploymentRead(d, meta)