userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
if err != nil {
    return err
}

obj := make(map[string]interface{})
preferredMemberKeyProp, err := expandCloudIdentityGroupMembershipPreferredMemberKey(d.Get("preferred_member_key"), d, config)
if err != nil {
    return err
} else if v, ok := d.GetOkExists("preferred_member_key"); !tpgresource.IsEmptyValue(reflect.ValueOf(preferredMemberKeyProp)) && (ok || !reflect.DeepEqual(v, preferredMemberKeyProp)) {
    obj["preferredMemberKey"] = preferredMemberKeyProp
}
rolesProp, err := expandCloudIdentityGroupMembershipRoles(d.Get("roles"), d, config)
if err != nil {
    return err
} else if v, ok := d.GetOkExists("roles"); !tpgresource.IsEmptyValue(reflect.ValueOf(rolesProp)) && (ok || !reflect.DeepEqual(v, rolesProp)) {
    obj["roles"] = rolesProp
}

url, err := tpgresource.ReplaceVars(d, config, "{{"{{CloudIdentityBasePath}}{{group}}/memberships"}}")
if err != nil {
    return err
}

log.Printf("[DEBUG] Creating new GroupMembership: %#v", obj)
billingProject := ""

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
    billingProject = bp
}

headers := make(http.Header)
res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
    Config:    config,
    Method:    "POST",
    Project:   billingProject,
    RawURL:    url,
    UserAgent: userAgent,
    Body:      obj,
    Timeout:   d.Timeout(schema.TimeoutCreate),
    Headers:   headers,
})
if err != nil {
    gerr, ok := err.(*googleapi.Error)
    alreadyExists := ok && gerr.Code == 409 && d.Get("create_ignore_already_exists").(bool)
    if alreadyExists {
        log.Printf("[DEBUG] Calling get GroupMembership after already exists error")
        preferredMemberKeyPropTyped := tpgresource.CheckStringMap(preferredMemberKeyProp)

        url, err = transport_tpg.AddQueryParams(url + ":lookup", map[string]string{"memberKey.id": preferredMemberKeyPropTyped["id"]})
        if err != nil {
            return err
        }

        res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
            Config:    config,
            Method:    "GET",
            Project:   billingProject,
            RawURL:    url,
            UserAgent: userAgent,
            Headers:   headers,
        })
        if err != nil {
            return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("GroupMembership %q", d.Id()))
        }
    } else {
        return fmt.Errorf("Error creating GroupMembership: %s", err)
    }
}

// Set computed resource properties from create API response so that they're available on the subsequent Read
// call.
err = resourceCloudIdentityGroupMembershipPostCreateSetComputedFields(d, meta, res)
if err != nil {
    return fmt.Errorf("setting computed ID format fields: %w", err)
}

// Store the ID now
id, err := tpgresource.ReplaceVars(d, config, "{{"{{name}}"}}")
if err != nil {
    return fmt.Errorf("Error constructing id: %s", err)
}
d.SetId(id)

// `name` is autogenerated from the api so needs to be set post-create
name, ok := res["name"]
if !ok {
    respBody, ok := res["response"]
    if !ok {
        return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
    }

    name, ok = respBody.(map[string]interface{})["name"]
    if !ok {
        return fmt.Errorf("Create response didn't contain critical fields. Create may not have succeeded.")
    }
}
if err := d.Set("name", name.(string)); err != nil {
    return fmt.Errorf("Error setting name: %s", err)
}
d.SetId(name.(string))

log.Printf("[DEBUG] Finished creating GroupMembership %q: %#v", d.Id(), res)

return resourceCloudIdentityGroupMembershipRead(d, meta)
