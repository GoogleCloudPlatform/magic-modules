userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
if err != nil {
  return err
}

obj := make(map[string]interface{})
natIpsProp, err := expandNestedComputeRouterNatAddressNatIps(d.Get("nat_ips"), d, config)
if err != nil {
  return err
} else if v, ok := d.GetOkExists("nat_ips"); ok || !reflect.DeepEqual(v, natIpsProp) {
  obj["natIps"] = natIpsProp
}
nameProp, err := expandNestedComputeRouterNatAddressRouterNat(d.Get("router_nat"), d, config)
if err != nil {
  return err
} else if v, ok := d.GetOkExists("router_nat"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
  obj["name"] = nameProp
}

obj, err = resourceComputeRouterNatAddressEncoder(d, meta, obj)
if err != nil {
  return err
}

lockName, err := tpgresource.ReplaceVars(d, config, "router/{{region}}/{{router}}")
if err != nil {
  return err
}
transport_tpg.MutexStore.Lock(lockName)
defer transport_tpg.MutexStore.Unlock(lockName)

url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/regions/{{region}}/routers/{{router}}")
if err != nil {
  return err
}

log.Printf("[DEBUG] Creating new RouterNatAddress: %#v", obj)

billingProject := ""

project, err := tpgresource.GetProject(d, config)
if err != nil {
  return fmt.Errorf("Error fetching project for RouterNatAddress: %s", err)
}
billingProject = project

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
  billingProject = bp
}

headers := make(http.Header)
res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
  Config:    config,
  Method:    "PATCH",
  Project:   billingProject,
  RawURL:    url,
  UserAgent: userAgent,
  Body:      obj,
  Timeout:   d.Timeout(schema.TimeoutCreate),
  Headers:   headers,
})
if err != nil {
  return fmt.Errorf("Error creating RouterNatAddress: %s", err)
}

// Store the ID now
id, err := tpgresource.ReplaceVars(d, config, "{{project}}/{{region}}/{{router}}/{{router.name}}")
if err != nil {
  return fmt.Errorf("Error constructing id: %s", err)
}
d.SetId(id)

err = ComputeOperationWaitTime(
  config, res, project, "Creating RouterNatAddress", userAgent,
  d.Timeout(schema.TimeoutCreate))

if err != nil {
  // The resource didn't actually create
  d.SetId("")
  return fmt.Errorf("Error waiting to create RouterNatAddress: %s", err)
}

log.Printf("[DEBUG] Finished creating RouterNatAddress %q: %#v", d.Id(), res)

return resourceComputeRouterNatAddressRead(d, meta)
