
userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
if err != nil {
  return err
}

obj := make(map[string]interface{})
editionConfigProp, err := expandStorageControlOrganizationIntelligenceConfigEditionConfig(d.Get("edition_config"), d, config)
if err != nil {
  return err
} else if v, ok := d.GetOkExists("edition_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(editionConfigProp)) && (ok || !reflect.DeepEqual(v, editionConfigProp)) {
  obj["editionConfig"] = editionConfigProp
}
filterProp, err := expandStorageControlOrganizationIntelligenceConfigFilter(d.Get("filter"), d, config)
if err != nil {
  return err
} else if v, ok := d.GetOkExists("filter"); !tpgresource.IsEmptyValue(reflect.ValueOf(filterProp)) && (ok || !reflect.DeepEqual(v, filterProp)) {
  obj["filter"] = filterProp
}

url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}StorageControlBasePath{{"}}"}}organizations/{{"{{"}}name{{"}}"}}/locations/global/intelligenceConfig")
if err != nil {
  return err
}

log.Printf("[DEBUG] Patching IntelligenceConfig: %#v", obj)
billingProject := ""

// err == nil indicates that the billing_project value was found
if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
  billingProject = bp
}

headers := make(http.Header)
updateMask := []string{"filter"}

if d.HasChange("edition_config") {
  updateMask = append(updateMask, "editionConfig")
}
// updateMask is a URL parameter but not present in the schema, so ReplaceVars
// won't set it
url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
if err != nil {
  return err
}

res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
  Config:    config,
  Method:    "PATCH",
  Project:   billingProject,
  RawURL:    url,
  UserAgent: userAgent,
  Body:      obj,
  Timeout:   d.Timeout(schema.TimeoutCreate),
  Headers:   headers,
})
if err != nil {
  return fmt.Errorf("Error patching IntelligenceConfig: %s", err)
}

// Store the ID now
id, err := tpgresource.ReplaceVars(d, config, "organizations/{{"{{"}}name{{"}}"}}/locations/global/intelligenceConfig")
if err != nil {
  return fmt.Errorf("Error constructing id: %s", err)
}
d.SetId(id)

log.Printf("[DEBUG] Finished patching intelligence config %q: %#v", d.Id(), res)

return resourceStorageControlOrganizationIntelligenceConfigRead(d, meta)
