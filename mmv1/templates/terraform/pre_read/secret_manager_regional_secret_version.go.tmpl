<%- # the license inside this block applies to this file
	# Copyright 2024 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
secret := d.Get("secret").(string)
secretRegex := regexp.MustCompile("projects/(.+)/locations/(.+)/secrets/(.+)$")

parts := secretRegex.FindStringSubmatch(secret)
if len(parts) != 4 {
	return fmt.Errorf("secret does not fit the format `projects/{{project}}/locations/{{location}}/secrets/{{secret}}`")
}

if err := d.Set("location", parts[2]); err!=nil {
	return fmt.Errorf("Error setting location: %s", err)
}

// Override the url after setting the location
url, err = tpgresource.ReplaceVars(d, config, "{{SecretManagerRegionalBasePath}}{{name}}")
if err != nil {
	return err
}

// Explicitly set the field to default value if unset
if _, ok := d.GetOkExists("is_secret_data_base64"); !ok {
	if err := d.Set("is_secret_data_base64", false); err != nil {
		return fmt.Errorf("Error setting is_secret_data_base64: %s", err)
	}
}
