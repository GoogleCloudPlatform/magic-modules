userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	obj := make(map[string]interface{})
	nameProp, err := expandComputeFirewallPolicyAssociationName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	attachmentTargetProp, err := expandComputeFirewallPolicyAssociationAttachmentTarget(d.Get("attachment_target"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("attachment_target"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, attachmentTargetProp)) {
		obj["attachmentTarget"] = attachmentTargetProp
	}
	firewallPolicyProp, err := expandComputeFirewallPolicyAssociationFirewallPolicy(d.Get("firewall_policy"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("firewall_policy"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, firewallPolicyProp)) {
		obj["firewallPolicy"] = firewallPolicyProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}ComputeBasePath{{"}}"}}locations/global/firewallPolicies/{{"{{"}}firewall_policy{{"}}"}}/addAssociation?replaceExistingAssociation=true")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating FirewallPolicyAssociation %q: %#v", d.Id(), obj)
	headers := make(http.Header)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
		Headers:   headers,
	})
	//following section is the area of the `custom_update` function for this resource that is different
	//`custom_update` was necessary over a `post_update"` because of the change to the error handler
	if err != nil {
		//before failing an update, restores the old firewall_policy value to prevent terraform state becoming broken
		parts := strings.Split(d.Id(), "/")
		oldPolicyPath := "locations/global/firewallPolicies/" + parts[len(parts)-3]
		d.Set("firewall_policy", oldPolicyPath)
		return fmt.Errorf("Error updating FirewallPolicyAssociation %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating FirewallPolicyAssociation %q: %#v", d.Id(), res)
	}

	// store the ID now, needed because this update function is changing a normally immutable URL parameter field
	id, err := tpgresource.ReplaceVars(d, config, "locations/global/firewallPolicies/{{"{{"}}firewall_policy{{"}}"}}/associations/{{"{{"}}name{{"}}"}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	//following the swapover briefly both associations exist and this can cause operations to fail
	time.Sleep(60 * time.Second)
	//end `custom_update` changed zone

	return resourceComputeFirewallPolicyAssociationRead(d, meta)