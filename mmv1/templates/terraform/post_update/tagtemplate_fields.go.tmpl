}


// since fields have a separate endpoint,
// we need to handle it manually

type FieldChange struct {
    Old, New map[string]interface{}
}

o, n := d.GetChange("fields")
vals := make(map[string]*FieldChange)

// this will create a dictionary with the value
// of field_id as the key that will contain the
// maps of old and new values
for _, raw := range o.(*schema.Set).List() {
    obj := raw.(map[string]interface{})
    k := obj["field_id"].(string)
    vals[k] = &FieldChange{Old: obj}
}

for _, raw := range n.(*schema.Set).List() {
    obj := raw.(map[string]interface{})
    k := obj["field_id"].(string)
    if _, ok := vals[k]; !ok {
        // if key is not present in the vals,
        // then create an empty object to hold the new value
        vals[k] = &FieldChange{}
    }
    vals[k].New = obj
}

// fields schema to create schema.set below
dataCatalogTagTemplateFieldsSchema := &schema.Resource{
    Schema: ResourceDataCatalogTagTemplate().Schema["fields"].Elem.(*schema.Resource).Schema,
}

for name, change := range vals {
    // A few different situations to deal with in here:
    // - change.Old is nil: create a new role
    // - change.New is nil: remove an existing role
    // - both are set: test if New is different than Old and update if so

    changeOldSet := schema.NewSet(schema.HashResource(dataCatalogTagTemplateFieldsSchema), []interface{}{})
    changeOldSet.Add(change.Old)
    var changeOldProp map[string]interface{}
    if len(change.Old) != 0 {
        changeOldProp, _ = expandDataCatalogTagTemplateFields(changeOldSet, nil, nil)
        changeOldProp = changeOldProp[name].(map[string]interface{})
    }

    changeNewSet := schema.NewSet(schema.HashResource(dataCatalogTagTemplateFieldsSchema), []interface{}{})
    changeNewSet.Add(change.New)
    var changeNewProp map[string]interface{}
    if len(change.New) != 0 {
        changeNewProp, _ = expandDataCatalogTagTemplateFields(changeNewSet, nil, nil)
        changeNewProp = changeNewProp[name].(map[string]interface{})
    }

    // if old state is empty, then we have a new field to create
    if len(change.Old) == 0 {
        err := createTagTemplateField(d, config, changeNewProp, name, billingProject, userAgent)
        if err != nil {
            return err
        }

        continue
    }

    // if new state is empty, then we need to delete the current field
    if len(change.New) == 0 {
        err := deleteTagTemplateField(d, config, name, billingProject, userAgent)
        if err != nil {
            return err
        }

        continue
    }

    // if we have old and new values, but are not equal, update with the new state
    if !reflect.DeepEqual(changeOldProp, changeNewProp) {
        url1, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}DataCatalogBasePath{{"}}"}}{{"{{"}}name{{"}}"}}/fields/"+name)
        if err != nil {
            return err
        }

        oldType := changeOldProp["type"].(map[string]interface{})
        newType := changeNewProp["type"].(map[string]interface{})

        if oldType["primitiveType"] != newType["primitiveType"] {
            // As primitiveType can't be changed, it is considered as ForceNew which triggers the deletion of old field and recreation of a new field
            // Before that, we need to check that is_required is True for the newType or not, as we don't have support to add new required field in the existing TagTemplate,
            // So in such cases, we can simply return the error

            // Reason for checking the isRequired in changeNewProp -
            // Because this changeNewProp check should be ignored when the user wants to update the primitive type and make it optional rather than keeping it required.
            if changeNewProp["isRequired"] != nil && changeNewProp["isRequired"].(bool) {
                return fmt.Errorf("Updating the primitive type for a required field on an existing tag template is not supported as TagTemplateField %q is required", name)
            }

            // delete changeOldProp
            err_delete := deleteTagTemplateField(d, config, name, billingProject, userAgent)
            if err_delete != nil {
                return err_delete
            }

            // recreate changeNewProp
            err_create := createTagTemplateField(d, config, changeNewProp, name, billingProject, userAgent)
            if err_create != nil {
                return err_create
            }

            log.Printf("[DEBUG] Finished updating TagTemplate Field %q", name)
            return resourceDataCatalogTagTemplateRead(d, meta)
        }

        res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
            Config: config,
            Method: "PATCH",
            Project: billingProject,
            RawURL: url1,
            UserAgent: userAgent,
            Body: changeNewProp,
            Timeout: d.Timeout(schema.TimeoutDelete),
        })
        if err != nil {
            return fmt.Errorf("Error updating TagTemplate Field %v: %s", name, err)
        }

        log.Printf("[DEBUG] Finished updating TagTemplate Field %q: %#v", name, res)
    }
}