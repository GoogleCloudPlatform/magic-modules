mgmtClusterProp, err := expandVmwareenginePrivateCloudManagementCluster(d.Get("management_cluster"), d, config)
if v, ok := d.GetOkExists("management_cluster"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, mgmtClusterProp)) {
		obj["managementCluster"] = mgmtClusterProp
}

mgmtMap := mgmtClusterProp.(map[string]interface{})
parentUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}VmwareengineBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/privateClouds/{{"{{"}}name{{"}}"}}")
if err != nil {
  return err
}

clusterUrl := fmt.Sprintf("%s/clusters/%s", parentUrl, mgmtMap["clusterId"])
clusterUpdateMask := []string{}
clusterObj := make(map[string]interface{})

if v, ok := d.GetOkExists("management_cluster"); !tpgresource.IsEmptyValue(reflect.ValueOf(mgmtClusterProp)) && (ok || !reflect.DeepEqual(v, mgmtClusterProp)) {
  clusterObj["nodeTypeConfigs"] = mgmtMap["nodeTypeConfigs"]
}

if d.HasChange("management_cluster") {
  clusterUpdateMask = append(clusterUpdateMask, "nodeTypeConfigs.*.nodeCount")
}

clusterPatchUrl, err := transport_tpg.AddQueryParams(clusterUrl, map[string]string{"updateMask": strings.Join(clusterUpdateMask, ",")})
if err != nil {
  return err
}

// check if there is anything to update to avoid API call if not required.
if len(clusterUpdateMask) > 0 {
    res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
      Config:    config,
      Method:    "PATCH",
      Project:   billingProject,
      RawURL:    clusterPatchUrl,
      UserAgent: userAgent,
      Body:      clusterObj,
      Timeout:   d.Timeout(schema.TimeoutUpdate),
    })

    if err != nil {
      return fmt.Errorf("Error updating magament cluster %q: %s", d.Id(), err)
    } else {
      log.Printf("[DEBUG] Finished updating magament cluster %q: %#v", d.Id(), res)
    }

    err = VmwareengineOperationWaitTime(
      config, res, project, "Updating Managment Cluster", userAgent,
      d.Timeout(schema.TimeoutUpdate))

    if err != nil {
      return err
    }
}