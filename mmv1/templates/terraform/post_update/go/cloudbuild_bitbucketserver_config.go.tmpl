if d.HasChange("connected_repositories") {
	o, n := d.GetChange("connected_repositories")
	oReposSet, ok := o.(*schema.Set)
	if !ok {
		return fmt.Errorf("Error reading old connected repositories")
	}
	nReposSet, ok := n.(*schema.Set)
	if !ok {
		return fmt.Errorf("Error reading new connected repositories")
	}

	removeRepos := oReposSet.Difference(nReposSet).List()
	createRepos := nReposSet.Difference(oReposSet).List()

	url, err = tpgresource.ReplaceVars(d, config, "{{"{{"}}CloudBuildBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/bitbucketServerConfigs/{{"{{"}}config_id{{"}}"}}:removeBitbucketServerConnectedRepository")
	if err != nil {
		return err
	}

	// send remove repo requests.
	for _, repo := range removeRepos {
		obj := make(map[string]interface{})
		obj["connectedRepository"] = repo
		_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config: config,
			Method: "POST",
			Project: billingProject,
			RawURL: url,
			UserAgent: userAgent,
			Body: obj,
			Timeout: d.Timeout(schema.TimeoutCreate),
		})
		if err != nil {
			return fmt.Errorf("Error removing connected_repositories: %s", err)
		}
	}

	// if repos to create, prepare and send batchCreate request
	if len(createRepos) > 0 {
		parent, err := tpgresource.ReplaceVars(d, config, "projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/bitbucketServerConfigs/{{"{{"}}config_id{{"}}"}}")
		if err != nil {
			return fmt.Errorf("Error constructing id: %s", err)
		}
		var requests []interface{}
		for _, repo := range createRepos {
			connectedRepo := make(map[string]interface{})
			connectedRepo["parent"] = parent
			connectedRepo["repo"] = repo

			connectedRepoRequest := make(map[string]interface{})
			connectedRepoRequest["parent"] = parent
			connectedRepoRequest["bitbucketServerConnectedRepository"] = connectedRepo

			requests = append(requests, connectedRepoRequest)
		}
		obj = make(map[string]interface{})
		obj["requests"] = requests

		url, err = tpgresource.ReplaceVars(d, config, "{{"{{"}}CloudBuildBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/bitbucketServerConfigs/{{"{{"}}config_id{{"}}"}}/connectedRepositories:batchCreate")
		if err != nil {
			return err
		}

		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config: config,
			Method: "POST",
			Project: billingProject,
			RawURL: url,
			UserAgent: userAgent,
			Body: obj,
			Timeout: d.Timeout(schema.TimeoutCreate),
		})
		if err != nil {
			return fmt.Errorf("Error creating connected_repositories: %s", err)
		}

		err = CloudBuildOperationWaitTime(
			config, res, project, "Updating connected_repositories on BitbucketServerConfig", userAgent,
			d.Timeout(schema.TimeoutUpdate))
		if err != nil {
			return fmt.Errorf("Error waiting to create connected_repositories: %s", err)
		}
	}
} else {
	log.Printf("[DEBUG] connected_repositories have no changes")
}
