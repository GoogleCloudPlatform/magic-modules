// Manage stopping and resuming a mirror

var obj2 map[string]interface{}
do_change := false
var action string
var targetState string
// state transitions
// there can be a glitch is a transfer starts/ends between reading mirrorState
// and sending the action. This will be very rare. No workaround.
if d.Get("replication_enabled").(bool) == true {
	switch d.Get("mirror_state").(string) {
	case "STOPPED":
		// replication_enabled==true, mirrorState==STOPPED -> resume
		action = "resume"
		targetState = "MIRRORED"
		do_change = true
	default:
		// replication_enabled==true, mirrorState!=STOPPED -> NOOP
		do_change = false
	}
} else {
	switch d.Get("mirror_state").(string) {
	case "MIRRORED":
		// replication_enabled==false, mirrorState==MIRRORED -> stop
		action = "stop"
		targetState = "STOPPED"
		do_change = true
	case "TRANSFERRING":
		// replication_enabled==false, mirrorState==TRANSFERRING -> force stop
		// User needs to add force_stopping = true, otherwise will receive error
		action = "stop"
		targetState = "STOPPED"
		do_change = true
	case "PREPARING":
		// replication_enabled==false, mirrorState==PREPARING -> stop
		// Currently cannot be stopped. User will receive following error:
		// Error code 3, message: invalid request error: "Replication in preparing state. Please wait until replication is in 'READY' STATE and try again later.".
		// User needs to wait until mirrorState=MIRRORED
		action = "stop"
		targetState = "STOPPED"
		do_change = true
	default:
		// replication_enabled==false, mirrorState==STOPPED -> NOOP
		do_change = false
	}

	if do_change == true && d.Get("force_stopping").(bool) == true {
		obj2 = map[string]interface{}{
			"force": true,
		}
	}
}

if do_change {
	// We need to send STOP/RESUME API calls
	rawurl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}NetappBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/volumes/{{"{{"}}volume_name{{"}}"}}/replications/{{"{{"}}name{{"}}"}}:"+action)
	if err != nil {
		return err
	}

	res2, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    rawurl,
		UserAgent: userAgent,
		Body:      obj2,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})
	if err != nil {
		return fmt.Errorf("Error stopping/resuming replication %q: %s", d.Id(), err)
	}

	err = NetappOperationWaitTime(
		config, res2, project, "volume replication "+action, userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	// If user specified to wait for mirror operations, wait to reach target state
	if d.Get("wait_for_mirror").(bool) == true {
		err = NetAppVolumeReplicationWaitForMirror(d, meta, targetState)
		if err != nil {
			return fmt.Errorf("Error waiting for volume replication to reach mirror_state==%s: %s", targetState, err)
		}
	}
}
