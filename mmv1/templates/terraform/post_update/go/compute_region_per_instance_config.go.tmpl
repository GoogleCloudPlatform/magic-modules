// Instance name in applyUpdatesToInstances request must include zone
instanceName, err := findInstanceName(d, config)
if err != nil {
	return err
}

obj = make(map[string]interface{})
obj["instances"] = []string{instanceName}

minAction := d.Get("minimal_action")
if minAction == "" {
	minAction = "NONE"
}
obj["minimalAction"] = minAction

mostDisruptiveAction := d.Get("most_disruptive_allowed_action")
if tpgresource.IsEmptyValue(reflect.ValueOf(mostDisruptiveAction)) {
	mostDisruptiveAction = "REPLACE"
}
obj["mostDisruptiveAllowedAction"] = mostDisruptiveAction

url, err = tpgresource.ReplaceVars(d, config, "{{"{{"}}ComputeBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/regions/{{"{{"}}region{{"}}"}}/instanceGroupManagers/{{"{{"}}region_instance_group_manager{{"}}"}}/applyUpdatesToInstances")
if err != nil {
	return err
}

log.Printf("[DEBUG] Applying updates to PerInstanceConfig %q: %#v", d.Id(), obj)
res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config: config,
	Method: "POST",
	Project: project,
	RawURL: url,
	UserAgent: userAgent,
	Body: obj,
	Timeout: d.Timeout(schema.TimeoutUpdate),
})

if err != nil {
	return fmt.Errorf("Error updating PerInstanceConfig %q: %s", d.Id(), err)
}

err = ComputeOperationWaitTime(
	config, res, project, "Applying update to PerInstanceConfig", userAgent,
	d.Timeout(schema.TimeoutUpdate))

if err != nil {
	return err
}