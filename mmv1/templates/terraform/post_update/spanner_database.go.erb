enableDropProtection, enableDropProtectionOk := d.GetOk("enable_drop_protection")
dropProtection := enableDropProtection.(bool)
if d.HasChange("enable_drop_protection") {
	updateMask := []string{"enableDropProtection"}
	url, err := tpgresource.ReplaceVars(d, config, "{{SpannerBasePath}}projects/{{project}}/instances/{{instance}}/databases/{{name}}")
	if err != nil {
		return err
	}
	// updateMask is a URL parameter but not present in the schema, so ReplaceVars
	// won't set it
	url, err = transport_tpg.AddQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}
	res, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config: config,
		Method: "PATCH",
		Project: billingProject,
		RawURL: url,
		UserAgent: userAgent,
		Body: obj,
		Timeout: d.Timeout(schema.TimeoutUpdate),
	})
	if err != nil {
		return fmt.Errorf("Error updating enableDropDatabaseProtection on Database: %s", err)
	} else {
		log.Printf("[DEBUG] Finished updating enableDropDatabaseProtection %q: %#v", d.Id(), res)
	}
}
