}


// since fields have a separate endpoint,
// we need to handle it manually

type FieldChange struct {
    Old, New map[string]interface{}
}

o, n := d.GetChange("fields")
vals := make(map[string]*FieldChange)

// this will create a dictionary with the value
// of field_id as the key that will contain the
// maps of old and new values
for _, raw := range o.(*schema.Set).List() {
    obj := raw.(map[string]interface{})
    k := obj["field_id"].(string)
    vals[k] = &FieldChange{Old: obj}
}

for _, raw := range n.(*schema.Set).List() {
    obj := raw.(map[string]interface{})
    k := obj["field_id"].(string)
    if _, ok := vals[k]; !ok {
        // if key is not present in the vals,
        // then create an empty object to hold the new value
        vals[k] = &FieldChange{}
    }
    vals[k].New = obj
}

// fields schema to create schema.set below
dataCatalogTagTemplateFieldsSchema := &schema.Resource{
    Schema: resourceDataCatalogTagTemplate().Schema["fields"].Elem.(*schema.Resource).Schema,
}

for name, change := range vals {
    // A few different situations to deal with in here:
    // - change.Old is nil: create a new role
    // - change.New is nil: remove an existing role
    // - both are set: test if New is different than Old and update if not

    changeOldSet := schema.NewSet(schema.HashResource(dataCatalogTagTemplateFieldsSchema), []interface{}{})
    changeOldSet.Add(change.Old)
    var changeOldProp map[string]interface{}
    if len(change.Old) != 0 {
        changeOldProp, _ = expandDataCatalogTagTemplateFields(changeOldSet, nil, nil)
        changeOldProp = changeOldProp[name].(map[string]interface{})
    }

    changeNewSet := schema.NewSet(schema.HashResource(dataCatalogTagTemplateFieldsSchema), []interface{}{})
    changeNewSet.Add(change.New)
    var changeNewProp map[string]interface{}
    if len(change.New) != 0 {
        changeNewProp, _ = expandDataCatalogTagTemplateFields(changeNewSet, nil, nil)
        changeNewProp = changeNewProp[name].(map[string]interface{})
    }

    // if old state is empty, then we have a new field to create
    if len(change.Old) == 0 {
        url1, err := replaceVars(d, config, "{{DataCatalogBasePath}}{{name}}/fields")
        if err != nil {
            return err
        }

        url1, err = addQueryParams(url1, map[string]string{"tagTemplateFieldId": name})
        if err != nil {
            return err
        }

        res, err := sendRequestWithTimeout(config, "POST", billingProject, url1, userAgent, changeNewProp, d.Timeout(schema.TimeoutCreate))
        if err != nil {
            return fmt.Errorf("Error creating TagTemplate Field: %s", err)
        }

        if err != nil {
            return fmt.Errorf("Error creating TagTemplate Field %v: %s", name, err)
        } else {
            log.Printf("[DEBUG] Finished creating TagTemplate Field %v: %#v", name, res)
        }
        continue
    }

    // if new state is empty, then we need to delete the current field
    if len(change.New) == 0 {
        url1, err := replaceVars(d, config, "{{DataCatalogBasePath}}{{name}}/fields/"+name+"?force={{force_delete}}")
        if err != nil {
            return err
        }

        var obj map[string]interface{}
        res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url1, userAgent, obj, d.Timeout(schema.TimeoutDelete))
        if err != nil {
            return fmt.Errorf("Error deleting TagTemplate Field %v: %s", name, err)
        }

        log.Printf("[DEBUG] Finished deleting TagTemplate Field %q: %#v", name, res)

        continue
    }

    // if we have old and new values, but are not equal, update with the new state
    if !reflect.DeepEqual(changeOldProp, changeNewProp) {
        url1, err := replaceVars(d, config, "{{DataCatalogBasePath}}{{name}}/fields/"+name)
        if err != nil {
            return err
        }

        res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url1, userAgent, changeNewProp, d.Timeout(schema.TimeoutDelete))
        if err != nil {
            return fmt.Errorf("Error updating TagTemplate Field %v: %s", name, err)
        }

        log.Printf("[DEBUG] Finished updating TagTemplate Field %q: %#v", name, res)
    }
}