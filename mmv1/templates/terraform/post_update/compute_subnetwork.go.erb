if v, ok := d.GetOk("send_secondary_ip_range_if_empty"); ok && v.(bool) {
	if sv, ok := d.GetOk("secondary_ip_range"); ok {
		configValue := d.GetRawConfig().GetAttr("secondary_ip_range")
		stateValue := sv.([]interface{})
		if configValue.LengthInt() == 0 && len(stateValue) != 0 {
			log.Printf("[DEBUG] Sending empty secondary_ip_range in update")
			obj := make(map[string]interface{})
			obj["secondaryIpRanges"] = make([]interface{}, 0)

			// The rest is the same as the secondary_ip_range generated update code
			// without the secondaryIpRangesProp logic

			getUrl, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/regions/{{region}}/subnetworks/{{name}}")
			if err != nil {
				return err
			}

			// err == nil indicates that the billing_project value was found
			if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
				billingProject = bp
			}

			getRes, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    getUrl,
				UserAgent: userAgent,
			})
			if err != nil {
				return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ComputeSubnetwork %q", d.Id()))
			}

			obj["fingerprint"] = getRes["fingerprint"]

			url, err := tpgresource.ReplaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/regions/{{region}}/subnetworks/{{name}}")
			if err != nil {
				return err
			}

			headers := make(http.Header)

			// err == nil indicates that the billing_project value was found
			if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
				billingProject = bp
			}

			res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "PATCH",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: userAgent,
				Body:      obj,
				Timeout:   d.Timeout(schema.TimeoutUpdate),
				Headers:   headers,
			})
			if err != nil {
				return fmt.Errorf("Error updating Subnetwork %q: %s", d.Id(), err)
			} else {
				log.Printf("[DEBUG] Finished updating Subnetwork %q: %#v", d.Id(), res)
			}

			err = ComputeOperationWaitTime(
				config, res, project, "Updating Subnetwork", userAgent,
				d.Timeout(schema.TimeoutUpdate))
			if err != nil {
				return err
			}
		}
	}
}