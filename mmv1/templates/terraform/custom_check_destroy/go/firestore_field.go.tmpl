// Firestore fields are not deletable. We consider the field deleted if:
// 1) the index configuration has no overrides and matches the ancestor configuration.
// 2) the ttl configuration is unset.

config := acctest.GoogleProviderConfig(t)

url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{"{{"}}FirestoreBasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/databases/{{"{{"}}database{{"}}"}}/collectionGroups/{{"{{"}}collection{{"}}"}}/fields/{{"{{"}}field{{"}}"}}")
if err != nil {
  return err
}

res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
	Config: config,
	Method: "GET",
	RawURL: url,
	UserAgent: config.UserAgent,
})
if err != nil {
	e := err.(*googleapi.Error)
	if e.Code == 403 && strings.Contains(e.Message, "Cloud Firestore API has not been used in project") {
		// The acceptance test has provisioned the resources under test in a new project, and the destory check is seeing the
		// effects of the project not existing. This means the service isn't enabled, and that the resource is definitely destroyed.
		// We do not return the error in this case - destroy was successful
		return nil
	}

	// Return err in all other cases
	return err
}

if v := res["indexConfig"]; v != nil {
	indexConfig := v.(map[string]interface{})

	usesAncestorConfig, ok := indexConfig["usesAncestorConfig"].(bool)

	if !ok || !usesAncestorConfig {
		return fmt.Errorf("Index configuration is not using the ancestor config %s.", url)
	}
}

if res["ttlConfig"] != nil {
	return fmt.Errorf("TTL configuration was not deleted at %s.", url)
}
