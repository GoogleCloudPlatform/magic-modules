<%=lines(autogen_notice(:go, pwd))-%>

package cai2hcl

import (
<%- 
	# We list all the v2 imports here and unstable imports, because we run 'goimports' to guess the correct
    # set of imports, which will never guess the major version correctly.
-%>
  "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
  "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
  "google.golang.org/api/compute/v1"
  transport_tpg "github.com/hashicorp/terraform-provider-google/google/transport"
)

<%
    resource_name = product_ns + object.name
    properties = object.all_user_properties
    # See discussion on asset name here: https://github.com/GoogleCloudPlatform/magic-modules/pull/1520
    product_backend_name=@base_url.split('://')[1].split('.googleapis.com')[0]
		cai_base_url = nil
		if object.cai_base_url
			cai_base_url = object.cai_base_url + '/{{name}}'
		end
    asset_name_template = '//' + product_backend_name.downcase + '.googleapis.com/' + (cai_base_url || object.self_link || object.base_url + '/{{name}}')
    version_regex = /\/(v\d[^\/]*)\//
    api_version = version_regex.match?(asset_name_template) ? version_regex.match(asset_name_template)[1] : @base_url.split("/")[-1]
    asset_name_template.gsub!(version_regex, '/')

    converter_name = resource_name + 'Converter'
	api_type = "compute." + object.name
%>

<%=lines(compile(pwd + '/' + object.custom_code.constants)) if object.custom_code.constants-%>

const <%=resource_name-%>AssetType string = "<%=product_backend_name.downcase-%>.googleapis.com/<%=object.name-%>"

type <%=converter_name-%> struct {
	name   string
	schema map[string]*Schema
}

func New<%=converter_name-%>(name string) Converter {
	return &<%=converter_name-%>{
		name:   name,
		schema: schemaProvider.ResourcesMap[name].Schema,
	}
}

func (c *<%=converter_name-%>) Convert(assets []*caiasset.Asset) ([]*HCLResourceBlock, error) {
	var blocks []*HCLResourceBlock
	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *<%=converter_name-%>) convertResourceData(asset *caiasset.Asset) (*HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	var resource *<%=api_type-%>

	if err := decodeJSON(asset.Resource.Data, &resource); err != nil {
		return nil, err
	}

    hcl, _ := resource<%=resource_name-%>Read(resource)

	ctyVal, err := mapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}
	return &HCLResourceBlock{
		Labels: []string{c.name, resource.Name},
		Value:  ctyVal,
	}, nil
}

func resource<%=resource_name-%>Read(res *<%=api_type-%>) (map[string]interface{}, error) {
    result := make(map[string]interface{})
	config := meta.(*transport_tpg.Config)

<%  object.gettable_properties.reject{|p| p.ignore_read }.each do |prop|-%>
<%    if prop.flatten_object-%>
    if flattenedProp := flatten<%="Nested" if object.nested_query-%><%=resource_name-%><%=titlelize_property(prop)-%>(res.<%=titlelize_property(prop)-%>); flattenedProp != nil {
        if gerr, ok := flattenedProp.(*googleapi.Error); ok {
			return fmt.Errorf("Error reading <%=object.name-%>: %s", gerr)
		}
        casted := flattenedProp.([]interface{})[0]
        if casted != nil {
            for k, v := range casted.(map[string]interface{}) {
                result[k] = v
            }
        }
    }
<%    else-%>
    result["<%=prop.name.underscore-%>"] = flatten<%="Nested" if object.nested_query-%><%=resource_name-%><%=titlelize_property(prop)-%>(res.<%=titlelize_property(prop)-%>, config)
<%    end-%>
<%  end-%>

<%  if object.has_self_link-%>
    result["self_link"] = ConvertSelfLinkToV1(res.SelfLink)
<%  end-%>

    return result, nil
}

<%- nested_prefix = object.nested_query ? "Nested" : ""-%>
<% object.gettable_properties.reject(&:ignore_read).each do |prop|-%>
<%=lines(build_flatten_method(nested_prefix+resource_name, prop, object, pwd), 1)-%>
<% end-%>

