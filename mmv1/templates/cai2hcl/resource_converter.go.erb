<%=lines(autogen_notice(:go, pwd))-%>

package <%= product_ns.downcase -%>

<%# "goimports" is used to remove unreferenced imports %>
import (
    "fmt"
    "log"
    "reflect"
    "time"
    "regexp"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/customdiff"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/structure"
    "github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
    "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
    "github.com/hashicorp/terraform-plugin-sdk/v2/helper/logging"
    tpg "<%= import_path() -%>"
    "<%= import_path() -%>/tpgresource"
    transport_tpg "<%= import_path() -%>/transport"
    "<%= import_path() -%>/verify"
   "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
   "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
)

<%
    resource_name = product_ns + object.name
    
	properties = object.all_user_properties

    product_backend_name=@base_url.split('://')[1].split('.googleapis.com')[0]

    converter_name = resource_name + 'Converter'
%>

<%=lines(compile(pwd + '/' + object.custom_code.constants)) if object.custom_code.constants-%>

const <%=resource_name-%>AssetType string = "<%=product_backend_name.downcase-%>.googleapis.com/<%=object.name-%>"

const <%=resource_name-%>AssetNameRegex string = "<%=format2regex(object.base_url)-%>"

type <%=converter_name-%> struct {
	name   string
	schema map[string]*schema.Schema
}

func New<%=converter_name-%>(name string, schema map[string]*schema.Schema) common.Converter {
	return &<%=converter_name-%>{
		name:   name,
		schema: schema,
	}
}

func (c *<%=converter_name-%>) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *<%=converter_name-%>) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data
	
    hcl, _ := resource<%=resource_name-%>Read(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}
    
    <%# TODO: use a more reliable way to identify the resource name. %>
    resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resource<%=resource_name-%>Read(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
    result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

    <%# TODO: include "ignore_read:true" properties as well. %>
<%  object.gettable_properties.reject{|p| p.ignore_read }.each do |prop|-%>
<%    if prop.flatten_object-%>
    if flattenedProp := flatten<%="Nested" if object.nested_query-%><%=resource_name-%><%=titlelize_property(prop)-%>(resource["<%= prop.api_name -%>"], resource_data, config); flattenedProp != nil {
        if gerr, ok := flattenedProp.(*googleapi.Error); ok {
			return nil, fmt.Errorf("Error reading <%=object.name-%>: %s", gerr)
		}
        casted := flattenedProp.([]interface{})[0]
        if casted != nil {
            for k, v := range casted.(map[string]interface{}) {
                result[k] = v
            }
        }
    }
<%    else-%>
    result["<%=prop.name.underscore-%>"] = flatten<%="Nested" if object.nested_query-%><%=resource_name-%><%=titlelize_property(prop)-%>(resource["<%= prop.api_name -%>"], resource_data, config)
<%    end-%>
<%  end-%>

    return result, nil
}

<%- nested_prefix = object.nested_query ? "Nested" : ""-%>
<% object.gettable_properties.reject(&:ignore_read).each do |prop|-%>
<%=lines(build_flatten_method(nested_prefix+resource_name, prop, object, pwd), 1)-%>
<% end-%>