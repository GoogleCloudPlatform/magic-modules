<%= lines(autogen_notice :go) -%>

package azurerm

<%
    resource_name = "Arm" + object.name
    sdk_package = object.azure_sdk_definition.go_client_namespace
    sdk_operation = object.azure_sdk_definition.read

    properties = object.all_user_properties
    schema_properties = properties.reject{|p| p.name == 'id' || get_property_value(p, 'hide_from_schema', false)}
    input_properties = properties.reject{|p| get_applicable_reference(p.azure_sdk_references, sdk_operation.request).nil?}

    flatten_queue = Array.new
    sdktype = Provider::Azure::Terraform::SDK::TypeDefinitionDescriptor.new sdk_operation, false
    sdk_marshal = Provider::Azure::Terraform::SDK::MarshalDescriptor.new sdk_package, resource_name, flatten_queue, sdktype, schema_properties
-%>

func dataSource<%= resource_name -%>() *schema.Resource {
    return &schema.Resource{
        Read: dataSource<%= resource_name -%>Read,

        Schema: map[string]*schema.Schema{<% # This block will remove the line-ending here -%>
<%  order_azure_properties(schema_properties, input_properties).each do |prop| -%>
<%=   lines_before(build_azure_schema_property(prop, object, 12, input_properties)) -%>

<%  end -%>
<%= lines(compile(object.custom_code.extra_schema_entry)) if object.custom_code.extra_schema_entry -%>
        },
    }
}

func dataSource<%= resource_name -%>Read(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).<%= lines(object.azure_sdk_definition.go_client) -%>
    ctx := meta.(*ArmClient).StopContext

<%  input_properties.sort_by{|p| [p.order, p.name]}.each do |prop| -%>
<%    var_name = get_sdk_typedef_by_references(prop.azure_sdk_references, sdk_operation.request).go_variable_name -%>
<%    output_var = var_name || prop.name.camelcase(:lower) -%>
<%=   lines(build_schema_property_get('d', output_var, prop, sdk_marshal, 4)) -%>
<%  end -%>

    resp, err := <%= lines(build_sdk_func_invocation(sdk_operation)) -%>
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            return <%= lines(build_errorf_with_resource_name("Error: %s was not found", false, sdk_operation, schema_properties, object)) -%>
        }
        return <%= lines(build_errorf_with_resource_name("Error reading %s", true, sdk_operation, schema_properties, object)) -%>
    }

    d.SetId(*resp.ID)

<%= lines(compile_template(object.custom_code.post_read, indentation: 4)) if object.custom_code.respond_to?(:post_read) && object.custom_code.post_read -%>

<%= lines(build_sdk_object_to_property('resp', 'd', sdk_marshal)) -%>

    return nil
}