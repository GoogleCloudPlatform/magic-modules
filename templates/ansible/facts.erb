#!/usr/bin/python
#
# Copyright (C) 2019 <%= lines(@config.manifest.get('author', object)) -%>
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

<%= lines(autogen_notice :python) -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

<%
  metadata_version = quote_string(@config.manifest.get('metadata_version',
                                                       object))
  supported_by = quote_string(@config.manifest.get('supported_by', object))

  uri_props = object.uri_properties.reject { |para| para.nil? || para.name == 'name' }
-%>
<%
    python_sdk_client = object.azure_sdk_definition.python_client.split(".")[0]
    python_sdk_sub_client = object.azure_sdk_definition.python_client.split(".")[1]

    input_properties = object.all_user_properties.reject{|p| p.output || get_applicable_reference(p.azure_sdk_references, object.azure_sdk_definition.read.request).nil?}.sort_by{|p| [p.order, p.name]}
    output_properties = object.all_user_properties.sort_by{|p| [p.order, p.name]}
-%>
ANSIBLE_METADATA = {'metadata_version': <%= metadata_version -%>,
                    'status': <%= @config.manifest.get('status', object) -%>,
                    'supported_by': <%= supported_by -%>}

DOCUMENTATION = '''
---
module: <%= module_name(object) -%>_info
version_added: "<%= @config.manifest.get('version_added', object).to_f -%>"
short_description: Gather info for Azure <%= lines(object.name.titlecase) -%>
description:
    - Gather info for Azure <%= object.name.titlecase -%>.

<%
    if is_tags_defined?(object)
      tags_prop = get_tags_property(object).clone
      tags_prop.instance_variable_set(:@description, "Limit results by providing a list of tags. Format tags as 'key' or 'key:value'.")
    end
-%>
<%= to_yaml({
  'options' => [
    input_properties.map{|p| documentation_for_property(p, object)},
    (documentation_for_property(tags_prop, object) if is_tags_defined?(object))
  ].flatten.compact.reduce({}, :merge)
}) -%>

extends_documentation_fragment:
    - azure

author:
    - "<%= @config.manifest.get('author', object) -%>"
'''

<%  unless object.examples.empty? -%>
<%    code = object.examples.map{|exref| lines(build_documentation_yaml_from_example(exref))} -%>
EXAMPLES = '''
<%=   lines(indent(code.join("\n"), 2)) -%>
'''
<% end -%>

RETURN = '''
<%= lines(word_wrap_for_yaml(to_yaml({
  'items' => {
    'description' => 'List of items',
    'returned' => 'always',
    'type' => 'complex',
    'contains' => output_properties.map{|p| returns_for_property(p, object)}.reduce({}, :merge)
  }
}).split("\n"))) -%>
'''

from ansible.module_utils.azure_rm_common import AzureRMModuleBase

try:
    from msrestazure.azure_exceptions import CloudError
    from <%= object.azure_sdk_definition.python_client_namespace -%> import <%= lines(python_sdk_client) -%>
    from msrest.serialization import Model
except ImportError:
    # This is handled in azure_rm_common
    pass


class AzureRM<%= object.name -%>Info(AzureRMModuleBase):
    def __init__(self):
        # define user inputs into argument
        self.module_arg_spec = dict(
<%= indent_list(input_properties.map{|p| python_dict_for_property(p, object)}, 12, false) -%>
<%= ",\n" + indent(python_dict_for_property(get_tags_property(object), object), 12) if is_tags_defined?(object) -%>
<%= "\n" -%>        )
        # store the results of the module operation
        self.results = dict(
            changed=False
        )
        self.mgmt_client = None
<%= lines(build_class_instance_variable_init(object.azure_sdk_definition.read, object)) -%>
        super(AzureRM<%= object.name -%>Info, self).__init__(self.module_arg_spec, supports_tags=False)

    def exec_module(self, **kwargs):
        for key in self.module_arg_spec:
            setattr(self, key, kwargs[key])
        self.mgmt_client = self.get_mgmt_svc_client(<%= python_sdk_client -%>,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

<%
    support_subs = !object.azure_sdk_definition.list_by_subscription.nil?
    support_rgs = !object.azure_sdk_definition.list_by_resource_group.nil?
-%>
<%  if support_subs && support_rgs -%>
        if self.resource_group is not None and self.name is not None:
          self.results['items'] = self.get()
        elif self.resource_group is not None:
          self.results['items'] = self.list_by_resource_group()
        else:
          self.results['items'] = self.list_by_subscription()
<%  else -%>
        # TODO: Implement more info list here
<%  end -%>
        return self.results

<%  sdk_operation = object.azure_sdk_definition.read -%>
    def get(self):
        response = None
        results = []
        try:
<%= lines(build_sdk_method_invocation(python_sdk_sub_client, sdk_operation)) -%>
            self.log("Response : {0}".format(response))
        except CloudError as e:
            self.log('Could not get info for <%= object.name.titlecase -%>.')

<%  if is_tags_defined?(object) -%>
        if response and self.has_tags(response.tags, self.tags):
            results.append(self.format_response(response))
<%  else -%>
        # TODO: Implement format response without tags
<%  end -%>

        return results

<%  sdk_operation = object.azure_sdk_definition.list_by_resource_group -%>
<%  unless sdk_operation.nil? -%>
    def list_by_resource_group(self):
        response = None
        results = []
        try:
<%= lines(build_sdk_method_invocation(python_sdk_sub_client, sdk_operation)) -%>
            self.log("Response : {0}".format(response))
        except CloudError as e:
            self.log('Could not get info for <%= object.name.titlecase -%>.')

        if response is not None:
            for item in response:
<%    if is_tags_defined?(object) -%>
                if self.has_tags(item.tags, self.tags):
                    results.append(self.format_response(item))
<%    else -%>
                # TODO: Implement format response without tags
<%    end -%>

        return results
<%  end -%>

<%  sdk_operation = object.azure_sdk_definition.list_by_subscription -%>
<%  unless sdk_operation.nil? -%>
    def list_by_subscription(self):
        response = None
        results = []
        try:
<%= lines(build_sdk_method_invocation(python_sdk_sub_client, sdk_operation)) -%>
            self.log("Response : {0}".format(response))
        except CloudError as e:
            self.log('Could not get info for <%= object.name.titlecase -%>.')

        if response is not None:
            for item in response:
<%    if is_tags_defined?(object) -%>
                if self.has_tags(item.tags, self.tags):
                    results.append(self.format_response(item))
<%    else -%>
                # TODO: Implement format response without tags
<%    end -%>

        return results
<%  end -%>

<%  sdk_operation = object.azure_sdk_definition.read -%>
    def format_response(self, item):
        d = item.as_dict()
        d = {
<%  output_properties.each do |prop| -%>
<%=   lines(build_property_inline_response_format(prop, sdk_operation)) -%>
<%  end -%>
        }
        return d


def main():
    AzureRM<%= object.name -%>Info()


if __name__ == "__main__":
    main()
