#!/usr/bin/python
#
# Copyright (C) 2019 <%= lines(@config.manifest.get('author', object)) -%>
#
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

<%= lines(autogen_notice :python) -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

<%
  metadata_version = quote_string("1.1")
  supported_by = quote_string("community")

  uri_props = uri_properties_raw(object).reject { |para| para.nil? || para.name == 'name' }
-%>
<%
    python_sdk_client = object.azure_sdk_definition.python_client.split(".")[0]
    python_sdk_sub_client = object.azure_sdk_definition.python_client.split(".")[1]

    input_properties = object.all_user_properties.reject{|p| p.output || get_applicable_reference(p.azure_sdk_references, object.azure_sdk_definition.read.request).nil?}.sort_by{|p| [p.order, p.name]}
    output_properties = object.all_user_properties.sort_by{|p| [p.order, p.name]}
-%>
ANSIBLE_METADATA = {'metadata_version': <%= metadata_version -%>,
                    'status': ["preview"],
                    'supported_by': <%= supported_by -%>}

DOCUMENTATION = '''
---
module: <%= module_name(object) -%>_info
version_added: "<%= @config.manifest.get('version_added', object).to_f -%>"
short_description: Gather info for Azure <%= lines(object.name.titlecase) -%>
description:
    - Gather info for Azure <%= object.name.titlecase -%>.

<%= to_yaml({
<<<<<<< HEAD
=======
  'module' => "#{module_name(object)}_facts",
  'description' => ["Gather facts for GCP #{object.name}"],
  'short_description' => "Gather facts for GCP #{object.name}",
  'version_added' => version_added(object, :facts).to_f,
  'author' => "Google Inc. (@googlecloudplatform)",
  'requirements' => ["python >= 2.6", "requests >= 2.18.4", "google-auth >= 1.3.0"],
>>>>>>> master
  'options' => [
    input_properties.map{|p| documentation_for_property(p, object)},
    (documentation_for_property(get_tags_property(object), object) if is_tags_defined?(object))
  ].flatten.compact.reduce({}, :merge)
})-%>

extends_documentation_fragment:
    - azure

author:
    - "<%= @config.manifest.get('author', object) -%>"
'''

<%  unless object.examples.empty? -%>
<%    code = object.examples.map{|exref| lines(build_documentation_yaml_from_example(get_example_by_reference(exref)))} -%>
EXAMPLES = '''
<%=   lines(indent(code.join("\n"), 2)) -%>
'''
<% end -%>

RETURN = '''
<%= to_yaml({
  'resources' => {
    'description' => 'List of resources',
    'returned' => 'always',
    'type' => 'complex',
    'contains' => output_properties.map{|p| returns_for_property(p, object)}.reduce({}, :merge)
  }
})-%>
'''

<<<<<<< HEAD
from ansible.module_utils.azure_rm_common import AzureRMModuleBase

try:
    from msrestazure.azure_exceptions import CloudError
    from <%= object.azure_sdk_definition.python_client_namespace -%> import <%= python_sdk_client -%>
    from msrest.serialization import Model
except ImportError:
    # This is handled in azure_rm_common
    pass


class AzureRM<%= object.name -%>Info(AzureRMModuleBase):
    def __init__(self):
        # define user inputs into argument
        self.module_arg_spec = dict(
<%= indent_list(input_properties.map{|p| python_dict_for_property(p, object)}, 12, false) -%>
<%= ",\n" + indent(python_dict_for_property(get_tags_property(object), object), 12) if is_tags_defined?(object) -%>
<%= "\n" -%>        )
        # store the results of the module operation
        self.results = dict(
            changed=False
        )
        self.mgmt_client = None
<%= lines(build_class_instance_variable_init(object.azure_sdk_definition.read, object)) -%>
<%= lines(indent('self.tags = None', 8)) if is_tags_defined?(object) -%>
        super(AzureRM<%= object.name -%>Info, self).__init__(self.module_arg_spec, supports_tags=False)

    def exec_module(self, **kwargs):
        for key in self.module_arg_spec:
            setattr(self, key, kwargs[key])
        self.mgmt_client = self.get_mgmt_svc_client(<%= python_sdk_client -%>,
                                                    base_url=self._cloud_environment.endpoints.resource_manager)

        if (self.name):
            self.results['items'] = self.get()
        else:
            self.results['items'] = self.list()
        return self.results

<%  sdk_operation = object.azure_sdk_definition.read -%>
    def get(self):
        response = None
        results = []
        try:
<%= lines(build_sdk_method_invocation(python_sdk_sub_client, sdk_operation)) -%>
            self.log("Response : {0}".format(response))
        except CloudError as e:
            self.log('Could not get info for <%= object.name.titlecase -%>.')

<%  if is_tags_defined?(object) -%>
        if response and self.has_tags(response.tags, self.tags):
            results.append(self.format_response(response))
<%  else -%>
        # TODO: Implement format response without tags
<%  end -%>

        return results

<%  sdk_operation = object.azure_sdk_definition.list_by_rg -%>
<%  unless sdk_operation.nil? -%>
    def list(self):
        response = None
        results = []
        try:
<%= lines(build_sdk_method_invocation(python_sdk_sub_client, sdk_operation)) -%>
            self.log("Response : {0}".format(response))
        except CloudError as e:
            self.log('Could not get info for <%= object.name.titlecase -%>.')

        if response is not None:
            for item in response:
<%    if is_tags_defined?(object) -%>
                if self.has_tags(item.tags, self.tags):
                    results.append(self.format_response(item))
<%    else -%>
                # TODO: Implement format response without tags
<%    end -%>

        return results
<%  end -%>

<%  sdk_operation = object.azure_sdk_definition.read -%>
    def format_response(self, item):
        d = item.as_dict()
        d = {
<%  output_properties.each do |prop| -%>
<%    py_var = python_variable_name(prop, object.azure_sdk_definition.create) -%>
<%    py_fields = [] -%>
<%    sdk_ref = get_applicable_reference(prop.azure_sdk_references, sdk_operation.response) -%>
<%    unless sdk_ref.nil? -%>
<%      sdk_refs = sdk_ref.split('/').reject(&:empty?) -%>
<%      sdk_ref = '' -%>
<%      sdk_refs.each do |ref| -%>
<%        sdk_ref += '/' + ref -%>
<%        sdk_type_def = sdk_operation.response[sdk_ref] -%>
<%        py_fields <<= sdk_type_def.python_field_name || prop.name.underscore -%>
<%      end -%>
<%    end -%>
<%    access_chain = py_fields.map{|f| "['#{f}']"}.join -%>
            '<%= py_var -%>': <%= py_fields.empty? ? "self.#{py_var}" : "d#{access_chain}" -%>,
<%  end -%>
        }
        return d
=======
################################################################################
# Imports
################################################################################
<%
  import = 'from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequest'
  import += ', replace_resource_dict' unless uri_props.select { |p| p.is_a?(Api::Type::ResourceRef) && !p.resource_ref.readonly }.empty?
-%>
<%= lines(import) -%>
import json

################################################################################
# Main
################################################################################


def main():
<%
  mod_props = object.facts.has_filters ? [object.facts.filter] : []
  mod_props += uri_props
-%>
    module = GcpModule(
<%=
  indent(remove_outside_dict(python_literal({
    'argument_spec'=> ansible_module(mod_props),
  })), 12)
-%>
    )

    if not module.params['scopes']:
        module.params['scopes'] = <%= python_literal(object.__product.scopes) %>

<%
  query_param = nil
  if object.facts.has_filters
    if object.facts.query_options
      query_param = "query_options(module.params['#{object.facts.filter.name}'])"
    else
      query_param = "module.params['#{object.facts.filter.name.underscore}']"
    end
  end
-%>
    items = <%= method_call('fetch_list', ['module', 'collection(module)', query_param]) %>
    if items.get(<%= quote_string(object.collection_url_key) -%>):
        items = items.get(<%= quote_string(object.collection_url_key) -%>)
    else:
        items = []
    return_value = {
        'resources': items
    }
    module.exit_json(**return_value)


<%= lines(emit_link('collection', build_url(object.collection_url), object)) -%>


<%= method_decl('fetch_list', ['module', 'link', ('query' if object.facts.has_filters)]) %>
<% prod_name = object.__product.api_name -%>
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
    response = <%= method_call('auth.get', ['link', ("params={'#{object.facts.filter_api_param}': query}" if object.facts.has_filters)]) %>
    return return_if_object(module, response)


<% if object.facts.has_filters && object.facts.query_options -%>
def query_options(filters):
    if not filters:
        return ''

    if len(filters) == 1:
        return filters[0]
    else:
        queries = []
        for f in filters:
            # For multiple queries, all queries should have ()
            if f[0] != '(' and f[-1] != ')':
                queries.append("(%s)" % ''.join(f))
            else:
                queries.append(f)

        return ' '.join(queries)
>>>>>>> master


def main():
    AzureRM<%= object.name -%>Info()


if __name__ == "__main__":
    main()
