<% if object.async -%>
<%
  stat_path = path2navigate(object.async.status.path)
  res_path = path2navigate(object.async.result.path)
-%>

<%= lines(emit_link('async_op_url', async_operation_url(object), true), 2) -%>
def wait_for_operation(module, response):
<% if object.kind? -%>
<%   op_kind = object.async.operation.kind -%>
    op_result = return_if_object(module, response, '<%= op_kind -%>')
<% else # object.kind? -%>
    op_result = return_if_object(module, response)
<% end # object.kind? -%>
    if op_result is None:
        return None
    status = navigate_hash(op_result, <%= stat_path -%>)
<% if object.self_link_query.nil? -%>
    wait_done = wait_for_completion(status, op_result, module)
<%   if object.kind? -%>
    return fetch_resource(module, navigate_hash(wait_done, <%= res_path -%>), <%= quote_string(object.kind) -%>)
<%   else # object.kind? -%>
    return fetch_resource(module, navigate_hash(wait_done, <%= res_path -%>))
<%   end # object.kind? -%>
<% else # object.self_link_query.nil? -%>
    wait_for_completion(status, op_result, resource)
<%=
  lines(format(
    [
      [
        "return fetch_wrapped_resource(resource, #{obj_kind}",
        ("'#{object.self_link_query.kind}'," if object.self_link_query.kind?),
        "'#{object.self_link_query.items}')"
      ].join(' '),
      [
        [
         "return fetch_wrapped_resource(resource, #{obj_kind}",
         ("'#{object.self_link_query.kind}'," if object.self_link_query.kind?)
        ].join(' '),
        indent([
          "'#{object.self_link_query.items}')"
        ], 23) # 23 = align with ( previous line
      ],
      [
        "return fetch_wrapped_resource(resource, #{obj_kind}",
        indent([
          "'#{object.self_link_query.kind}',",
          "'#{object.self_link_query.items}')"
        ], 23) # 31 = align with ( previous line
      ]
    ], 4
  ))
-%>
<% end # object.self_link_query.nil? -%>


def wait_for_completion(status, op_result, module):
<%
  op_path = path2navigate(object.async.operation.path)
  err_path = path2navigate(object.async.error.path)
  err_msg = object.async.error.message
  allowed_states = object.async.status.allowed.map { |x| quote_string(x) }
-%>
    op_id = navigate_hash(op_result, <%= op_path -%>)
    op_uri = async_op_url(module, {'op_id': op_id})
    while status != '<%= object.async.status.complete -%>':
        raise_if_errors(op_result, <%= err_path -%>, '<%= err_msg -%>')
        time.sleep(<%= sprintf('%.1f', object.async.operation.wait_ms / 1000.0) %>)
        if status not in [<%= allowed_states.join(', ') -%>]:
            module.fail_json(msg="Invalid result %s" % status)
<% if object.kind? -%>
        op_result = fetch_resource(module, op_uri, '<%= op_kind -%>')
<% else # object.kind? -%>
        op_result = fetch_resource(module, op_uri)
<% end # object.kind? -%>
        status = navigate_hash(op_result, <%= stat_path -%>)
    return op_result


def raise_if_errors(response, err_path, module):
    errors = navigate_hash(response, err_path)
    if errors is not None:
        module.fail_json(msg=errors)

<% end #if object.async -%>
