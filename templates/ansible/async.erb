<% if object.async -%>
<%
  stat_path = path2navigate(object.async.status.path)
-%>
<%=
  lines(emit_link('async_op_url', build_url(object.async_operation_url, true), object, true), 2)
-%>
def wait_for_operation(module, response):
    op_result = <%= method_call('return_if_object',
                                ['module', 'response',
                                 ("'#{object.async.operation.kind}'" if object.kind?)]) %>
    if op_result is None:
        return {}
    status = navigate_hash(op_result, <%= stat_path -%>)
<% if object.self_link_query.nil? -%>
    wait_done = wait_for_completion(status, op_result, module)
<% if object.async.result.resource_inside_response -%>
    return navigate_hash(wait_done, ['response'])
<% else #if object.async.result.resource_inside_response -%>
<% res_path = path2navigate(object.async.result.path) -%>
    return <%= method_call('fetch_resource', ['module', "navigate_hash(wait_done, #{res_path})", (quote_string(object.kind) if object.kind?)]) %>
<% end #if object.async.result.resource_inside_response -%>
<% else # object.self_link_query.nil? -%>
    wait_for_completion(status, op_result, module)
<%=
  obj_kind = quote_string(object.kind)
  lines(format(
    [
      [
        "return fetch_wrapped_resource(module, #{obj_kind},",
        ("'#{object.self_link_query.kind}'," if object.self_link_query.kind?),
        "'#{object.self_link_query.items}')"
      ].join(' '),
      [
        [
         "return fetch_wrapped_resource(resource, #{obj_kind},",
         ("'#{object.self_link_query.kind}'," if object.self_link_query.kind?)
        ].join(' '),
        indent([
          "'#{object.self_link_query.items}')"
        ], 23) # 23 = align with ( previous line
      ],
      [
        "return fetch_wrapped_resource(resource, #{obj_kind},",
        indent([
          "'#{object.self_link_query.kind}',",
          "'#{object.self_link_query.items}')"
        ], 23) # 31 = align with ( previous line
      ]
    ], 4
  ))
-%>
<% end # object.self_link_query.nil? -%>


def wait_for_completion(status, op_result, module):
<%
  op_path = path2navigate(object.async.operation.path)
  err_path = path2navigate(object.async.error.path)
  err_msg = object.async.error.message
-%>
    op_id = navigate_hash(op_result, <%= op_path -%>)
    op_uri = async_op_url(module, {'op_id': op_id})
<% if object.async.status.complete == true -%>
    if not status:
<% else -%>
    while status != <%= python_literal(object.async.status.complete) -%>:
<% end -%>
        raise_if_errors(op_result, <%= err_path -%>, '<%= err_msg -%>')
        time.sleep(<%= sprintf('%.1f', object.async.operation.wait_ms / 1000.0) %>)
        op_result = <%= method_call('fetch_resource', ['module', 'op_uri', ("'#{object.async.operation.kind}'" if object.kind?)]) %>
        status = navigate_hash(op_result, <%= stat_path -%>)
    return op_result


def raise_if_errors(response, err_path, module):
    errors = navigate_hash(response, err_path)
    if errors is not None:
        module.fail_json(msg=errors)
<% end #if object.async -%>
