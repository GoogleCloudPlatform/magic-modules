---
<%= lines(autogen_notice :yaml) -%>
<%  yaml, random_vars = build_test_yaml_from_example(object.inttests[0]) -%>
- name: Prepare random number
  set_fact:
<%  random_vars.reject{|v| v.variable_name == 'resource_group'}.each do |rnd| -%>
    <%= rnd.variable_name -%>: "<%= rnd.variable_value -%>"
<%  end -%>
  run_once: yes

<%= lines(yaml) -%>

- name: Assert the resource was created
  assert:
    that:
      - output.changed

<%  same_yaml, _ = build_test_yaml_from_example(object.inttests[0], false, 'idempotent') -%>
<%= lines(same_yaml) -%>

- name: Assert the resource was created
  assert:
    that:
<<<<<<< HEAD
      - not output.changed
=======
      - result.changed == false
<% if object.kind? -%>
      - "result.kind == <%= quote_string(object.kind) -%>"
<% end # if object.kind -%>
#----------------------------------------------------------
<%= lines(example.task.build_test('absent', object, false)) -%>
  register: result
- name: assert changed is true
  assert:
    that:
      - result.changed == true
<% if object.kind? -%>
      - result.has_key('kind') == False
<% end # if object.kind? -%>
<% unless example.verifier.nil? -%>
<%= lines(example.verifier.build_task('absent', object)) -%>
<% end -%>
# ----------------------------------------------------------------------------
<%= lines(example.task.build_test('absent', object, true)) -%>
  register: result
- name: assert changed is false
  assert:
    that:
      - result.changed == false
<% if object.kind? -%>
      - result.has_key('kind') == False
<% end # if object.kind? -%>
<% end # object.readonly -%>
<% if example.dependencies and !example.dependencies.empty? -%>
#---------------------------------------------------------
# Post-test teardown
# If errors happen, don't crash the playbook!
<% example.dependencies.reverse.each do |depend| -%>
<%= lines(depend.build_test('absent', object, false)) -%>
  ignore_errors: true
<% end # example.dependencies.each -%>
<% end # if example.dependencies -%>
>>>>>>> master
