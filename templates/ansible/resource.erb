#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Google
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
<%= compile 'templates/ansible/autogen_notice.erb' -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

################################################################################
# Documentation
################################################################################

<%
  metadata_version = quote_string(@config.manifest.metadata_version)
  supported_by = quote_string(@config.manifest.supported_by)
-%>
ANSIBLE_METADATA = {'metadata_version': <%= metadata_version -%>,
                    'status': <%= @config.manifest.status -%>,
                    'supported_by': <%= supported_by -%>}

DOCUMENTATION = '''
---
module: <%= module_name(object) %>
description:
<%= lines(indent(bullet_lines(object.description, 4), 4)) -%>
short_description: Creates a GCP <%= object.name %>
version_added: <%= lines(@config.manifest.version_added) -%>
author: <%= lines(@config.manifest.author) -%>
requirements:
<% @config.manifest.requirements.each do |line| -%>
<%= lines(indent(bullet_lines(line, 4), 4)) -%>
<% end -%>
options:
    state:
        description:
            - Whether the given object should exist in GCP
        required: true
        choices: ['present', 'absent']
        default: 'present'
<% object.all_user_properties.reject(&:output).each do |prop| -%>
    <%= Google::StringUtils.underscore(prop.name) -%>:
        description:
<%= lines(indent(bullet_lines(prop.description, 12), 12)) -%>
        required: <%= prop.required ? 'true' : 'false' %>
<% end -%>
extends_documentation_fragment: gcp
'''

<% if example -%>
EXAMPLES = '''
<% res_readable_name = Google::StringUtils.uncombine(object.name) -%>
- name: Create a <%= res_readable_name %>
<%= lines(indent(example, 2)) -%>
      state: 'present'
'''
<% end -%>

RETURN = '''
<% object.all_user_properties.select(&:output).each do |prop| -%>
    <%= Google::StringUtils.underscore(prop.name) -%>:
        description:
<%= lines(indent(bullet_lines(prop.description, 12), 12)) -%>
        returned: success
        type: <%= lines(python_type(prop)) -%>
<% end -%>
'''

################################################################################
# Imports
################################################################################

from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequestException
import json

################################################################################
# Main
################################################################################


def main():
    """Main function"""

    module = GcpModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
<% object.all_user_properties.reject(&:output).each do |prop| -%>
<%
  line = "#{Google::StringUtils.underscore(prop.out_name)}=dict("
  options = [
    ("required=True" if prop.required),
    "type=#{quote_string(python_type(prop))}"
  ].compact
-%>
<%= lines(indent("#{line}#{options.join(', ')}),", 12)) -%>
<% end -%>
        )
    )

<%
  rrefs = object.all_user_properties
                .select { |x| x.is_a? Api::Type::ResourceRef }
-%>
<% if rrefs -%>
    # Replace the dictionary of results from other GCP modules with the
    # proper value only.
<% rrefs.each do |rref| -%>
<%
  rref_module = "module.params['#{Google::StringUtils.underscore(rref.name)}']"
  import_selector = "['#{Google::StringUtils.underscore(rref.imports)}']"
-%>
    <%= rref_module -%> = <%= rref_module -%><%= import_selector %>
<% end -%>

<% end -%>
    state = module.params['state']
    kind = <%= lines(quote_string(object.kind)) -%>

    fetch = fetch_resource(module, self_link(module), kind)
    changed = False

    if fetch:
        if state == 'present':
            if is_different(module, fetch):
                fetch = update(module, self_link(module), kind)
        else:
            delete(module, self_link(module), kind)
            fetch = {}
            changed = True
    else:
        if state == 'present':
            fetch = create(module, collection(module), kind)
            changed = True

    if fetch:
        fetch.update({'changed': changed})
    else:
        fetch = {'changed': changed}

    module.exit_json(**fetch)


<% prod_name = object.__product.prefix[1::-1] -%>
<% custom_create = get_code_multiline config, 'create' -%>
<% if custom_create.nil? -%>
def create(module, link, kind):
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
    return return_if_object(module, auth.post(link, resource_to_request(module)), kind)
<% else -%>
<%= lines(indent(custom_create, 4)) -%>
<% end -%>


<% custom_update = get_code_multiline config, 'update' -%>
<% if custom_update.nil? -%>
def update(module, link, kind):
    module.fail_json(msg="<%= object.name -%> cannot be edited")
<% else -%>
<%= lines(indent(custom_update, 4)) -%>
<% end -%>


<% custom_update = get_code_multiline config, 'delete' -%>
<% if custom_update.nil? -%>
def delete(module, link, kind):
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
    return return_if_object(module, auth.delete(link), kind)
<% else -%>
<%= lines(indent(custom_delete, 4)) -%>
<% end -%>


def resource_to_request(module):
<%
  properties_in_request = []
  properties_in_request += object.parameters if object.parameters
  properties_in_request += object.properties.reject(&:output)
  properties_in_request = properties_in_request.compact
-%>
    request = {
        u'kind': <%= quote_string(object.kind) -%>,
<% properties_in_request.each do |prop| -%>
<%=
  lines(indent(
    ["#{unicode_string(prop.field_name)}:",
     "module.params[#{quote_string(prop.out_name)}],"].join(' '), 8))
-%>
<% end -%>
    }
    return_vals = {}
    for k, v in request.items():
        if v:
            return_vals[k] = v

    return return_vals


<%= lines(compile('templates/ansible/transport.erb'), 2) -%>
def self_link(module):
    return <%= self_link_url(object) -%>.format(**module.params)


def collection(module):
    return <%= collection_url(object) -%>.format(**module.params)


def return_if_object(module, response, kind):
    # If not found, return nothing.
    if response.status_code == 404:
        return None

    # If no content, return nothing.
    if response.status_code == 204:
        return None

    try:
        response.raise_for_status
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)
    except GcpRequestException as inst:
        module.fail_json(msg="Network error: %s" % inst)

    if navigate_hash(result, ['error', 'errors']):
        module.fail_json(msg=navigate_hash(result, ['error', 'errors']))
    if result['kind'] != kind:
        module.fail_json(msg="Incorrect result: {kind}".format(**result))

    return result


def is_different(module, response):
    request = resource_to_request(module)

    # Remove all output-only from response.
    return_vals = {}
    for k, v in response.items():
        if k in request:
            return_vals[k] = v

    return request != return_vals

<%= lines(compile('templates/ansible/provider_helpers.erb'), 1) -%>
if __name__ == '__main__':
    main()
