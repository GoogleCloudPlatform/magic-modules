#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Google
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
<%= lines(autogen_notice :python) -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

################################################################################
# Documentation
################################################################################

<%
  metadata_version = quote_string(@config.manifest.get('metadata_version',
                                                       config))
  supported_by = quote_string(@config.manifest.get('supported_by', config))
-%>
ANSIBLE_METADATA = {'metadata_version': <%= metadata_version -%>,
                    'status': <%= @config.manifest.get('status', config) -%>,
                    'supported_by': <%= supported_by -%>}

DOCUMENTATION = '''
---
module: <%= module_name(object) %>
description:
<%= lines(indent(bullet_lines(object.description, 4), 4)) -%>
short_description: Creates a GCP <%= object.name %>
version_added: <%= lines(@config.manifest.get('version_added', config)) -%>
author: <%= lines(@config.manifest.get('author', config)) -%>
requirements:
<% @config.manifest.get('requirements', config).each do |line| -%>
<%= lines(indent(bullet_line(line, 4, false, false), 4)) -%>
<% end -%>
options:
    state:
        description:
            - Whether the given object should exist in GCP
        required: true
        choices: ['present', 'absent']
        default: 'present'
<% object.all_user_properties.reject(&:output).each do |prop| -%>
<%= lines(indent(doc_property_yaml(prop, config, 4), 4)) -%>
<% end -%>
extends_documentation_fragment: gcp
'''

<% if example -%>
EXAMPLES = '''
<% res_readable_name = Google::StringUtils.uncombine(object.name) -%>
<% if example.dependencies -%>
<%   example.dependencies.each do |depend| -%>
<%= lines(depend.build_test('present', object, false)) -%>
<%   end # example.dependencies.each -%>
<% end # if example.dependencies -%>
<%= lines(example.task.build_example('present', object)) -%>
'''
<% end -%>

RETURN = '''
<% object.all_user_properties.each do |prop| -%>
<%= lines(indent(return_property_yaml(prop, 4), 4)) -%>
<% end -%>
'''

################################################################################
# Imports
################################################################################

<%
  import = 'from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequest'
  import += ', remove_nones_from_dict' unless properties_with_classes(object.all_user_properties).empty?
  import += ', replace_resource_dict' if nonvirtual_rrefs(object)
-%>
<%= lines(import) -%>
import json
<%
  config['imports'] ||= []
  config['imports'] << 'time' if object.async
  config['imports'] << 're' unless virtual_selflink_rrefs(object).empty?
-%>
<%= lines(config['imports'].sort.uniq.map { |i| "import #{i}" }) -%>

################################################################################
# Main
################################################################################


def main():
    """Main function"""

<%
  mod_props = object.all_user_properties.reject(&:output).map do |prop|
    python_dict_for_property(prop, config)
  end
-%>
    module = GcpModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
<%= lines(indent_list(mod_props, 12)) -%>
        )
    )

    state = module.params['state']
<% if object.kind? -%>
    kind = <%= lines(quote_string(object.kind)) -%>
<% end -%>

<% if object.self_link_query.nil? -%>
<%
  method = method_call('fetch_resource', ['module', 'self_link(module)',
                                          ('kind' if object.kind?),
                                         ])
-%>
    fetch = <%= method %>
<% else # object.self_link_query.nil? -%>
    fetch = fetch_wrapped_resource(module, '<%= object.kind -%>',
                                   '<%= object.self_link_query.kind -%>',
                                   '<%= object.self_link_query.items -%>')
<% end # object.self_link_query.nil? -%>
    changed = False
<% if object.virtual -%>
    if not fetch:
        module.fail_json(msg="<%= object.name -%> is not valid")
<% else # object.virtual -%>
    if fetch:
        if state == 'present':
            if is_different(module, fetch):
<%
  method = method_call('update', [
                                   'module', 'self_link(module)',
                                   ('kind' if object.kind?),
                                   ('fetch' if object.save_api_results?)
                                 ])
-%>
<%= lines(indent("fetch = #{method}", 16)) -%>
                changed = True
        else:
<%
  method = method_call('delete', [
                                   'module', 'self_link(module)',
                                   ('kind' if object.kind?),
                                   ('fetch' if object.save_api_results?)
                                 ])
-%>
<%= lines(indent(method, 12)) -%>
            fetch = {}
            changed = True
    else:
        if state == 'present':
<%
  if object.create_verb.nil? || object.create_verb == :POST
    create_link = 'collection(module)'
  elsif object.create_verb == :PUT
    create_link = 'self_link(module)'
  else
    raise "Ansible does not support create_verb #{object.create_verb}"
  end
  method = method_call('create', ['module', create_link,
                                  ('kind' if object.kind?)])
-%>
            fetch = <%= method %>
            changed = True
        else:
            fetch = {}

    fetch.update({'changed': changed})
<% end # object.virtual -%>

    module.exit_json(**fetch)


<% prod_name = object.__product.prefix[1..-1] -%>
<% unless object.virtual -%>
<% custom_create = get_code_multiline config, 'create' -%>
<%# TODO: kind param not always needed.
  # https://github.com/GoogleCloudPlatform/magic-modules/issues/45
-%>
<%= method_decl('create', ['module', 'link', ('kind' if object.kind?)]) %>
<% if custom_create.nil? -%>
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
<%
  if object.create_verb.nil? || object.create_verb == :POST
    create_verb = '.post'
  elsif object.create_verb == :PUT
    create_verb = '.put'
  else
    raise "Ansible does not support create_verb #{object.create_verb}"
  end
-%>
<%
  method = method_call(
    object.async ? 'wait_for_operation' : 'return_if_object',
    ['module',
     method_call("auth#{create_verb}",
                 ['link', 'resource_to_request(module)']),
     ('kind' if !object.async && object.kind?)
   ]
  )
-%>
    return <%= method %>
<% else -%>
<%= lines(indent(custom_create, 4)) -%>
<% end -%>


<% custom_update = get_code_multiline config, 'update' -%>
<% editable = config['editable'] -%>
<%=
  lines(method_decl('update', ['module', 'link', ('kind' if object.kind?),
                               ('fetch' if object.save_api_results?)]))
-%>
<% if custom_update.nil? -%>
<%   if !false?(editable) -%>
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
<%
  method = method_call(
    object.async ? 'wait_for_operation' : 'return_if_object',
    [
     'module',
     method_call("auth.put", ['link', 'resource_to_request(module)']),
     ('kind' if !object.async && object.kind?)
   ]
  )
-%>
    return <%= method %>
<%   else # !false?(editable) -%>
    module.fail_json(msg="<%= object.name -%> cannot be edited")
<%   end # !false?(editable) -%>
<% else # custom_update.nil? -%>
<%= lines(indent(custom_update, 4)) -%>
<% end # custom_update.nil? -%>


<% custom_delete = get_code_multiline config, 'delete' -%>
<%=
  lines(method_decl('delete', ['module', 'link', ('kind' if object.kind?),
                               ('fetch' if object.save_api_results?)]))
-%>
<% if custom_delete.nil? -%>
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
<%
  method = method_call(
    object.async ? 'wait_for_operation' : 'return_if_object',
    ['module',
     method_call("auth.delete", ['link']),
     ('kind' if !object.async && object.kind?)
   ]
  )
-%>
    return <%= method %>
<% else # if custom_delete.nil? -%>
<%= lines(indent(custom_delete, 4)) -%>
<% end # if custom_delete.nil? -%>


<% end # unless object.virtual -%>
def resource_to_request(module):
<%
  properties_in_request = []
  properties_in_request += object.parameters if object.parameters
  properties_in_request += object.properties.reject(&:output)
  properties_in_request = properties_in_request.compact
-%>
    request = {
<% if object.kind? -%>
        u'kind': <%= quote_string(object.kind) -%>,
<% end # if object.kind? -%>
<%= lines(indent(request_properties(properties_in_request), 4)) -%>
    }
<%
  encoder_name = if object.encoder?
                   object.transport.encoder
                 else config['encoder']
                   config['encoder']
                 end
-%>
<% if object.encoder? || config['encoder'] -%>
    request = <%= encoder_name -%>(request, module)
<% end -%>
    return_vals = {}
    for k, v in request.items():
        if v:
            return_vals[k] = v

    return return_vals


<%= lines(compile('templates/ansible/transport.erb'), 2) -%>
<% custom_self_link = get_code_multiline config, 'self_link' -%>
<% if custom_self_link.nil? -%>
<%= lines(emit_link('self_link', self_link_url(object))) -%>
<% else # custom_self_link.nil? -%>
<%= lines(emit_link('self_link', custom_self_link)) -%>
<% end # custom_self_link.nil? -%>


<% custom_collection = get_code_multiline config, 'collection' -%>
<% if custom_collection.nil? -%>
<%= lines(emit_link('collection', collection_url(object))) -%>
<% else # custom_collection.nil? -%>
<%= lines(emit_link('collection', custom_collection)) -%>
<% end # custom_collection.nil? -%>


<%=
  lines(method_decl('return_if_object', ['module', 'response',
                                         ('kind' if object.kind?)]))
-%>
    # If not found, return nothing.
    if response.status_code == 404:
        return None

    # If no content, return nothing.
    if response.status_code == 204:
        return None

    try:
        module.raise_for_status(response)
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)

<%
  decoder_name = if object.decoder?
                   object.transport.decoder
                 else config['decoder']
                   config['decoder']
                 end
-%>
<% if object.decoder? -%>
    result = <%= decoder_name -%>(result, module)

<% end -%>
    if navigate_hash(result, ['error', 'errors']):
        module.fail_json(msg=navigate_hash(result, ['error', 'errors']))
<% if object.kind? -%>
    if result['kind'] != kind:
        module.fail_json(msg="Incorrect result: {kind}".format(**result))
<% end # object.kind? -%>

    return result


def is_different(module, response):
    request = resource_to_request(module)
    response = response_to_hash(module, response)
<%
  decoder_name = if object.decoder?
                   object.transport.decoder
                 else config['decoder']
                   config['decoder']
                 end
-%>
<% if object.decoder? -%>
    request = <%= decoder_name -%>(request, module)
<% end -%>

    # Remove all output-only from response.
    response_vals = {}
    for k, v in response.items():
        if k in request:
            response_vals[k] = v

    request_vals = {}
    for k, v in request.items():
        if k in response:
            request_vals[k] = v

    return GcpRequest(request_vals) != GcpRequest(response_vals)


# Remove unnecessary properties from the response.
# This is for doing comparisons with Ansible's current parameters.
def response_to_hash(module, response):
    return {
<%= lines(response_properties(object.properties)) -%>
    }
<%= lines_before(selflink_functions(object), 1) -%>
<%= lines_before(compile('templates/ansible/async.erb'), 1) -%>
<%= lines_before(compile('templates/ansible/provider_helpers.erb'), 1) -%>
<%= lines_before(compile('templates/ansible/properties.erb'), 1) -%>

if __name__ == '__main__':
    main()
