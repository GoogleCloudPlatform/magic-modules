#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Google
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
<%= lines(autogen_notice :python) -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

################################################################################
# Documentation
################################################################################

<%
  metadata_version = quote_string(@config.manifest.get('metadata_version',
                                                       object))
  supported_by = quote_string(@config.manifest.get('supported_by', object))
  update_props = properties_by_custom_update(object.all_user_properties)
-%>
ANSIBLE_METADATA = {'metadata_version': <%= metadata_version -%>,
                    'status': <%= @config.manifest.get('status', object) -%>,
                    'supported_by': <%= supported_by -%>}

DOCUMENTATION = '''
---
<%= to_yaml({
  'module' => module_name(object),
  'description' => format_description(object.description),
  'short_description' => "Creates a GCP #{object.name}",
  'version_added' => @config.manifest.get('version_added', object).to_f,
  'author' => @config.manifest.get('author', object),
  'requirements' => @config.manifest.get('requirements', object),
  'options' => [
    {
      'state' => {
        'description' => ['Whether the given object should exist in GCP'],
        'choices' => ['present', 'absent'],
        'default' => 'present'
      },
    },
    object.all_user_properties.reject(&:output).map { |p| documentation_for_property(p) }
  ].flatten.compact.reduce({}, :merge),
  'extends_documentation_fragment' => 'gcp',
  'notes' => (
    [
      ("API Reference: U(#{object.references.api})" if object.references.api),
      object.references.guides.map { |guide, link| "#{guide}: U(#{link})" }
    ].flatten.compact if object.references
  )
})-%>
'''

<% if example -%>
EXAMPLES = '''
<% res_readable_name = object.name.uncombine -%>
<% if example.dependencies -%>
<%   example.dependencies.each do |depend| -%>
<%= lines(depend.build_test('present', object, false), 1) -%>
<%   end # example.dependencies.each -%>
<% end # if example.dependencies -%>
<%= lines(example.task.build_example('present', object)) -%>
'''
<% end -%>

RETURN = '''
<%= to_yaml(object.all_user_properties.map { |p| returns_for_property(p) }.reduce({}, :merge)) -%>
'''

################################################################################
# Imports
################################################################################
<%
  readonly_selflink_rrefs = object.all_resourcerefs
                                  .select { |prop| prop.resource_ref.readonly }
                                  .select { |prop| prop.imports == 'selfLink' }
                                  .map(&:resource_ref)
                                  .uniq
-%>

<%
  import = 'from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequest'
  import += ', remove_nones_from_dict' unless properties_with_classes(object.all_user_properties).empty?
  import += ', replace_resource_dict' if nonreadonly_rrefs(object)
-%>
<%= lines(import) -%>
import json
<%
  imports = object.imports || []
  imports << 'time' if object.async
  imports << 're' unless readonly_selflink_rrefs.empty?
-%>
<%= lines(imports.sort.uniq.map { |i| "import #{i}" }) -%>

################################################################################
# Main
################################################################################


def main():
    """Main function"""

<%
  mod_props = object.all_user_properties.reject(&:output).map do |prop|
    python_dict_for_property(prop, object)
  end
-%>
<% conflicts = conflicted_property_batches(object) -%>
    module = GcpModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
<%= lines(indent_list(mod_props, 12)) -%>
<% unless conflicts.empty? -%>
        ),
        mutually_exclusive=<%= format([
          python_literal(conflicts),
          python_literal(conflicts).gsub('], ', "],\n#{' ' * 28}")
          ], 0, 28) %>
<% else -%>
        )
<% end -%>
    )

    if not module.params['scopes']:
        module.params['scopes'] = <%= python_literal(object.__product.scopes) %>

    state = module.params['state']
<% if object.kind? -%>
    kind = <%= lines(quote_string(object.kind)) -%>
<% end -%>

<% if object.self_link_query.nil? -%>
<%
  method = method_call('fetch_resource', ['module', 'self_link(module)',
                                          ('kind' if object.kind?),
                                         ])
-%>
    fetch = <%= method %>
<% else # object.self_link_query.nil? -%>
    fetch = fetch_wrapped_resource(module, '<%= object.kind -%>',
                                   '<%= object.self_link_query.kind -%>',
                                   '<%= object.self_link_query.items -%>')
<% end # object.self_link_query.nil? -%>
    changed = False
<% if object.readonly -%>
    if not fetch:
        module.fail_json(msg="<%= object.name -%> is not valid")
<% else # object.readonly -%>

    if fetch:
        if state == 'present':
            if is_different(module, fetch):
<%
  method = method_call('update', [
                                   'module', 'self_link(module)',
                                   ('kind' if object.kind?),
                                   ('fetch' if object.access_api_results || !update_props.empty?)
                                 ])
-%>
<%= lines(indent("#{method}", 16)) -%>
<%
  method = method_call('fetch_resource', ['module', 'self_link(module)',
                                          ('kind' if object.kind?),
                                         ])
-%>
                fetch = <%= method %>
                changed = True
        else:
<%
  if object.delete_url.nil?
    delete_url = 'self_link(module)'
  else
    delete_url = 'delete_link(module)'
  end
  method = method_call('delete', [
                                   'module', delete_url,
                                   ('kind' if object.kind?),
                                   ('fetch' if object.access_api_results)
                                 ])
-%>
<%= lines(indent(method, 12)) -%>
            fetch = {}
            changed = True
    else:
        if state == 'present':
<%
  if !object.create_url.nil?
    create_link = 'create_link(module)'
  elsif object.create_verb.nil? || object.create_verb == :POST
      create_link = 'collection(module)'
  elsif object.create_verb == :PUT
      create_link = 'self_link(module)'
  end

  create_verb = ".#{object.create_verb.to_s.downcase}"
  method = method_call('create', ['module', create_link,
                                  ('kind' if object.kind?)])
-%>
            fetch = <%= method %>
<% if object.post_create -%>
<%= lines(indent(object.post_create, 12)) -%>
<% end # ifobject.post_create -%>
            changed = True
        else:
            fetch = {}

<% if object.post_action -%>
<%= lines(indent(object.post_action, 4)) -%>
<% end # ifobject.post_create -%>
    fetch.update({'changed': changed})
<% end # object.readonly -%>

    module.exit_json(**fetch)


<% prod_name = object.__product.prefix[1..-1] -%>
<% unless object.readonly -%>
<%# TODO: kind param not always needed.
  # https://github.com/GoogleCloudPlatform/magic-modules/issues/45
-%>
<%= method_decl('create', ['module', 'link', ('kind' if object.kind?)]) %>
<% if object.create.nil? -%>
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
<%
  create_request = if object.custom_create_resource
                     'resource_to_create'
                   else
                     'resource_to_request'
                   end
-%>
<%
  method = method_call(
    object.async ? 'wait_for_operation' : 'return_if_object',
    ['module',
     method_call("auth#{create_verb}",
                 ['link', "#{create_request}(module)"]),
     ('kind' if !object.async && object.kind?)
   ]
  )
-%>
    return <%= method %>
<% else -%>
<%= lines(indent(object.create, 4)) -%>
<% end -%>


<%=
  lines(method_decl('update', ['module', 'link', ('kind' if object.kind?),
                               ('fetch' if object.access_api_results || !update_props.empty?)]))
-%>
<%
  update_request = if object.custom_update_resource
                     'resource_to_update'
                   else
                     'resource_to_request'
                   end
-%>
<% if object.update.nil? -%>
<% unless update_props.empty? -%>
    update_fields(module, resource_to_request(module),
                  response_to_hash(module, fetch))
<% end -%>
<%   if object.input && update_props.empty? -%>
    module.fail_json(msg="<%= object.name -%> cannot be edited")
<%   elsif  !object.input -%>
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
<%
  update_verb = object.update_verb.to_s.downcase
  method = method_call(
    object.async ? 'wait_for_operation' : 'return_if_object',
    [
     'module',
     method_call("auth.#{update_verb}",
                 ['link', "#{update_request}(module)"]),
     ('kind' if !object.async && object.kind?)
   ]
  )
-%>
    return <%= method %>
<% else # non-updatable, but has per-field updates -%>
<%
  method = method_call('fetch_resource', ['module', 'self_link(module)',
                                          ('kind' if object.kind?),
                                         ])
-%>
    return <%= method %>
<%   end # if object.input -%>
<% else # object.update.nil? -%>
<%= lines(indent(object.update, 4)) -%>
<% end # object.update.nil? -%>


<% unless update_props.empty? -%>
def update_fields(module, request, response):
<% empty = update_props.values.flatten.reject { |p| p.is_a? Api::Type::FetchedExternal }.empty? -%>
<% if empty -%>
    pass
<% else -%>
<% update_props.each do |key, props| -%>
<%
  props_statement = props.reject { |p| p.is_a?(Api::Type::FetchedExternal) }
  .map { |prop| "response.get(#{quote_string(prop.api_name)}) != request.get(#{quote_string(prop.api_name)})" }.join(' or ')
-%>
<% unless props_statement.empty? -%>
    if <%= props_statement -%>:
        <%= props.first.name.underscore -%>_update(module, request, response)
<% end # unless props_statement.empty? -%>
<% end # update_props.each -%>
<% end # if empty -%>


<% update_props.each do |key, props| -%>
def <%= props.first.name.underscore -%>_update(module, request, response):
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
    auth.<%= key[:update_verb].downcase -%>(
        ''.join([
            "<%= object.__product.base_url -%>",
            "<%= key[:update_url].gsub('{{', '{').gsub('}}', '}') -%>"
        ]).format(**module.params),
        {
<%= lines(request_properties(props, 12)) -%>
        }
    )


<% end -%>
<% end # unless update_props.empty? -%>
<%=
  lines(method_decl('delete', ['module', 'link', ('kind' if object.kind?),
                               ('fetch' if object.access_api_results)]))
-%>
<% if object.delete.nil? -%>
    auth = GcpSession(module, <%= quote_string(prod_name) -%>)
<%
  delete_verb = object.delete_verb.to_s.downcase

  method = method_call(
    object.async ? 'wait_for_operation' : 'return_if_object',
    ['module',
     method_call("auth.#{delete_verb}", ['link']),
     ('kind' if !object.async && object.kind?)
   ]
  )
-%>
    return <%= method %>
<% else # if object.delete.nil? -%>
<%= lines(indent(object.delete, 4)) -%>
<% end # if object.delete.nil? -%>


<% end # unless object.readonly -%>
def resource_to_request(module):
<%
  properties_in_request = [
    object&.parameters&.select { |p| p.input },
    object.properties.reject(&:output)
  ].flatten.compact
-%>
    request = {
<% if object.kind? -%>
        u'kind': <%= quote_string(object.kind) -%>,
<% end # if object.kind? -%>
<%= lines(indent(request_properties(properties_in_request, 4), 4)) -%>
    }
<% if object.encoder? -%>
    request = <%= object.transport.encoder -%>(request, module)
<% end -%>
    return_vals = {}
    for k, v in request.items():
        if v:
            return_vals[k] = v

    return return_vals
<% unless false?(object.unwrap_resource) -%>
<%
  urf_code = [
    'return {',
    indent_list(
      Hash[object.identity.map { |i| [i, "module.params[#{quote_string(i.out_name)}]"] }]
        .map { |k, v| "#{quote_string(k.out_name)}: #{v}" }, 4
    ),
    '}'
  ]
-%>
<%=
  lines_before(lines(emit_method('unwrap_resource_filter', %w[module],
                                 urf_code, file_relative), 1), 1)
-%>

def unwrap_resource(result, module):
    query_predicate = unwrap_resource_filter(module)
    matched_items = []
    for item in result:
        if all(item[k] == query_predicate[k] for k in query_predicate.keys()):
            matched_items.append(item)
    if len(matched_items) > 1:
        module.fail_json(msg="More than 1 result found: %s" % matched_items)

    if matched_items:
        return matched_items[0]
    else:
        return None
<% end -%>


<%= lines(compile('templates/ansible/transport.erb'), 2) -%>
<%= lines(emit_link('self_link', build_url(object.self_link_url), object), 2) -%>
<%= lines(emit_link('collection', build_url(object.collection_url), object), 2) -%>
<%- unless object.create_url.nil? -%>
<%=lines(emit_link('create_link', build_url(object.full_create_url), object), 2)-%>
<% end -%>
<% unless object.delete_url.nil? -%>
<%= lines(emit_link('delete_link', build_url(object.full_delete_url), object), 2) -%>
<% end -%>
<%=
  lines(method_decl('return_if_object', ['module', 'response',
                                         ('kind' if object.kind?),
                                         'allow_not_found=False']))
-%>
<% if object.return_if_object -%>
<%= lines(indent(object.return_if_object, 4)) -%>
<% else # if object.return_if_object -%>
    # If not found, return nothing.
    if allow_not_found and response.status_code == 404:
        return None

    # If no content, return nothing.
    if response.status_code == 204:
        return None

    try:
        module.raise_for_status(response)
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)

<% if object.decoder? -%>
    result = <%= object.transport.decoder -%>(result, module)

<% end -%>
    if navigate_hash(result, ['error', 'errors']):
        module.fail_json(msg=navigate_hash(result, ['error', 'errors']))

    return result
<% end # if object.return_if_object -%>


def is_different(module, response):
    request = resource_to_request(module)
    response = response_to_hash(module, response)
<% if object.decoder? -%>
    request = <%= object.transport.decoder -%>(request, module)
<% end -%>

    # Remove all output-only from response.
    response_vals = {}
    for k, v in response.items():
        if k in request:
            response_vals[k] = v

    request_vals = {}
    for k, v in request.items():
        if k in response:
            request_vals[k] = v

    return GcpRequest(request_vals) != GcpRequest(response_vals)


# Remove unnecessary properties from the response.
# This is for doing comparisons with Ansible's current parameters.
def response_to_hash(module, response):
    return {
<%= lines(response_properties(object.properties, 8)) -%>
    }
<% readonly_selflink_rrefs.each do |resource| -%>


def <%= resource.name.underscore -%>_selflink(name, params):
    if name is None:
        return
    url = r<%= lines(build_url(resource.regex_url)) -%>
    if not re.match(url, name):
        name = <%= build_url(resource.self_link_url).gsub('{name}', '%s') -%>.format(**params) % name
    return name
<% end -%>
<%= lines_before(compile('templates/ansible/async.erb'), 1) -%>
<%= lines_before(compile('templates/ansible/provider_helpers.erb'), 1) -%>
<%= lines_before(compile('templates/ansible/properties.erb'), 1) -%>


if __name__ == '__main__':
    main()
