---
<%= compile 'templates/ansible/autogen_notice.erb' -%>
<% if example.dependencies and !example.dependencies.empty? -%>
#---------------------------------------------------------
# Pre-test setup
<% example.dependencies.each do |depend| -%>
<%= lines(depend.build_test('present', object, false)) -%>
<% end # example.dependencies.each -%>
<% end # if example.dependencies -%>
<%= lines(example.task.build_test('absent', object, false)) -%>
#----------------------------------------------------------
<% resource_name = Google::StringUtils.uncombine(object.name).downcase -%>
<%= lines(example.task.build_test('present', object, false)) -%>
  register: result
<% if object.virtual -%>
- name: assert changed is false
<% else # if object.virtual -%>
- name: assert changed is true
<% end # if object.virtual -%>
  assert:
    that:
<% if object.virtual -%>
      # <%= object.name -%> is not altered, just verified.
      - result.changed == false
<% else # if object.virtual -%>
      - result.changed == true
<% end # if object.virtual -%>
      - "result.kind == <%= quote_string(object.kind) -%>"
<% unless object.virtual -%>
# ----------------------------------------------------------------------------
<%= lines(example.task.build_test('present', object, true)) -%>
  register: result
- name: assert changed is false
  assert:
    that:
      - result.changed == false
      - "result.kind == <%= quote_string(object.kind) -%>"
#----------------------------------------------------------
<%= lines(example.task.build_test('absent', object, false)) -%>
  register: result
- name: assert changed is true
  assert:
    that:
      - result.changed == true
      - result.has_key('kind') == False
# ----------------------------------------------------------------------------
<%= lines(example.task.build_test('absent', object, true)) -%>
  register: result
- name: assert changed is false
  assert:
    that:
      - result.changed == false
      - result.has_key('kind') == False
<% end # object.virtual -%>
<% if example.dependencies and !example.dependencies.empty? -%>
#---------------------------------------------------------
# Post-test teardown
<% example.dependencies.reverse.each do |depend| -%>
<%= lines(depend.build_test('absent', object, false)) -%>
<% end # example.dependencies.each -%>
<% end # if example.dependencies -%>
