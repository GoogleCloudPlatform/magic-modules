<% properties_with_classes(object.all_user_properties).each do |prop| -%>
class <%= prop.property_class[-1] -%>(object):
<% if prop.is_a?(Api::Type::NestedObject) -%>
    def __init__(self, request, module):
        self.module = module
        if request:
            self.request = request
        else:
            self.request = {}

    def to_request(self):
        return remove_nones_from_dict({
<%= lines(request_properties_in_classes(prop.properties, 12)) -%>
        })

    def from_response(self):
        return remove_nones_from_dict({
<%= lines(response_properties_in_classes(prop.properties, 12)) -%>
        })
<% elsif prop.is_a?(Api::Type::Array) && prop.item_type.is_a?(Api::Type::NestedObject) -%>
    def __init__(self, request, module):
        self.module = module
        if request:
            self.request = request
        else:
            self.request = []

    def to_request(self):
        items = []
        for item in self.request:
            items.append(self._request_for_item(item))
        return items

    def from_response(self):
        items = []
        for item in self.request:
            items.append(self._response_from_item(item))
        return items

    def _request_for_item(self, item):
        return remove_nones_from_dict({
<%=
  lines(request_properties_in_classes(prop.item_type.properties, 12, 'item'))
-%>
        })

    def _response_from_item(self, item):
        return remove_nones_from_dict({
<%=
  lines(response_properties_in_classes(prop.item_type.properties, 12, 'item'))
-%>
        })
<% end # prop.is_a? NestedObject -%>
<%=
  unless prop == properties_with_classes(object.all_user_properties).last
    "\n" * 2
  end
-%>
<% end -%>
