<%# The license inside this block applies to this file.
	# Copyright 2020 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
func flatten<%= prefix -%><%= titlelize_property(property) -%>(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformedTag := map[string]interface{}{
			"field_name": k,
			"display_name": flattenDataCatalogTagFieldsDisplayName(original["displayName"], d, config),
			"order": flattenDataCatalogTagFieldsOrder(original["order"], d, config),
		}

		if original["doubleValue"] != nil {
			transformedTag["double_value"] = original["doubleValue"]
		} else if original["stringValue"] != nil {
			transformedTag["string_value"] = original["stringValue"]
		} else if original["boolValue"] != nil {
			transformedTag["bool_value"] = original["boolValue"]
		} else if original["timestampValue"] != nil {
			transformedTag["timestamp_value"] = original["timestampValue"]
		} else if original["enumValue"] != nil {
			transformedTag["enum_value"] = original["enumValue"].(map[string]interface{})["displayName"]
		}

		transformed = append(transformed, transformedTag)
	}
	return transformed
}

func flattenDataCatalogTagFieldsDisplayName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenDataCatalogTagFieldsOrder(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}