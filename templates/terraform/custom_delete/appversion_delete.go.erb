
if d.Get("noop_on_destroy") == true {
	log.Printf("[DEBUG] Keeping the AppVersion %q", d.Id())
	return nil
}
config := meta.(*Config)

project, err := getProject(d, config)
if err != nil {
	return err
}

lockName, err := replaceVars(d, config, "apps/{{project}}/services/{{service}}")
if err != nil {
	return err
}
mutexKV.Lock(lockName)
defer mutexKV.Unlock(lockName)

// the default service cannot be deleted no matter what, so we'll return nil and log this warning instead
if d.Get("service").(string) == "default" {
	log.Printf("[WARNING] <%= object.__product.name + " " + object.name %> resources" +
	" cannot be deleted from GCP. The resource %s will be removed from Terraform" +
	" state, but will still be present on the server.", d.Id())
	d.SetId("")

	return nil
}

if d.Get("delete_service_on_destroy") == true {
	url, err := replaceVars(d, config, "{{AppEngineBasePath}}apps/{{project}}/services/{{service}}")
	if err != nil {
		return err
	}
	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting Service %q", d.Id())
	res, err := sendRequestWithTimeout(config, "DELETE", project, url, obj, d.Timeout(schema.TimeoutDelete)<%= object.error_retry_predicates ? ", " + object.error_retry_predicates.join(',') : "" -%>)
	if err != nil {
		return handleNotFoundError(err, d, "Service")
	}
	err = appEngineOperationWaitTime(
		config, res, project, "Deleting Service",
		int(d.Timeout(schema.TimeoutDelete).Minutes()))

	if err != nil {
		return err
	}
	log.Printf("[DEBUG] Finished deleting Service %q: %#v", d.Id(), res)
	return nil
} else {
	url, err := replaceVars(d, config, "{{AppEngineBasePath}}apps/{{project}}/services/{{service}}/versions/{{version_id}}")
	if err != nil {
		return err
	}
	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting AppVersion %q", d.Id())
	res, err := sendRequestWithTimeout(config, "DELETE", project, url, obj, d.Timeout(schema.TimeoutDelete)<%= object.error_retry_predicates ? ", " + object.error_retry_predicates.join(',') : "" -%>)
	if err != nil {
		return handleNotFoundError(err, d, "AppVersion")
	}
	err = appEngineOperationWaitTime(
		config, res, project, "Deleting AppVersion",
		int(d.Timeout(schema.TimeoutDelete).Minutes()))

	if err != nil {
		return err
	}
	log.Printf("[DEBUG] Finished deleting AppVersion %q: %#v", d.Id(), res)
	return nil


}