"state_notification_config": {
    Type:     schema.TypeList,
    Description: `A PubSub topic to publish device state updates.`,
    Optional:    true,
    ConfigMode:  schema.SchemaConfigModeAttr,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
            "pubsub_topic_name": {
                Type: schema.TypeString,
                Description: `PubSub topic name to publish device state updates.`,
                Required: true,
                DiffSuppressFunc: compareSelfLinkOrResourceName,
            },
        },
    },
},
"mqtt_config": {
    Type:     schema.TypeList,
    Description: `Activate or deactivate MQTT.`,
    Computed:    true,
    Optional:    true,
    ConfigMode:  schema.SchemaConfigModeAttr,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
        "mqtt_enabled_state": {
            Type:     schema.TypeString,
            Description: `The field allows MQTT_ENABLED or MQTT_DISABLED`,
            Required: true,
            ValidateFunc: validation.StringInSlice(
            []string{"MQTT_DISABLED", "MQTT_ENABLED"}, false),
        },
        },
    },
},
"http_config": {
    Type:     schema.TypeList,
    Description: `Activate or deactivate HTTP.`,
    Computed:    true,
    Optional:    true,
    ConfigMode:  schema.SchemaConfigModeAttr,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
            "http_enabled_state": {
                Type:     schema.TypeString,
                Description: `The field allows HTTP_ENABLED or HTTP_DISABLED`,
                Required: true,
                ValidateFunc: validation.StringInSlice(
                    []string{"HTTP_DISABLED", "HTTP_ENABLED"}, false),
            },
        },
    },
},
"credentials": {
    Type:     schema.TypeList,
    Description: `List of public key certificates to authenticate devices.`,
    Optional: true,
    MaxItems: 10,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
            "public_key_certificate": {
                Type:     schema.TypeList,
                Description: `A public key certificate format and data.`,
                Required:    true,
                ConfigMode:  schema.SchemaConfigModeAttr,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "format": {
                            Type:     schema.TypeString,
                            Description: `The field allows only X509_CERTIFICATE_PEM.`,
                            Required: true,
                            ValidateFunc: validation.StringInSlice(
                                []string{"X509_CERTIFICATE_PEM"}, false),
                        },
                        "certificate": {
                            Type:     schema.TypeString,
                            Description: `The certificate data.`,
                            Required: true,
                        },
                    },
                },
            },
        },
    },
},
