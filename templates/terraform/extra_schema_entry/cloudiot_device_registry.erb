<%# The license inside this block applies to this file.
	# Copyright 2020 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
"state_notification_config": {
    Type:     schema.TypeMap,
    Description: `A PubSub topic to publish device state updates.`,
    Optional: true,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
            "pubsub_topic_name": {
                Type: schema.TypeString,
                Description: `PubSub topic name to publish device state updates.`,
                Required: true,
                DiffSuppressFunc: compareSelfLinkOrResourceName,
            },
        },
    },
},
"mqtt_config": {
    Type:     schema.TypeMap,
    Description: `Activate or deactivate MQTT.`,
    Computed: true,
    Optional: true,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
        "mqtt_enabled_state": {
            Type:     schema.TypeString,
            Description: `The field allows MQTT_ENABLED or MQTT_DISABLED`,
            Required: true,
            ValidateFunc: validation.StringInSlice(
            []string{"MQTT_DISABLED", "MQTT_ENABLED"}, false),
        },
        },
    },
},
"http_config": {
    Type:     schema.TypeMap,
    Description: `Activate or deactivate HTTP.`,
    Computed: true,
    Optional: true,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
            "http_enabled_state": {
                Type:     schema.TypeString,
                Description: `The field allows HTTP_ENABLED or HTTP_DISABLED`,
                Required: true,
                ValidateFunc: validation.StringInSlice(
                    []string{"HTTP_DISABLED", "HTTP_ENABLED"}, false),
            },
        },
    },
},
"credentials": {
    Type:     schema.TypeList,
    Description: `List of public key certificates to authenticate devices.`,
    Optional: true,
    MaxItems: 10,
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
            "public_key_certificate": {
                Type:     schema.TypeMap,
                Description: `A public key certificate format and data.`,
                Required: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "format": {
                            Type:     schema.TypeString,
                            Description: `The field allows only X509_CERTIFICATE_PEM.`,
                            Required: true,
                            ValidateFunc: validation.StringInSlice(
                                []string{"X509_CERTIFICATE_PEM"}, false),
                        },
                        "certificate": {
                            Type:     schema.TypeString,
                            Description: `The certificate data.`,
                            Required: true,
                        },
                    },
                },
            },
        },
    },
},
