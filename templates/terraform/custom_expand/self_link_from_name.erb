<%# The license inside this block applies to this file.
	# Copyright 2017 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
func expand<%= prefix -%><%= titlelize_property(property) -%>(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
  // This method returns a full self link from a partial self link.
  if v == nil || v.(string) == "" {
    // It does not try to construct anything from empty.
    return "", nil
  } else if strings.HasPrefix(v.(string), "https://") {
    // Anything that starts with a URL scheme is assumed to be a self link worth using.
    return v, nil
  } else if strings.HasPrefix(v.(string), "projects/") {
    // If the self link references a project, we'll just stuck the compute prefix on it
    url, err := replaceVars(d, config, "{{ComputeBasePath}}" + v.(string))
    if err != nil {
      return "", err
    }
    return url, nil
  } else if strings.HasPrefix(v.(string), "regions/") || strings.HasPrefix(v.(string), "zones/") {
    // For regional or zonal resources which include their region or zone, just put the project in front.
    url, err := replaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/")
    if err != nil {
      return nil, err
    }
    return url + v.(string), nil
  }
  // Anything else is assumed to be a regional resource, with a partial link that begins with the resource name.
  // This isn't very likely - it's a last-ditch effort to extract something useful here.  We can do a better job
  // as soon as MultiResourceRefs are working since we'll know the types that this field is supposed to point to.
  url, err := replaceVars(d, config, "{{ComputeBasePath}}projects/{{project}}/regions/{{region}}/")
  if err != nil {
    return nil, err
  }
  return url + v.(string), nil
}
