<%
    sdk_package = object.azure_sdk_definition.go_client_namespace
-%>
<% if tf_types.include?(property.class) -%>
"<%= property.name.underscore -%>": {
<%   if property.is_set -%>
    Type: schema.TypeSet,
<%   else -%>
    Type: <%= tf_type(property) %>,
<%   end -%>
<%   if property.default_from_api -%>
    Computed: true,
    Optional: true,
<%   elsif property.required -%>
    Required: true,
<%   elsif property.output -%>
    Computed: true,
<%   else -%>
    Optional: true,
<%   end -%>
<% if force_new?(property, object) -%>
    ForceNew: true,
<% end -%>
<% unless property.validation.nil? || property.output -%>
<%   if !property.validation.regex.nil? -%>
    ValidateFunc: validateRegexp(`<%= property.validation.regex -%>`),
<%   elsif !property.validation.function.nil? -%>
    ValidateFunc: <%= property.validation.function -%>,
<%   end # property.validation.nil?  -%>
<% end # property.validation.nil?  -%>
<% if property.is_a?(Api::Type::Enum) && property.validation.nil? && !property.output -%>
<%
  enum_values = property.values
  # enum_values.push "" unless property.required
  sdk_type = get_sdk_typedef_by_references(property.azure_sdk_references, object.azure_sdk_definition.create.request)
-%>
    ValidateFunc: validation.StringInSlice([]string{
<%  enum_values.each do |val| -%>
        <%= go_literal((sdk_type.go_enum_const_prefix + val.to_s).to_sym, sdk_package) -%>,
<%  end -%>
    }, false),
<% end -%>
<% if !property.diff_suppress_func.nil? -%>
  DiffSuppressFunc: <%= property.diff_suppress_func %>,
<% elsif property.is_a?(Api::Type::ResourceRef) -%>
  DiffSuppressFunc: compareSelfLinkOrResourceName,
<% end -%>
<% unless property.state_func.nil? -%>
	StateFunc: <%= property.state_func %>,
<% end -%>
<% if property.is_a?(Api::Type::NestedObject) -%>
<%= lines('    MaxItems: 1,') unless property.output -%>
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
<%   order_properties(property.properties).each do |prop| -%>
<%=    lines(build_schema_property(prop, object, 12)) -%>
<%   end -%>
        },
    },
<% elsif property.is_a?(Api::Type::Array) -%>
<%   unless property.min_size.nil? -%>
    MinItems: <%= property.min_size %>,
<%   end -%>
<%   unless property.max_size.nil? -%>
    MaxItems: <%= property.max_size %>,
<%   end -%>
<%   if property.item_type.is_a?(Api::Type::NestedObject) -%>
    Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
<%     order_properties(property.item_type.properties).each do |prop| -%>
<%=      lines(build_schema_property(prop, object, 12)) -%>
<%     end -%>
        },
    },
<%   elsif property.item_type.is_a?(String) # Basic type like Api::Type::String -%>
    Elem: &schema.Schema{
        Type: <%= tf_types[property.item_type] -%>,
    },
<%   else # array of basic types -%>
      Elem: &schema.Schema{
        Type: <%= tf_types[property.item_type.class] -%>,
        <% if property.item_type.is_a?(Api::Type::ResourceRef) -%>
          DiffSuppressFunc: compareSelfLinkOrResourceName,
        <% end -%>
      },
<%   end -%>
<%   if property.is_set -%>
<%     if !property.set_hash_func.nil? -%>
    Set: <%= property.set_hash_func -%>,
<%     elsif property.item_type.is_a?(String) -%>
    Set: schema.HashString,
<%     else -%>
    // Default schema.HashSchema is used.
<%     end -%>
<%   end -%>
<% elsif property.is_a?(Api::Type::KeyValuePairs) -%>
  Elem: &schema.Schema{Type: schema.TypeString},
<% elsif property.is_a?(Api::Type::Map) -%>
	Elem: &schema.Resource{
		Schema: map[string]*schema.Schema{
			"<%= property.key_name -%>": {
				Type:     schema.TypeString,
				Required: true,
				<% if force_new?(property, object) -%>
				ForceNew: true,
				<% end -%>
			},
			<% order_properties(property.value_type.properties).each do |prop| -%>
				<%= lines(build_schema_property(prop, object)) -%>
			<% end -%>
		},
	},
	<% if !property.set_hash_func.nil? -%>
	Set: <%= property.set_hash_func -%>,
	<% end -%>
<% end -%>
<% if property.sensitive -%>
    Sensitive: true,
<% end -%>
<% if !property.default_value.nil? && !property.output -%>
    Default: <%= go_literal(property.default_value, sdk_package) -%>,
<% end -%>
<% unless property.conflicts_with.empty? -%>
    ConflictsWith: []string{<%= property.conflicts_with.map{ |p| go_literal(p) }.join(', ') -%>},
<% end -%>
},
<% else -%>
// TODO: Primitive Property '<%= property.name -%>' of type <%= property.class -%> is not supported
<% end # tf_types.include?(property.class) -%>
