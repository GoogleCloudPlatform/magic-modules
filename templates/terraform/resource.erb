<% if false # the license inside this if block pertains to this file -%>
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
<% end -%>
<%= lines(autogen_notice :go) -%>

package google

<%= lines(compile(object.custom_code.constants)) if object.custom_code.constants %>

<%
  resource_name = product_ns + object.name
  properties = object.all_user_properties
  settable_properties = properties.reject(&:output)
  api_name_lower = String.new(product_ns)
  api_name_lower[0] = api_name_lower[0].downcase
-%>

func resource<%= resource_name -%>() *schema.Resource {
	return &schema.Resource{
		Create: resource<%= resource_name -%>Create,
		Read: resource<%= resource_name -%>Read,
		<% if updatable?(object, properties) -%>
		Update: resource<%= resource_name -%>Update,
		<% end -%>
		Delete: resource<%= resource_name -%>Delete,

		Importer: &schema.ResourceImporter{
			State: resource<%= resource_name -%>Import,
		},

		Timeouts: &schema.ResourceTimeout {
			Create: schema.DefaultTimeout(<%= object.async.operation.timeouts.insert_sec -%> * time.Second),
			<% if updatable?(object, properties) -%>
			Update: schema.DefaultTimeout(<%= object.async.operation.timeouts.update_sec -%> * time.Second),
			<% end -%>
			Delete: schema.DefaultTimeout(<%= object.async.operation.timeouts.delete_sec -%> * time.Second),
		},
<%= lines(compile(object.custom_code.resource_definition)) if object.custom_code.resource_definition -%>

		Schema: map[string]*schema.Schema{
<% order_properties(properties).each do |prop| -%>
	<%= lines(build_schema_property(prop, object)) -%>
<% end -%>
<%= lines(compile(object.custom_code.extra_schema_entry)) if object.custom_code.extra_schema_entry -%>
<% if object.base_url.include?("{{project}}") -%>
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
<% end -%>
<% if (object.exports || []).any? { |e| e.is_a?(Api::Type::SelfLink)} -%>
			"self_link": {
				Type:     schema.TypeString,
				Computed: true,
			},
<% end -%>
		},
	}
}

func resource<%= resource_name -%>Create(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

<% settable_properties.each do |prop| -%>
	<%= prop.api_name -%>Prop, err := expand<%= resource_name -%><%= titlelize_property(prop) -%>(d.Get("<%= Google::StringUtils.underscore(prop.name) -%>"), d, config)
	if err != nil {
		return err
	}
<% end -%>

	obj := map[string]interface{}{
<% settable_properties.each do |prop| -%>
	"<%= prop.api_name -%>": <%= prop.api_name -%>Prop,
<% end -%>
	}
  <% if object.custom_code.encoder -%>
  obj, err = resource<%= resource_name -%>Encoder(d, meta, obj)
  if err != nil {
    return err
  }
  <% end -%>

	url, err := replaceVars(d, config, "<%= collection_url(object) -%>")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new <%= object.name -%>: %#v", obj)
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating <%= object.name -%>: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "<%= object.id_format -%>")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	op := &<%= api_name_lower -%>.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := <%= api_name_lower -%>OperationWaitTime(
		config.client<%= product_ns -%>, op, project, "Creating <%= object.name -%>",
		int(d.Timeout(schema.TimeoutCreate).Minutes()))

	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create <%= object.name -%>: %s", waitErr)
	}

<%= lines(compile(object.custom_code.post_create)) if object.custom_code.post_create -%>

	return resource<%= resource_name -%>Read(d, meta)
}

func resource<%= resource_name -%>Read(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "<%= self_link_url(object) -%>")
	if err != nil {
		return err
	}

	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("<%= resource_name -%> %q", d.Id()))
	}
<% if object.custom_code.decoder -%>
  res, err = resource<%= resource_name -%>Decoder(d, meta, res)
  if err != nil {
    return err
  }
<% end -%>
<% properties.each do |prop| -%>
  if err := d.Set("<%= Google::StringUtils.underscore(prop.name) -%>", flatten<%= resource_name -%><%= titlelize_property(prop) -%>(res["<%= prop.api_name -%>"])); err != nil {
		return fmt.Errorf("Error reading <%= object.name -%>: %s", err)
	}
<% end -%>
<% if (object.exports || []).any? { |e| e.is_a?(Api::Type::SelfLink)} -%>
	if err := d.Set("self_link", res["selfLink"]); err != nil {
		return fmt.Errorf("Error reading <%= object.name -%>: %s", err)
	}
<% end -%>
<% if object.base_url.include?("{{project}}") -%>
	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading <%= object.name -%>: %s", err)
	}
<% end -%>

	return nil
}

<% if updatable?(object, properties) -%>
func resource<%= resource_name -%>Update(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	<% if object.input -%>
	var obj map[string]interface{}
	var url string
	var res map[string]interface{}
	op := &<%= api_name_lower -%>.Operation{}

	d.Partial(true)

	<% properties_by_custom_update(properties).each do |key, props| -%>
	if <%= props.map { |prop| "d.HasChange(\"#{Google::StringUtils.underscore(prop.name)}\")" }.join ' || ' -%> {
		<% props.each do |prop| -%>
			<% if settable_properties.include? prop -%>
				<%= prop.api_name -%>Prop, err := expand<%= resource_name -%><%= titlelize_property(prop) -%>(d.Get("<%= Google::StringUtils.underscore(prop.name) -%>"), d, config)
			if err != nil {
				return err
			}
			<% else -%>
			<%= prop.api_name -%>Prop := d.Get("<%= Google::StringUtils.underscore(prop.name) -%>")
			<% end -%>
		<% end -%>

		obj = map[string]interface{}{
		<% props.each do |prop| -%>
      <% if prop.update_statement -%>
        <%= prop.api_name -%>": <%= compile_template(prop.update_statement,
                                                     prefix: resource_name,
                                                     property: prop) -%>
      <% else -%>
			"<%= prop.api_name -%>": <%= prop.api_name -%>Prop,
      <% end -%>
		<% end -%>
		}
		url, err = replaceVars(d, config, "<%= update_url(object, key[:update_url]) -%>")
		if err != nil {
			return err
		}
		res, err = sendRequest(config, "<%= key[:update_verb] -%>", url, obj)
		if err != nil {
			return fmt.Errorf("Error updating <%= object.name -%> %q: %s", d.Id(), err)
		}

		err = Convert(res, op)
		if err != nil {
			return err
		}

		err = <%= api_name_lower -%>OperationWaitTime(
			config.client<%= product_ns -%>, op, project, "Updating <%= object.name -%>",
			int(d.Timeout(schema.TimeoutUpdate).Minutes()))

		if err != nil {
			return err
		}

		<% props.each do |prop|	-%>
		d.SetPartial("<%= Google::StringUtils.underscore(prop.name) -%>")
		<% end -%>
	}
	<% end -%>

	d.Partial(false)
	<% else # if object.input -%>
	<% settable_properties.each do |prop| -%>
		<%= prop.api_name -%>Prop, err := expand<%= resource_name -%><%= titlelize_property(prop) -%>(d.Get("<%= Google::StringUtils.underscore(prop.name) -%>"), d, config)
		if err != nil {
		return err
		}
	<% end -%>

	obj := map[string]interface{}{
	<% settable_properties.each do |prop| -%>
		"<%= prop.api_name -%>": <%= prop.api_name -%>Prop,
	<% end -%>
	}

	<%# We need to decide what encoder to use here - if there's an update encoder, use that! -%>
	<% if object.custom_code.update_encoder -%>
	obj, err = resource<%= resource_name -%>UpdateEncoder(d, meta, obj)
	<% elsif object.custom_code.encoder -%>
	obj, err = resource<%= resource_name -%>Encoder(d, meta, obj)
	<% end -%>
	url, err := replaceVars(d, config, "<%= self_link_url(object) -%>")
	if err != nil {
	return err
	}

	log.Printf("[DEBUG] Updating <%= object.name -%> %q: %#v", d.Id(), obj)
<%= lines(compile(object.custom_code.pre_update)) if object.custom_code.pre_update -%>
	res, err := sendRequest(config, "<%= object.update_verb -%>", url, obj)

	if err != nil {
	return fmt.Errorf("Error updating <%= object.name -%> %q: %s", d.Id(), err)
	}

	op := &<%= api_name_lower -%>.Operation{}
	err = Convert(res, op)
	if err != nil {
	return err
	}

	err = <%= api_name_lower -%>OperationWaitTime(
	config.client<%= product_ns -%>, op, project, "Updating <%= object.name -%>",
	int(d.Timeout(schema.TimeoutUpdate).Minutes()))

	if err != nil {
	return err
	}
	<% end -%>

<%= lines(compile(object.custom_code.post_update)) if object.custom_code.post_update -%>
	return resource<%= resource_name -%>Read(d, meta)
}
<% end -%>

func resource<%= resource_name -%>Delete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "<%= self_link_url(object) -%>")
	if err != nil {
		return err
	}

<%= lines(compile(object.custom_code.pre_delete)) if object.custom_code.pre_delete -%>
	log.Printf("[DEBUG] Deleting <%= object.name -%> %q", d.Id())
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting <%= object.name -%> %q: %s", d.Id(), err)
	}

	op := &<%= api_name_lower -%>.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = <%= api_name_lower -%>OperationWaitTime(
		config.client<%= product_ns -%>, op, project, "Deleting <%= object.name -%>",
		int(d.Timeout(schema.TimeoutDelete).Minutes()))

	if err != nil {
		return err
	}

	return nil
}

func resource<%= resource_name -%>Import(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
<% if object.custom_code.custom_import -%>
  <%= lines(compile(object.custom_code.custom_import)) -%>
<% else -%>
	config := meta.(*Config)
	parseImportId([]string{"<%= import_id_formats(object).map{|s| format2regex s}.join('","') -%>"}, d, config)

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "<%= object.id_format -%>")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)
  <%= lines(compile(object.custom_code.post_import)) if object.custom_code.post_import -%>

	return []*schema.ResourceData{d}, nil
<% end -%>
}

<% properties.each do |prop| -%>
<%= lines(build_flatten_method(resource_name, prop), 1) -%>
<% end -%>

<% settable_properties.each do |prop| -%>
<%= lines(build_expand_method(resource_name, prop), 1) -%>
<% end -%>

<% if object.custom_code.encoder -%>
func resource<%= resource_name -%>Encoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
  <%= lines(compile(object.custom_code.encoder)) -%>
}
<% end -%>

<% if object.custom_code.update_encoder-%>
func resource<%= resource_name -%>UpdateEncoder(d *schema.ResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
  <%= lines(compile(object.custom_code.update_encoder)) -%>
}
<% end -%>

<% if object.custom_code.decoder -%>
func resource<%= resource_name -%>Decoder(d *schema.ResourceData, meta interface{}, res map[string]interface{}) (map[string]interface{}, error) {
  <%= lines(compile(object.custom_code.decoder)) -%>
}
<% end -%>
