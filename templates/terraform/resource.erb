<% if false # the license inside this if block pertains to this file -%>
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
<% end -%>
<%= compile('templates/autogen_notice.erb').gsub("#", "//") -%>

package google

<%
  resource_name = product_ns + object.name
  properties = effective_properties(config, object.all_user_properties)
  settable_properties = properties.reject(&:output)
  api_name_lower = String.new(product_ns)
  api_name_lower[0] = api_name_lower[0].downcase
-%>

func resource<%= resource_name %>() *schema.Resource {
	return &schema.Resource{
		Create: resource<%= resource_name %>Create,
		Read: resource<%= resource_name %>Read,
		Update: resource<%= resource_name %>Update,
		Delete: resource<%= resource_name %>Delete,

		Importer: &schema.ResourceImporter{
			State: resource<%= resource_name %>Import,
		},

		Schema: map[string]*schema.Schema{
<% order_properties(properties).each do |prop| -%>
	<%= build_schema_property(config, prop) %>
<% end -%>
<% if object.base_url.include?("{{project}}") -%>
			"project": &schema.Schema{
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
<% end -%>
			"self_link": &schema.Schema{
				Type:     schema.TypeString,
				Computed: true,
			},
		},
	}
}

func resource<%= resource_name %>Create(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
<% settable_properties.each do |prop| -%>
  "<%= prop.name %>": expand<%= resource_name %><%= titlelize_property(prop) %>(d.Get("<%= Google::StringUtils.underscore(prop.name) %>")),
<% end -%>
	}

	url, err := constructUrl(d, config, "<%= collection_url(object) %>")
	if err != nil {
		return err
	}
	res, err := Post(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error creating <%= object.name %>: %s", err)
	}

	// Store the ID now
	d.SetId(d.Get("<%= get_code_multiline config, 'id' %>").(string))

	op := &<%= api_name_lower %>.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	waitErr := <%= api_name_lower %>OperationWait(config.client<%= product_ns %>, op, project, "Creating <%= object.name %>")
	if waitErr != nil {
		// The resource didn't actually create
		d.SetId("")
		return waitErr
	}

	return resource<%= resource_name %>Read(d, meta)
}

func resource<%= resource_name %>Read(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := constructUrl(d, config, "<%= self_link_url(object) %>")
	if err != nil {
		return err
	}
	res, err := Get(config, url)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("<%= resource_name %> %q", d.Id()))
	}

<% properties.each do |prop| -%>
  d.Set("<%= Google::StringUtils.underscore(prop.name) %>", flatten<%= resource_name %><%= titlelize_property(prop) %>(res["<%= prop.name %>"]))
<% end -%>
	d.Set("self_link", res["selfLink"])
<% if object.base_url.include?("{{project}}") -%>
	d.Set("project", project)
<% end -%>

	return nil
}

func resource<%= resource_name %>Update(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	obj := map[string]interface{}{
<% settable_properties.each do |prop| -%>
  "<%= prop.name %>": expand<%= resource_name %><%= titlelize_property(prop) %>(d.Get("<%= Google::StringUtils.underscore(prop.name) %>")),
<% end -%>
	}

	url, err := constructUrl(d, config, "<%= self_link_url(object) %>")
	if err != nil {
		return err
	}
	res, err := Put(config, url, obj)
	if err != nil {
		return fmt.Errorf("Error updating <%= object.name %> %q: %s", d.Id(), err)
	}

	op := &<%= api_name_lower %>.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = <%= api_name_lower %>OperationWait(config.client<%= product_ns %>, op, project, "Updating <%= object.name %>")
	if err != nil {
		return err
	}

	return resource<%= resource_name %>Read(d, meta)
}

func resource<%= resource_name %>Delete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)

	project, err := getProject(d, config)
	if err != nil {
		return err
	}

	url, err := constructUrl(d, config, "<%= self_link_url(object) %>")
	if err != nil {
		return err
	}
	res, err := Delete(config, url)
	if err != nil {
		return fmt.Errorf("Error deleting <%= object.name %> %q: %s", d.Id(), err)
	}

	op := &<%= api_name_lower %>.Operation{}
	err = Convert(res, op)
	if err != nil {
		return err
	}

	err = <%= api_name_lower %>OperationWait(config.client<%= product_ns %>, op, project, "Updating <%= object.name %>")
	if err != nil {
		return err
	}

	return nil
}

func resource<%= resource_name %>Import(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	d.Set("<%= get_code_multiline config, 'id' %>", d.Id())
	return []*schema.ResourceData{d}, nil
}

<% properties.each do |prop| -%>
  <%= build_flatten_method(config, resource_name, prop) %>

<% end -%>

<% settable_properties.each do |prop| -%>
  <%= build_expand_method(config, resource_name, prop) %>

<% end -%>