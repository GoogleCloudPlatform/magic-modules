<% if false # the license inside this if block pertains to this file -%>
  # Copyright 2017 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
<% end -%>
<% if tf_types.include?(property.class) -%>
func flatten<%= prefix -%><%= titlelize_property(property) -%>(v interface{}) interface{} {
<% if property.is_a?(Api::Type::NestedObject) -%>
  original := v.(map[string]interface{})
  transformed := make(map[string]interface{})
  <% effective_properties(property.properties).each do |prop| -%>
    transformed["<%= Google::StringUtils.underscore(prop.name) -%>"] =
    flatten<%= prefix -%><%= titlelize_property(property) -%><%= titlelize_property(prop) -%>(original["<%= prop.name -%>"])
  <% end -%>
  return []interface{}{transformed}
<% elsif property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) -%>
  l := v.([]interface{})
  transformed := make([]interface{}, 0, len(l))
  for _, raw := range l {
    original := raw.(map[string]interface{})
    transformed = append(transformed, map[string]interface{}{
    <% effective_properties(property.item_type.properties).each do |prop| -%>
      "<%= Google::StringUtils.underscore(prop.name) -%>": flatten<%= prefix -%><%= titlelize_property(property) -%><%= titlelize_property(prop) -%>(original["<%= prop.name -%>"]),
    <% end -%>
    })
  }
  return transformed
<% else -%>
  return v
<% end # property.is_a?(Api::Type::NestedObject) -%>
}
<% if !effective_nested_properties(property).empty? -%>
  <% effective_nested_properties(property).each do |prop| -%>
    <%= lines(build_flatten_method(config, prefix + titlelize_property(property), prop), 1) -%>
  <% end -%>
<% end -%>
<% else -%>
  // TODO: Property '<%= property.name -%>' of type <%= property.class -%> is not supported
<% end # tf_types.include?(property.class) -%>
