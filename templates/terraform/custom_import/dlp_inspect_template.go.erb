	config := meta.(*Config)

	// Custom import to handle parent possibilities
	if err := parseImportId([]string{"(?P<name>.+)"}, d, config); err != nil {
		return nil, err
	}
	parts := strings.Split(d.Get("name").(string), "/")
	if len(parts) == 6 {
		d.Set("name", parts[5])
	} else if len(parts) == 4 {
		d.Set("name", parts[3])
	} else {
		return nil, fmt.Errorf("Unexpected import id: %s, expected form {{parent}}/inspectTemplates/{{name}}", d.Get("name").(string))
	}
	// Remove "/inspectTemplates/{{name}}" from the id
	parts = parts[:len(parts)-2]
	d.Set("parent", strings.Join(parts, "/"))

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "{{parent}}/inspectTemplates/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
