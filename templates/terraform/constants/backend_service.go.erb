<%- # the license inside this block applies to this file
	# Copyright 2019 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
func resourceGoogleComputeBackendServiceBackendHash(v interface{}) int {
	if v == nil {
		return 0
	}

	var buf bytes.Buffer
	m := v.(map[string]interface{})
	log.Printf("[DEBUG] hashing %v", m)

	if group, err := getRelativePath(m["group"].(string)); err != nil {
		log.Printf("[WARN] Error on retrieving relative path of instance group: %s", err)
		buf.WriteString(fmt.Sprintf("%s-", m["group"].(string)))
	} else {
		buf.WriteString(fmt.Sprintf("%s-", group))
	}

	if v, ok := m["balancing_mode"]; ok {
		if v == nil {
			v = ""
		}

		buf.WriteString(fmt.Sprintf("%s-", v.(string)))
	}
	if v, ok := m["capacity_scaler"]; ok {
		if v == nil {
			v = 0.0
		}

		buf.WriteString(fmt.Sprintf("%f-", v.(float64)))
	}
	if v, ok := m["description"]; ok {
		if v == nil {
			v = ""
		}

		log.Printf("[DEBUG] writing description %s", v)
		buf.WriteString(fmt.Sprintf("%s-", v.(string)))
	}
	if v, ok := m["max_rate"]; ok {
		if v == nil {
			v = 0
		}

		buf.WriteString(fmt.Sprintf("%d-", int64(v.(int))))
	}
	if v, ok := m["max_rate_per_instance"]; ok {
		if v == nil {
			v = 0.0
		}

		buf.WriteString(fmt.Sprintf("%f-", v.(float64)))
	}
	if v, ok := m["max_connections"]; ok {
		if v == nil {
			v = 0
		}

		switch v := v.(type) {
		case float64:
			// The Golang JSON library can't tell int values apart from floats,
			// because MM doesn't give fields strong types. Since another value
			// in this block was a real float, it assumed this was a float too.
			// It's not.
			// Note that math.Round in Go is from float64 -> float64, so it will
			// be a noop. int(floatVal) truncates extra parts, so if the float64
			// representation of an int falls below the real value we'll have
			// the wrong value. eg if 3 was represented as 2.999999, that would
			// convert to 2. So we add 0.5, ensuring that we'll truncate to the
			// correct value. This wouldn't remain true if we were far enough
			// from 0 that we were off by > 0.5, but no float conversion *could*
			// work correctly in that case. 53-bit floating types as the only
			// numeric type was not a good idea, thanks Javascript.
			var vInt int
			if v < 0 {
				vInt = int(v - 0.5)
			} else {
				vInt = int(v + 0.5)
			}

			log.Printf("[DEBUG] writing float value %f as integer value %v", v, vInt)
			buf.WriteString(fmt.Sprintf("%d-", vInt))
		default:
			buf.WriteString(fmt.Sprintf("%d-", int64(v.(int))))
		}
	}
	if v, ok := m["max_connections_per_instance"]; ok {
		if v == nil {
			v = 0
		}

		switch v := v.(type) {
		case float64:
			// The Golang JSON library can't tell int values apart from floats,
			// because MM doesn't give fields strong types. Since another value
			// in this block was a real float, it assumed this was a float too.
			// It's not.
			// Note that math.Round in Go is from float64 -> float64, so it will
			// be a noop. int(floatVal) truncates extra parts, so if the float64
			// representation of an int falls below the real value we'll have
			// the wrong value. eg if 3 was represented as 2.999999, that would
			// convert to 2. So we add 0.5, ensuring that we'll truncate to the
			// correct value. This wouldn't remain true if we were far enough
			// from 0 that we were off by > 0.5, but no float conversion *could*
			// work correctly in that case. 53-bit floating types as the only
			// numeric type was not a good idea, thanks Javascript.
			var vInt int
			if v < 0 {
				vInt = int(v - 0.5)
			} else {
				vInt = int(v + 0.5)
			}

			log.Printf("[DEBUG] writing float value %f as integer value %v", v, vInt)
			buf.WriteString(fmt.Sprintf("%d-", vInt))
		default:
			buf.WriteString(fmt.Sprintf("%d-", int64(v.(int))))
		}
	}
	if v, ok := m["max_rate_per_instance"]; ok {
		if v == nil {
			v = 0.0
		}

		buf.WriteString(fmt.Sprintf("%f-", v.(float64)))
	}

	log.Printf("[DEBUG] computed hash value of %v from %v", hashcode.String(buf.String()), buf.String())
	return hashcode.String(buf.String())
}
