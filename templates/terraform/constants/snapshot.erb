<%# The license inside this block applies to this file.
	# Copyright 2018 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
func customDiffComputeSnapshotSnapshotEncryptionKeys(diff *schema.ResourceDiff, meta interface{}) error {
	oldConvenience, newConvenience := diff.GetChange("snapshot_encryption_key_raw")
	oldNewField, newNewField := diff.GetChange("snapshot_encryption_key.0.raw_key")

	if newConvenience != "" && newNewField != "" {
		return fmt.Errorf("can't use snapshot_encryption_key_raw and snapshot_encryption_key.0.raw_key at the same time." +
			"If you're removing snapshot_encryption_key.0.raw_key, set the value to \"\" instead. This is due to limitations in Terraform.")
	}

	// Either field (convenience or new) has a value
	// and then has another different value, so we ForceNew.
	// We need to handle _EVERY_ ForceNew case in this diff
	if oldConvenience != "" && newConvenience != "" && oldConvenience != newConvenience {
		return diff.ForceNew("snapshot_encryption_key_raw")
	}

	if oldNewField != "" && newNewField != "" && oldNewField != newNewField {
		return diff.ForceNew("snapshot_encryption_key.0.raw_key")
	}

	// Our resource isn't using either field, then uses one;
	// ForceNew on whichever one is now using it.
	if (oldConvenience == "" && oldNewField == "" && newConvenience != "") || (oldConvenience == "" && oldNewField == "" && newNewField != "") {
		if oldConvenience == "" && newConvenience != "" {
			return diff.ForceNew("snapshot_encryption_key_raw")
		} else {
			return diff.ForceNew("snapshot_encryption_key.0.raw_key")
		}
	}

	// convenience no longer used
	if oldConvenience != "" && newConvenience == "" {
		if newNewField == "" {
			// convenience is being nulled, and the new field is empty as well
			// we've stopped using the field altogether
			return diff.ForceNew("snapshot_encryption_key_raw")
		} else if oldConvenience != newNewField {
			// convenience is being nulled, and the new field has a new value
			// so we ForceNew on either field
			return diff.ForceNew("snapshot_encryption_key_raw")
		} else {
			// If we reach it here, we're using the same value in the new field as we had in the convenience field
		}
	}

	// new no longer used
	// note that it will remain _set_ because of how Computed fields work
	// unset fields will have their values kept in state as a non-zero value
	if oldNewField != "" && newNewField == "" {
		if newConvenience == "" {
			// new field is being nulled, and the convenience field is empty as well
			// we've stopped using the field altogether
			return diff.ForceNew("snapshot_encryption_key.0.raw_key")
		} else if oldNewField != newConvenience {
			// new is being nulled, and the convenience field has a new value
			// so we ForceNew on either field

			// This stops a really opaque diffs don't match during apply error. Without this, wee see
			// a diff from the old state -> new state with a ForceNew at plan time (as expected!)
			// But during apply time the entire nested object is nil in old state unexpectedly.
			// So we just force the diff to match more by nilling it here, which is unclear why it
			// works, and probably a worse UX with some real ugly diff, but also makes the tests pass.
			// Computed nested fields are hard.
			err := diff.SetNew("snapshot_encryption_key", nil)
			if err != nil {
				return err
			}

			return diff.ForceNew("snapshot_encryption_key.0.raw_key")
		} else {
			// If we reach it here, we're using the same value in the convenience field as we had in the new field
		}
	}

	return nil
}

func customDiffComputeSnapshotSourceDiskEncryptionKeys(diff *schema.ResourceDiff, meta interface{}) error {
	oldConvenience, newConvenience := diff.GetChange("source_disk_encryption_key_raw")
	oldNewField, newNewField := diff.GetChange("source_disk_encryption_key.0.raw_key")

	// Either field has a value and then has another value
	// We need to handle _EVERY_ ForceNew case in this diff
	if oldConvenience != "" && newConvenience != "" && oldConvenience != newConvenience {
		return diff.ForceNew("source_disk_encryption_key_raw")
	}

	if oldNewField != "" && newNewField != "" && oldNewField != newNewField {
		return diff.ForceNew("source_disk_encryption_key.0.raw_key")
	}

	// Our resource isn't using either field, then uses one;
	// ForceNew on whichever one is now using it.
	if (oldConvenience == "" && oldNewField == "" && newConvenience != "") || (oldConvenience == "" && oldNewField == "" && newNewField != "") {
		if oldConvenience == "" && newConvenience != "" {
			return diff.ForceNew("source_disk_encryption_key_raw")
		} else {
			return diff.ForceNew("source_disk_encryption_key.0.raw_key")
		}
	}

	// convenience no longer used
	if oldConvenience != "" && newConvenience == "" {
		if newNewField == "" {
			// convenience is being nulled, and the new field is empty as well
			// we've stopped using the field altogether
			return diff.ForceNew("source_disk_encryption_key_raw")
		} else if oldConvenience != newNewField {
			// convenience is being nulled, and the new field has a new value
			// so we ForceNew on either field
			return diff.ForceNew("source_disk_encryption_key_raw")
		} else {
			// If we reach it here, we're using the same value in the new field as we had in the convenience field
		}
	}

	// new no longer used
	if oldNewField != "" && newNewField == "" {
		if newConvenience == "" {
			// new field is being nulled, and the convenience field is empty as well
			// we've stopped using the field altogether
			return diff.ForceNew("source_disk_encryption_key.0.raw_key")
		} else if newConvenience != oldNewField {
			// new is being nulled, and the convenience field has a new value
			// so we ForceNew on either field
			return diff.ForceNew("source_disk_encryption_key.0.raw_key")
		} else {
			// If we reach it here, we're using the same value in the convenience field as we had in the new field
		}
	}

	return nil
}
