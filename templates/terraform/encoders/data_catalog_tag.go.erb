<%# The license inside this block applies to this file.
	# Copyright 2020 Google Inc.
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	#
	#     http://www.apache.org/licenses/LICENSE-2.0
	#
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.
-%>
	// The Data Catalog Tag resource includes a map for fields where the key
	// value is the name of the field and the value is dependent on the type
	// of the field in the tag template. Depending on that type, a different
	// attribute needs to be populated here, but only one of these attributes
	// can be sent, so if an attribute is not set, we need to delete it from
	// the object

	config := meta.(*Config)
	fields := obj["fields"].(map[string]interface{})

	// Get tag template fields
	url, err := replaceVars(d, config, "{{DataCatalogBasePath}}{{template}}")
	if err != nil {
		return nil, err
	}

	project, err := getProject(d, config)
	if err != nil {
		return nil, err
	}

	template, err := sendRequest(config, "GET", project, url, nil)
	if err != nil {
		return nil, fmt.Errorf("Error listing Tags: %s", err)
	}
	templateFields := template["fields"]

	for fieldName := range fields {
		fieldType := templateFields.(map[string]interface{})[fieldName].(map[string]interface{})["type"].(map[string]interface{})
		objField := fields[fieldName].(map[string]interface{})
		newObj := map[string]interface{}{}
		if fieldType["enumType"] != nil {
			newObj["enum_value"] = map[string]interface{}{
				"displayName": objField["enum_value"].(map[string]interface{})["display_name"],
			}
		} else {
			switch fieldType["primitiveType"].(string) {
			case "STRING":
				newObj["string_value"] = objField["string_value"]
			case "DOUBLE":
				newObj["double_value"] = objField["double_value"]
			case "BOOLEAN":
				newObj["bool_value"] = objField["bool_value"]
			case "TIMESTAMP":
				newObj["timestamp_value"] = objField["timestamp_value"]
			default:
				newObj["string_value"] = objField["string_value"]
			}
		}
		obj["fields"].(map[string]interface{})[fieldName] = newObj
	}

	return obj, nil
