config := meta.(*Config)

project, err := getProject(d, config)
if err != nil {
 	return nil, err
}
<% if object.name == 'Disk' -%>
// Get the zone
z, err := getZone(d, config)
if err != nil {
 	return nil, err
}
zone, err := config.clientCompute.Zones.Get(project, z).Do()
if err != nil {
 	return nil, err
}

if v, ok := d.GetOk("type"); ok {
	log.Printf("[DEBUG] Loading disk type: %s", v.(string))
	diskType, err := readDiskType(config, zone, project, v.(string))
	if err != nil {
		return nil, fmt.Errorf(
			"Error loading disk type '%s': %s",
			v.(string), err)
	}

	obj["type"] = diskType.SelfLink
}
<% elsif object.name == 'RegionDisk' -%>
// Get the region
r, err := getRegion(d, config)
if err != nil {
	return nil, err
}
region, err := config.clientCompute.Regions.Get(project, r).Do()
if err != nil {
	return nil, err
}

if v, ok := d.GetOk("type"); ok {
	log.Printf("[DEBUG] Loading disk type: %s", v.(string))
	diskType, err := readRegionDiskType(config, region, project, v.(string))
	if err != nil {
		return nil, fmt.Errorf(
			"Error loading disk type '%s': %s",
			v.(string), err)
	}

	obj["type"] = diskType.SelfLink
}
<%
else
  raise 'disk.erb included in non-disk type #{object.name}'
end
-%>

if v, ok := d.GetOk("image"); ok {
	log.Printf("[DEBUG] Resolving image name: %s", v.(string))
	imageUrl, err := resolveImage(config, project, v.(string))
	if err != nil {
		return nil, fmt.Errorf(
			"Error resolving image name '%s': %s",
			v.(string), err)
	}

	obj["sourceImage"] = imageUrl
	log.Printf("[DEBUG] Image name resolved to: %s", imageUrl)
}

if v, ok := d.GetOk("snapshot"); ok {
		snapshotName := v.(string)
		match, _ := regexp.MatchString("^https://www.googleapis.com/compute", snapshotName)
		if match {
			obj["sourceSnapshot"] = snapshotName
		} else {
			log.Printf("[DEBUG] Loading snapshot: %s", snapshotName)
			snapshotData, err := config.clientCompute.Snapshots.Get(
				project, snapshotName).Do()

			if err != nil {
				return nil, fmt.Errorf(
					"Error loading snapshot '%s': %s",
					snapshotName, err)
			}
			obj["sourceSnapshot"] = snapshotData.SelfLink
		}
}

return obj, nil
