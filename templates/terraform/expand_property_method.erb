<% if false # the license inside this if block pertains to this file -%>
  # Copyright 2017 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
<% end -%>
<% if property.is_a?(Api::Type::NameValues) -%>
func expand<%= prefix -%><%= titlelize_property(property) -%>(v interface{}) map[string]string {
  if v == nil {
    return map[string]string{}
  }
  m := make(map[string]string)
  for k, val := range v.(map[string]interface{}) {
    m[k] = val.(string)
  }
  return m
}
<% elsif tf_types.include?(property.class) -%>
func expand<%= prefix -%><%= titlelize_property(property) -%>(v interface{}) interface{} {
<%
  if !effective_nested_properties(property).empty?
    nested_properties = effective_nested_properties(property)
-%>
  l := v.([]interface{})
  req := make([]interface{}, 0, len(l))
  for _, raw := range l {
    original := raw.(map[string]interface{})
    transformed := make(map[string]interface{})

    <% nested_properties.each do |prop| -%>
      transformed["<%= prop.name -%>"] =
      expand<%= prefix -%><%= titlelize_property(property) -%><%= titlelize_property(prop) -%>(original["<%= Google::StringUtils.underscore(prop.name) -%>"])
    <% end -%>

    req = append(req, transformed)
  }
  return req
}
  <% nested_properties.each do |prop| -%>
    <%= lines(build_expand_method(config, prefix + titlelize_property(property), prop), 1) -%>
  <% end -%>
<% else -%>
  return v
}
<% end -%>
<% else -%>
  // TODO: Property '<%= property.name -%>' of type <%= property.class -%> is not supported
<% end # tf_types.include?(property.class) -%>
