<% if false # the license inside this if block pertains to this file -%>
  # Copyright 2017 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
<% end -%>
<% if tf_types.include?(property.class) -%>
<% property_key = construct_property_key(property) -%>
"<%= Google::StringUtils.underscore(property.name) -%>": {
  Type: <%= tf_types[property.class] %>,
<% if property.required -%>
  Required: true,
<% elsif property.output -%>
  Computed: true,
<% else -%>
  Optional: true,
<% end -%>
<% if force_new?(property, object) -%>
  ForceNew: true,
<% end -%>
<% unless property.validation.nil? || property.validation.regex.nil? -%>
  ValidateFunc: validateRegexp(`<%= property.validation.regex -%>`),
<% end -%>
<% if !property.diff_suppress_func.nil? -%>
  DiffSuppressFunc: <%= property.diff_suppress_func %>,
<% elsif property.is_a?(Api::Type::ResourceRef) -%>
  DiffSuppressFunc: compareSelfLinkOrResourceName,
<% end -%>
<% if property.is_a?(Api::Type::NestedObject) -%>
  MaxItems: 1,
  Elem: &schema.Resource{
    Schema: map[string]*schema.Schema{
      <% order_properties(effective_properties(property.properties)).each do |prop| -%>
        <%= lines(build_schema_property(config, prop, object)) -%>
      <% end -%>
    },
  },
<% elsif property.is_a?(Api::Type::Array) -%>
  <% if property.item_type.is_a?(Api::Type::NestedObject) -%>
      Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
          <% order_properties(effective_properties(property.item_type.properties)).each do |prop| -%>
            <%= lines(build_schema_property(config, prop, object)) -%>
          <% end -%>
        },
      },
  <% elsif property.item_type.is_a?(String) # Basic type like Api::Type::String -%>
      Elem: &schema.Schema{
      Type: <%= tf_types[property.item_type] -%>,
      <% if property.item_type.is_a?(Api::Type::ResourceRef) -%>
        DiffSuppressFunc: compareSelfLinkOrResourceName,
      <% end -%>
      },
  <% else # array of basic types -%>
      Elem: &schema.Schema{
        Type: <%= tf_types[property.item_type.class] -%>,
        <% if property.item_type.is_a?(Api::Type::ResourceRef) -%>
          DiffSuppressFunc: compareSelfLinkOrResourceName,
        <% end -%>
      },
  <% end -%>
<% elsif property.is_a?(Api::Type::NameValues) -%>
  Elem: &schema.Schema{Type: schema.TypeString},
  <% if not (property.key_type == 'Api::Type::String' and property.value_type == 'Api::Type::String') -%>
    // TODO(magic-modules): Handle this map specially - Terraform maps are String->String only,
    // but this map is marked as being <%= property.key_type -%>-><%= property.value_type -%>.
  <% end -%>
<% end -%>
<% if config['sensitive']&.include?(property.name) -%>
    Sensitive: true,
<% end -%>
<% unless property.default_value.nil? -%>
    Default: <%= go_literal(property.default_value) -%>,
<% end -%>
},
<% else -%>
  // TODO: Property '<%= property.name -%>' of type <%= property.class -%> is not supported
<% end # tf_types.include?(property.class) -%>
