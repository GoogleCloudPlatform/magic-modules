<% if false # the license inside this if block pertains to this file -%>
  # Copyright 2017 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
<% end -%>
<% if tf_types.include?(property.class) -%>
"<%= Google::StringUtils.underscore(property.name) %>": {
  Type: <%= tf_types[property.class] -%>,
<% if property.required -%>
  Required: true,
<% elsif property.output -%>
  Computed: true,
<% else -%>
  Optional: true,
<% end -%>
<% if property.name == get_code_multiline(config, 'id') -%>
  ForceNew: true,
<% end -%>
<%
  if get_code_multiline(config, 'validation')
    v = get_code_multiline(config, 'validation')[property.name]
  end
-%>
<% unless v.nil? -%>
  ValidateFunc: validateRegexp(`<%= v %>`),
<% end -%>
<% if property.is_a?(Api::Type::ResourceRef) -%>
  DiffSuppressFunc: compareSelfLinkOrResourceName,
<% end -%>
<% if property.is_a?(Api::Type::NestedObject) -%>
  MaxItems: 1,
  Elem: &schema.Resource{
    Schema: map[string]*schema.Schema{
      <% order_properties(effective_properties(config, property.properties)).each do |prop| -%>
        <%= build_schema_property(config, prop) %>
      <% end -%>
    },
  },
<% elsif property.is_a?(Api::Type::Array) -%>
  <% if property.item_type.is_a?(Api::Type::NestedObject) -%>
      Elem: &schema.Resource{
        Schema: map[string]*schema.Schema{
          <% order_properties(effective_properties(config, property.item_type.properties)).each do |prop| -%>
            <%= build_schema_property(config, prop) %>
          <% end -%>
        },
      },
  <% elsif property.item_type.is_a?(String) # Basic type like Api::Type::String -%>
      Elem: &schema.Schema{
      Type: <%= tf_types[property.item_type] %>,
      <% if property.item_type.is_a?(Api::Type::ResourceRef) -%>
        DiffSuppressFunc: compareSelfLinkOrResourceName,
      <% end -%>
      },
  <% else # array of basic types -%>
      Elem: &schema.Schema{
        Type: <%= tf_types[property.item_type.class] %>,
        <% if property.item_type.is_a?(Api::Type::ResourceRef) -%>
          DiffSuppressFunc: compareSelfLinkOrResourceName,
        <% end -%>
      },
  <% end -%>
<% end -%>
},
<% else -%>
  // TODO: Property '<%= property.name %>' of type <%= property.class %> is not supported
<% end # tf_types.include?(property.class) -%>
