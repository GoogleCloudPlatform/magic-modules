<%= lines(autogen_notice :go) -%>

package google

import (
  "fmt"
  "testing"
  "strings"
  "github.com/hashicorp/terraform-plugin-sdk/helper/acctest"
  "github.com/hashicorp/terraform-plugin-sdk/helper/resource"
)

<%
sweeper_name = product_ns + object.name
wrap_path = object&.nested_query&.keys&.first || object.collection_url_key
listUrlTemplate = object.__product.base_url + object.base_url

listUrlTemplate.sub! "zones/{{zone}}", "aggregated"
aggregatedList = listUrlTemplate.include? "/aggregated/"

deleteUrlTemplate = object.__product.base_url + object.delete_uri
-%>

func init() {
	resource.AddTestSweepers("<%= sweeper_name -%>", &resource.Sweeper{
		Name: "<%= sweeper_name -%>",
		F:    testSweep<%= sweeper_name -%>,
	})
}

// At the time of writing, the CI only passes us-central1 as the region
func testSweep<%= sweeper_name -%>(region string) error {
	resourceName := "<%= sweeper_name -%>"
	log.Printf("[INFO] Sweeping %s",resourceName)

	config, err := sharedConfigForRegion(region)
	if err != nil {
		log.Printf("[INFO] error getting shared config for region: %s", err)
		return err
	}

	err = config.LoadAndValidate(context.Background())
	if err != nil {
		log.Printf("[INFO] error loading: %s", err)
		return err
	}

	listTemplate := strings.Split("<%= listUrlTemplate -%>","?")[0]

	d := &ResourceDataMock{
		FieldsInSchema: map[string]interface{}{
			"project":config.Project,
			"region":region,
			"location":region,
			"zone":"-",
		},
	}

	listUrl, err := replaceVars(d, config, listTemplate)
	if err != nil {
		log.Printf("[INFO] error preparing sweeper list url: %s", err)
		return nil
	}

	if strings.Count(listUrl,"//") > 1 {
		log.Printf("[INFO] Invalid list url for %s sweeper: %s",resourceName,listUrl)
		return nil
	}

	res, err := sendRequest(config, "GET", config.Project, listUrl, nil)
	if err != nil {
		log.Printf("[INFO] Unable to list %s: %s",resourceName, err)
		return nil
	}

	resourceList, ok := res["<%= wrap_path -%>"]
	if !ok {
		log.Printf("[INFO] Nothing found in response.")
		return nil
	}
	<%  if aggregatedList -%>
	var rl []interface{}
	zones := resourceList.(map[string]interface{})
	// Loop through every zone in the list response
	for _, zonesValue := range zones {
		zone := zonesValue.(map[string]interface{})
		for k, v := range zone {
			// Zone map either has resources or a warning stating there were no resources found in the zone
			if k != "warning" {
				resourcesInZone := v.([]interface{})
				rl = append(rl, resourcesInZone...)
			}
		}
	}
	<%  else -%>

	rl := resourceList.([]interface{})
	<% end -%>

	log.Printf("[INFO] Found %d items in %s list response.", len(rl), resourceName)
	// items who don't match the tf-test prefix
	nonPrefixCount := 0
	for _, ri := range rl {
		obj := ri.(map[string]interface{})
		if obj["name"] == nil {
			log.Printf("[INFO] %s resource name was nil", resourceName)
			return nil
		}

		nameSegs := strings.Split(obj["name"].(string),"/")
		name := nameSegs[len(nameSegs)-1]

		// Only sweep resources with the test prefix
		if !strings.HasPrefix(name, "tf-test") {
			nonPrefixCount++
			continue
		}
		deleteTemplate := "<%= deleteUrlTemplate -%>"
		<%  if aggregatedList -%>

		if obj["zone"] == nil {
			log.Printf("[INFO] %s resource zone was nil", resourceName)
			return nil
		}
		zoneSegs := strings.Split(obj["zone"].(string),"/")
		zone := zoneSegs[len(zoneSegs)-1]
		deleteTemplate = strings.Replace(deleteTemplate, "{{zone}}", zone, -1)

		<% end -%>
		deleteUrl, err := replaceVars(d, config, deleteTemplate)
		if err != nil {
			log.Printf("[INFO] error preparing delete url: %s", err)
			return nil
		}
		deleteUrl = deleteUrl+name
		// Don't wait on operations as we may have a lot to delete
		_, err = sendRequest(config, "DELETE", config.Project, deleteUrl, nil)
		if err != nil {
			log.Printf("[INFO] Error deleting for url %s : %s", deleteUrl, err)
		} else {
			log.Printf("[INFO] Sent delete request for %s resource: %s", resourceName, name)
		}
	}

	if nonPrefixCount > 0 {
		log.Printf("[INFO] %d items without tf_test prefix remain.", nonPrefixCount)
	}

	return nil
}
