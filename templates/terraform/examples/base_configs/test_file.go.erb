<%= lines(autogen_notice :go) -%>

package azurerm

import (
    "fmt"
    "testing"

    "github.com/hashicorp/terraform/helper/acctest"
    "github.com/hashicorp/terraform/helper/resource"
    "github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)
<%
    resource_name = "AzureRM" + object.name
    terraform_name = "azurerm_" + object.name.underscore
    azure_client_name = "#{object.api_name}Client".camelcase(:lower)
    properties = object.all_user_properties
%>
<%  object.example.reject(&:skip_test).each do |example| -%>
<%
	# {Compute}{Address}_{addressBasic}
	test_slug = "#{resource_name}_#{example.name.camelize(:lower)}Example"
	  ignore_read = data[:object].all_user_properties
                 .select(&:ignore_read)
                 .map { |p| p.name.underscore }
                 .concat(example.ignore_read_extra)
-%>

func TestAcc<%= test_slug -%>(t *testing.T) {
  t.Parallel()

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheck<%= "#{resource_name}" -%>Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= test_slug -%>(acctest.RandString(10)),
			},
			{
				ResourceName:      "<%= terraform_name -%>.<%= example.primary_resource_id -%>",
				ImportState:       true,
				ImportStateVerify: true,
        <%- unless ignore_read.empty? -%>
        ImportStateVerifyIgnore: <%= go_literal(ignore_read) %>,
        <%- end -%>
			},
		},
	})
}

func testAcc<%= test_slug -%>(val string) string {
<%= example.config_test -%>
}
<%- end %>

func testCheck<%= resource_name -%>Exists(resourceName string) resource.TestCheckFunc {
    return func(s *terraform.State) error {
        rs, ok := s.RootModule().Resources[resourceName]
        if !ok {
            return fmt.Errorf("<%= object.name.titlecase -%> not found: %s", resourceName)
        }

<%= lines(build_acctest_parameters_from_schema(object.azure_sdk_definition.read, properties, object, true, 8)) -%>

        client := testAccProvider.Meta().(*ArmClient).<%= azure_client_name -%>

        ctx := testAccProvider.Meta().(*ArmClient).StopContext

        if resp, err := <%= build_sdk_func_invocation(object.azure_sdk_definition.read) -%>; err != nil {
            if utils.ResponseWasNotFound(resp.Response) {
                return <%= build_errorf_with_resource_name("Bad: %s does not exist", false, object.azure_sdk_definition.delete, properties, object) -%>

            }
            return fmt.Errorf("Bad: Get on <%= azure_client_name -%>: %+v", err)
        }

        return nil
    }
}

func testCheck<%= resource_name -%>Destroy(s *terraform.State) error {
    client := testAccProvider.Meta().(*ArmClient).<%= azure_client_name -%>

    ctx := testAccProvider.Meta().(*ArmClient).StopContext

    for _, rs := range s.RootModule().Resources {
        if rs.Type != "<%= terraform_name -%>" {
            continue
        }

<%= lines(build_acctest_parameters_from_schema(object.azure_sdk_definition.read, properties, object)) -%>

        if resp, err := <%= build_sdk_func_invocation(object.azure_sdk_definition.read) -%>; err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return err
            }
        }

        return nil
    }

    return nil
}
