<%= lines(autogen_notice :go) -%>

package google

import (
  "fmt"
  "testing"

  "github.com/hashicorp/terraform/helper/acctest"
  "github.com/hashicorp/terraform/helper/resource"
)
<%
raise 'skip_test should be true if resource is not importable' \
  if object.exclude_import
resource_name = product_ns + object.name
if @config.legacy_name.nil?
	terraform_name = "google_" + (product_ns + object.name).underscore
else
	terraform_name = "google_" + @config.legacy_name + '_' + object.name.underscore
end
%>
<%
# @api.version_obj_or_closest(version) is slightly wrong; we want the _object_ version or the generation version.
# Ultimately this won't matter though, since the API default should always be less than the object default.
object.examples
         .reject(&:skip_test)
         .reject { |e| @api.version_obj_or_closest(version) < @api.version_obj_or_closest(e.min_version) }
         .each do |example| -


	# {Compute}{Address}_{addressBasic}
	test_slug = "#{resource_name}_#{example.name.camelize(:lower)}Example"
	  ignore_read = object.all_user_properties
                 .select(&:ignore_read)
                 .map { |p| p.name.underscore }
                 .concat(example.ignore_read_extra)


	# If we've set an explicit version for the example use that, otherwise use the
	# object version.
  if example.min_version.nil?
  	example_version = object.min_version.name
  else
    example_version = example.min_version
  end
-%>

func TestAcc<%= test_slug -%>(t *testing.T) {
  t.Parallel()

	context := map[string]interface{} {
	<% example.test_env_vars.each do |var_name, var_type| -%>
		<% if var_type == :ORG_ID  -%>
			"<%= var_name -%>": getTestOrgFromEnv(t),
		<% elsif var_type == :CREDENTIALS -%>
			"<%= var_name -%>": getTestCredsFromEnv(t),
		<% elsif var_type == :REGION -%>
			"<%= var_name -%>": getTestRegionFromEnv(t),
		<% elsif var_type == :ORG_TARGET -%>
			"<%= var_name -%>": getTestOrgTargetFromEnv(t),
		<% elsif var_type == :BILLING_ACCT -%>
			"<%= var_name -%>": getTestBillingAccountFromEnv(t),
		<% elsif var_type == :SERVICE_ACCT -%>
			"<%= var_name -%>": getTestServiceAccountFromEnv(t),
		<% elsif var_type == :PROJECT_NAME -%>
			"<%= var_name -%>": getTestProjectFromEnv(),
		<% elsif var_type == :FIRESTORE_PROJECT_NAME -%>
			"<%= var_name -%>": getTestFirestoreProjectFromEnv(t),
		<% end -%>
	<% end -%>
			"random_suffix": acctest.RandString(10),
	}

<% versioned_provider = !example_version.nil? && example_version != 'ga' -%>
	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		<% unless versioned_provider -%>
		Providers:    testAccProviders,
		<% else -%>
		Providers:    testAccProvidersOiCS,
		<% end -%>
		CheckDestroy: testAccCheck<%= "#{resource_name}" -%>Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= test_slug -%>(context),
			},
		<%#- The Terraform test runner doesn't let us import resources with aliased providers (yet) -%>
		<% unless versioned_provider -%>
			{
				ResourceName:      "<%= terraform_name -%>.<%= example.primary_resource_id -%>",
				ImportState:       true,
				ImportStateVerify: true,
        <%- unless ignore_read.empty? -%>
        ImportStateVerifyIgnore: <%= go_literal(ignore_read) %>,
        <%- end -%>
			},
		<% end -%>
		},
	})
}

func testAcc<%= test_slug -%>(context map[string]interface{}) string {
<%= example.config_test -%>
}
<%- end %>

func testAccCheck<%= resource_name -%>Destroy(s *terraform.State) error {
	for name, rs := range s.RootModule().Resources {
		if rs.Type != "<%= terraform_name -%>" {
			continue
		}
		if strings.HasPrefix(name, "data.") {
			continue
		}

	<% if object.custom_code.test_check_destroy -%>
<%= lines(compile(object.custom_code.test_check_destroy)) -%>
	<% else -%>
	config := testAccProvider.Meta().(*Config)

	url, err := replaceVarsForTest(config, rs, "<%= "{{#{object.__product.name}BasePath}}#{object.self_link_uri}" -%>")
	if err != nil {
		return err
	}

	_, err = sendRequest(config, "<%= object.read_verb.to_s.upcase -%>", url, nil)
	if err == nil {
			return fmt.Errorf("<%= resource_name -%> still exists at %s", url)
		}
	<% end -%>
	}

	return nil
}
