<%= lines(autogen_notice :go) -%>

package google

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/helper/acctest"
	"github.com/hashicorp/terraform/helper/resource"
)

<%# Since most resources define a "basic" config as their first example, we can reuse that config to create a resource to test IAM resources with. -%>
<% example = object.examples.reject(&:skip_test)
         .reject { |e| @api.version_obj_or_closest(version) < @api.version_obj_or_closest(e.min_version) }
         .first -%>
<% resource_name = product_ns + object.name -%>
<% 
individual_url = object.self_link_url
params = individual_url.scan(/({{)(\w+)(}})/).map { |arr| arr[1] }
-%>
<% 
  tf_product = (@config.legacy_name || product_ns).underscore
  terraform_name = object.legacy_name || "google_#{tf_product}_#{object.name.underscore}"
-%>
<% import_url = individual_url.gsub(/({{)(\w+)(}})/, '%s').gsub(object.__product.base_url, '') -%>
<% import_str = Array.new(params.length, '%s').join('/') -%>
<% import_qualifiers = [] -%>
<% params.each do |param| -%>
	<% if param == 'project' -%>
		<% import_qualifiers.push('getTestProjectFromEnv()') -%>
	<% elsif param == 'zone' -%>
		<% import_qualifiers.push('getTestZoneFromEnv(t)') -%>
	<% elsif param == 'region' || param == 'location' -%>
		<% import_qualifiers.push('getTestRegionFromEnv(t)') -%>
	<% end -%>
<% end -%>
func TestAcc<%= resource_name -%>IamBindingGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
		"role":          "roles/editor",
	}

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccCheck<%= resource_name -%>Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamBinding_basicGenerated(context),
			},
			{
				ResourceName:      "<%= terraform_name -%>_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> roles/editor", <%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				// Test Iam Binding update
				Config: testAcc<%= resource_name -%>IamBinding_updateGenerated(context),
			},
			{
				ResourceName:      "<%= terraform_name -%>_iam_binding.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> roles/editor", <%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAcc<%= resource_name -%>IamMemberGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
		"role": "roles/editor",
	}

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		CheckDestroy: testAccCheck<%= resource_name -%>Destroy,
		Steps: []resource.TestStep{
			{
				// Test Iam Member creation (no update for member, no need to test)
				Config: testAcc<%= resource_name -%>IamMember_basicGenerated(context),
			},
			{
				ResourceName:      "<%= terraform_name -%>_iam_member.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%> roles/editor user:admin@hashicorptest.com", <%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAcc<%= resource_name -%>IamPolicyGenerated(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"random_suffix": acctest.RandString(10),
		"role": "roles/editor",
	}

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		CheckDestroy: testAccCheck<%= resource_name -%>Destroy,
		Steps: []resource.TestStep{
			{
				Config: testAcc<%= resource_name -%>IamPolicy_basicGenerated(context),
			},
			{
				ResourceName:      "<%= terraform_name -%>_iam_policy.foo",
				ImportStateId:     fmt.Sprintf("<%= import_url -%>", <%= import_qualifiers.join(', ') -%>, <%= example.primary_resource_name -%>),
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAcc<%= resource_name -%>IamMember_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
<%= example.config_test_body -%>

resource "<%= terraform_name -%>_iam_member" "foo" {
	<%= object.name.underscore -%> = "${<%= terraform_name -%>.<%= example.primary_resource_id -%>.id}"
	role          = "%{role}"
	member        = "user:admin@hashicorptest.com"
}
`, context)
}

func testAcc<%= resource_name -%>IamPolicy_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
<%= example.config_test_body -%>

data "google_iam_policy" "foo" {
	binding {
		role    = "%{role}"
		members = ["user:admin@hashicorptest.com"]
	}
}

resource "<%= terraform_name -%>_iam_policy" "foo" {
	<%= object.name.underscore -%> = "${<%= terraform_name -%>.<%= example.primary_resource_id -%>.id}"
	policy_data   = "${data.google_iam_policy.foo.policy_data}"
}
`, context)
}

func testAcc<%= resource_name -%>IamBinding_basicGenerated(context map[string]interface{}) string {
	return Nprintf(`
<%= example.config_test_body -%>

resource "<%= terraform_name -%>_iam_binding" "foo" {
	<%= object.name.underscore -%> = "${<%= terraform_name -%>.<%= example.primary_resource_id -%>.id}"
	role          = "%{role}"
	members       = ["user:admin@hashicorptest.com"]
}
`, context)
}

func testAcc<%= resource_name -%>IamBinding_updateGenerated(context map[string]interface{}) string {
	return Nprintf(`
<%= example.config_test_body -%>

resource "<%= terraform_name -%>_iam_binding" "foo" {
	<%= object.name.underscore -%> = "${<%= terraform_name -%>.<%= example.primary_resource_id -%>.id}"
	role          = "%{role}"
	members       = ["user:admin@hashicorptest.com", "user:paddy@hashicorp.com"]
}
`, context)
}
