<%# The license inside this block applies to this file.
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>
<%= compile 'templates/license.erb' -%>

<%= lines(autogen_notice :ruby) -%>

# Add our google/ lib
$LOAD_PATH.unshift ::File.expand_path('../libraries', ::File.dirname(__FILE__))

<%
  require 'google/string_utils'

  inside_indent = 8
  requires = []
  requires << 'inspec/resource'
  requires << 'google/hash_utils'
-%>
<%= lines(emit_requires(requires)) -%>


# A provider to manage <%= @api.name -%> resources.
<%= lines(indent(
  emit_rubocop(binding, :class,
               ['Google', @api.prefix.upcase, object.name].join('::'),
               :disabled),
  4)) -%>
class <%= object.name -%>s < Inspec.resource(1)

  name 'google_<%= product_ns.downcase -%>_<%= object.name.downcase -%>s'
  desc '<%= object.name -%> plural'
  supports platform: 'gcp2'

  filter_table_config = FilterTable.create
<% object.all_user_properties.each do |prop| -%>
<% unless prop.input -%>
<% 
out = property_out_name(prop) 

if out[-1] == 's'
  plural = ''
else
  plural = 's'
end
-%>
<%=
  lines(format([
    ["filter_table_config.add(:#{property_out_name(prop)}#{plural}, field: :#{property_out_name(prop)})"]
  ], 2))
-%>
<% end -%>
<% end -%>
  filter_table_config.connect(self, :fetch_data)


<%
base = "'#{object.self_link_url[0].join}'"
url = object.base_url
if url.is_a?(Array)
  url = url.join('')
else
  url = url.split("\n").join('')
end
url = "'#{url}'"
-%>
def base
  <%= base %>
end

def url
  <%= url %>
end

<% if object.self_link_query.nil? -%>
  def initialize(params = {}) 
    @params = params
  end  
<% else # object.self_link_query.nil? -%>
  def initialize(params = {}) 
    @params = params
  end
<% end # object.self_link_query.nil? -%>

  def exists?
    !@data.nil?
  end

<% if object.kind? -%>
  def fetch_resource(params, kind)
    get_request = inspec.backend.fetch(base, url, params)
    return_if_object get_request.send, kind
  end
<% else # object.kind? -%>
  def fetch_resource(params)
    get_request = inspec.backend.fetch(base, url, params)
    return_if_object get_request.send
  end
<% end # object.kind? -%>

<% unless object.self_link_query.nil? -%>

  def fetch_data
    @data = <%= method_call('fetch_wrapped_resource', [("'#{object.kind}'" if object.kind?),
                                                             "'#{object.self_link_query.kind}'",
                                                             "'#{object.self_link_query.items}'"], 2) %>
  end

  def fetch_wrapped_resource(kind, wrap_kind, wrap_path)
    result = fetch_resource(@params, wrap_kind)
    return if result.nil? || !result.key?(wrap_path)

    # TODO hacky conversion of string => string hash to symbol => string hash
    res = result[wrap_path]
    real = []
    res.each do |x|
      n = {}
      x.each_pair { |k, v| n[k.to_sym] = v }
      real.push(n)
    end

  real
  end

<% else # object.self_link_query.nil? -%>
  def fetch_data
    @data = <%= method_call('fetch_wrapped_resource', [("'#{object.kind}'" if object.kind?),
                                                             "'#{object.list_link_query.kind}'",
                                                             "'#{object.list_link_query.items}'"], 2) %>
  end

  def fetch_wrapped_resource(kind, wrap_kind, wrap_path)
    result = fetch_resource(@params, wrap_kind)
    return if result.nil? || !result.key?(wrap_path)

    # TODO hacky conversion of string => string hash to symbol => string hash
    res = result[wrap_path]
    real = []
    res.each do |x|
      n = {}
      x.each_pair { |k, v| n[k.to_sym] = v }
      real.push(n)
    end

    real
  end
<% end -%>

  def self.raise_if_errors(response, err_path, msg_field)
    errors = Google::HashUtils.navigate(response, err_path)
    raise_error(errors, msg_field) unless errors.nil?
  end

  def self.raise_error(errors, msg_field)
    raise IOError, ['Operation failed:',
                    errors.map { |e| e[msg_field] }.join(', ')].join(' ')
  end


<% if object&.handlers&.self_link.nil? -%>
<%= lines(indent(compile('templates/return_if_object.erb'), 2)) %>
<% end # object&.handlers&.self_link.nil? -%>


<%
  unless false?(object.unwrap_resource)
    unless object.self_link_query.nil?
-%>
<%
  urf_code = [
    '{',
    indent_list(
      Hash[object.identity.map { |i| [i, "resource[:#{property_out_name(i)}]"] }]
        .map { |k, v| "#{k.out_name}: #{v}" }, 2
    ),
    '}'
  ]
-%>
  def unwrap_resource_filter(resource)
    self.class.unwrap_resource_filter(resource)
  end

<%= lines(indent(emit_method('self.unwrap_resource_filter', %w[resource],
                             urf_code, file_relative), 2), 1) -%>
<%   end # unless object.self_link_query.nil? -%>
<% end # visible:unwrap_resource -%>
end
