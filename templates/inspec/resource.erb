<%# The license inside this block applies to this file.
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>
<%= compile 'templates/license.erb' -%>

<%= lines(autogen_notice :ruby) -%>

# Add our google/ lib
$LOAD_PATH.unshift ::File.expand_path('../libraries', ::File.dirname(__FILE__))

<%
  require 'google/string_utils'

  inside_indent = 8

  requires = generate_requires(object.all_user_properties) + (object.requires || [])
  requires << 'inspec/resource'
  requires << 'google/hash_utils'
-%>
<%= lines(emit_requires(requires)) -%>

# A provider to manage <%= @api.name -%> resources.
<%= lines(indent(
  emit_rubocop(binding, :class,
               ['Google', @api.prefix.upcase, object.name].join('::'),
               :disabled),
  4)) -%>
class <%= object.name -%> < Inspec.resource(1)

  name 'google_<%= product_ns.downcase -%>_<%= object.name.downcase -%>'
  desc '<%= object.name -%>'
  supports platform: 'gcp2'

<% object.properties.reject(&:input).each do |prop| -%>
  <%= "attr_reader :#{prop.out_name}" -%>

<% end -%>

<%
base = "'#{object.self_link_url[0].join}'"
url = object.self_link_url[1]
if url.is_a?(Array)
  url = url.join('')
else
  url = url.split("\n").join('')
end
url = "'#{url}'"
-%>
  def base
    <%= base %>
  end

  def url
    <%= url %>
  end

<% if object.self_link_query.nil? -%>
  def initialize(params) 
    @fetched = <%= method_call('fetch_resource', ['params', ("'#{object.kind}'" if object.kind?)], 2) %>
    parse unless @fetched.nil?
  end  
<% else # object.self_link_query.nil? -%>
  def initialize(params) 
    @fetched = <%= method_call('fetch_wrapped_resource', ['params', ("'#{object.kind}'" if object.kind?),
                                                           "'#{object.self_link_query.kind}'",
                                                           "'#{object.self_link_query.items}'"], 2) %>
    parse unless @fetched.nil?
  end
<% end # object.self_link_query.nil? -%>

  def parse
<%
  fetch_code = object.properties.reject(&:input).map do |prop|
    name = property_out_name(prop)

    if primitive?(prop) || resource_ref?(prop)
      init = "@fetched['#{prop.api_name}']"
    elsif typed_array?(prop)
      init = "#{prop.property_type}.parse(@fetched['#{prop.api_name}'])"
    else
      init = "#{prop.property_type}.new(@fetched['#{prop.api_name}'])"    
    end
    
    assignment = "@#{name} = #{init}"
  end
-%>
<%= lines(indent(fetch_code, 4)) -%>
  end

  def exists?
    !@fetched.nil?
  end

<%= lines(indent(compile('templates/transport_inspec.erb'), 2)) -%>

<% if object&.handlers&.self_link.nil? -%>
<%= lines(indent(emit_link('self_link', build_url(object.self_link_url), true), 2), 1) -%>

<%= lines(indent(compile('templates/return_if_object.erb'), 2)) %>
<% end # object&.handlers&.self_link.nil? -%>

<%
  unless false?(object.unwrap_resource)
    unless object.self_link_query.nil?
-%>
<%
  urf_code = [
    '{',
    indent_list(
      Hash[object.identity.map { |i| [i, "resource[:#{property_out_name(i)}]"] }]
        .map { |k, v| "#{k.out_name}: #{v}" }, 2
    ),
    '}'
  ]
-%>
  def unwrap_resource_filter(resource)
    self.class.unwrap_resource_filter(resource)
  end

<%= lines(indent(emit_method('self.unwrap_resource_filter', %w[resource],
                             urf_code, file_relative), 2), 1) -%>
<%   end # unless object.self_link_query.nil? -%>
<% end # visible:unwrap_resource -%>
end
