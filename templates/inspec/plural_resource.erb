<%# The license inside this block applies to this file.
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>
<%= compile 'templates/license.erb' -%>

<%= lines(autogen_notice :ruby) -%>

class <%= object.name -%>s < Inspec.resource(1)

<%
name = "google_#{product_ns.downcase}_#{object.name.underscore}"
-%>
  name '<%= name.pluralize -%>'
  desc '<%= object.name -%> plural resource'
  supports platform: 'gcp2'

  filter_table_config = FilterTable.create
<% object.all_user_properties.each do |prop| -%>

  <%= "filter_table_config.add(:#{prop.out_name.pluralize}, field: :#{prop.out_name})" -%>
<% end # object.all_user_properties.each do -%>


  filter_table_config.connect(self, :fetch_data)

<%
base = "'#{object.self_link_url[0].join}'"
-%>
  def base
    <%= base %>
  end

  def url
    '<%= format_url(object.base_url) %>'
  end

  def initialize(params = {}) 
    @params = params
  end

  def fetch_resource(params)
    get_request = inspec.backend.fetch(base, url, params)
  end

<% 
link_query = object.self_link_query || object.collection_url_response
-%>
  def fetch_data
  	@data = fetch_wrapped_resource(<%= "'#{link_query.kind}'" -%>, <%= "'#{link_query.items}'" -%>)
  end

  def fetch_wrapped_resource(wrap_kind, wrap_path)
    result = fetch_resource(@params)
    return if result.nil? || !result.key?(wrap_path)

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result[wrap_path].each do |hash|
      hash_with_symbols = {}
      hash.each_pair { |k, v| hash_with_symbols[k.to_sym] = v }
      converted.push(hash_with_symbols)
    end

    converted
  end

end