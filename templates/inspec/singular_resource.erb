<%# The license inside this block applies to this file.
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
-%>
# frozen_string_literal: false

<%= lines(autogen_notice :ruby) -%>
<%
  require 'google/string_utils'

  inside_indent = 8

  requires = generate_requires(object.all_user_properties)
  requires << 'gcp_backend'
-%>
<%= lines(emit_requires(requires)) -%>

# A provider to manage <%= @api.product_full_name -%> resources.
class <%= object.name -%> < GcpResourceBase
  name '<%= resource_name(object, product_ns) -%>'
  desc '<%= object.name -%>'
  supports platform: 'gcp'

<% object.all_user_properties.each do |prop| -%>
  <%= "attr_reader :#{prop.out_name}" -%>

<% end -%>
  def base
    '<%= object.self_link_url[0].join %>'
  end

  def url
    '<%= format_url(object.self_link_url[1]) %>'
  end

<% if object.self_link_query.nil? -%>
  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @fetched = @connection.fetch(base, url, params)
    parse unless @fetched.nil?
  end
<% else # object.self_link_query.nil? -%>
  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    fetched = @connection.fetch(base, url, params)
    @fetched = unwrap(fetched, params)
    parse unless @fetched.nil?
  end

<% identity_outs = object.identity.map { |id| id.out_name } -%>
  def identity
    %w{<%= identity_outs.join(' ') -%>}
  end

  def collection_item
    '<%= object.collection_url_response.items -%>'
  end

  def unwrap(fetched, params)
    fetched[collection_item].find { |result| identity.all? { |id| result[id.to_sym] == params[id] } }
  end
<% end # object.self_link_query.nil? -%>

  def parse
<%
  parse_code = object.all_user_properties.map do |prop|
    name = prop.out_name

    if time?(prop)
      init = "parse_time_string(@fetched['#{prop.api_name}'])"
    elsif primitive?(prop)
      if prop.name_from_self_link
        init = "name_from_self_link(@fetched['#{prop.api_name}'])"
      else
        init = "@fetched['#{prop.api_name}']"
      end
    elsif typed_array?(prop)
      init = "#{inspec_property_type(prop)}.parse(@fetched['#{prop.api_name}'])"
    else
      init = "#{inspec_property_type(prop)}.new(@fetched['#{prop.api_name}'])"    
    end
    
    assignment = "@#{name} = #{init}"
  end
-%>
<%= lines(indent(parse_code, 4)) -%>
  end

  # Handles parsing RFC3339 time string
  def parse_time_string(time_string)
    time_string ? Time.parse(time_string) : nil
  end

  def exists?
    !@fetched.nil?
  end
<% unless object&.additional_functions.nil? -%>

<%= lines(indent(object.additional_functions, 2)) -%>
<% end -%>
end
